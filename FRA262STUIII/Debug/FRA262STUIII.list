
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e9c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b104  0801eb68  0801eb68  0002eb68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029c6c  08029c6c  0004024c  2**0
                  CONTENTS
  4 .ARM          00000008  08029c6c  08029c6c  00039c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029c74  08029c74  0004024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08029c74  08029c74  00039c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029c7c  08029c7c  00039c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08029c80  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  20000250  08029ecc  00040250  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  08029ecc  00040804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   001052a9  00000000  00000000  0004027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da4  00000000  00000000  00145525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004a38  00000000  00000000  001482d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004988  00000000  00000000  0014cd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb84  00000000  00000000  00151690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002218b  00000000  00000000  0016e214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00478615  00000000  00000000  0019039f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  006089b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00016488  00000000  00000000  00608a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000250 	.word	0x20000250
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801eb50 	.word	0x0801eb50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000254 	.word	0x20000254
 80001dc:	0801eb50 	.word	0x0801eb50

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f0a:	eef0 7ae7 	vabs.f32	s15, s15
 8000f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f26:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f2a:	f01b ff13 	bl	801cd54 <sqrtf>
 8000f2e:	eef0 7a40 	vmov.f32	s15, s0
 8000f32:	eeb0 0a67 	vmov.f32	s0, s15
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 0 */

///////////////////// [UART UI Base System] /////////////////////

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a4a      	ldr	r2, [pc, #296]	; (80010a8 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	f040 808d 	bne.w	800109e <HAL_UARTEx_RxEventCallback+0x132>
	{
		oldPos_uart = newPos_uart;  // Update the last position before copying new data
 8000f84:	4b49      	ldr	r3, [pc, #292]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000f86:	881a      	ldrh	r2, [r3, #0]
 8000f88:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f8a:	801a      	strh	r2, [r3, #0]
		datasize_uart = Size;
 8000f8c:	4a49      	ldr	r2, [pc, #292]	; (80010b4 <HAL_UARTEx_RxEventCallback+0x148>)
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	8013      	strh	r3, [r2, #0]
		// If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		// This is to maintain the circular buffer
		// The old data in the main buffer will be overlapped

		if (oldPos_uart+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8000f92:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	dd14      	ble.n	8000fca <HAL_UARTEx_RxEventCallback+0x5e>
		{
			oldPos_uart = 0;  // point to the start of the buffer
 8000fa0:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000fa6:	4b42      	ldr	r3, [pc, #264]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000fae:	4413      	add	r3, r2
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	4942      	ldr	r1, [pc, #264]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f01c fdf3 	bl	801dba0 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fbc:	881a      	ldrh	r2, [r3, #0]
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fc6:	801a      	strh	r2, [r3, #0]
 8000fc8:	e010      	b.n	8000fec <HAL_UARTEx_RxEventCallback+0x80>
		}
		else
		{
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	4939      	ldr	r1, [pc, #228]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f01c fde1 	bl	801dba0 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fea:	801a      	strh	r2, [r3, #0]
		}
		StartM = MainBuf[newPos_uart - datasize_uart]; // 0b1001xxxx for check start & mode
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <HAL_UARTEx_RxEventCallback+0x148>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000ffa:	5cd2      	ldrb	r2, [r2, r3]
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8000ffe:	701a      	strb	r2, [r3, #0]
		chkStart = StartM >> 4; // for check "start" or nor
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800100a:	701a      	strb	r2, [r3, #0]
		NameM = (StartM & 15); // Check mode
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001018:	701a      	strb	r2, [r3, #0]
		if (chkStart == 9){ // 0b1001
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b09      	cmp	r3, #9
 8001020:	d10a      	bne.n	8001038 <HAL_UARTEx_RxEventCallback+0xcc>
			if (NameM >= 1 && NameM <= 14){ // 15 work state or not
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d02c      	beq.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b0e      	cmp	r3, #14
 8001030:	d828      	bhi.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
				All_mode_UARTUI();
 8001032:	f000 f851 	bl	80010d8 <_Z15All_mode_UARTUIv>
 8001036:	e025      	b.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
			}
		}
		else if (StartM == 88) {
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b58      	cmp	r3, #88	; 0x58
 800103e:	d121      	bne.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
			StartM = MainBuf[newPos_uart-2];
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	3b02      	subs	r3, #2
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001048:	5cd2      	ldrb	r2, [r2, r3]
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800104c:	701a      	strb	r2, [r3, #0]
		    chkStart = StartM >> 4;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 8001058:	701a      	strb	r2, [r3, #0]
		    NameM = (StartM & 15);
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001066:	701a      	strb	r2, [r3, #0]
		    if (chkStart == 9){
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b09      	cmp	r3, #9
 800106e:	d109      	bne.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
		    	if (NameM >= 1 && NameM <= 14){
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b0e      	cmp	r3, #14
 800107e:	d801      	bhi.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
		    		All_mode_UARTUI();
 8001080:	f000 f82a 	bl	80010d8 <_Z15All_mode_UARTUIv>
		        }
		    }
		}

		// start the DMA again
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001084:	2220      	movs	r2, #32
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <HAL_UARTEx_RxEventCallback+0x160>)
 800108a:	f01a fc9e 	bl	801b9ca <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_UARTEx_RxEventCallback+0x164>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_UARTEx_RxEventCallback+0x164>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0208 	bic.w	r2, r2, #8
 800109c:	601a      	str	r2, [r3, #0]

	} //huart USART2
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40004400 	.word	0x40004400
 80010ac:	2000079a 	.word	0x2000079a
 80010b0:	20000798 	.word	0x20000798
 80010b4:	200007d8 	.word	0x200007d8
 80010b8:	20000778 	.word	0x20000778
 80010bc:	20000758 	.word	0x20000758
 80010c0:	200007dc 	.word	0x200007dc
 80010c4:	200007da 	.word	0x200007da
 80010c8:	200007db 	.word	0x200007db
 80010cc:	200003f4 	.word	0x200003f4
 80010d0:	20000438 	.word	0x20000438
 80010d4:	00000000 	.word	0x00000000

080010d8 <_Z15All_mode_UARTUIv>:

void All_mode_UARTUI()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
	int yur;
	int zur;
	int kur; // counter

	// NameM => 15 mode
		switch (NameM){
 80010de:	4b9c      	ldr	r3, [pc, #624]	; (8001350 <_Z15All_mode_UARTUIv+0x278>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	2b0d      	cmp	r3, #13
 80010e6:	f200 83ed 	bhi.w	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <_Z15All_mode_UARTUIv+0x18>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	08001129 	.word	0x08001129
 80010f4:	08001189 	.word	0x08001189
 80010f8:	080011bd 	.word	0x080011bd
 80010fc:	08001201 	.word	0x08001201
 8001100:	0800129f 	.word	0x0800129f
 8001104:	0800139d 	.word	0x0800139d
 8001108:	08001427 	.word	0x08001427
 800110c:	0800158b 	.word	0x0800158b
 8001110:	080015c5 	.word	0x080015c5
 8001114:	08001661 	.word	0x08001661
 8001118:	080016fd 	.word	0x080016fd
 800111c:	080017bf 	.word	0x080017bf
 8001120:	080017f7 	.word	0x080017f7
 8001124:	0800183b 	.word	0x0800183b
		////==============[Test Command]===========
			case 1: // 10010001 01000000 00000000 00101110
				chksum = MainBuf[newPos_uart-1];
 8001128:	4b8a      	ldr	r3, [pc, #552]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	4a8a      	ldr	r2, [pc, #552]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001130:	5cd2      	ldrb	r2, [r2, r3]
 8001132:	4b8a      	ldr	r3, [pc, #552]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 8001134:	701a      	strb	r2, [r3, #0]
				dataF2 = MainBuf[newPos_uart-2];
 8001136:	4b87      	ldr	r3, [pc, #540]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	3b02      	subs	r3, #2
 800113c:	4a86      	ldr	r2, [pc, #536]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 800113e:	5cd2      	ldrb	r2, [r2, r3]
 8001140:	4b87      	ldr	r3, [pc, #540]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 8001142:	701a      	strb	r2, [r3, #0]
				dataF1 = MainBuf[newPos_uart-3];
 8001144:	4b83      	ldr	r3, [pc, #524]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	3b03      	subs	r3, #3
 800114a:	4a83      	ldr	r2, [pc, #524]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 800114c:	5cd2      	ldrb	r2, [r2, r3]
 800114e:	4b85      	ldr	r3, [pc, #532]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 8001150:	701a      	strb	r2, [r3, #0]
				chksum2 = ~(StartM + dataF1 + dataF2);
 8001152:	4b85      	ldr	r3, [pc, #532]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	4b83      	ldr	r3, [pc, #524]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b80      	ldr	r3, [pc, #512]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	b2db      	uxtb	r3, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b80      	ldr	r3, [pc, #512]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 800116c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800116e:	4b7b      	ldr	r3, [pc, #492]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	4b7e      	ldr	r3, [pc, #504]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	f040 8389 	bne.w	800188e <_Z15All_mode_UARTUIv+0x7b6>
					M_state = 1;
 800117c:	4b7c      	ldr	r3, [pc, #496]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001182:	f000 fbd9 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 8001186:	e382      	b.n	800188e <_Z15All_mode_UARTUIv+0x7b6>
		////==============[Connect MCU]===========
			case 2: //10010010 01101101
				chksum = MainBuf[newPos_uart-1];
 8001188:	4b72      	ldr	r3, [pc, #456]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	4a72      	ldr	r2, [pc, #456]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001190:	5cd2      	ldrb	r2, [r2, r3]
 8001192:	4b72      	ldr	r3, [pc, #456]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 8001194:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001196:	4b74      	ldr	r3, [pc, #464]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	43db      	mvns	r3, r3
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b75      	ldr	r3, [pc, #468]	; (8001374 <_Z15All_mode_UARTUIv+0x29c>)
 80011a0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80011a2:	4b6e      	ldr	r3, [pc, #440]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b73      	ldr	r3, [pc, #460]	; (8001374 <_Z15All_mode_UARTUIv+0x29c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	f040 8371 	bne.w	8001892 <_Z15All_mode_UARTUIv+0x7ba>
					M_state = 2;
 80011b0:	4b6f      	ldr	r3, [pc, #444]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80011b6:	f000 fbbf 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 80011ba:	e36a      	b.n	8001892 <_Z15All_mode_UARTUIv+0x7ba>
		////==============[Disconnect MCU]===========
			case 3: //10010011 01101100
					chksum = MainBuf[newPos_uart-1];
 80011bc:	4b65      	ldr	r3, [pc, #404]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	4a65      	ldr	r2, [pc, #404]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 80011c4:	5cd2      	ldrb	r2, [r2, r3]
 80011c6:	4b65      	ldr	r3, [pc, #404]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80011c8:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80011ca:	4b67      	ldr	r3, [pc, #412]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b68      	ldr	r3, [pc, #416]	; (8001374 <_Z15All_mode_UARTUIv+0x29c>)
 80011d4:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80011d6:	4b61      	ldr	r3, [pc, #388]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	4b66      	ldr	r3, [pc, #408]	; (8001374 <_Z15All_mode_UARTUIv+0x29c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	f040 8359 	bne.w	8001896 <_Z15All_mode_UARTUIv+0x7be>
					M_state = 3;
 80011e4:	4b62      	ldr	r3, [pc, #392]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 80011e6:	2203      	movs	r2, #3
 80011e8:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					ResetParam();
 80011ea:	f001 fd75 	bl	8002cd8 <_Z10ResetParamv>
					grandState = Ready;
 80011ee:	4b62      	ldr	r3, [pc, #392]	; (8001378 <_Z15All_mode_UARTUIv+0x2a0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
					PWMOut = 0;
 80011f4:	4b61      	ldr	r3, [pc, #388]	; (800137c <_Z15All_mode_UARTUIv+0x2a4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	801a      	strh	r2, [r3, #0]

					xu_Uart();
 80011fa:	f000 fb9d 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 80011fe:	e34a      	b.n	8001896 <_Z15All_mode_UARTUIv+0x7be>
		////==============[Angular Velo Set]===========
			case 4:
					chksum = MainBuf[newPos_uart-1];
 8001200:	4b54      	ldr	r3, [pc, #336]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	3b01      	subs	r3, #1
 8001206:	4a54      	ldr	r2, [pc, #336]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001208:	5cd2      	ldrb	r2, [r2, r3]
 800120a:	4b54      	ldr	r3, [pc, #336]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 800120c:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 800120e:	4b51      	ldr	r3, [pc, #324]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	3b02      	subs	r3, #2
 8001214:	4a50      	ldr	r2, [pc, #320]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001216:	5cd2      	ldrb	r2, [r2, r3]
 8001218:	4b51      	ldr	r3, [pc, #324]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 800121a:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 800121c:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	3b03      	subs	r3, #3
 8001222:	4a4d      	ldr	r2, [pc, #308]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001224:	5cd2      	ldrb	r2, [r2, r3]
 8001226:	4b4f      	ldr	r3, [pc, #316]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 8001228:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[0] = dataF1;
 800122a:	4b4e      	ldr	r3, [pc, #312]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	4b54      	ldr	r3, [pc, #336]	; (8001380 <_Z15All_mode_UARTUIv+0x2a8>)
 8001230:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[1] = dataF2;
 8001232:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	4b52      	ldr	r3, [pc, #328]	; (8001380 <_Z15All_mode_UARTUIv+0x2a8>)
 8001238:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800123a:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	4b49      	ldr	r3, [pc, #292]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b46      	ldr	r3, [pc, #280]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	b2db      	uxtb	r3, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b46      	ldr	r3, [pc, #280]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 8001254:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 8001256:	4b41      	ldr	r3, [pc, #260]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	f040 831b 	bne.w	800189a <_Z15All_mode_UARTUIv+0x7c2>
					M_state = 4;
 8001264:	4b42      	ldr	r3, [pc, #264]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 8001266:	2204      	movs	r2, #4
 8001268:	701a      	strb	r2, [r3, #0]
					DataProtocol_SetVelo = Set_AngVelo[1];
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <_Z15All_mode_UARTUIv+0x2a8>)
 800126c:	785b      	ldrb	r3, [r3, #1]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001276:	4b43      	ldr	r3, [pc, #268]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 8001278:	edc3 7a00 	vstr	s15, [r3]
					Velocity = (DataProtocol_SetVelo * 10)/255;
 800127c:	4b41      	ldr	r3, [pc, #260]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001286:	ee27 7a87 	vmul.f32	s14, s15, s14
 800128a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001388 <_Z15All_mode_UARTUIv+0x2b0>
 800128e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001292:	4b3e      	ldr	r3, [pc, #248]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001294:	edc3 7a00 	vstr	s15, [r3]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001298:	f000 fb4e 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 800129c:	e2fd      	b.n	800189a <_Z15All_mode_UARTUIv+0x7c2>
		////==============[Angular Position Set]===========
			case 5:
					chksum = MainBuf[newPos_uart-1];
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	4a2c      	ldr	r2, [pc, #176]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 80012a6:	5cd2      	ldrb	r2, [r2, r3]
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80012aa:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	3b02      	subs	r3, #2
 80012b2:	4a29      	ldr	r2, [pc, #164]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 80012b4:	5cd2      	ldrb	r2, [r2, r3]
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 80012b8:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	3b03      	subs	r3, #3
 80012c0:	4a25      	ldr	r2, [pc, #148]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 80012c2:	5cd2      	ldrb	r2, [r2, r3]
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 80012c6:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[0] = dataF1;
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 80012ce:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[1] = dataF2;
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 80012d2:	781a      	ldrb	r2, [r3, #0]
 80012d4:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 80012d6:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 80012da:	781a      	ldrb	r2, [r3, #0]
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 80012f2:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 82ce 	bne.w	800189e <_Z15All_mode_UARTUIv+0x7c6>
					M_state = 5;
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 8001304:	2205      	movs	r2, #5
 8001306:	701a      	strb	r2, [r3, #0]

					DataProtocol_SetAngPosi = (Set_AngPosi[0]*256) + Set_AngPosi[1];
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	4a20      	ldr	r2, [pc, #128]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001310:	7852      	ldrb	r2, [r2, #1]
 8001312:	4413      	add	r3, r2
 8001314:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 8001316:	6013      	str	r3, [r2, #0]
					//positionlog[0] = (DataProtocol_SetAngPosi / (3.14 * 10000) * 180);
					positionlog[0] = (float)(DataProtocol_SetAngPosi / 10000.0);
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f901 	bl	8000524 <__aeabi_i2d>
 8001322:	a309      	add	r3, pc, #36	; (adr r3, 8001348 <_Z15All_mode_UARTUIv+0x270>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff fa90 	bl	800084c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc10 	bl	8000b58 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <_Z15All_mode_UARTUIv+0x2c0>)
 800133c:	6013      	str	r3, [r2, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800133e:	f000 fafb 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 8001342:	e2ac      	b.n	800189e <_Z15All_mode_UARTUIv+0x7c6>
 8001344:	f3af 8000 	nop.w
 8001348:	00000000 	.word	0x00000000
 800134c:	40c38800 	.word	0x40c38800
 8001350:	200007db 	.word	0x200007db
 8001354:	2000079a 	.word	0x2000079a
 8001358:	20000778 	.word	0x20000778
 800135c:	200007dd 	.word	0x200007dd
 8001360:	200007e2 	.word	0x200007e2
 8001364:	200007e1 	.word	0x200007e1
 8001368:	200007dc 	.word	0x200007dc
 800136c:	200007df 	.word	0x200007df
 8001370:	200007e3 	.word	0x200007e3
 8001374:	200007de 	.word	0x200007de
 8001378:	200004fa 	.word	0x200004fa
 800137c:	20000574 	.word	0x20000574
 8001380:	200007a4 	.word	0x200007a4
 8001384:	200007a8 	.word	0x200007a8
 8001388:	437f0000 	.word	0x437f0000
 800138c:	20000588 	.word	0x20000588
 8001390:	200007ac 	.word	0x200007ac
 8001394:	200007b0 	.word	0x200007b0
 8001398:	20000144 	.word	0x20000144
		////==============[Goal 1 station]===========
			case 6:
					chksum = MainBuf[newPos_uart-1];
 800139c:	4b99      	ldr	r3, [pc, #612]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	4a99      	ldr	r2, [pc, #612]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 80013a4:	5cd2      	ldrb	r2, [r2, r3]
 80013a6:	4b99      	ldr	r3, [pc, #612]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80013a8:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80013aa:	4b96      	ldr	r3, [pc, #600]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	3b02      	subs	r3, #2
 80013b0:	4a95      	ldr	r2, [pc, #596]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 80013b2:	5cd2      	ldrb	r2, [r2, r3]
 80013b4:	4b96      	ldr	r3, [pc, #600]	; (8001610 <_Z15All_mode_UARTUIv+0x538>)
 80013b6:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80013b8:	4b92      	ldr	r3, [pc, #584]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	3b03      	subs	r3, #3
 80013be:	4a92      	ldr	r2, [pc, #584]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 80013c0:	5cd2      	ldrb	r2, [r2, r3]
 80013c2:	4b94      	ldr	r3, [pc, #592]	; (8001614 <_Z15All_mode_UARTUIv+0x53c>)
 80013c4:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[0] = dataF1;
 80013c6:	4b93      	ldr	r3, [pc, #588]	; (8001614 <_Z15All_mode_UARTUIv+0x53c>)
 80013c8:	781a      	ldrb	r2, [r3, #0]
 80013ca:	4b93      	ldr	r3, [pc, #588]	; (8001618 <_Z15All_mode_UARTUIv+0x540>)
 80013cc:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[1] = dataF2;
 80013ce:	4b90      	ldr	r3, [pc, #576]	; (8001610 <_Z15All_mode_UARTUIv+0x538>)
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	4b91      	ldr	r3, [pc, #580]	; (8001618 <_Z15All_mode_UARTUIv+0x540>)
 80013d4:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80013d6:	4b91      	ldr	r3, [pc, #580]	; (800161c <_Z15All_mode_UARTUIv+0x544>)
 80013d8:	781a      	ldrb	r2, [r3, #0]
 80013da:	4b8e      	ldr	r3, [pc, #568]	; (8001614 <_Z15All_mode_UARTUIv+0x53c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b8b      	ldr	r3, [pc, #556]	; (8001610 <_Z15All_mode_UARTUIv+0x538>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b8c      	ldr	r3, [pc, #560]	; (8001620 <_Z15All_mode_UARTUIv+0x548>)
 80013f0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80013f2:	4b86      	ldr	r3, [pc, #536]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	4b8a      	ldr	r3, [pc, #552]	; (8001620 <_Z15All_mode_UARTUIv+0x548>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	f040 8251 	bne.w	80018a2 <_Z15All_mode_UARTUIv+0x7ca>
					M_state = 6;
 8001400:	4b88      	ldr	r3, [pc, #544]	; (8001624 <_Z15All_mode_UARTUIv+0x54c>)
 8001402:	2206      	movs	r2, #6
 8001404:	701a      	strb	r2, [r3, #0]

					///////// Load 1 station Data /////////////
					positionlog[0] = PosDataSet[Set_Goal_1Sta[1]];
 8001406:	4b84      	ldr	r3, [pc, #528]	; (8001618 <_Z15All_mode_UARTUIv+0x540>)
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	4a87      	ldr	r2, [pc, #540]	; (8001628 <_Z15All_mode_UARTUIv+0x550>)
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a86      	ldr	r2, [pc, #536]	; (800162c <_Z15All_mode_UARTUIv+0x554>)
 8001414:	6013      	str	r3, [r2, #0]
					Set1_Sta = Set_Goal_1Sta[1];
 8001416:	4b80      	ldr	r3, [pc, #512]	; (8001618 <_Z15All_mode_UARTUIv+0x540>)
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	461a      	mov	r2, r3
 800141c:	4b84      	ldr	r3, [pc, #528]	; (8001630 <_Z15All_mode_UARTUIv+0x558>)
 800141e:	601a      	str	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					xu_Uart();
 8001420:	f000 fa8a 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 8001424:	e23d      	b.n	80018a2 <_Z15All_mode_UARTUIv+0x7ca>
		////==============[Goal n station]===========
			case 7:
				Nstation = MainBuf[(newPos_uart - datasize_uart)+1];
 8001426:	4b77      	ldr	r3, [pc, #476]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	4b81      	ldr	r3, [pc, #516]	; (8001634 <_Z15All_mode_UARTUIv+0x55c>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	3301      	adds	r3, #1
 8001434:	4a74      	ldr	r2, [pc, #464]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 8001436:	5cd2      	ldrb	r2, [r2, r3]
 8001438:	4b7f      	ldr	r3, [pc, #508]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 800143a:	701a      	strb	r2, [r3, #0]
				yur = Nstation;
 800143c:	4b7e      	ldr	r3, [pc, #504]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
				zur = ( yur / 2 ) + yur % 2;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	0fda      	lsrs	r2, r3, #31
 8001446:	4413      	add	r3, r2
 8001448:	105b      	asrs	r3, r3, #1
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	bfb8      	it	lt
 8001456:	425b      	neglt	r3, r3
 8001458:	4413      	add	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
				kur = 0; // counter
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]

				for(int i = 0; i < zur; i++ ){
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	429a      	cmp	r2, r3
 800146a:	da1e      	bge.n	80014aa <_Z15All_mode_UARTUIv+0x3d2>
					dataFSum += MainBuf[oldPos_uart + (i+2)];
 800146c:	4b73      	ldr	r3, [pc, #460]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	3302      	adds	r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	4a63      	ldr	r2, [pc, #396]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 800147a:	5cd2      	ldrb	r2, [r2, r3]
 800147c:	4b70      	ldr	r3, [pc, #448]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4413      	add	r3, r2
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b6e      	ldr	r3, [pc, #440]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 8001486:	701a      	strb	r2, [r3, #0]
					Goal_nSta[i] = MainBuf[oldPos_uart + (i+2)];
 8001488:	4b6c      	ldr	r3, [pc, #432]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	3302      	adds	r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	4a5c      	ldr	r2, [pc, #368]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 8001496:	5cd1      	ldrb	r1, [r2, r3]
 8001498:	4a6a      	ldr	r2, [pc, #424]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4413      	add	r3, r2
 800149e:	460a      	mov	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < zur; i++ ){
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	e7dc      	b.n	8001464 <_Z15All_mode_UARTUIv+0x38c>
				}
				for(int x = 1; x < Nstation+1; x++){
 80014aa:	2301      	movs	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	4b62      	ldr	r3, [pc, #392]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	4293      	cmp	r3, r2
 80014b8:	dc29      	bgt.n	800150e <_Z15All_mode_UARTUIv+0x436>
                    if(x % 2 == 1){
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	bfb8      	it	lt
 80014c4:	425b      	neglt	r3, r3
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d10b      	bne.n	80014e2 <_Z15All_mode_UARTUIv+0x40a>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] % 16);
 80014ca:	4a5e      	ldr	r2, [pc, #376]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	4413      	add	r3, r2
 80014d0:	781a      	ldrb	r2, [r3, #0]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	f002 020f 	and.w	r2, r2, #15
 80014da:	b2d1      	uxtb	r1, r2
 80014dc:	4a5a      	ldr	r2, [pc, #360]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 80014de:	54d1      	strb	r1, [r2, r3]
 80014e0:	e011      	b.n	8001506 <_Z15All_mode_UARTUIv+0x42e>
                    }else if(x % 2 == 0){
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10c      	bne.n	8001506 <_Z15All_mode_UARTUIv+0x42e>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] / 16);
 80014ec:	4a55      	ldr	r2, [pc, #340]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4413      	add	r3, r2
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	0912      	lsrs	r2, r2, #4
 80014fa:	b2d1      	uxtb	r1, r2
 80014fc:	4a52      	ldr	r2, [pc, #328]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 80014fe:	54d1      	strb	r1, [r2, r3]
                        kur++;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	3301      	adds	r3, #1
 8001504:	61fb      	str	r3, [r7, #28]
				for(int x = 1; x < Nstation+1; x++){
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	e7cf      	b.n	80014ae <_Z15All_mode_UARTUIv+0x3d6>
                    }
                }

				chksum = MainBuf[newPos_uart-1];
 800150e:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	3b01      	subs	r3, #1
 8001514:	4a3c      	ldr	r2, [pc, #240]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 8001516:	5cd2      	ldrb	r2, [r2, r3]
 8001518:	4b3c      	ldr	r3, [pc, #240]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 800151a:	701a      	strb	r2, [r3, #0]
				chksum3 = ~(StartM + Nstation + dataFSum);
 800151c:	4b3f      	ldr	r3, [pc, #252]	; (800161c <_Z15All_mode_UARTUIv+0x544>)
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	4b45      	ldr	r3, [pc, #276]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4413      	add	r3, r2
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b45      	ldr	r3, [pc, #276]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4413      	add	r3, r2
 800152e:	b2db      	uxtb	r3, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b45      	ldr	r3, [pc, #276]	; (800164c <_Z15All_mode_UARTUIv+0x574>)
 8001536:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum3){
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	4b43      	ldr	r3, [pc, #268]	; (800164c <_Z15All_mode_UARTUIv+0x574>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	f040 81b0 	bne.w	80018a6 <_Z15All_mode_UARTUIv+0x7ce>
					M_state = 7;
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <_Z15All_mode_UARTUIv+0x54c>)
 8001548:	2207      	movs	r2, #7
 800154a:	701a      	strb	r2, [r3, #0]

					/////////// Load n station-> positionlog  //////////
					//for(int j = 0; j <= len(PosDataSet); j++){
					for(int j = 0; j <= Nstation; j++){
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	4b39      	ldr	r3, [pc, #228]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4293      	cmp	r3, r2
 800155a:	dc10      	bgt.n	800157e <_Z15All_mode_UARTUIv+0x4a6>
						positionlog[j] = PosDataSet[Set_Goal_nSta[j]];
 800155c:	4a3a      	ldr	r2, [pc, #232]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4413      	add	r3, r2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4a30      	ldr	r2, [pc, #192]	; (8001628 <_Z15All_mode_UARTUIv+0x550>)
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	492f      	ldr	r1, [pc, #188]	; (800162c <_Z15All_mode_UARTUIv+0x554>)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	601a      	str	r2, [r3, #0]
					for(int j = 0; j <= Nstation; j++){
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	3301      	adds	r3, #1
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	e7e8      	b.n	8001550 <_Z15All_mode_UARTUIv+0x478>
						//Set_Goal_nSta -> raw index from UART
					}

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					dataFSum = 0;
 800157e:	4b30      	ldr	r3, [pc, #192]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
					xu_Uart();
 8001584:	f000 f9d8 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 8001588:	e18d      	b.n	80018a6 <_Z15All_mode_UARTUIv+0x7ce>
		////==============[RUN Go to Goal station Order to Work]===========
			case 8: //10011000 01100111
				chksum = MainBuf[newPos_uart-1];
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	3b01      	subs	r3, #1
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 8001592:	5cd2      	ldrb	r2, [r2, r3]
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 8001596:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <_Z15All_mode_UARTUIv+0x544>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	43db      	mvns	r3, r3
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 80015a2:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	f040 817c 	bne.w	80018aa <_Z15All_mode_UARTUIv+0x7d2>
					M_state = 8;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <_Z15All_mode_UARTUIv+0x54c>)
 80015b4:	2208      	movs	r2, #8
 80015b6:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80015b8:	f000 f9be 	bl	8001938 <_Z7xu_Uartv>

		///////// Order to Work !!! ///
					grandState = work;
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <_Z15All_mode_UARTUIv+0x57c>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
					//if(grandState == Ready){grandState = work;}
					//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2 ,1000);
				}
				break;
 80015c2:	e172      	b.n	80018aa <_Z15All_mode_UARTUIv+0x7d2>
		////==============[Request Current station]===========
			case 9: //10011001 01100110
				chksum = MainBuf[newPos_uart-1];
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 80015cc:	5cd2      	ldrb	r2, [r2, r3]
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80015d0:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <_Z15All_mode_UARTUIv+0x544>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 80015dc:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	f040 8161 	bne.w	80018ae <_Z15All_mode_UARTUIv+0x7d6>
					M_state = 9;
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <_Z15All_mode_UARTUIv+0x54c>)
 80015ee:	2209      	movs	r2, #9
 80015f0:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80015f2:	f000 f9a1 	bl	8001938 <_Z7xu_Uartv>
					//Req_sta[1] = 0;
					//Req_sta[2] = x;
					//Req_sta[3] = ~(Req_sta[0] + Req_sta[1] + Req_sta[2]);
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_sta, 4 ,100);
 80015f6:	2364      	movs	r3, #100	; 0x64
 80015f8:	2204      	movs	r2, #4
 80015fa:	4917      	ldr	r1, [pc, #92]	; (8001658 <_Z15All_mode_UARTUIv+0x580>)
 80015fc:	4817      	ldr	r0, [pc, #92]	; (800165c <_Z15All_mode_UARTUIv+0x584>)
 80015fe:	f01a f952 	bl	801b8a6 <HAL_UART_Transmit>
				}
				break;
 8001602:	e154      	b.n	80018ae <_Z15All_mode_UARTUIv+0x7d6>
 8001604:	2000079a 	.word	0x2000079a
 8001608:	20000778 	.word	0x20000778
 800160c:	200007dd 	.word	0x200007dd
 8001610:	200007e2 	.word	0x200007e2
 8001614:	200007e1 	.word	0x200007e1
 8001618:	200007b4 	.word	0x200007b4
 800161c:	200007dc 	.word	0x200007dc
 8001620:	200007df 	.word	0x200007df
 8001624:	200007e3 	.word	0x200007e3
 8001628:	20000518 	.word	0x20000518
 800162c:	20000144 	.word	0x20000144
 8001630:	200007d4 	.word	0x200007d4
 8001634:	200007d8 	.word	0x200007d8
 8001638:	200007e4 	.word	0x200007e4
 800163c:	20000798 	.word	0x20000798
 8001640:	200007e5 	.word	0x200007e5
 8001644:	200007b8 	.word	0x200007b8
 8001648:	200007c0 	.word	0x200007c0
 800164c:	200007e0 	.word	0x200007e0
 8001650:	200007de 	.word	0x200007de
 8001654:	200004fa 	.word	0x200004fa
 8001658:	200001b8 	.word	0x200001b8
 800165c:	200003f4 	.word	0x200003f4
		////==============[Request Angular Position]===========
			case 10: //10011010 01100101
				chksum = MainBuf[newPos_uart-1];
 8001660:	4b9d      	ldr	r3, [pc, #628]	; (80018d8 <_Z15All_mode_UARTUIv+0x800>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	3b01      	subs	r3, #1
 8001666:	4a9d      	ldr	r2, [pc, #628]	; (80018dc <_Z15All_mode_UARTUIv+0x804>)
 8001668:	5cd2      	ldrb	r2, [r2, r3]
 800166a:	4b9d      	ldr	r3, [pc, #628]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 800166c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800166e:	4b9d      	ldr	r3, [pc, #628]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	43db      	mvns	r3, r3
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b9c      	ldr	r3, [pc, #624]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 8001678:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800167a:	4b99      	ldr	r3, [pc, #612]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	4b9a      	ldr	r3, [pc, #616]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	f040 8115 	bne.w	80018b2 <_Z15All_mode_UARTUIv+0x7da>
					M_state = 10;
 8001688:	4b98      	ldr	r3, [pc, #608]	; (80018ec <_Z15All_mode_UARTUIv+0x814>)
 800168a:	220a      	movs	r2, #10
 800168c:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800168e:	f000 f953 	bl	8001938 <_Z7xu_Uartv>
					DataProtocol_AngPosi = (CurrentEn * 10000); //KalP
 8001692:	4b97      	ldr	r3, [pc, #604]	; (80018f0 <_Z15All_mode_UARTUIv+0x818>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80018f4 <_Z15All_mode_UARTUIv+0x81c>
 800169c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a4:	ee17 2a90 	vmov	r2, s15
 80016a8:	4b93      	ldr	r3, [pc, #588]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 80016aa:	601a      	str	r2, [r3, #0]
					Req_AngPosi[1] = (DataProtocol_AngPosi / 256);
 80016ac:	4b92      	ldr	r3, [pc, #584]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da00      	bge.n	80016b6 <_Z15All_mode_UARTUIv+0x5de>
 80016b4:	33ff      	adds	r3, #255	; 0xff
 80016b6:	121b      	asrs	r3, r3, #8
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b90      	ldr	r3, [pc, #576]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016bc:	705a      	strb	r2, [r3, #1]
					Req_AngPosi[2] = (DataProtocol_AngPosi % 256);
 80016be:	4b8e      	ldr	r3, [pc, #568]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	425a      	negs	r2, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	bf58      	it	pl
 80016ca:	4253      	negpl	r3, r2
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b8b      	ldr	r3, [pc, #556]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016d0:	709a      	strb	r2, [r3, #2]
					Req_AngPosi[3] = ~(Req_AngPosi[0] + Req_AngPosi[1] + Req_AngPosi[2]);
 80016d2:	4b8a      	ldr	r3, [pc, #552]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	4b89      	ldr	r3, [pc, #548]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016d8:	785b      	ldrb	r3, [r3, #1]
 80016da:	4413      	add	r3, r2
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b87      	ldr	r3, [pc, #540]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016e0:	789b      	ldrb	r3, [r3, #2]
 80016e2:	4413      	add	r3, r2
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b84      	ldr	r3, [pc, #528]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016ec:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_AngPosi, 4 ,100);
 80016ee:	2364      	movs	r3, #100	; 0x64
 80016f0:	2204      	movs	r2, #4
 80016f2:	4982      	ldr	r1, [pc, #520]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016f4:	4882      	ldr	r0, [pc, #520]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 80016f6:	f01a f8d6 	bl	801b8a6 <HAL_UART_Transmit>
				}
				break;
 80016fa:	e0da      	b.n	80018b2 <_Z15All_mode_UARTUIv+0x7da>
		////==============[Request MAX Angular velo]===========
			case 11: //10011011 01100100
				chksum = MainBuf[newPos_uart-1];
 80016fc:	4b76      	ldr	r3, [pc, #472]	; (80018d8 <_Z15All_mode_UARTUIv+0x800>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	3b01      	subs	r3, #1
 8001702:	4a76      	ldr	r2, [pc, #472]	; (80018dc <_Z15All_mode_UARTUIv+0x804>)
 8001704:	5cd2      	ldrb	r2, [r2, r3]
 8001706:	4b76      	ldr	r3, [pc, #472]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 8001708:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800170a:	4b76      	ldr	r3, [pc, #472]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	43db      	mvns	r3, r3
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b75      	ldr	r3, [pc, #468]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 8001714:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001716:	4b72      	ldr	r3, [pc, #456]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	4b73      	ldr	r3, [pc, #460]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	f040 80c9 	bne.w	80018b6 <_Z15All_mode_UARTUIv+0x7de>
					M_state = 11;
 8001724:	4b71      	ldr	r3, [pc, #452]	; (80018ec <_Z15All_mode_UARTUIv+0x814>)
 8001726:	220b      	movs	r2, #11
 8001728:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800172a:	f000 f905 	bl	8001938 <_Z7xu_Uartv>
					DataProtocol_Velo = (KalV/(2 * 3.14)) * 60;
 800172e:	4b75      	ldr	r3, [pc, #468]	; (8001904 <_Z15All_mode_UARTUIv+0x82c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff08 	bl	8000548 <__aeabi_f2d>
 8001738:	a365      	add	r3, pc, #404	; (adr r3, 80018d0 <_Z15All_mode_UARTUIv+0x7f8>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7ff f885 	bl	800084c <__aeabi_ddiv>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b6e      	ldr	r3, [pc, #440]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 8001750:	f7fe ff52 	bl	80005f8 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f9fc 	bl	8000b58 <__aeabi_d2f>
 8001760:	4603      	mov	r3, r0
 8001762:	4a6a      	ldr	r2, [pc, #424]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 8001764:	6013      	str	r3, [r2, #0]
					Req_MaxVelo[1] = 0;
 8001766:	4b6a      	ldr	r3, [pc, #424]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 8001768:	2200      	movs	r2, #0
 800176a:	705a      	strb	r2, [r3, #1]
					Req_MaxVelo[2] = (DataProtocol_Velo * 255) / 10;
 800176c:	4b67      	ldr	r3, [pc, #412]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001914 <_Z15All_mode_UARTUIv+0x83c>
 8001776:	ee27 7a87 	vmul.f32	s14, s15, s14
 800177a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800177e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001786:	edc7 7a01 	vstr	s15, [r7, #4]
 800178a:	793b      	ldrb	r3, [r7, #4]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b60      	ldr	r3, [pc, #384]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 8001790:	709a      	strb	r2, [r3, #2]
					Req_MaxVelo[3] = ~(Req_MaxVelo[0] + Req_MaxVelo[1] + Req_MaxVelo[2]);
 8001792:	4b5f      	ldr	r3, [pc, #380]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	4b5e      	ldr	r3, [pc, #376]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 8001798:	785b      	ldrb	r3, [r3, #1]
 800179a:	4413      	add	r3, r2
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b5c      	ldr	r3, [pc, #368]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 80017a0:	789b      	ldrb	r3, [r3, #2]
 80017a2:	4413      	add	r3, r2
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b59      	ldr	r3, [pc, #356]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 80017ac:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_MaxVelo, 4 ,1000);
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	2204      	movs	r2, #4
 80017b4:	4956      	ldr	r1, [pc, #344]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 80017b6:	4852      	ldr	r0, [pc, #328]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 80017b8:	f01a f875 	bl	801b8a6 <HAL_UART_Transmit>
				}
				break;
 80017bc:	e07b      	b.n	80018b6 <_Z15All_mode_UARTUIv+0x7de>
		////==============[Enable end effector]================
			case 12: //// 12  10011100 01100011
				chksum = MainBuf[newPos_uart-1];
 80017be:	4b46      	ldr	r3, [pc, #280]	; (80018d8 <_Z15All_mode_UARTUIv+0x800>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	4a45      	ldr	r2, [pc, #276]	; (80018dc <_Z15All_mode_UARTUIv+0x804>)
 80017c6:	5cd2      	ldrb	r2, [r2, r3]
 80017c8:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 80017ca:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80017cc:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b44      	ldr	r3, [pc, #272]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 80017d6:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80017d8:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	4b42      	ldr	r3, [pc, #264]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d16a      	bne.n	80018ba <_Z15All_mode_UARTUIv+0x7e2>
					M_state = 12;
 80017e4:	4b41      	ldr	r3, [pc, #260]	; (80018ec <_Z15All_mode_UARTUIv+0x814>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 1;
 80017ea:	4b4b      	ldr	r3, [pc, #300]	; (8001918 <_Z15All_mode_UARTUIv+0x840>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80017f0:	f000 f8a2 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 80017f4:	e061      	b.n	80018ba <_Z15All_mode_UARTUIv+0x7e2>
		////==============[Disable end effector]================
			case 13: // 13 10011101 01100010
				chksum = MainBuf[newPos_uart-1];
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <_Z15All_mode_UARTUIv+0x800>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	4a37      	ldr	r2, [pc, #220]	; (80018dc <_Z15All_mode_UARTUIv+0x804>)
 80017fe:	5cd2      	ldrb	r2, [r2, r3]
 8001800:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 8001802:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001804:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	43db      	mvns	r3, r3
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 800180e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001810:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d150      	bne.n	80018be <_Z15All_mode_UARTUIv+0x7e6>
					M_state = 13;
 800181c:	4b33      	ldr	r3, [pc, #204]	; (80018ec <_Z15All_mode_UARTUIv+0x814>)
 800181e:	220d      	movs	r2, #13
 8001820:	701a      	strb	r2, [r3, #0]
					//// End Effector Kill
					trig_efftRead = 0;
 8001822:	4b3e      	ldr	r3, [pc, #248]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
					flag_efftRead = 0;
 8001828:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <_Z15All_mode_UARTUIv+0x848>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 0;
 800182e:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <_Z15All_mode_UARTUIv+0x840>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 8001834:	f000 f880 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 8001838:	e041      	b.n	80018be <_Z15All_mode_UARTUIv+0x7e6>
		////==============[Set Home Zero]================
			case 14: //10011110 01100001
				chksum = MainBuf[newPos_uart-1];
 800183a:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <_Z15All_mode_UARTUIv+0x800>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	3b01      	subs	r3, #1
 8001840:	4a26      	ldr	r2, [pc, #152]	; (80018dc <_Z15All_mode_UARTUIv+0x804>)
 8001842:	5cd2      	ldrb	r2, [r2, r3]
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 8001846:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001848:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	43db      	mvns	r3, r3
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 8001852:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d130      	bne.n	80018c2 <_Z15All_mode_UARTUIv+0x7ea>
					M_state = 14;
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <_Z15All_mode_UARTUIv+0x814>)
 8001862:	220e      	movs	r2, #14
 8001864:	701a      	strb	r2, [r3, #0]
					//act as set zero interrupt
					position_order = 0;
 8001866:	4b2f      	ldr	r3, [pc, #188]	; (8001924 <_Z15All_mode_UARTUIv+0x84c>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
					positionlog[position_order] = 0.0;
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <_Z15All_mode_UARTUIv+0x84c>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4a2d      	ldr	r2, [pc, #180]	; (8001928 <_Z15All_mode_UARTUIv+0x850>)
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
					Velocity = 9.0;
 800187c:	4b2b      	ldr	r3, [pc, #172]	; (800192c <_Z15All_mode_UARTUIv+0x854>)
 800187e:	4a2c      	ldr	r2, [pc, #176]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 8001880:	601a      	str	r2, [r3, #0]
					grandState = SetZeroGr;
 8001882:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <_Z15All_mode_UARTUIv+0x85c>)
 8001884:	2205      	movs	r2, #5
 8001886:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 8001888:	f000 f856 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 800188c:	e019      	b.n	80018c2 <_Z15All_mode_UARTUIv+0x7ea>
				break;
 800188e:	bf00      	nop
 8001890:	e018      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 8001892:	bf00      	nop
 8001894:	e016      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 8001896:	bf00      	nop
 8001898:	e014      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 800189a:	bf00      	nop
 800189c:	e012      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 800189e:	bf00      	nop
 80018a0:	e010      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018a2:	bf00      	nop
 80018a4:	e00e      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018a6:	bf00      	nop
 80018a8:	e00c      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018aa:	bf00      	nop
 80018ac:	e00a      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018ae:	bf00      	nop
 80018b0:	e008      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018b2:	bf00      	nop
 80018b4:	e006      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018b6:	bf00      	nop
 80018b8:	e004      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018ba:	bf00      	nop
 80018bc:	e002      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018be:	bf00      	nop
 80018c0:	e000      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018c2:	bf00      	nop
			}
}
 80018c4:	bf00      	nop
 80018c6:	3720      	adds	r7, #32
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	f3af 8000 	nop.w
 80018d0:	51eb851f 	.word	0x51eb851f
 80018d4:	40191eb8 	.word	0x40191eb8
 80018d8:	2000079a 	.word	0x2000079a
 80018dc:	20000778 	.word	0x20000778
 80018e0:	200007dd 	.word	0x200007dd
 80018e4:	200007dc 	.word	0x200007dc
 80018e8:	200007de 	.word	0x200007de
 80018ec:	200007e3 	.word	0x200007e3
 80018f0:	200006f0 	.word	0x200006f0
 80018f4:	461c4000 	.word	0x461c4000
 80018f8:	2000079c 	.word	0x2000079c
 80018fc:	200001bc 	.word	0x200001bc
 8001900:	200003f4 	.word	0x200003f4
 8001904:	200006d4 	.word	0x200006d4
 8001908:	404e0000 	.word	0x404e0000
 800190c:	200007a0 	.word	0x200007a0
 8001910:	200001c0 	.word	0x200001c0
 8001914:	437f0000 	.word	0x437f0000
 8001918:	2000073e 	.word	0x2000073e
 800191c:	20000740 	.word	0x20000740
 8001920:	2000073f 	.word	0x2000073f
 8001924:	20000515 	.word	0x20000515
 8001928:	20000144 	.word	0x20000144
 800192c:	20000588 	.word	0x20000588
 8001930:	41100000 	.word	0x41100000
 8001934:	200004fa 	.word	0x200004fa

08001938 <_Z7xu_Uartv>:

void xu_Uart(){
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 , 200); //Xu
 800193c:	23c8      	movs	r3, #200	; 0xc8
 800193e:	2202      	movs	r2, #2
 8001940:	4902      	ldr	r1, [pc, #8]	; (800194c <_Z7xu_Uartv+0x14>)
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <_Z7xu_Uartv+0x18>)
 8001944:	f019 ffaf 	bl	801b8a6 <HAL_UART_Transmit>
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200001b0 	.word	0x200001b0
 8001950:	200003f4 	.word	0x200003f4

08001954 <_Z7fn_Uartv>:

void fn_Uart(){
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
 8001958:	2364      	movs	r3, #100	; 0x64
 800195a:	2202      	movs	r2, #2
 800195c:	4902      	ldr	r1, [pc, #8]	; (8001968 <_Z7fn_Uartv+0x14>)
 800195e:	4803      	ldr	r0, [pc, #12]	; (800196c <_Z7fn_Uartv+0x18>)
 8001960:	f019 ffa1 	bl	801b8a6 <HAL_UART_Transmit>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200001b4 	.word	0x200001b4
 800196c:	200003f4 	.word	0x200003f4

08001970 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001970:	b5b0      	push	{r4, r5, r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7fe fdd2 	bl	8000524 <__aeabi_i2d>
 8001980:	4604      	mov	r4, r0
 8001982:	460d      	mov	r5, r1
 8001984:	6838      	ldr	r0, [r7, #0]
 8001986:	f7fe fdcd 	bl	8000524 <__aeabi_i2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	ec43 2b11 	vmov	d1, r2, r3
 8001992:	ec45 4b10 	vmov	d0, r4, r5
 8001996:	f01b f96d 	bl	801cc74 <pow>
 800199a:	eeb0 7a40 	vmov.f32	s14, s0
 800199e:	eef0 7a60 	vmov.f32	s15, s1
    }
 80019a2:	eeb0 0a47 	vmov.f32	s0, s14
 80019a6:	eef0 0a67 	vmov.f32	s1, s15
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bdb0      	pop	{r4, r5, r7, pc}

080019b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b4:	b0f2      	sub	sp, #456	; 0x1c8
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/////assign  Matrix  element value  //////////
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 80019b8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019bc:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80019c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019ca:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 80019ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019d2:	461a      	mov	r2, r3
 80019d4:	49ed      	ldr	r1, [pc, #948]	; (8001d8c <main+0x3dc>)
 80019d6:	f002 fac2 	bl	8003f5e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 80019da:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019de:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 80019e2:	4beb      	ldr	r3, [pc, #940]	; (8001d90 <main+0x3e0>)
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80019ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 facf 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80019f6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019fa:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 80019fe:	4be5      	ldr	r3, [pc, #916]	; (8001d94 <main+0x3e4>)
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a06:	4619      	mov	r1, r3
 8001a08:	f002 fac4 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 ,    1    ,      Dt    ,
 8001a0c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a10:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f002 fab8 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a24:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a28:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8001a2c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a36:	4619      	mov	r1, r3
 8001a38:	f002 faac 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a3c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a40:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8001a44:	4bd2      	ldr	r3, [pc, #840]	; (8001d90 <main+0x3e0>)
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f002 faa1 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 ,    0    ,      1     ;
 8001a52:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a56:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a64:	4619      	mov	r1, r3
 8001a66:	f002 fa95 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a6a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a6e:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f002 fa89 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a82:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a86:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8001a8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a94:	4619      	mov	r1, r3
 8001a96:	f002 fa7d 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001a9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 fa6c 	bl	8003f7c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		X << 0 ,    0    ,      0     ;
 8001aa4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001aa8:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001ab6:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8001aba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001abe:	461a      	mov	r2, r3
 8001ac0:	49b5      	ldr	r1, [pc, #724]	; (8001d98 <main+0x3e8>)
 8001ac2:	f002 fad7 	bl	8004074 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001ac6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001aca:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001ad8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fae4 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001ae4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001ae8:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001af6:	4619      	mov	r1, r3
 8001af8:	f002 fad8 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001afc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b00:	4618      	mov	r0, r3
 8001b02:	f002 fac6 	bl	8004092 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		X1 << 0 ,    0    ,      0     ;
 8001b06:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b0a:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b18:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8001b1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b20:	461a      	mov	r2, r3
 8001b22:	499e      	ldr	r1, [pc, #632]	; (8001d9c <main+0x3ec>)
 8001b24:	f002 faa6 	bl	8004074 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001b28:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b2c:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001b3a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 fab3 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b46:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b4a:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f002 faa7 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b5e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b62:	4618      	mov	r0, r3
 8001b64:	f002 fa95 	bl	8004092 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>


		P << 0.000001 , 			0 	 , 			0     ,
 8001b68:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b6c:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001b70:	4b8b      	ldr	r3, [pc, #556]	; (8001da0 <main+0x3f0>)
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b78:	f5a3 7094 	sub.w	r0, r3, #296	; 0x128
 8001b7c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b80:	461a      	mov	r2, r3
 8001b82:	4988      	ldr	r1, [pc, #544]	; (8001da4 <main+0x3f4>)
 8001b84:	f002 f9eb 	bl	8003f5e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001b88:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b8c:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001b9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 f9f7 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ba6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001baa:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f002 f9eb 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 		 ,    0.000001    ,  		0     ,
 8001bbe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bc2:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f002 f9df 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bd6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bda:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001bde:	4b70      	ldr	r3, [pc, #448]	; (8001da0 <main+0x3f0>)
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001be6:	4619      	mov	r1, r3
 8001be8:	f002 f9d4 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bf0:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f002 f9c8 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 		 ,    		0    ,      0.000001     ;
 8001c04:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c08:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c16:	4619      	mov	r1, r3
 8001c18:	f002 f9bc 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c26:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	f002 f9b1 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4b5a      	ldr	r3, [pc, #360]	; (8001da0 <main+0x3f0>)
 8001c36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c3a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4610      	mov	r0, r2
 8001c42:	f002 f9a7 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		P << 0.000001 , 			0 	 , 			0     ,
 8001c46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 f996 	bl	8003f7c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		O << 0 , 	0 	 , 		0     ,
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c58:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8001c5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c60:	461a      	mov	r2, r3
 8001c62:	4951      	ldr	r1, [pc, #324]	; (8001da8 <main+0x3f8>)
 8001c64:	f002 f97b 	bl	8003f5e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c70:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001c74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 f98a 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001c8a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4610      	mov	r0, r2
 8001c92:	f002 f97f 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c96:	4602      	mov	r2, r0
		     0 ,    0    ,  	0     ,
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001ca0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f002 f974 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001cb6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	f002 f969 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001ccc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f002 f95e 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cd8:	4602      	mov	r2, r0
			 0 ,    0    ,      0     ;
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001ce2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4610      	mov	r0, r2
 8001cea:	f002 f953 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001cf8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4610      	mov	r0, r2
 8001d00:	f002 f948 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d0e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001d12:	4619      	mov	r1, r3
 8001d14:	4610      	mov	r0, r2
 8001d16:	f002 f93d 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		O << 0 , 	0 	 , 		0     ,
 8001d1a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 f92c 	bl	8003f7c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		I << 1 , 0 , 0 ,
 8001d24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001d2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001d30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d34:	461a      	mov	r2, r3
 8001d36:	491d      	ldr	r1, [pc, #116]	; (8001dac <main+0x3fc>)
 8001d38:	f002 f911 	bl	8003f5e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d44:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 f920 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d62:	4619      	mov	r1, r3
 8001d64:	4610      	mov	r0, r2
 8001d66:	f002 f915 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d6a:	4602      	mov	r2, r0
			 0 , 1 , 0 ,
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d74:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f002 f90a 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d8a:	e011      	b.n	8001db0 <main+0x400>
 8001d8c:	200005c4 	.word	0x200005c4
 8001d90:	3c23d70a 	.word	0x3c23d70a
 8001d94:	3851b717 	.word	0x3851b717
 8001d98:	200006ac 	.word	0x200006ac
 8001d9c:	200006b8 	.word	0x200006b8
 8001da0:	358637bd 	.word	0x358637bd
 8001da4:	200005e8 	.word	0x200005e8
 8001da8:	2000060c 	.word	0x2000060c
 8001dac:	20000630 	.word	0x20000630
 8001db0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001db4:	4619      	mov	r1, r3
 8001db6:	4610      	mov	r0, r2
 8001db8:	f002 f8ec 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001dc6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4610      	mov	r0, r2
 8001dce:	f002 f8e1 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dd2:	4602      	mov	r2, r0
			 0 , 0 , 1 ;
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f002 f8d6 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001df2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001df6:	4619      	mov	r1, r3
 8001df8:	4610      	mov	r0, r2
 8001dfa:	f002 f8cb 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e04:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001e08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4610      	mov	r0, r2
 8001e10:	f002 f8c0 	bl	8003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		I << 1 , 0 , 0 ,
 8001e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f002 f8af 	bl	8003f7c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		R << pow(10, 0);
 8001e1e:	2100      	movs	r1, #0
 8001e20:	200a      	movs	r0, #10
 8001e22:	f7ff fda5 	bl	8001970 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001e26:	ec53 2b10 	vmov	r2, r3, d0
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7fe fe93 	bl	8000b58 <__aeabi_d2f>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e38:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8001e3c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001e40:	461a      	mov	r2, r3
 8001e42:	499c      	ldr	r1, [pc, #624]	; (80020b4 <main+0x704>)
 8001e44:	f002 f9a2 	bl	800418c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001e48:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 f9ac 	bl	80041aa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		D << 0 ;
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001e5a:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001e5e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e62:	461a      	mov	r2, r3
 8001e64:	4994      	ldr	r1, [pc, #592]	; (80020b8 <main+0x708>)
 8001e66:	f002 f991 	bl	800418c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001e6a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 f99b 	bl	80041aa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		B << 0 , 0 , 0 ;
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001e7c:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8001e80:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001e84:	461a      	mov	r2, r3
 8001e86:	498d      	ldr	r1, [pc, #564]	; (80020bc <main+0x70c>)
 8001e88:	f002 f8f4 	bl	8004074 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001e94:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8001e98:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f002 f904 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001eae:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f002 f8f9 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001eba:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f002 f8e7 	bl	8004092 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		C << 1 , 0 , 0 ;
 8001ec4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ec8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001ecc:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8001ed0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	497a      	ldr	r1, [pc, #488]	; (80020c0 <main+0x710>)
 8001ed8:	f002 f973 	bl	80041c2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001ee4:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8001ee8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f002 f982 	bl	80041f8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001efe:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f002 f977 	bl	80041f8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001f0a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 f966 	bl	80041e0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>

		G << (Dt*Dt)/2 , Dt , 1 ;
 8001f14:	4b6b      	ldr	r3, [pc, #428]	; (80020c4 <main+0x714>)
 8001f16:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001f1a:	f507 70ce 	add.w	r0, r7, #412	; 0x19c
 8001f1e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001f22:	461a      	mov	r2, r3
 8001f24:	4968      	ldr	r1, [pc, #416]	; (80020c8 <main+0x718>)
 8001f26:	f002 f8a5 	bl	8004074 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001f2a:	4b68      	ldr	r3, [pc, #416]	; (80020cc <main+0x71c>)
 8001f2c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001f30:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8001f34:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 f8b6 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f46:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001f4a:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4610      	mov	r0, r2
 8001f52:	f002 f8ab 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001f56:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f002 f899 	bl	8004092 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f60:	f014 f9ba 	bl	80162d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f64:	f000 f9a2 	bl	80022ac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f68:	f000 fbb2 	bl	80026d0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001f6c:	f000 fb88 	bl	8002680 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001f70:	f000 fa0e 	bl	8002390 <_ZL12MX_I2C1_Initv>
  MX_TIM11_Init();
 8001f74:	f000 fb2c 	bl	80025d0 <_ZL13MX_TIM11_Initv>
  MX_TIM4_Init();
 8001f78:	f000 fa72 	bl	8002460 <_ZL12MX_TIM4_Initv>
  MX_I2C3_Init();
 8001f7c:	f000 fa3c 	bl	80023f8 <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 8001f80:	f000 fb4e 	bl	8002620 <_ZL19MX_USART2_UART_Initv>
  MX_TIM10_Init();
 8001f84:	f000 fafc 	bl	8002580 <_ZL13MX_TIM10_Initv>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim10); // milli timer
 8001f88:	4851      	ldr	r0, [pc, #324]	; (80020d0 <main+0x720>)
 8001f8a:	f018 fccb 	bl	801a924 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8001f8e:	4851      	ldr	r0, [pc, #324]	; (80020d4 <main+0x724>)
 8001f90:	f018 fcc8 	bl	801a924 <HAL_TIM_Base_Start_IT>

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8001f94:	4850      	ldr	r0, [pc, #320]	; (80020d8 <main+0x728>)
 8001f96:	f018 fc6b 	bl	801a870 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	484e      	ldr	r0, [pc, #312]	; (80020d8 <main+0x728>)
 8001f9e:	f018 fd7d 	bl	801aa9c <HAL_TIM_PWM_Start>

    //UART UI
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	494d      	ldr	r1, [pc, #308]	; (80020dc <main+0x72c>)
 8001fa6:	484e      	ldr	r0, [pc, #312]	; (80020e0 <main+0x730>)
 8001fa8:	f019 fd0f 	bl	801b9ca <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001fac:	4b4d      	ldr	r3, [pc, #308]	; (80020e4 <main+0x734>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6819      	ldr	r1, [r3, #0]
 8001fb2:	4b4c      	ldr	r3, [pc, #304]	; (80020e4 <main+0x734>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f021 0308 	bic.w	r3, r1, #8
 8001fba:	6013      	str	r3, [r2, #0]

    ////// ===== Select DataPosition Dataset =================
    switch(NumPosDataSetx){
 8001fbc:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <main+0x738>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	f200 809d 	bhi.w	8002102 <main+0x752>
 8001fc8:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <main+0x620>)
 8001fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fce:	bf00      	nop
 8001fd0:	08001fe1 	.word	0x08001fe1
 8001fd4:	08002013 	.word	0x08002013
 8001fd8:	08002045 	.word	0x08002045
 8001fdc:	08002077 	.word	0x08002077

    case 1:
    	for(int t = 0;t <= PosBufSize ;t++){
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fe6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001fea:	2b14      	cmp	r3, #20
 8001fec:	dc5c      	bgt.n	80020a8 <main+0x6f8>
		PosDataSet[t] = rawPossw_1[t];
 8001fee:	4a3f      	ldr	r2, [pc, #252]	; (80020ec <main+0x73c>)
 8001ff0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	6819      	ldr	r1, [r3, #0]
 8001ffa:	4a3d      	ldr	r2, [pc, #244]	; (80020f0 <main+0x740>)
 8001ffc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 8002006:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800200a:	3301      	adds	r3, #1
 800200c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002010:	e7e9      	b.n	8001fe6 <main+0x636>
		} break;

    case 2:
    	for(int t = 0;t <= PosBufSize ;t++){
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002018:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800201c:	2b14      	cmp	r3, #20
 800201e:	dc45      	bgt.n	80020ac <main+0x6fc>
		PosDataSet[t] = rawPossw_2[t];
 8002020:	4a34      	ldr	r2, [pc, #208]	; (80020f4 <main+0x744>)
 8002022:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	6819      	ldr	r1, [r3, #0]
 800202c:	4a30      	ldr	r2, [pc, #192]	; (80020f0 <main+0x740>)
 800202e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 8002038:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800203c:	3301      	adds	r3, #1
 800203e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002042:	e7e9      	b.n	8002018 <main+0x668>
		} break;

    case 3:
    	for(int t = 0;t <= PosBufSize ;t++){
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800204a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800204e:	2b14      	cmp	r3, #20
 8002050:	dc2e      	bgt.n	80020b0 <main+0x700>
    	PosDataSet[t] = rawPossw_3[t];
 8002052:	4a29      	ldr	r2, [pc, #164]	; (80020f8 <main+0x748>)
 8002054:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	4a24      	ldr	r2, [pc, #144]	; (80020f0 <main+0x740>)
 8002060:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 800206a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800206e:	3301      	adds	r3, #1
 8002070:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002074:	e7e9      	b.n	800204a <main+0x69a>
    	} break;

    case 4:
		for(int t = 0;t <= PosBufSize ;t++){
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800207c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002080:	2b14      	cmp	r3, #20
 8002082:	dc3d      	bgt.n	8002100 <main+0x750>
		PosDataSet[t] = rawPossw_4[t];
 8002084:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <main+0x74c>)
 8002086:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	6819      	ldr	r1, [r3, #0]
 8002090:	4a17      	ldr	r2, [pc, #92]	; (80020f0 <main+0x740>)
 8002092:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	6019      	str	r1, [r3, #0]
		for(int t = 0;t <= PosBufSize ;t++){
 800209c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80020a0:	3301      	adds	r3, #1
 80020a2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80020a6:	e7e9      	b.n	800207c <main+0x6cc>
		} break;
 80020a8:	bf00      	nop
 80020aa:	e02a      	b.n	8002102 <main+0x752>
		} break;
 80020ac:	bf00      	nop
 80020ae:	e028      	b.n	8002102 <main+0x752>
    	} break;
 80020b0:	bf00      	nop
 80020b2:	e026      	b.n	8002102 <main+0x752>
 80020b4:	20000658 	.word	0x20000658
 80020b8:	2000065c 	.word	0x2000065c
 80020bc:	200006c4 	.word	0x200006c4
 80020c0:	20000670 	.word	0x20000670
 80020c4:	3851b717 	.word	0x3851b717
 80020c8:	2000067c 	.word	0x2000067c
 80020cc:	3c23d70a 	.word	0x3c23d70a
 80020d0:	20000364 	.word	0x20000364
 80020d4:	200003ac 	.word	0x200003ac
 80020d8:	2000031c 	.word	0x2000031c
 80020dc:	20000758 	.word	0x20000758
 80020e0:	200003f4 	.word	0x200003f4
 80020e4:	20000438 	.word	0x20000438
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000004 	.word	0x20000004
 80020f0:	20000518 	.word	0x20000518
 80020f4:	20000054 	.word	0x20000054
 80020f8:	200000a4 	.word	0x200000a4
 80020fc:	200000f4 	.word	0x200000f4
		} break;
 8002100:	bf00      	nop
    }

    PosoffsetMon = 0 + POSOFFSET; // for send to cubeMon
 8002102:	4a5c      	ldr	r2, [pc, #368]	; (8002274 <main+0x8c4>)
 8002104:	2334      	movs	r3, #52	; 0x34
 8002106:	8013      	strh	r3, [r2, #0]
    ////============position buffer Set Default===================
    //for(int f = 0; f <= PosBufSize; f++){
    //		positionlog[f] = -1.0;
    //	}
    //MCP23017 setting init
    HAL_Delay(50);
 8002108:	2032      	movs	r0, #50	; 0x32
 800210a:	f014 f957 	bl	80163bc <HAL_Delay>
    IOExpenderInit();
 800210e:	f001 fccf 	bl	8003ab0 <_Z14IOExpenderInitv>
	      ///// IT test
	 //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  	  ///// GrandState ///////////////////

	  	  if(micros() - TimeStampGrand >= 1000){
 8002112:	f001 fe4d 	bl	8003db0 <_Z6microsv>
 8002116:	4b58      	ldr	r3, [pc, #352]	; (8002278 <main+0x8c8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2200      	movs	r2, #0
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
 800211e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002122:	ebb0 0803 	subs.w	r8, r0, r3
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	eb61 0903 	sbc.w	r9, r1, r3
 800212c:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 8002130:	f179 0300 	sbcs.w	r3, r9, #0
 8002134:	bf2c      	ite	cs
 8002136:	2301      	movcs	r3, #1
 8002138:	2300      	movcc	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <main+0x7a0>
	  		TimeStampGrand = micros();
 8002140:	f001 fe36 	bl	8003db0 <_Z6microsv>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4b4b      	ldr	r3, [pc, #300]	; (8002278 <main+0x8c8>)
 800214a:	601a      	str	r2, [r3, #0]
	  		GrandStatumix();
 800214c:	f000 fbaa 	bl	80028a4 <_Z13GrandStatumixv>
	  		//CurrentEn = BinPosXI * 0.006136;
	  	  }

	  	  // Encoder I2CRead

	  	  if (micros()-timeStampSR >= 10000)      // don't use 1
 8002150:	f001 fe2e 	bl	8003db0 <_Z6microsv>
 8002154:	4b49      	ldr	r3, [pc, #292]	; (800227c <main+0x8cc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2200      	movs	r2, #0
 800215a:	623b      	str	r3, [r7, #32]
 800215c:	627a      	str	r2, [r7, #36]	; 0x24
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	1ac3      	subs	r3, r0, r3
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	eb61 0303 	sbc.w	r3, r1, r3
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002170:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002174:	4602      	mov	r2, r0
 8002176:	429a      	cmp	r2, r3
 8002178:	460b      	mov	r3, r1
 800217a:	f173 0300 	sbcs.w	r3, r3, #0
 800217e:	bf2c      	ite	cs
 8002180:	2301      	movcs	r3, #1
 8002182:	2300      	movcc	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <main+0x7ec>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 800218a:	f001 fe11 	bl	8003db0 <_Z6microsv>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4b3a      	ldr	r3, [pc, #232]	; (800227c <main+0x8cc>)
 8002194:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 8002196:	4a3a      	ldr	r2, [pc, #232]	; (8002280 <main+0x8d0>)
 8002198:	2301      	movs	r3, #1
 800219a:	7013      	strb	r3, [r2, #0]
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 800219c:	4839      	ldr	r0, [pc, #228]	; (8002284 <main+0x8d4>)
 800219e:	f001 fc9d 	bl	8003adc <_Z14AbsEncI2CReadxPh>
	  	  //Unwrapping();
	  	  //Kalmanfilter();

	  	  ///////////////////// 2KHz change PWM PB6////////////////////

	  	  if(micros() - timestampPWM >= 500){
 80021a2:	f001 fe05 	bl	8003db0 <_Z6microsv>
 80021a6:	4b38      	ldr	r3, [pc, #224]	; (8002288 <main+0x8d8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	61fa      	str	r2, [r7, #28]
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	ebb0 0a03 	subs.w	sl, r0, r3
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	eb61 0b03 	sbc.w	fp, r1, r3
 80021bc:	f5ba 7ffa 	cmp.w	sl, #500	; 0x1f4
 80021c0:	f17b 0300 	sbcs.w	r3, fp, #0
 80021c4:	bf2c      	ite	cs
 80021c6:	2301      	movcs	r3, #1
 80021c8:	2300      	movcc	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01a      	beq.n	8002206 <main+0x856>
	  		  	  timestampPWM = micros(); // stamp
 80021d0:	f001 fdee 	bl	8003db0 <_Z6microsv>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <main+0x8d8>)
 80021da:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut); // dutycycle
 80021dc:	4b2b      	ldr	r3, [pc, #172]	; (800228c <main+0x8dc>)
 80021de:	8819      	ldrh	r1, [r3, #0]
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <main+0x8e0>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	460b      	mov	r3, r1
 80021e6:	6353      	str	r3, [r2, #52]	; 0x34
	  	  		  //__HAL_TIM_SET_PRESCALER(&htim4, pscalr); // Set freq of pwm
	  	  		  //ADC_Target = ADCFeedx[1].datt;

	  	  		///// Mot Driver ///////////////////
	  	  		if (mot_dirctn == 0){
 80021e8:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <main+0x8e4>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d105      	bne.n	80021fc <main+0x84c>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 80021f0:	2201      	movs	r2, #1
 80021f2:	2104      	movs	r1, #4
 80021f4:	4828      	ldr	r0, [pc, #160]	; (8002298 <main+0x8e8>)
 80021f6:	f014 ffc3 	bl	8017180 <HAL_GPIO_WritePin>
 80021fa:	e004      	b.n	8002206 <main+0x856>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2104      	movs	r1, #4
 8002200:	4825      	ldr	r0, [pc, #148]	; (8002298 <main+0x8e8>)
 8002202:	f014 ffbd 	bl	8017180 <HAL_GPIO_WritePin>
				controlloop();
			 }
	  	    */

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 8002206:	f001 fcbf 	bl	8003b88 <_Z13Efft_activatev>
	  	 Efft_read(&efft_status);
 800220a:	4824      	ldr	r0, [pc, #144]	; (800229c <main+0x8ec>)
 800220c:	f001 fd0c 	bl	8003c28 <_Z9Efft_readPh>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state

	  	 if(trig_efftRead != 0 && millis() - timestamp_efft >= 500){
 8002210:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <main+0x8f0>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d014      	beq.n	8002242 <main+0x892>
 8002218:	f001 fde4 	bl	8003de4 <_Z6millisv>
 800221c:	4603      	mov	r3, r0
 800221e:	2200      	movs	r2, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	617a      	str	r2, [r7, #20]
 8002224:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <main+0x8f4>)
 8002226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222a:	6939      	ldr	r1, [r7, #16]
 800222c:	1a8c      	subs	r4, r1, r2
 800222e:	6979      	ldr	r1, [r7, #20]
 8002230:	eb61 0503 	sbc.w	r5, r1, r3
 8002234:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8002238:	f175 0300 	sbcs.w	r3, r5, #0
 800223c:	d301      	bcc.n	8002242 <main+0x892>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <main+0x894>
 8002242:	2300      	movs	r3, #0
 8002244:	2b00      	cmp	r3, #0
 8002246:	f43f af64 	beq.w	8002112 <main+0x762>
	  		 timestamp_efft = millis();
 800224a:	f001 fdcb 	bl	8003de4 <_Z6millisv>
 800224e:	4603      	mov	r3, r0
 8002250:	2200      	movs	r2, #0
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <main+0x8f4>)
 8002258:	e9d7 1200 	ldrd	r1, r2, [r7]
 800225c:	e9c3 1200 	strd	r1, r2, [r3]
	  		 flag_efftRead = 1;
 8002260:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <main+0x8f8>)
 8002262:	2301      	movs	r3, #1
 8002264:	7013      	strb	r3, [r2, #0]
	  		 trig_efftRead++;
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <main+0x8f0>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <main+0x8f0>)
 8002270:	7013      	strb	r3, [r2, #0]
	  	  if(micros() - TimeStampGrand >= 1000){
 8002272:	e74e      	b.n	8002112 <main+0x762>
 8002274:	200004f8 	.word	0x200004f8
 8002278:	20000500 	.word	0x20000500
 800227c:	20000568 	.word	0x20000568
 8002280:	20000572 	.word	0x20000572
 8002284:	2000056c 	.word	0x2000056c
 8002288:	20000578 	.word	0x20000578
 800228c:	20000574 	.word	0x20000574
 8002290:	2000031c 	.word	0x2000031c
 8002294:	2000057c 	.word	0x2000057c
 8002298:	40020400 	.word	0x40020400
 800229c:	2000073d 	.word	0x2000073d
 80022a0:	20000740 	.word	0x20000740
 80022a4:	20000748 	.word	0x20000748
 80022a8:	2000073f 	.word	0x2000073f

080022ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b094      	sub	sp, #80	; 0x50
 80022b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b2:	f107 0320 	add.w	r3, r7, #32
 80022b6:	2230      	movs	r2, #48	; 0x30
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f01b fc7e 	bl	801dbbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <_Z18SystemClock_Configv+0xdc>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	4a2b      	ldr	r2, [pc, #172]	; (8002388 <_Z18SystemClock_Configv+0xdc>)
 80022da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022de:	6413      	str	r3, [r2, #64]	; 0x40
 80022e0:	4b29      	ldr	r3, [pc, #164]	; (8002388 <_Z18SystemClock_Configv+0xdc>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ec:	2300      	movs	r3, #0
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	4b26      	ldr	r3, [pc, #152]	; (800238c <_Z18SystemClock_Configv+0xe0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a25      	ldr	r2, [pc, #148]	; (800238c <_Z18SystemClock_Configv+0xe0>)
 80022f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b23      	ldr	r3, [pc, #140]	; (800238c <_Z18SystemClock_Configv+0xe0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002308:	2302      	movs	r3, #2
 800230a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800230c:	2301      	movs	r3, #1
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002310:	2310      	movs	r3, #16
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002314:	2302      	movs	r3, #2
 8002316:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002318:	2300      	movs	r3, #0
 800231a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800231c:	2308      	movs	r3, #8
 800231e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002320:	2364      	movs	r3, #100	; 0x64
 8002322:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002324:	2302      	movs	r3, #2
 8002326:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002328:	2304      	movs	r3, #4
 800232a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800232c:	f107 0320 	add.w	r3, r7, #32
 8002330:	4618      	mov	r0, r3
 8002332:	f017 fdb5 	bl	8019ea0 <HAL_RCC_OscConfig>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf14      	ite	ne
 800233c:	2301      	movne	r3, #1
 800233e:	2300      	moveq	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002346:	f001 fd83 	bl	8003e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800234a:	230f      	movs	r3, #15
 800234c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800234e:	2302      	movs	r3, #2
 8002350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800235a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	2103      	movs	r1, #3
 8002366:	4618      	mov	r0, r3
 8002368:	f018 f812 	bl	801a390 <HAL_RCC_ClockConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	bf14      	ite	ne
 8002372:	2301      	movne	r3, #1
 8002374:	2300      	moveq	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800237c:	f001 fd68 	bl	8003e50 <Error_Handler>
  }
}
 8002380:	bf00      	nop
 8002382:	3750      	adds	r7, #80	; 0x50
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40023800 	.word	0x40023800
 800238c:	40007000 	.word	0x40007000

08002390 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002394:	4b15      	ldr	r3, [pc, #84]	; (80023ec <_ZL12MX_I2C1_Initv+0x5c>)
 8002396:	4a16      	ldr	r2, [pc, #88]	; (80023f0 <_ZL12MX_I2C1_Initv+0x60>)
 8002398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <_ZL12MX_I2C1_Initv+0x5c>)
 800239c:	4a15      	ldr	r2, [pc, #84]	; (80023f4 <_ZL12MX_I2C1_Initv+0x64>)
 800239e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <_ZL12MX_I2C1_Initv+0x5c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <_ZL12MX_I2C1_Initv+0x5c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <_ZL12MX_I2C1_Initv+0x5c>)
 80023ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <_ZL12MX_I2C1_Initv+0x5c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <_ZL12MX_I2C1_Initv+0x5c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <_ZL12MX_I2C1_Initv+0x5c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <_ZL12MX_I2C1_Initv+0x5c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023cc:	4807      	ldr	r0, [pc, #28]	; (80023ec <_ZL12MX_I2C1_Initv+0x5c>)
 80023ce:	f014 ff09 	bl	80171e4 <HAL_I2C_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf14      	ite	ne
 80023d8:	2301      	movne	r3, #1
 80023da:	2300      	moveq	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80023e2:	f001 fd35 	bl	8003e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000274 	.word	0x20000274
 80023f0:	40005400 	.word	0x40005400
 80023f4:	00061a80 	.word	0x00061a80

080023f8 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <_ZL12MX_I2C3_Initv+0x5c>)
 80023fe:	4a16      	ldr	r2, [pc, #88]	; (8002458 <_ZL12MX_I2C3_Initv+0x60>)
 8002400:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <_ZL12MX_I2C3_Initv+0x5c>)
 8002404:	4a15      	ldr	r2, [pc, #84]	; (800245c <_ZL12MX_I2C3_Initv+0x64>)
 8002406:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <_ZL12MX_I2C3_Initv+0x5c>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <_ZL12MX_I2C3_Initv+0x5c>)
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <_ZL12MX_I2C3_Initv+0x5c>)
 8002416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800241a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800241c:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <_ZL12MX_I2C3_Initv+0x5c>)
 800241e:	2200      	movs	r2, #0
 8002420:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <_ZL12MX_I2C3_Initv+0x5c>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <_ZL12MX_I2C3_Initv+0x5c>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <_ZL12MX_I2C3_Initv+0x5c>)
 8002430:	2200      	movs	r2, #0
 8002432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002434:	4807      	ldr	r0, [pc, #28]	; (8002454 <_ZL12MX_I2C3_Initv+0x5c>)
 8002436:	f014 fed5 	bl	80171e4 <HAL_I2C_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf14      	ite	ne
 8002440:	2301      	movne	r3, #1
 8002442:	2300      	moveq	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 800244a:	f001 fd01 	bl	8003e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200002c8 	.word	0x200002c8
 8002458:	40005c00 	.word	0x40005c00
 800245c:	00061a80 	.word	0x00061a80

08002460 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08e      	sub	sp, #56	; 0x38
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002474:	f107 0320 	add.w	r3, r7, #32
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
 800248c:	615a      	str	r2, [r3, #20]
 800248e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <_ZL12MX_TIM4_Initv+0x118>)
 8002492:	4a3a      	ldr	r2, [pc, #232]	; (800257c <_ZL12MX_TIM4_Initv+0x11c>)
 8002494:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002496:	4b38      	ldr	r3, [pc, #224]	; (8002578 <_ZL12MX_TIM4_Initv+0x118>)
 8002498:	2200      	movs	r2, #0
 800249a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249c:	4b36      	ldr	r3, [pc, #216]	; (8002578 <_ZL12MX_TIM4_Initv+0x118>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80024a2:	4b35      	ldr	r3, [pc, #212]	; (8002578 <_ZL12MX_TIM4_Initv+0x118>)
 80024a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80024a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024aa:	4b33      	ldr	r3, [pc, #204]	; (8002578 <_ZL12MX_TIM4_Initv+0x118>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b0:	4b31      	ldr	r3, [pc, #196]	; (8002578 <_ZL12MX_TIM4_Initv+0x118>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024b6:	4830      	ldr	r0, [pc, #192]	; (8002578 <_ZL12MX_TIM4_Initv+0x118>)
 80024b8:	f018 f98a 	bl	801a7d0 <HAL_TIM_Base_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf14      	ite	ne
 80024c2:	2301      	movne	r3, #1
 80024c4:	2300      	moveq	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 80024cc:	f001 fcc0 	bl	8003e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024da:	4619      	mov	r1, r3
 80024dc:	4826      	ldr	r0, [pc, #152]	; (8002578 <_ZL12MX_TIM4_Initv+0x118>)
 80024de:	f018 fd57 	bl	801af90 <HAL_TIM_ConfigClockSource>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf14      	ite	ne
 80024e8:	2301      	movne	r3, #1
 80024ea:	2300      	moveq	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 80024f2:	f001 fcad 	bl	8003e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024f6:	4820      	ldr	r0, [pc, #128]	; (8002578 <_ZL12MX_TIM4_Initv+0x118>)
 80024f8:	f018 fa76 	bl	801a9e8 <HAL_TIM_PWM_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bf14      	ite	ne
 8002502:	2301      	movne	r3, #1
 8002504:	2300      	moveq	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 800250c:	f001 fca0 	bl	8003e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002518:	f107 0320 	add.w	r3, r7, #32
 800251c:	4619      	mov	r1, r3
 800251e:	4816      	ldr	r0, [pc, #88]	; (8002578 <_ZL12MX_TIM4_Initv+0x118>)
 8002520:	f019 f8f2 	bl	801b708 <HAL_TIMEx_MasterConfigSynchronization>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	bf14      	ite	ne
 800252a:	2301      	movne	r3, #1
 800252c:	2300      	moveq	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 8002534:	f001 fc8c 	bl	8003e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002538:	2360      	movs	r3, #96	; 0x60
 800253a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	2200      	movs	r2, #0
 800254c:	4619      	mov	r1, r3
 800254e:	480a      	ldr	r0, [pc, #40]	; (8002578 <_ZL12MX_TIM4_Initv+0x118>)
 8002550:	f018 fc5c 	bl	801ae0c <HAL_TIM_PWM_ConfigChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	bf14      	ite	ne
 800255a:	2301      	movne	r3, #1
 800255c:	2300      	moveq	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 8002564:	f001 fc74 	bl	8003e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002568:	4803      	ldr	r0, [pc, #12]	; (8002578 <_ZL12MX_TIM4_Initv+0x118>)
 800256a:	f013 fc29 	bl	8015dc0 <HAL_TIM_MspPostInit>

}
 800256e:	bf00      	nop
 8002570:	3738      	adds	r7, #56	; 0x38
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000031c 	.word	0x2000031c
 800257c:	40000800 	.word	0x40000800

08002580 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <_ZL13MX_TIM10_Initv+0x48>)
 8002586:	4a11      	ldr	r2, [pc, #68]	; (80025cc <_ZL13MX_TIM10_Initv+0x4c>)
 8002588:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <_ZL13MX_TIM10_Initv+0x48>)
 800258c:	2263      	movs	r2, #99	; 0x63
 800258e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <_ZL13MX_TIM10_Initv+0x48>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <_ZL13MX_TIM10_Initv+0x48>)
 8002598:	f240 32e7 	movw	r2, #999	; 0x3e7
 800259c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <_ZL13MX_TIM10_Initv+0x48>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <_ZL13MX_TIM10_Initv+0x48>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80025aa:	4807      	ldr	r0, [pc, #28]	; (80025c8 <_ZL13MX_TIM10_Initv+0x48>)
 80025ac:	f018 f910 	bl	801a7d0 <HAL_TIM_Base_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bf14      	ite	ne
 80025b6:	2301      	movne	r3, #1
 80025b8:	2300      	moveq	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <_ZL13MX_TIM10_Initv+0x44>
  {
    Error_Handler();
 80025c0:	f001 fc46 	bl	8003e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000364 	.word	0x20000364
 80025cc:	40014400 	.word	0x40014400

080025d0 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80025d4:	4b10      	ldr	r3, [pc, #64]	; (8002618 <_ZL13MX_TIM11_Initv+0x48>)
 80025d6:	4a11      	ldr	r2, [pc, #68]	; (800261c <_ZL13MX_TIM11_Initv+0x4c>)
 80025d8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <_ZL13MX_TIM11_Initv+0x48>)
 80025dc:	2263      	movs	r2, #99	; 0x63
 80025de:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <_ZL13MX_TIM11_Initv+0x48>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <_ZL13MX_TIM11_Initv+0x48>)
 80025e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <_ZL13MX_TIM11_Initv+0x48>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <_ZL13MX_TIM11_Initv+0x48>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80025fa:	4807      	ldr	r0, [pc, #28]	; (8002618 <_ZL13MX_TIM11_Initv+0x48>)
 80025fc:	f018 f8e8 	bl	801a7d0 <HAL_TIM_Base_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf14      	ite	ne
 8002606:	2301      	movne	r3, #1
 8002608:	2300      	moveq	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8002610:	f001 fc1e 	bl	8003e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}
 8002618:	200003ac 	.word	0x200003ac
 800261c:	40014800 	.word	0x40014800

08002620 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002626:	4a15      	ldr	r2, [pc, #84]	; (800267c <_ZL19MX_USART2_UART_Initv+0x5c>)
 8002628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <_ZL19MX_USART2_UART_Initv+0x58>)
 800262c:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002634:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002638:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800263a:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <_ZL19MX_USART2_UART_Initv+0x58>)
 800263c:	2200      	movs	r2, #0
 800263e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002640:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <_ZL19MX_USART2_UART_Initv+0x58>)
 800264a:	220c      	movs	r2, #12
 800264c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264e:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800265a:	4807      	ldr	r0, [pc, #28]	; (8002678 <_ZL19MX_USART2_UART_Initv+0x58>)
 800265c:	f019 f8d6 	bl	801b80c <HAL_UART_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	bf14      	ite	ne
 8002666:	2301      	movne	r3, #1
 8002668:	2300      	moveq	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <_ZL19MX_USART2_UART_Initv+0x54>
  {
    Error_Handler();
 8002670:	f001 fbee 	bl	8003e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200003f4 	.word	0x200003f4
 800267c:	40004400 	.word	0x40004400

08002680 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <_ZL11MX_DMA_Initv+0x4c>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <_ZL11MX_DMA_Initv+0x4c>)
 8002690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <_ZL11MX_DMA_Initv+0x4c>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	2011      	movs	r0, #17
 80026a8:	f013 ff87 	bl	80165ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80026ac:	2011      	movs	r0, #17
 80026ae:	f013 ffa0 	bl	80165f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	202f      	movs	r0, #47	; 0x2f
 80026b8:	f013 ff7f 	bl	80165ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80026bc:	202f      	movs	r0, #47	; 0x2f
 80026be:	f013 ff98 	bl	80165f2 <HAL_NVIC_EnableIRQ>

}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	4b69      	ldr	r3, [pc, #420]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a68      	ldr	r2, [pc, #416]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b66      	ldr	r3, [pc, #408]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b62      	ldr	r3, [pc, #392]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a61      	ldr	r2, [pc, #388]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 800270c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b5f      	ldr	r3, [pc, #380]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b5b      	ldr	r3, [pc, #364]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a5a      	ldr	r2, [pc, #360]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b58      	ldr	r3, [pc, #352]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	4b54      	ldr	r3, [pc, #336]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a53      	ldr	r2, [pc, #332]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b51      	ldr	r3, [pc, #324]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4b4d      	ldr	r3, [pc, #308]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a4c      	ldr	r2, [pc, #304]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b4a      	ldr	r3, [pc, #296]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	2120      	movs	r1, #32
 8002776:	4847      	ldr	r0, [pc, #284]	; (8002894 <_ZL12MX_GPIO_Initv+0x1c4>)
 8002778:	f014 fd02 	bl	8017180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 800277c:	2200      	movs	r2, #0
 800277e:	f24e 0104 	movw	r1, #57348	; 0xe004
 8002782:	4845      	ldr	r0, [pc, #276]	; (8002898 <_ZL12MX_GPIO_Initv+0x1c8>)
 8002784:	f014 fcfc 	bl	8017180 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 8002788:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800278c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800278e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4619      	mov	r1, r3
 800279e:	483f      	ldr	r0, [pc, #252]	; (800289c <_ZL12MX_GPIO_Initv+0x1cc>)
 80027a0:	f014 fb52 	bl	8016e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM2_CH1_VINCp_Pin */
  GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 80027a4:	2301      	movs	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027b4:	2301      	movs	r3, #1
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	4835      	ldr	r0, [pc, #212]	; (8002894 <_ZL12MX_GPIO_Initv+0x1c4>)
 80027c0:	f014 fb42 	bl	8016e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80027c4:	2320      	movs	r3, #32
 80027c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c8:	2301      	movs	r3, #1
 80027ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4619      	mov	r1, r3
 80027da:	482e      	ldr	r0, [pc, #184]	; (8002894 <_ZL12MX_GPIO_Initv+0x1c4>)
 80027dc:	f014 fb34 	bl	8016e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 80027e0:	2302      	movs	r3, #2
 80027e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4619      	mov	r1, r3
 80027f2:	4829      	ldr	r0, [pc, #164]	; (8002898 <_ZL12MX_GPIO_Initv+0x1c8>)
 80027f4:	f014 fb28 	bl	8016e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 80027f8:	f24e 0304 	movw	r3, #57348	; 0xe004
 80027fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fe:	2301      	movs	r3, #1
 8002800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280a:	f107 0314 	add.w	r3, r7, #20
 800280e:	4619      	mov	r1, r3
 8002810:	4821      	ldr	r0, [pc, #132]	; (8002898 <_ZL12MX_GPIO_Initv+0x1c8>)
 8002812:	f014 fb19 	bl	8016e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 8002816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800281a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800281c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	4619      	mov	r1, r3
 800282c:	481b      	ldr	r0, [pc, #108]	; (800289c <_ZL12MX_GPIO_Initv+0x1cc>)
 800282e:	f014 fb0b 	bl	8016e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 8002832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4619      	mov	r1, r3
 8002846:	4815      	ldr	r0, [pc, #84]	; (800289c <_ZL12MX_GPIO_Initv+0x1cc>)
 8002848:	f014 fafe 	bl	8016e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 800284c:	2304      	movs	r3, #4
 800284e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002850:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	4619      	mov	r1, r3
 8002860:	480f      	ldr	r0, [pc, #60]	; (80028a0 <_ZL12MX_GPIO_Initv+0x1d0>)
 8002862:	f014 faf1 	bl	8016e48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	2008      	movs	r0, #8
 800286c:	f013 fea5 	bl	80165ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002870:	2008      	movs	r0, #8
 8002872:	f013 febe 	bl	80165f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2100      	movs	r1, #0
 800287a:	2028      	movs	r0, #40	; 0x28
 800287c:	f013 fe9d 	bl	80165ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002880:	2028      	movs	r0, #40	; 0x28
 8002882:	f013 feb6 	bl	80165f2 <HAL_NVIC_EnableIRQ>

}
 8002886:	bf00      	nop
 8002888:	3728      	adds	r7, #40	; 0x28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	40020000 	.word	0x40020000
 8002898:	40020400 	.word	0x40020400
 800289c:	40020800 	.word	0x40020800
 80028a0:	40020c00 	.word	0x40020c00

080028a4 <_Z13GrandStatumixv>:

/* USER CODE BEGIN 4 */
////////// [Grand State] //////////////////////// [Grand State] ////////////////////////
//======== [Grand State] ======================== [Grand State] ========================

void GrandStatumix(){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 80028a8:	4b98      	ldr	r3, [pc, #608]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <_Z13GrandStatumixv+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 80028b0:	2200      	movs	r2, #0
 80028b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028b6:	4896      	ldr	r0, [pc, #600]	; (8002b10 <_Z13GrandStatumixv+0x26c>)
 80028b8:	f014 fc62 	bl	8017180 <HAL_GPIO_WritePin>
	}
	if (grandState != work){
 80028bc:	4b93      	ldr	r3, [pc, #588]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d005      	beq.n	80028d0 <_Z13GrandStatumixv+0x2c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 80028c4:	2200      	movs	r2, #0
 80028c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ca:	4891      	ldr	r0, [pc, #580]	; (8002b10 <_Z13GrandStatumixv+0x26c>)
 80028cc:	f014 fc58 	bl	8017180 <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 80028d0:	4b8e      	ldr	r3, [pc, #568]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d103      	bne.n	80028e0 <_Z13GrandStatumixv+0x3c>
 80028d8:	4b8c      	ldr	r3, [pc, #560]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d005      	beq.n	80028ec <_Z13GrandStatumixv+0x48>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 80028e0:	2200      	movs	r2, #0
 80028e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028e6:	488a      	ldr	r0, [pc, #552]	; (8002b10 <_Z13GrandStatumixv+0x26c>)
 80028e8:	f014 fc4a 	bl	8017180 <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 80028ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028f0:	4888      	ldr	r0, [pc, #544]	; (8002b14 <_Z13GrandStatumixv+0x270>)
 80028f2:	f014 fc2d 	bl	8017150 <HAL_GPIO_ReadPin>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b87      	ldr	r3, [pc, #540]	; (8002b18 <_Z13GrandStatumixv+0x274>)
 80028fc:	701a      	strb	r2, [r3, #0]
	pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 80028fe:	2102      	movs	r1, #2
 8002900:	4883      	ldr	r0, [pc, #524]	; (8002b10 <_Z13GrandStatumixv+0x26c>)
 8002902:	f014 fc25 	bl	8017150 <HAL_GPIO_ReadPin>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	4b84      	ldr	r3, [pc, #528]	; (8002b1c <_Z13GrandStatumixv+0x278>)
 800290c:	701a      	strb	r2, [r3, #0]

	switch(grandState){
 800290e:	4b7f      	ldr	r3, [pc, #508]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	3b01      	subs	r3, #1
 8002914:	2b04      	cmp	r3, #4
 8002916:	d80d      	bhi.n	8002934 <_Z13GrandStatumixv+0x90>
 8002918:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <_Z13GrandStatumixv+0x7c>)
 800291a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291e:	bf00      	nop
 8002920:	08002969 	.word	0x08002969
 8002924:	08002a3f 	.word	0x08002a3f
 8002928:	08002ad5 	.word	0x08002ad5
 800292c:	08002a8f 	.word	0x08002a8f
 8002930:	080029af 	.word	0x080029af
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 8002934:	2201      	movs	r2, #1
 8002936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800293a:	4875      	ldr	r0, [pc, #468]	; (8002b10 <_Z13GrandStatumixv+0x26c>)
 800293c:	f014 fc20 	bl	8017180 <HAL_GPIO_WritePin>
		//PWMOut = 1200;
		Unwrapping();
 8002940:	f000 fc8a 	bl	8003258 <_Z10Unwrappingv>
		Kalmanfilter();
 8002944:	f000 fd3c 	bl	80033c0 <_Z12Kalmanfilterv>
		//diffvelo();

		if (pwr_sense == 1){grandState = emer;}
 8002948:	4b74      	ldr	r3, [pc, #464]	; (8002b1c <_Z13GrandStatumixv+0x278>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d102      	bne.n	8002956 <_Z13GrandStatumixv+0xb2>
 8002950:	4b6e      	ldr	r3, [pc, #440]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 8002952:	2203      	movs	r2, #3
 8002954:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 8002956:	4b70      	ldr	r3, [pc, #448]	; (8002b18 <_Z13GrandStatumixv+0x274>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	f040 80c9 	bne.w	8002af2 <_Z13GrandStatumixv+0x24e>
 8002960:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 8002962:	2202      	movs	r2, #2
 8002964:	701a      	strb	r2, [r3, #0]
		/// [From UART] run when get {HOME} , {RUN}
		//if (bluecounter != 0){grandState = work;} // can go work from ready only
	break;
 8002966:	e0c4      	b.n	8002af2 <_Z13GrandStatumixv+0x24e>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002968:	2201      	movs	r2, #1
 800296a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800296e:	4868      	ldr	r0, [pc, #416]	; (8002b10 <_Z13GrandStatumixv+0x26c>)
 8002970:	f014 fc06 	bl	8017180 <HAL_GPIO_WritePin>
		LaserTrajex_workflow();
 8002974:	f000 f8e8 	bl	8002b48 <_Z20LaserTrajex_workflowv>

		if (pwr_sense == 1){
 8002978:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <_Z13GrandStatumixv+0x278>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d106      	bne.n	800298e <_Z13GrandStatumixv+0xea>
			grandState = emer;
 8002980:	4b62      	ldr	r3, [pc, #392]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 8002982:	2203      	movs	r2, #3
 8002984:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 8002986:	4b66      	ldr	r3, [pc, #408]	; (8002b20 <_Z13GrandStatumixv+0x27c>)
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
		}
		if (stop_sense == 0){
 800298e:	4b62      	ldr	r3, [pc, #392]	; (8002b18 <_Z13GrandStatumixv+0x274>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 80af 	bne.w	8002af6 <_Z13GrandStatumixv+0x252>
			PWMOut = 0;
 8002998:	4b62      	ldr	r3, [pc, #392]	; (8002b24 <_Z13GrandStatumixv+0x280>)
 800299a:	2200      	movs	r2, #0
 800299c:	801a      	strh	r2, [r3, #0]
			grandState = stopnd;
 800299e:	4b5b      	ldr	r3, [pc, #364]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 80029a0:	2204      	movs	r2, #4
 80029a2:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 80029a4:	4b5e      	ldr	r3, [pc, #376]	; (8002b20 <_Z13GrandStatumixv+0x27c>)
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
		}
	break;
 80029ac:	e0a3      	b.n	8002af6 <_Z13GrandStatumixv+0x252>

	case SetZeroGr:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 80029ae:	2201      	movs	r2, #1
 80029b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029b4:	4856      	ldr	r0, [pc, #344]	; (8002b10 <_Z13GrandStatumixv+0x26c>)
 80029b6:	f014 fbe3 	bl	8017180 <HAL_GPIO_WritePin>

		Unwrapping();
 80029ba:	f000 fc4d 	bl	8003258 <_Z10Unwrappingv>

		 if(flagNewpos==0){
 80029be:	4b5a      	ldr	r3, [pc, #360]	; (8002b28 <_Z13GrandStatumixv+0x284>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d111      	bne.n	80029ea <_Z13GrandStatumixv+0x146>
			Currentpos = CurrentEn;
 80029c6:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <_Z13GrandStatumixv+0x288>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a59      	ldr	r2, [pc, #356]	; (8002b30 <_Z13GrandStatumixv+0x28c>)
 80029cc:	6013      	str	r3, [r2, #0]
			//Finalposition = 0; // Put goal position here in rad
			Distance = Finalposition - Currentpos;
 80029ce:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <_Z13GrandStatumixv+0x290>)
 80029d0:	ed93 7a00 	vldr	s14, [r3]
 80029d4:	4b56      	ldr	r3, [pc, #344]	; (8002b30 <_Z13GrandStatumixv+0x28c>)
 80029d6:	edd3 7a00 	vldr	s15, [r3]
 80029da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029de:	4b56      	ldr	r3, [pc, #344]	; (8002b38 <_Z13GrandStatumixv+0x294>)
 80029e0:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 80029e4:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <_Z13GrandStatumixv+0x284>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
		 }
		Trajectory();
 80029ea:	f000 f9c1 	bl	8002d70 <_Z10Trajectoryv>
		Kalmanfilter();
 80029ee:	f000 fce7 	bl	80033c0 <_Z12Kalmanfilterv>
		controlloop();
 80029f2:	f000 ff41 	bl	8003878 <_Z11controlloopv>
//		HAL_Delay(4000); // Simulate workload
//		flag_finishTra = 1;


		if (flag_finishTra == 1){
 80029f6:	4b51      	ldr	r3, [pc, #324]	; (8002b3c <_Z13GrandStatumixv+0x298>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d109      	bne.n	8002a12 <_Z13GrandStatumixv+0x16e>
			flag_finishTra = 0;
 80029fe:	4b4f      	ldr	r3, [pc, #316]	; (8002b3c <_Z13GrandStatumixv+0x298>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
			fn_Uart();
 8002a04:	f7fe ffa6 	bl	8001954 <_Z7fn_Uartv>
			grandState = Ready;
 8002a08:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
			ResetParam();
 8002a0e:	f000 f963 	bl	8002cd8 <_Z10ResetParamv>
		}
		if (pwr_sense == 1){grandState = emer;}
 8002a12:	4b42      	ldr	r3, [pc, #264]	; (8002b1c <_Z13GrandStatumixv+0x278>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d102      	bne.n	8002a20 <_Z13GrandStatumixv+0x17c>
 8002a1a:	4b3c      	ldr	r3, [pc, #240]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){
 8002a20:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <_Z13GrandStatumixv+0x274>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d168      	bne.n	8002afa <_Z13GrandStatumixv+0x256>
					PWMOut = 0;
 8002a28:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <_Z13GrandStatumixv+0x280>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	801a      	strh	r2, [r3, #0]
					grandState = stopnd;
 8002a2e:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 8002a30:	2204      	movs	r2, #4
 8002a32:	701a      	strb	r2, [r3, #0]
					u_contr = 0;
 8002a34:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <_Z13GrandStatumixv+0x27c>)
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
				}
	break;
 8002a3c:	e05d      	b.n	8002afa <_Z13GrandStatumixv+0x256>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a44:	4832      	ldr	r0, [pc, #200]	; (8002b10 <_Z13GrandStatumixv+0x26c>)
 8002a46:	f014 fb9b 	bl	8017180 <HAL_GPIO_WritePin>
		PWMOut = 0;
 8002a4a:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <_Z13GrandStatumixv+0x280>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	801a      	strh	r2, [r3, #0]

		X(1,0)=0;
 8002a50:	2200      	movs	r2, #0
 8002a52:	2101      	movs	r1, #1
 8002a54:	483a      	ldr	r0, [pc, #232]	; (8002b40 <_Z13GrandStatumixv+0x29c>)
 8002a56:	f001 fc3f 	bl	80042d8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
		KalV = X(1,0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2101      	movs	r1, #1
 8002a66:	4836      	ldr	r0, [pc, #216]	; (8002b40 <_Z13GrandStatumixv+0x29c>)
 8002a68:	f001 fc36 	bl	80042d8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a34      	ldr	r2, [pc, #208]	; (8002b44 <_Z13GrandStatumixv+0x2a0>)
 8002a72:	6013      	str	r3, [r2, #0]

		if (stop_sense == 1){
 8002a74:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <_Z13GrandStatumixv+0x274>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d140      	bne.n	8002afe <_Z13GrandStatumixv+0x25a>
			grandState = Ready;
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
			IOExpenderInit();
 8002a82:	f001 f815 	bl	8003ab0 <_Z14IOExpenderInitv>
			HAL_Delay(100);
 8002a86:	2064      	movs	r0, #100	; 0x64
 8002a88:	f013 fc98 	bl	80163bc <HAL_Delay>
			//== rotation change for dummy test
			//mot_dirctn++; mot_dirctn%=2;
		}
	break;
 8002a8c:	e037      	b.n	8002afe <_Z13GrandStatumixv+0x25a>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a94:	481e      	ldr	r0, [pc, #120]	; (8002b10 <_Z13GrandStatumixv+0x26c>)
 8002a96:	f014 fb73 	bl	8017180 <HAL_GPIO_WritePin>
			PWMOut = 0;
 8002a9a:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <_Z13GrandStatumixv+0x280>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	801a      	strh	r2, [r3, #0]
			//Integral = 0;
			X(1,0)=0;
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4826      	ldr	r0, [pc, #152]	; (8002b40 <_Z13GrandStatumixv+0x29c>)
 8002aa6:	f001 fc17 	bl	80042d8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
			KalV = X(1,0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4822      	ldr	r0, [pc, #136]	; (8002b40 <_Z13GrandStatumixv+0x29c>)
 8002ab8:	f001 fc0e 	bl	80042d8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002abc:	4603      	mov	r3, r0
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a20      	ldr	r2, [pc, #128]	; (8002b44 <_Z13GrandStatumixv+0x2a0>)
 8002ac2:	6013      	str	r3, [r2, #0]


			if (stop_sense == 1){
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <_Z13GrandStatumixv+0x274>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d11a      	bne.n	8002b02 <_Z13GrandStatumixv+0x25e>
				grandState = work;
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002ad2:	e016      	b.n	8002b02 <_Z13GrandStatumixv+0x25e>

	case emer:
		ResetParam();
 8002ad4:	f000 f900 	bl	8002cd8 <_Z10ResetParamv>
		// Reset every variables at control
		if (pwr_sense == 0){
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <_Z13GrandStatumixv+0x278>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d112      	bne.n	8002b06 <_Z13GrandStatumixv+0x262>
			grandState = Ready;
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <_Z13GrandStatumixv+0x268>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
			HAL_Delay(250); // wait for emer release shock power
 8002ae6:	20fa      	movs	r0, #250	; 0xfa
 8002ae8:	f013 fc68 	bl	80163bc <HAL_Delay>
			IOExpenderInit();
 8002aec:	f000 ffe0 	bl	8003ab0 <_Z14IOExpenderInitv>

		}
	break;
 8002af0:	e009      	b.n	8002b06 <_Z13GrandStatumixv+0x262>
	break;
 8002af2:	bf00      	nop
 8002af4:	e008      	b.n	8002b08 <_Z13GrandStatumixv+0x264>
	break;
 8002af6:	bf00      	nop
 8002af8:	e006      	b.n	8002b08 <_Z13GrandStatumixv+0x264>
	break;
 8002afa:	bf00      	nop
 8002afc:	e004      	b.n	8002b08 <_Z13GrandStatumixv+0x264>
	break;
 8002afe:	bf00      	nop
 8002b00:	e002      	b.n	8002b08 <_Z13GrandStatumixv+0x264>
		break;
 8002b02:	bf00      	nop
 8002b04:	e000      	b.n	8002b08 <_Z13GrandStatumixv+0x264>
	break;
 8002b06:	bf00      	nop
	}
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	200004fa 	.word	0x200004fa
 8002b10:	40020400 	.word	0x40020400
 8002b14:	40020800 	.word	0x40020800
 8002b18:	200004fc 	.word	0x200004fc
 8002b1c:	200004fb 	.word	0x200004fb
 8002b20:	20000734 	.word	0x20000734
 8002b24:	20000574 	.word	0x20000574
 8002b28:	200005a8 	.word	0x200005a8
 8002b2c:	200006f0 	.word	0x200006f0
 8002b30:	200005a4 	.word	0x200005a4
 8002b34:	20000580 	.word	0x20000580
 8002b38:	20000584 	.word	0x20000584
 8002b3c:	20000504 	.word	0x20000504
 8002b40:	200006ac 	.word	0x200006ac
 8002b44:	200006d4 	.word	0x200006d4

08002b48 <_Z20LaserTrajex_workflowv>:

void LaserTrajex_workflow(){ // 1, n loop go to shoot laser run
 8002b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b4c:	af00      	add	r7, sp, #0
	// -1 means no position value
	//if (Finalposition == -1){flag_LasxTraj = 0;}

	switch(flag_LasxTraj){
 8002b4e:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <_Z20LaserTrajex_workflowv+0x154>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d012      	beq.n	8002b7c <_Z20LaserTrajex_workflowv+0x34>
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d048      	beq.n	8002bec <_Z20LaserTrajex_workflowv+0xa4>
	default:
	case 0: // wait go flag
		////////// raise flag to 1 if need to drive the state

		if (grandState == work){ //flag_LasxTraj != 0 ||
 8002b5a:	4b51      	ldr	r3, [pc, #324]	; (8002ca0 <_Z20LaserTrajex_workflowv+0x158>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	f040 8094 	bne.w	8002c8c <_Z20LaserTrajex_workflowv+0x144>
			flag_LasxTraj = 1;
 8002b64:	4b4d      	ldr	r3, [pc, #308]	; (8002c9c <_Z20LaserTrajex_workflowv+0x154>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
			Finalposition = positionlog[position_order]; // receive in rad
 8002b6a:	4b4e      	ldr	r3, [pc, #312]	; (8002ca4 <_Z20LaserTrajex_workflowv+0x15c>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	4a4e      	ldr	r2, [pc, #312]	; (8002ca8 <_Z20LaserTrajex_workflowv+0x160>)
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a4d      	ldr	r2, [pc, #308]	; (8002cac <_Z20LaserTrajex_workflowv+0x164>)
 8002b78:	6013      	str	r3, [r2, #0]
		}
		break;
 8002b7a:	e087      	b.n	8002c8c <_Z20LaserTrajex_workflowv+0x144>
	case 1: //-------------traject-----
		//====flag_LasxTraj will trig trajex in while;
		//////// raise flag to 2 and flag_efftActi = 1; if reach the target the position

		Unwrapping();
 8002b7c:	f000 fb6c 	bl	8003258 <_Z10Unwrappingv>
		 if(flagNewpos == 0){
 8002b80:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <_Z20LaserTrajex_workflowv+0x168>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d114      	bne.n	8002bb2 <_Z20LaserTrajex_workflowv+0x6a>
			Currentpos = CurrentEn;
 8002b88:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <_Z20LaserTrajex_workflowv+0x16c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a4a      	ldr	r2, [pc, #296]	; (8002cb8 <_Z20LaserTrajex_workflowv+0x170>)
 8002b8e:	6013      	str	r3, [r2, #0]
			//Finalposition = 300*0.006136; // Put goal position here in rad
			Distance = Finalposition - Currentpos;
 8002b90:	4b46      	ldr	r3, [pc, #280]	; (8002cac <_Z20LaserTrajex_workflowv+0x164>)
 8002b92:	ed93 7a00 	vldr	s14, [r3]
 8002b96:	4b48      	ldr	r3, [pc, #288]	; (8002cb8 <_Z20LaserTrajex_workflowv+0x170>)
 8002b98:	edd3 7a00 	vldr	s15, [r3]
 8002b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba0:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <_Z20LaserTrajex_workflowv+0x174>)
 8002ba2:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 8002ba6:	4b42      	ldr	r3, [pc, #264]	; (8002cb0 <_Z20LaserTrajex_workflowv+0x168>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
			check = 0;
 8002bac:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <_Z20LaserTrajex_workflowv+0x178>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
		 }
		Trajectory();
 8002bb2:	f000 f8dd 	bl	8002d70 <_Z10Trajectoryv>
		Kalmanfilter();
 8002bb6:	f000 fc03 	bl	80033c0 <_Z12Kalmanfilterv>
		controlloop();
 8002bba:	f000 fe5d 	bl	8003878 <_Z11controlloopv>

		//HAL_Delay(2500); // Simulate workload
		//flag_finishTra = 1;

		if(flag_finishTra == 1){
 8002bbe:	4b41      	ldr	r3, [pc, #260]	; (8002cc4 <_Z20LaserTrajex_workflowv+0x17c>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d164      	bne.n	8002c90 <_Z20LaserTrajex_workflowv+0x148>
			flag_finishTra = 0;
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <_Z20LaserTrajex_workflowv+0x17c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
			flag_LasxTraj = 2;
 8002bcc:	4b33      	ldr	r3, [pc, #204]	; (8002c9c <_Z20LaserTrajex_workflowv+0x154>)
 8002bce:	2202      	movs	r2, #2
 8002bd0:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 1;
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <_Z20LaserTrajex_workflowv+0x180>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]

			timeout_efft = millis();
 8002bd8:	f001 f904 	bl	8003de4 <_Z6millisv>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2200      	movs	r2, #0
 8002be0:	469a      	mov	sl, r3
 8002be2:	4693      	mov	fp, r2
 8002be4:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <_Z20LaserTrajex_workflowv+0x184>)
 8002be6:	e9c3 ab00 	strd	sl, fp, [r3]
		}
		break;
 8002bea:	e051      	b.n	8002c90 <_Z20LaserTrajex_workflowv+0x148>
	case 2: //---------------Laserwork--------------
		trig_efftRead = 1;
 8002bec:	4b38      	ldr	r3, [pc, #224]	; (8002cd0 <_Z20LaserTrajex_workflowv+0x188>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]

		// if laser finished work or tomeout and not too fast shift state
		//if((efft_status == 0x78 || millis() - timeout_efft >= 6000) && millis() - timeout_efft >= 1500){
		// force encoder to work
		if(efft_status == 0x78 && millis() - timeout_efft >= 5050){
 8002bf2:	4b38      	ldr	r3, [pc, #224]	; (8002cd4 <_Z20LaserTrajex_workflowv+0x18c>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b78      	cmp	r3, #120	; 0x78
 8002bf8:	d114      	bne.n	8002c24 <_Z20LaserTrajex_workflowv+0xdc>
 8002bfa:	f001 f8f3 	bl	8003de4 <_Z6millisv>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2200      	movs	r2, #0
 8002c02:	4698      	mov	r8, r3
 8002c04:	4691      	mov	r9, r2
 8002c06:	4b31      	ldr	r3, [pc, #196]	; (8002ccc <_Z20LaserTrajex_workflowv+0x184>)
 8002c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0c:	ebb8 0402 	subs.w	r4, r8, r2
 8002c10:	eb69 0503 	sbc.w	r5, r9, r3
 8002c14:	f241 33ba 	movw	r3, #5050	; 0x13ba
 8002c18:	429c      	cmp	r4, r3
 8002c1a:	f175 0300 	sbcs.w	r3, r5, #0
 8002c1e:	d301      	bcc.n	8002c24 <_Z20LaserTrajex_workflowv+0xdc>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <_Z20LaserTrajex_workflowv+0xde>
 8002c24:	2300      	movs	r3, #0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d034      	beq.n	8002c94 <_Z20LaserTrajex_workflowv+0x14c>
			efft_status = 0x00;
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <_Z20LaserTrajex_workflowv+0x18c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 0;
 8002c30:	4b27      	ldr	r3, [pc, #156]	; (8002cd0 <_Z20LaserTrajex_workflowv+0x188>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
			position_order++; // go to next obtained position
 8002c36:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <_Z20LaserTrajex_workflowv+0x15c>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <_Z20LaserTrajex_workflowv+0x15c>)
 8002c40:	701a      	strb	r2, [r3, #0]

			if (positionlog[position_order] == -1){
 8002c42:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <_Z20LaserTrajex_workflowv+0x15c>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <_Z20LaserTrajex_workflowv+0x160>)
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002c54:	eef4 7a47 	vcmp.f32	s15, s14
 8002c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5c:	d10a      	bne.n	8002c74 <_Z20LaserTrajex_workflowv+0x12c>
				//Real end, reset all position parameter
				// back to ready
				//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
				fn_Uart();
 8002c5e:	f7fe fe79 	bl	8001954 <_Z7fn_Uartv>
				flag_LasxTraj = 0;
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <_Z20LaserTrajex_workflowv+0x154>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
				ResetParam();
 8002c68:	f000 f836 	bl	8002cd8 <_Z10ResetParamv>
				grandState = Ready;
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <_Z20LaserTrajex_workflowv+0x158>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
			else {
				Finalposition = positionlog[position_order];
				flag_LasxTraj = 1;
			} // continue next pos if have
		}
		break;
 8002c72:	e00f      	b.n	8002c94 <_Z20LaserTrajex_workflowv+0x14c>
				Finalposition = positionlog[position_order];
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <_Z20LaserTrajex_workflowv+0x15c>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <_Z20LaserTrajex_workflowv+0x160>)
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <_Z20LaserTrajex_workflowv+0x164>)
 8002c82:	6013      	str	r3, [r2, #0]
				flag_LasxTraj = 1;
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <_Z20LaserTrajex_workflowv+0x154>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
		break;
 8002c8a:	e003      	b.n	8002c94 <_Z20LaserTrajex_workflowv+0x14c>
		break;
 8002c8c:	bf00      	nop
 8002c8e:	e002      	b.n	8002c96 <_Z20LaserTrajex_workflowv+0x14e>
		break;
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <_Z20LaserTrajex_workflowv+0x14e>
		break;
 8002c94:	bf00      	nop
	}
}
 8002c96:	bf00      	nop
 8002c98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c9c:	20000514 	.word	0x20000514
 8002ca0:	200004fa 	.word	0x200004fa
 8002ca4:	20000515 	.word	0x20000515
 8002ca8:	20000144 	.word	0x20000144
 8002cac:	20000580 	.word	0x20000580
 8002cb0:	200005a8 	.word	0x200005a8
 8002cb4:	200006f0 	.word	0x200006f0
 8002cb8:	200005a4 	.word	0x200005a4
 8002cbc:	20000584 	.word	0x20000584
 8002cc0:	2000073c 	.word	0x2000073c
 8002cc4:	20000504 	.word	0x20000504
 8002cc8:	2000073e 	.word	0x2000073e
 8002ccc:	20000750 	.word	0x20000750
 8002cd0:	20000740 	.word	0x20000740
 8002cd4:	2000073d 	.word	0x2000073d

08002cd8 <_Z10ResetParamv>:

void ResetParam(){
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
	// Reset every variables at control
	// reset position buffer
	PWMOut = 0;
 8002cde:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <_Z10ResetParamv+0x6c>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	607b      	str	r3, [r7, #4]
 8002ce8:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <_Z10ResetParamv+0x70>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	dc09      	bgt.n	8002d08 <_Z10ResetParamv+0x30>
			positionlog[i] = -1.0;
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <_Z10ResetParamv+0x74>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <_Z10ResetParamv+0x78>)
 8002cfe:	601a      	str	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3301      	adds	r3, #1
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	e7ef      	b.n	8002ce8 <_Z10ResetParamv+0x10>
		}
	position_order = 0;
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <_Z10ResetParamv+0x70>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
	flag_LasxTraj = 0;
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <_Z10ResetParamv+0x7c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
	trig_efftRead = 0;
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <_Z10ResetParamv+0x80>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
	bluecounter = 0;
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <_Z10ResetParamv+0x84>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
	Distance = 0;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <_Z10ResetParamv+0x88>)
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
	Currentpos = 0;
 8002d28:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <_Z10ResetParamv+0x8c>)
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
	efft_status = 0x00;
 8002d30:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <_Z10ResetParamv+0x90>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
	IOExpenderInit();
 8002d36:	f000 febb 	bl	8003ab0 <_Z14IOExpenderInitv>
	//Integral = 0;
	//u_contr = 0;
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000574 	.word	0x20000574
 8002d48:	20000515 	.word	0x20000515
 8002d4c:	20000144 	.word	0x20000144
 8002d50:	bf800000 	.word	0xbf800000
 8002d54:	20000514 	.word	0x20000514
 8002d58:	20000740 	.word	0x20000740
 8002d5c:	200006fc 	.word	0x200006fc
 8002d60:	20000584 	.word	0x20000584
 8002d64:	200005a4 	.word	0x200005a4
 8002d68:	2000073d 	.word	0x2000073d
 8002d6c:	00000000 	.word	0x00000000

08002d70 <_Z10Trajectoryv>:

//////////////////// [Trajectory Path] //////////////////////
void Trajectory(){
 8002d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d74:	ed2d 8b04 	vpush	{d8-d9}
 8002d78:	af00      	add	r7, sp, #0

	if(micros() - TimeStampTraject >= 10000){
 8002d7a:	f001 f819 	bl	8003db0 <_Z6microsv>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4920      	ldr	r1, [pc, #128]	; (8002e04 <_Z10Trajectoryv+0x94>)
 8002d84:	6809      	ldr	r1, [r1, #0]
 8002d86:	2000      	movs	r0, #0
 8002d88:	4688      	mov	r8, r1
 8002d8a:	4681      	mov	r9, r0
 8002d8c:	ebb2 0408 	subs.w	r4, r2, r8
 8002d90:	eb63 0509 	sbc.w	r5, r3, r9
 8002d94:	f242 7310 	movw	r3, #10000	; 0x2710
 8002d98:	429c      	cmp	r4, r3
 8002d9a:	f175 0300 	sbcs.w	r3, r5, #0
 8002d9e:	bf2c      	ite	cs
 8002da0:	2301      	movcs	r3, #1
 8002da2:	2300      	movcc	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8246 	beq.w	8003238 <_Z10Trajectoryv+0x4c8>
		TimeStampTraject = micros();
 8002dac:	f001 f800 	bl	8003db0 <_Z6microsv>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <_Z10Trajectoryv+0x94>)
 8002db6:	601a      	str	r2, [r3, #0]

		Acceleration = 0.5;
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <_Z10Trajectoryv+0x98>)
 8002dba:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002dbe:	601a      	str	r2, [r3, #0]


		if (Distance/Velocity > Velocity/Acceleration){
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <_Z10Trajectoryv+0x9c>)
 8002dc2:	edd3 6a00 	vldr	s13, [r3]
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <_Z10Trajectoryv+0xa0>)
 8002dc8:	edd3 7a00 	vldr	s15, [r3]
 8002dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <_Z10Trajectoryv+0xa0>)
 8002dd2:	ed93 6a00 	vldr	s12, [r3]
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <_Z10Trajectoryv+0x98>)
 8002dd8:	edd3 6a00 	vldr	s13, [r3]
 8002ddc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002de0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de8:	dd16      	ble.n	8002e18 <_Z10Trajectoryv+0xa8>
			Tb = Velocity/Acceleration;
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <_Z10Trajectoryv+0xa0>)
 8002dec:	edd3 6a00 	vldr	s13, [r3]
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <_Z10Trajectoryv+0x98>)
 8002df2:	ed93 7a00 	vldr	s14, [r3]
 8002df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <_Z10Trajectoryv+0xa4>)
 8002dfc:	edc3 7a00 	vstr	s15, [r3]
 8002e00:	e034      	b.n	8002e6c <_Z10Trajectoryv+0xfc>
 8002e02:	bf00      	nop
 8002e04:	200005ac 	.word	0x200005ac
 8002e08:	2000058c 	.word	0x2000058c
 8002e0c:	20000584 	.word	0x20000584
 8002e10:	20000588 	.word	0x20000588
 8002e14:	20000598 	.word	0x20000598
		}
		else {
			Tb = sqrt(2*abs(Distance));
 8002e18:	4be1      	ldr	r3, [pc, #900]	; (80031a0 <_Z10Trajectoryv+0x430>)
 8002e1a:	edd3 7a00 	vldr	s15, [r3]
 8002e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e22:	f7fe f86b 	bl	8000efc <_ZSt3absf>
 8002e26:	eef0 7a40 	vmov.f32	s15, s0
 8002e2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e32:	f7fe f873 	bl	8000f1c <_ZSt4sqrtf>
 8002e36:	eef0 7a40 	vmov.f32	s15, s0
 8002e3a:	4bda      	ldr	r3, [pc, #872]	; (80031a4 <_Z10Trajectoryv+0x434>)
 8002e3c:	edc3 7a00 	vstr	s15, [r3]
			Velocity = sqrt(abs(Distance)/2);
 8002e40:	4bd7      	ldr	r3, [pc, #860]	; (80031a0 <_Z10Trajectoryv+0x430>)
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	eeb0 0a67 	vmov.f32	s0, s15
 8002e4a:	f7fe f857 	bl	8000efc <_ZSt3absf>
 8002e4e:	eeb0 7a40 	vmov.f32	s14, s0
 8002e52:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5e:	f7fe f85d 	bl	8000f1c <_ZSt4sqrtf>
 8002e62:	eef0 7a40 	vmov.f32	s15, s0
 8002e66:	4bd0      	ldr	r3, [pc, #832]	; (80031a8 <_Z10Trajectoryv+0x438>)
 8002e68:	edc3 7a00 	vstr	s15, [r3]
		}
		//TimeinS = _micros/10^6;
		timeFinal = (4*abs(Velocity)) + ((abs(Distance)-(2*abs(Velocity)*abs(Velocity)))/abs(Velocity));
 8002e6c:	4bce      	ldr	r3, [pc, #824]	; (80031a8 <_Z10Trajectoryv+0x438>)
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	eeb0 0a67 	vmov.f32	s0, s15
 8002e76:	f7fe f841 	bl	8000efc <_ZSt3absf>
 8002e7a:	eef0 7a40 	vmov.f32	s15, s0
 8002e7e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002e82:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002e86:	4bc6      	ldr	r3, [pc, #792]	; (80031a0 <_Z10Trajectoryv+0x430>)
 8002e88:	edd3 7a00 	vldr	s15, [r3]
 8002e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e90:	f7fe f834 	bl	8000efc <_ZSt3absf>
 8002e94:	eeb0 9a40 	vmov.f32	s18, s0
 8002e98:	4bc3      	ldr	r3, [pc, #780]	; (80031a8 <_Z10Trajectoryv+0x438>)
 8002e9a:	edd3 7a00 	vldr	s15, [r3]
 8002e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea2:	f7fe f82b 	bl	8000efc <_ZSt3absf>
 8002ea6:	eef0 7a40 	vmov.f32	s15, s0
 8002eaa:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8002eae:	4bbe      	ldr	r3, [pc, #760]	; (80031a8 <_Z10Trajectoryv+0x438>)
 8002eb0:	edd3 7a00 	vldr	s15, [r3]
 8002eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb8:	f7fe f820 	bl	8000efc <_ZSt3absf>
 8002ebc:	eef0 7a40 	vmov.f32	s15, s0
 8002ec0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002ec4:	ee79 8a67 	vsub.f32	s17, s18, s15
 8002ec8:	4bb7      	ldr	r3, [pc, #732]	; (80031a8 <_Z10Trajectoryv+0x438>)
 8002eca:	edd3 7a00 	vldr	s15, [r3]
 8002ece:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed2:	f7fe f813 	bl	8000efc <_ZSt3absf>
 8002ed6:	eeb0 7a40 	vmov.f32	s14, s0
 8002eda:	eec8 7a87 	vdiv.f32	s15, s17, s14
 8002ede:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002ee2:	4bb2      	ldr	r3, [pc, #712]	; (80031ac <_Z10Trajectoryv+0x43c>)
 8002ee4:	edc3 7a00 	vstr	s15, [r3]

		a0 = Currentpos;
 8002ee8:	4bb1      	ldr	r3, [pc, #708]	; (80031b0 <_Z10Trajectoryv+0x440>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4ab1      	ldr	r2, [pc, #708]	; (80031b4 <_Z10Trajectoryv+0x444>)
 8002eee:	6013      	str	r3, [r2, #0]
		a3 = (1/(2*pow(timeFinal,3)))*(20*Distance);
 8002ef0:	4bae      	ldr	r3, [pc, #696]	; (80031ac <_Z10Trajectoryv+0x43c>)
 8002ef2:	edd3 7a00 	vldr	s15, [r3]
 8002ef6:	2003      	movs	r0, #3
 8002ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8002efc:	f001 fa1e 	bl	800433c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002f00:	ec51 0b10 	vmov	r0, r1, d0
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	f7fd f9c0 	bl	800028c <__adddf3>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	f04f 0000 	mov.w	r0, #0
 8002f14:	49a8      	ldr	r1, [pc, #672]	; (80031b8 <_Z10Trajectoryv+0x448>)
 8002f16:	f7fd fc99 	bl	800084c <__aeabi_ddiv>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4614      	mov	r4, r2
 8002f20:	461d      	mov	r5, r3
 8002f22:	4b9f      	ldr	r3, [pc, #636]	; (80031a0 <_Z10Trajectoryv+0x430>)
 8002f24:	edd3 7a00 	vldr	s15, [r3]
 8002f28:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f30:	ee17 0a90 	vmov	r0, s15
 8002f34:	f7fd fb08 	bl	8000548 <__aeabi_f2d>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	4629      	mov	r1, r5
 8002f40:	f7fd fb5a 	bl	80005f8 <__aeabi_dmul>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f7fd fe04 	bl	8000b58 <__aeabi_d2f>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4a9a      	ldr	r2, [pc, #616]	; (80031bc <_Z10Trajectoryv+0x44c>)
 8002f54:	6013      	str	r3, [r2, #0]
		a4 = (1/(2*pow(timeFinal,4)))*(30*(Currentpos-Finalposition));
 8002f56:	4b95      	ldr	r3, [pc, #596]	; (80031ac <_Z10Trajectoryv+0x43c>)
 8002f58:	edd3 7a00 	vldr	s15, [r3]
 8002f5c:	2004      	movs	r0, #4
 8002f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f62:	f001 f9eb 	bl	800433c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002f66:	ec51 0b10 	vmov	r0, r1, d0
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	f7fd f98d 	bl	800028c <__adddf3>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	f04f 0000 	mov.w	r0, #0
 8002f7a:	498f      	ldr	r1, [pc, #572]	; (80031b8 <_Z10Trajectoryv+0x448>)
 8002f7c:	f7fd fc66 	bl	800084c <__aeabi_ddiv>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4614      	mov	r4, r2
 8002f86:	461d      	mov	r5, r3
 8002f88:	4b89      	ldr	r3, [pc, #548]	; (80031b0 <_Z10Trajectoryv+0x440>)
 8002f8a:	ed93 7a00 	vldr	s14, [r3]
 8002f8e:	4b8c      	ldr	r3, [pc, #560]	; (80031c0 <_Z10Trajectoryv+0x450>)
 8002f90:	edd3 7a00 	vldr	s15, [r3]
 8002f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f98:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fa0:	ee17 0a90 	vmov	r0, s15
 8002fa4:	f7fd fad0 	bl	8000548 <__aeabi_f2d>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4620      	mov	r0, r4
 8002fae:	4629      	mov	r1, r5
 8002fb0:	f7fd fb22 	bl	80005f8 <__aeabi_dmul>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f7fd fdcc 	bl	8000b58 <__aeabi_d2f>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4a80      	ldr	r2, [pc, #512]	; (80031c4 <_Z10Trajectoryv+0x454>)
 8002fc4:	6013      	str	r3, [r2, #0]
		a5 = (1/(2*pow(timeFinal,5)))*(12*Distance);
 8002fc6:	4b79      	ldr	r3, [pc, #484]	; (80031ac <_Z10Trajectoryv+0x43c>)
 8002fc8:	edd3 7a00 	vldr	s15, [r3]
 8002fcc:	2005      	movs	r0, #5
 8002fce:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd2:	f001 f9b3 	bl	800433c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002fd6:	ec51 0b10 	vmov	r0, r1, d0
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	f7fd f955 	bl	800028c <__adddf3>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	f04f 0000 	mov.w	r0, #0
 8002fea:	4973      	ldr	r1, [pc, #460]	; (80031b8 <_Z10Trajectoryv+0x448>)
 8002fec:	f7fd fc2e 	bl	800084c <__aeabi_ddiv>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4614      	mov	r4, r2
 8002ff6:	461d      	mov	r5, r3
 8002ff8:	4b69      	ldr	r3, [pc, #420]	; (80031a0 <_Z10Trajectoryv+0x430>)
 8002ffa:	edd3 7a00 	vldr	s15, [r3]
 8002ffe:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003006:	ee17 0a90 	vmov	r0, s15
 800300a:	f7fd fa9d 	bl	8000548 <__aeabi_f2d>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4620      	mov	r0, r4
 8003014:	4629      	mov	r1, r5
 8003016:	f7fd faef 	bl	80005f8 <__aeabi_dmul>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	f7fd fd99 	bl	8000b58 <__aeabi_d2f>
 8003026:	4603      	mov	r3, r0
 8003028:	4a67      	ldr	r2, [pc, #412]	; (80031c8 <_Z10Trajectoryv+0x458>)
 800302a:	6013      	str	r3, [r2, #0]

		OutPosition = a0+(a3*pow(TimeinS,3))+(a4*pow(TimeinS,4))+(a5*pow(TimeinS,5));
 800302c:	4b61      	ldr	r3, [pc, #388]	; (80031b4 <_Z10Trajectoryv+0x444>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd fa89 	bl	8000548 <__aeabi_f2d>
 8003036:	4604      	mov	r4, r0
 8003038:	460d      	mov	r5, r1
 800303a:	4b60      	ldr	r3, [pc, #384]	; (80031bc <_Z10Trajectoryv+0x44c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fa82 	bl	8000548 <__aeabi_f2d>
 8003044:	4680      	mov	r8, r0
 8003046:	4689      	mov	r9, r1
 8003048:	4b60      	ldr	r3, [pc, #384]	; (80031cc <_Z10Trajectoryv+0x45c>)
 800304a:	edd3 7a00 	vldr	s15, [r3]
 800304e:	2003      	movs	r0, #3
 8003050:	eeb0 0a67 	vmov.f32	s0, s15
 8003054:	f001 f972 	bl	800433c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003058:	ec53 2b10 	vmov	r2, r3, d0
 800305c:	4640      	mov	r0, r8
 800305e:	4649      	mov	r1, r9
 8003060:	f7fd faca 	bl	80005f8 <__aeabi_dmul>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4620      	mov	r0, r4
 800306a:	4629      	mov	r1, r5
 800306c:	f7fd f90e 	bl	800028c <__adddf3>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4690      	mov	r8, r2
 8003076:	4699      	mov	r9, r3
 8003078:	4b52      	ldr	r3, [pc, #328]	; (80031c4 <_Z10Trajectoryv+0x454>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fa63 	bl	8000548 <__aeabi_f2d>
 8003082:	4604      	mov	r4, r0
 8003084:	460d      	mov	r5, r1
 8003086:	4b51      	ldr	r3, [pc, #324]	; (80031cc <_Z10Trajectoryv+0x45c>)
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	2004      	movs	r0, #4
 800308e:	eeb0 0a67 	vmov.f32	s0, s15
 8003092:	f001 f953 	bl	800433c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003096:	ec53 2b10 	vmov	r2, r3, d0
 800309a:	4620      	mov	r0, r4
 800309c:	4629      	mov	r1, r5
 800309e:	f7fd faab 	bl	80005f8 <__aeabi_dmul>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4640      	mov	r0, r8
 80030a8:	4649      	mov	r1, r9
 80030aa:	f7fd f8ef 	bl	800028c <__adddf3>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4690      	mov	r8, r2
 80030b4:	4699      	mov	r9, r3
 80030b6:	4b44      	ldr	r3, [pc, #272]	; (80031c8 <_Z10Trajectoryv+0x458>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fa44 	bl	8000548 <__aeabi_f2d>
 80030c0:	4604      	mov	r4, r0
 80030c2:	460d      	mov	r5, r1
 80030c4:	4b41      	ldr	r3, [pc, #260]	; (80031cc <_Z10Trajectoryv+0x45c>)
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	2005      	movs	r0, #5
 80030cc:	eeb0 0a67 	vmov.f32	s0, s15
 80030d0:	f001 f934 	bl	800433c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80030d4:	ec53 2b10 	vmov	r2, r3, d0
 80030d8:	4620      	mov	r0, r4
 80030da:	4629      	mov	r1, r5
 80030dc:	f7fd fa8c 	bl	80005f8 <__aeabi_dmul>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4640      	mov	r0, r8
 80030e6:	4649      	mov	r1, r9
 80030e8:	f7fd f8d0 	bl	800028c <__adddf3>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4610      	mov	r0, r2
 80030f2:	4619      	mov	r1, r3
 80030f4:	f7fd fd30 	bl	8000b58 <__aeabi_d2f>
 80030f8:	4603      	mov	r3, r0
 80030fa:	4a35      	ldr	r2, [pc, #212]	; (80031d0 <_Z10Trajectoryv+0x460>)
 80030fc:	6013      	str	r3, [r2, #0]
		OutVelocity = (3*a3*pow(TimeinS,2))+(4*a4*pow(TimeinS,3))+(5*a5*pow(TimeinS,4));
 80030fe:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <_Z10Trajectoryv+0x44c>)
 8003100:	edd3 7a00 	vldr	s15, [r3]
 8003104:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003108:	ee67 7a87 	vmul.f32	s15, s15, s14
 800310c:	ee17 0a90 	vmov	r0, s15
 8003110:	f7fd fa1a 	bl	8000548 <__aeabi_f2d>
 8003114:	4604      	mov	r4, r0
 8003116:	460d      	mov	r5, r1
 8003118:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <_Z10Trajectoryv+0x45c>)
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	2002      	movs	r0, #2
 8003120:	eeb0 0a67 	vmov.f32	s0, s15
 8003124:	f001 f90a 	bl	800433c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003128:	ec53 2b10 	vmov	r2, r3, d0
 800312c:	4620      	mov	r0, r4
 800312e:	4629      	mov	r1, r5
 8003130:	f7fd fa62 	bl	80005f8 <__aeabi_dmul>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4690      	mov	r8, r2
 800313a:	4699      	mov	r9, r3
 800313c:	4b21      	ldr	r3, [pc, #132]	; (80031c4 <_Z10Trajectoryv+0x454>)
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800314a:	ee17 0a90 	vmov	r0, s15
 800314e:	f7fd f9fb 	bl	8000548 <__aeabi_f2d>
 8003152:	4604      	mov	r4, r0
 8003154:	460d      	mov	r5, r1
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <_Z10Trajectoryv+0x45c>)
 8003158:	edd3 7a00 	vldr	s15, [r3]
 800315c:	2003      	movs	r0, #3
 800315e:	eeb0 0a67 	vmov.f32	s0, s15
 8003162:	f001 f8eb 	bl	800433c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003166:	ec53 2b10 	vmov	r2, r3, d0
 800316a:	4620      	mov	r0, r4
 800316c:	4629      	mov	r1, r5
 800316e:	f7fd fa43 	bl	80005f8 <__aeabi_dmul>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4640      	mov	r0, r8
 8003178:	4649      	mov	r1, r9
 800317a:	f7fd f887 	bl	800028c <__adddf3>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4690      	mov	r8, r2
 8003184:	4699      	mov	r9, r3
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <_Z10Trajectoryv+0x458>)
 8003188:	edd3 7a00 	vldr	s15, [r3]
 800318c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003194:	ee17 0a90 	vmov	r0, s15
 8003198:	f7fd f9d6 	bl	8000548 <__aeabi_f2d>
 800319c:	e01a      	b.n	80031d4 <_Z10Trajectoryv+0x464>
 800319e:	bf00      	nop
 80031a0:	20000584 	.word	0x20000584
 80031a4:	20000598 	.word	0x20000598
 80031a8:	20000588 	.word	0x20000588
 80031ac:	2000059c 	.word	0x2000059c
 80031b0:	200005a4 	.word	0x200005a4
 80031b4:	200005b0 	.word	0x200005b0
 80031b8:	3ff00000 	.word	0x3ff00000
 80031bc:	200005b4 	.word	0x200005b4
 80031c0:	20000580 	.word	0x20000580
 80031c4:	200005b8 	.word	0x200005b8
 80031c8:	200005bc 	.word	0x200005bc
 80031cc:	200005a0 	.word	0x200005a0
 80031d0:	20000590 	.word	0x20000590
 80031d4:	4604      	mov	r4, r0
 80031d6:	460d      	mov	r5, r1
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <_Z10Trajectoryv+0x4e0>)
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	2004      	movs	r0, #4
 80031e0:	eeb0 0a67 	vmov.f32	s0, s15
 80031e4:	f001 f8aa 	bl	800433c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80031e8:	ec53 2b10 	vmov	r2, r3, d0
 80031ec:	4620      	mov	r0, r4
 80031ee:	4629      	mov	r1, r5
 80031f0:	f7fd fa02 	bl	80005f8 <__aeabi_dmul>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4640      	mov	r0, r8
 80031fa:	4649      	mov	r1, r9
 80031fc:	f7fd f846 	bl	800028c <__adddf3>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4610      	mov	r0, r2
 8003206:	4619      	mov	r1, r3
 8003208:	f7fd fca6 	bl	8000b58 <__aeabi_d2f>
 800320c:	4603      	mov	r3, r0
 800320e:	4a11      	ldr	r2, [pc, #68]	; (8003254 <_Z10Trajectoryv+0x4e4>)
 8003210:	6013      	str	r3, [r2, #0]
//		    //Acceleration= -0.5;   // recieve frol UART (negative)
//		    check = 100;
//		}


		TimeinS = TimeinS + Dt;
 8003212:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <_Z10Trajectoryv+0x4e0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f996 	bl	8000548 <__aeabi_f2d>
 800321c:	a30a      	add	r3, pc, #40	; (adr r3, 8003248 <_Z10Trajectoryv+0x4d8>)
 800321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003222:	f7fd f833 	bl	800028c <__adddf3>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	f7fd fc93 	bl	8000b58 <__aeabi_d2f>
 8003232:	4603      	mov	r3, r0
 8003234:	4a06      	ldr	r2, [pc, #24]	; (8003250 <_Z10Trajectoryv+0x4e0>)
 8003236:	6013      	str	r3, [r2, #0]

		//OutVelocity = 0.523598775 ;
		}
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	ecbd 8b04 	vpop	{d8-d9}
 8003240:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003244:	f3af 8000 	nop.w
 8003248:	47ae147b 	.word	0x47ae147b
 800324c:	3f847ae1 	.word	0x3f847ae1
 8003250:	200005a0 	.word	0x200005a0
 8003254:	20000594 	.word	0x20000594

08003258 <_Z10Unwrappingv>:

//////////////////////// [Unwrapping] ///////////////////////
void Unwrapping(){
 8003258:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800325c:	af00      	add	r7, sp, #0

	if(micros() - TimeUnwrap >= 10000){
 800325e:	f000 fda7 	bl	8003db0 <_Z6microsv>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	494c      	ldr	r1, [pc, #304]	; (8003398 <_Z10Unwrappingv+0x140>)
 8003268:	6809      	ldr	r1, [r1, #0]
 800326a:	2000      	movs	r0, #0
 800326c:	4688      	mov	r8, r1
 800326e:	4681      	mov	r9, r0
 8003270:	ebb2 0408 	subs.w	r4, r2, r8
 8003274:	eb63 0509 	sbc.w	r5, r3, r9
 8003278:	f242 7310 	movw	r3, #10000	; 0x2710
 800327c:	429c      	cmp	r4, r3
 800327e:	f175 0300 	sbcs.w	r3, r5, #0
 8003282:	bf2c      	ite	cs
 8003284:	2301      	movcs	r3, #1
 8003286:	2300      	movcc	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d07c      	beq.n	8003388 <_Z10Unwrappingv+0x130>
		TimeUnwrap = micros();
 800328e:	f000 fd8f 	bl	8003db0 <_Z6microsv>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4b40      	ldr	r3, [pc, #256]	; (8003398 <_Z10Unwrappingv+0x140>)
 8003298:	601a      	str	r2, [r3, #0]
		Pn = BinPosXI * 0.006136;
 800329a:	4b40      	ldr	r3, [pc, #256]	; (800339c <_Z10Unwrappingv+0x144>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd f940 	bl	8000524 <__aeabi_i2d>
 80032a4:	a33a      	add	r3, pc, #232	; (adr r3, 8003390 <_Z10Unwrappingv+0x138>)
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f7fd f9a5 	bl	80005f8 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4610      	mov	r0, r2
 80032b4:	4619      	mov	r1, r3
 80032b6:	f7fd fc4f 	bl	8000b58 <__aeabi_d2f>
 80032ba:	4603      	mov	r3, r0
 80032bc:	4a38      	ldr	r2, [pc, #224]	; (80033a0 <_Z10Unwrappingv+0x148>)
 80032be:	6013      	str	r3, [r2, #0]
		if(Pn-P_n <= -1*e){
 80032c0:	4b37      	ldr	r3, [pc, #220]	; (80033a0 <_Z10Unwrappingv+0x148>)
 80032c2:	ed93 7a00 	vldr	s14, [r3]
 80032c6:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <_Z10Unwrappingv+0x14c>)
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032d0:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <_Z10Unwrappingv+0x150>)
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	eef1 7a67 	vneg.f32	s15, s15
 80032da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e2:	d80b      	bhi.n	80032fc <_Z10Unwrappingv+0xa4>
			P0 = P_0 + P_max;
 80032e4:	4b31      	ldr	r3, [pc, #196]	; (80033ac <_Z10Unwrappingv+0x154>)
 80032e6:	ed93 7a00 	vldr	s14, [r3]
 80032ea:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <_Z10Unwrappingv+0x158>)
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f4:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <_Z10Unwrappingv+0x15c>)
 80032f6:	edc3 7a00 	vstr	s15, [r3]
 80032fa:	e01f      	b.n	800333c <_Z10Unwrappingv+0xe4>
		}
		else if(Pn - P_n >= e){
 80032fc:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <_Z10Unwrappingv+0x148>)
 80032fe:	ed93 7a00 	vldr	s14, [r3]
 8003302:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <_Z10Unwrappingv+0x14c>)
 8003304:	edd3 7a00 	vldr	s15, [r3]
 8003308:	ee37 7a67 	vsub.f32	s14, s14, s15
 800330c:	4b26      	ldr	r3, [pc, #152]	; (80033a8 <_Z10Unwrappingv+0x150>)
 800330e:	edd3 7a00 	vldr	s15, [r3]
 8003312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331a:	db0b      	blt.n	8003334 <_Z10Unwrappingv+0xdc>
			P0 = P_0 - P_max;
 800331c:	4b23      	ldr	r3, [pc, #140]	; (80033ac <_Z10Unwrappingv+0x154>)
 800331e:	ed93 7a00 	vldr	s14, [r3]
 8003322:	4b23      	ldr	r3, [pc, #140]	; (80033b0 <_Z10Unwrappingv+0x158>)
 8003324:	edd3 7a00 	vldr	s15, [r3]
 8003328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800332c:	4b21      	ldr	r3, [pc, #132]	; (80033b4 <_Z10Unwrappingv+0x15c>)
 800332e:	edc3 7a00 	vstr	s15, [r3]
 8003332:	e003      	b.n	800333c <_Z10Unwrappingv+0xe4>
		}
		else{
			P0 = P_0;
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <_Z10Unwrappingv+0x154>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <_Z10Unwrappingv+0x15c>)
 800333a:	6013      	str	r3, [r2, #0]
		}

		OutUnwrap = Pn + P0;
 800333c:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <_Z10Unwrappingv+0x148>)
 800333e:	ed93 7a00 	vldr	s14, [r3]
 8003342:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <_Z10Unwrappingv+0x15c>)
 8003344:	edd3 7a00 	vldr	s15, [r3]
 8003348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <_Z10Unwrappingv+0x160>)
 800334e:	edc3 7a00 	vstr	s15, [r3]
		CurrentEn = BinPosXI * 0.006136;
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <_Z10Unwrappingv+0x144>)
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd f8e4 	bl	8000524 <__aeabi_i2d>
 800335c:	a30c      	add	r3, pc, #48	; (adr r3, 8003390 <_Z10Unwrappingv+0x138>)
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f7fd f949 	bl	80005f8 <__aeabi_dmul>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4610      	mov	r0, r2
 800336c:	4619      	mov	r1, r3
 800336e:	f7fd fbf3 	bl	8000b58 <__aeabi_d2f>
 8003372:	4603      	mov	r3, r0
 8003374:	4a11      	ldr	r2, [pc, #68]	; (80033bc <_Z10Unwrappingv+0x164>)
 8003376:	6013      	str	r3, [r2, #0]
		P_n = Pn;
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <_Z10Unwrappingv+0x148>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <_Z10Unwrappingv+0x14c>)
 800337e:	6013      	str	r3, [r2, #0]
		P_0 = P0;
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <_Z10Unwrappingv+0x15c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a09      	ldr	r2, [pc, #36]	; (80033ac <_Z10Unwrappingv+0x154>)
 8003386:	6013      	str	r3, [r2, #0]
	}
}
 8003388:	bf00      	nop
 800338a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800338e:	bf00      	nop
 8003390:	f540895d 	.word	0xf540895d
 8003394:	3f79220f 	.word	0x3f79220f
 8003398:	200006f4 	.word	0x200006f4
 800339c:	20000570 	.word	0x20000570
 80033a0:	200006e4 	.word	0x200006e4
 80033a4:	200006e8 	.word	0x200006e8
 80033a8:	2000019c 	.word	0x2000019c
 80033ac:	200006e0 	.word	0x200006e0
 80033b0:	20000198 	.word	0x20000198
 80033b4:	200006dc 	.word	0x200006dc
 80033b8:	200006ec 	.word	0x200006ec
 80033bc:	200006f0 	.word	0x200006f0

080033c0 <_Z12Kalmanfilterv>:
	}
}


/////////////////////////// [Kalman Filter] ///////////////////////
void Kalmanfilter(){
 80033c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033c4:	b0d2      	sub	sp, #328	; 0x148
 80033c6:	af00      	add	r7, sp, #0

	if(micros() - TimeStampKalman >= 10000){
 80033c8:	f000 fcf2 	bl	8003db0 <_Z6microsv>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4992      	ldr	r1, [pc, #584]	; (800361c <_Z12Kalmanfilterv+0x25c>)
 80033d2:	6809      	ldr	r1, [r1, #0]
 80033d4:	2000      	movs	r0, #0
 80033d6:	4688      	mov	r8, r1
 80033d8:	4681      	mov	r9, r0
 80033da:	ebb2 0408 	subs.w	r4, r2, r8
 80033de:	eb63 0509 	sbc.w	r5, r3, r9
 80033e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80033e6:	429c      	cmp	r4, r3
 80033e8:	f175 0300 	sbcs.w	r3, r5, #0
 80033ec:	bf2c      	ite	cs
 80033ee:	2301      	movcs	r3, #1
 80033f0:	2300      	movcc	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 810a 	beq.w	800360e <_Z12Kalmanfilterv+0x24e>
		 TimeStampKalman = micros();
 80033fa:	f000 fcd9 	bl	8003db0 <_Z6microsv>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4b86      	ldr	r3, [pc, #536]	; (800361c <_Z12Kalmanfilterv+0x25c>)
 8003404:	601a      	str	r2, [r3, #0]
	//if(millis() - TimeStampKalman >= 10){
	//	TimeStampKalman = millis();
		 ////////// Predict ////////////////////
		 Q = G*Q1*G.transpose();
 8003406:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800340a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800340e:	4a84      	ldr	r2, [pc, #528]	; (8003620 <_Z12Kalmanfilterv+0x260>)
 8003410:	4984      	ldr	r1, [pc, #528]	; (8003624 <_Z12Kalmanfilterv+0x264>)
 8003412:	4618      	mov	r0, r3
 8003414:	f000 ffc5 	bl	80043a2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>
 8003418:	4882      	ldr	r0, [pc, #520]	; (8003624 <_Z12Kalmanfilterv+0x264>)
 800341a:	f000 fffb 	bl	8004414 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>
 800341e:	4602      	mov	r2, r0
 8003420:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003424:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800342e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003432:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003436:	f107 0114 	add.w	r1, r7, #20
 800343a:	4618      	mov	r0, r3
 800343c:	f001 f81c 	bl	8004478 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>
 8003440:	463b      	mov	r3, r7
 8003442:	4619      	mov	r1, r3
 8003444:	4878      	ldr	r0, [pc, #480]	; (8003628 <_Z12Kalmanfilterv+0x268>)
 8003446:	f001 f82e 	bl	80044a6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X = A*X1 ;
 800344a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800344e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003452:	4a76      	ldr	r2, [pc, #472]	; (800362c <_Z12Kalmanfilterv+0x26c>)
 8003454:	4976      	ldr	r1, [pc, #472]	; (8003630 <_Z12Kalmanfilterv+0x270>)
 8003456:	4618      	mov	r0, r3
 8003458:	f001 f834 	bl	80044c4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 800345c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003460:	4619      	mov	r1, r3
 8003462:	4874      	ldr	r0, [pc, #464]	; (8003634 <_Z12Kalmanfilterv+0x274>)
 8003464:	f001 f845 	bl	80044f2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 P = A*O*A.transpose()+Q;
 8003468:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800346c:	4a72      	ldr	r2, [pc, #456]	; (8003638 <_Z12Kalmanfilterv+0x278>)
 800346e:	4970      	ldr	r1, [pc, #448]	; (8003630 <_Z12Kalmanfilterv+0x270>)
 8003470:	4618      	mov	r0, r3
 8003472:	f001 f84d 	bl	8004510 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>
 8003476:	486e      	ldr	r0, [pc, #440]	; (8003630 <_Z12Kalmanfilterv+0x270>)
 8003478:	f001 f861 	bl	800453e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>
 800347c:	4603      	mov	r3, r0
 800347e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003480:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003488:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800348c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003490:	4618      	mov	r0, r3
 8003492:	f001 f867 	bl	8004564 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>
 8003496:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800349a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800349e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80034a2:	4a61      	ldr	r2, [pc, #388]	; (8003628 <_Z12Kalmanfilterv+0x268>)
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 f874 	bl	8004592 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>
 80034aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034ae:	4619      	mov	r1, r3
 80034b0:	4862      	ldr	r0, [pc, #392]	; (800363c <_Z12Kalmanfilterv+0x27c>)
 80034b2:	f001 f88c 	bl	80045ce <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>

		 //////////////// Update /////////////////////
	     Z << OutUnwrap ;
 80034b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80034ba:	4a61      	ldr	r2, [pc, #388]	; (8003640 <_Z12Kalmanfilterv+0x280>)
 80034bc:	4961      	ldr	r1, [pc, #388]	; (8003644 <_Z12Kalmanfilterv+0x284>)
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fe64 	bl	800418c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 80034c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fe6e 	bl	80041aa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
	//     Z << DiffVelo ;
		 K = (P*C.transpose())*(C*P*C.transpose()+R).inverse();
 80034ce:	485e      	ldr	r0, [pc, #376]	; (8003648 <_Z12Kalmanfilterv+0x288>)
 80034d0:	f001 f88c 	bl	80045ec <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034da:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80034de:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80034e2:	4956      	ldr	r1, [pc, #344]	; (800363c <_Z12Kalmanfilterv+0x27c>)
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 f894 	bl	8004612 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>
 80034ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80034ee:	4a53      	ldr	r2, [pc, #332]	; (800363c <_Z12Kalmanfilterv+0x27c>)
 80034f0:	4955      	ldr	r1, [pc, #340]	; (8003648 <_Z12Kalmanfilterv+0x288>)
 80034f2:	4618      	mov	r0, r3
 80034f4:	f001 f8a4 	bl	8004640 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 80034f8:	4853      	ldr	r0, [pc, #332]	; (8003648 <_Z12Kalmanfilterv+0x288>)
 80034fa:	f001 f877 	bl	80045ec <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 80034fe:	4603      	mov	r3, r0
 8003500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003504:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003508:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800350c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003510:	4618      	mov	r0, r3
 8003512:	f001 f8ac 	bl	800466e <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>
 8003516:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800351a:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800351e:	4a4b      	ldr	r2, [pc, #300]	; (800364c <_Z12Kalmanfilterv+0x28c>)
 8003520:	4618      	mov	r0, r3
 8003522:	f001 f8bb 	bl	800469c <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8003526:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800352a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f001 f90d 	bl	8004750 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>
 8003536:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800353a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800353e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8003542:	4618      	mov	r0, r3
 8003544:	f001 f93c 	bl	80047c0 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>
 8003548:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800354c:	4619      	mov	r1, r3
 800354e:	4840      	ldr	r0, [pc, #256]	; (8003650 <_Z12Kalmanfilterv+0x290>)
 8003550:	f001 f94d 	bl	80047ee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X1 = X+K*(Z-C*X);
 8003554:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003558:	4a36      	ldr	r2, [pc, #216]	; (8003634 <_Z12Kalmanfilterv+0x274>)
 800355a:	493b      	ldr	r1, [pc, #236]	; (8003648 <_Z12Kalmanfilterv+0x288>)
 800355c:	4618      	mov	r0, r3
 800355e:	f001 f955 	bl	800480c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003562:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003566:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800356a:	4936      	ldr	r1, [pc, #216]	; (8003644 <_Z12Kalmanfilterv+0x284>)
 800356c:	4618      	mov	r0, r3
 800356e:	f001 f964 	bl	800483a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 8003572:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003576:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800357a:	4935      	ldr	r1, [pc, #212]	; (8003650 <_Z12Kalmanfilterv+0x290>)
 800357c:	4618      	mov	r0, r3
 800357e:	f001 f999 	bl	80048b4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>
 8003582:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003586:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800358a:	492a      	ldr	r1, [pc, #168]	; (8003634 <_Z12Kalmanfilterv+0x274>)
 800358c:	4618      	mov	r0, r3
 800358e:	f001 f9be 	bl	800490e <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>
 8003592:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003596:	4619      	mov	r1, r3
 8003598:	4824      	ldr	r0, [pc, #144]	; (800362c <_Z12Kalmanfilterv+0x26c>)
 800359a:	f001 f9d6 	bl	800494a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>
		 O = (I-(K*C))*P;
 800359e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80035a2:	4a29      	ldr	r2, [pc, #164]	; (8003648 <_Z12Kalmanfilterv+0x288>)
 80035a4:	492a      	ldr	r1, [pc, #168]	; (8003650 <_Z12Kalmanfilterv+0x290>)
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 f9de 	bl	8004968 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 80035ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035b0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80035b4:	4927      	ldr	r1, [pc, #156]	; (8003654 <_Z12Kalmanfilterv+0x294>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f001 f9ed 	bl	8004996 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 80035bc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80035c0:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80035c4:	4a1d      	ldr	r2, [pc, #116]	; (800363c <_Z12Kalmanfilterv+0x27c>)
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 fa22 	bl	8004a10 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>
 80035cc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80035d0:	4619      	mov	r1, r3
 80035d2:	4819      	ldr	r0, [pc, #100]	; (8003638 <_Z12Kalmanfilterv+0x278>)
 80035d4:	f001 fa33 	bl	8004a3e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>

		 KalP = X(0,0);
 80035d8:	2200      	movs	r2, #0
 80035da:	2100      	movs	r1, #0
 80035dc:	4815      	ldr	r0, [pc, #84]	; (8003634 <_Z12Kalmanfilterv+0x274>)
 80035de:	f000 fe7b 	bl	80042d8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80035e2:	4603      	mov	r3, r0
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <_Z12Kalmanfilterv+0x298>)
 80035e8:	6013      	str	r3, [r2, #0]
		 KalV = X(1,0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2101      	movs	r1, #1
 80035ee:	4811      	ldr	r0, [pc, #68]	; (8003634 <_Z12Kalmanfilterv+0x274>)
 80035f0:	f000 fe72 	bl	80042d8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80035f4:	4603      	mov	r3, r0
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a18      	ldr	r2, [pc, #96]	; (800365c <_Z12Kalmanfilterv+0x29c>)
 80035fa:	6013      	str	r3, [r2, #0]
		 KalA = X(2,0);
 80035fc:	2200      	movs	r2, #0
 80035fe:	2102      	movs	r1, #2
 8003600:	480c      	ldr	r0, [pc, #48]	; (8003634 <_Z12Kalmanfilterv+0x274>)
 8003602:	f000 fe69 	bl	80042d8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003606:	4603      	mov	r3, r0
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a15      	ldr	r2, [pc, #84]	; (8003660 <_Z12Kalmanfilterv+0x2a0>)
 800360c:	6013      	str	r3, [r2, #0]
		 //runtime = micros()-TimeStampKalman;

	     //ErrPos[0] = TargetDeg - BinPosXI*0.006136;
	 }

}
 800360e:	bf00      	nop
 8003610:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8003614:	46bd      	mov	sp, r7
 8003616:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800361a:	bf00      	nop
 800361c:	200005c0 	.word	0x200005c0
 8003620:	20000194 	.word	0x20000194
 8003624:	2000067c 	.word	0x2000067c
 8003628:	20000688 	.word	0x20000688
 800362c:	200006b8 	.word	0x200006b8
 8003630:	200005c4 	.word	0x200005c4
 8003634:	200006ac 	.word	0x200006ac
 8003638:	2000060c 	.word	0x2000060c
 800363c:	200005e8 	.word	0x200005e8
 8003640:	200006ec 	.word	0x200006ec
 8003644:	20000660 	.word	0x20000660
 8003648:	20000670 	.word	0x20000670
 800364c:	20000658 	.word	0x20000658
 8003650:	20000664 	.word	0x20000664
 8003654:	20000630 	.word	0x20000630
 8003658:	200006d0 	.word	0x200006d0
 800365c:	200006d4 	.word	0x200006d4
 8003660:	200006d8 	.word	0x200006d8

08003664 <_Z11PIDPositionv>:

///////////////////// [PID cat cat Zero] /////////////////////////////
void PIDPosition(){
 8003664:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003668:	af00      	add	r7, sp, #0
	/*CrrntTime = micros();
	//DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
	PreviTime = CrrntTime; // log previ here for next loop
	*/
	if(micros() - TimeStampPID_P >= 10000){
 800366a:	f000 fba1 	bl	8003db0 <_Z6microsv>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4936      	ldr	r1, [pc, #216]	; (800374c <_Z11PIDPositionv+0xe8>)
 8003674:	6809      	ldr	r1, [r1, #0]
 8003676:	2000      	movs	r0, #0
 8003678:	4688      	mov	r8, r1
 800367a:	4681      	mov	r9, r0
 800367c:	ebb2 0408 	subs.w	r4, r2, r8
 8003680:	eb63 0509 	sbc.w	r5, r3, r9
 8003684:	f242 7310 	movw	r3, #10000	; 0x2710
 8003688:	429c      	cmp	r4, r3
 800368a:	f175 0300 	sbcs.w	r3, r5, #0
 800368e:	bf2c      	ite	cs
 8003690:	2301      	movcs	r3, #1
 8003692:	2300      	movcc	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d055      	beq.n	8003746 <_Z11PIDPositionv+0xe2>
		TimeStampPID_P = micros();
 800369a:	f000 fb89 	bl	8003db0 <_Z6microsv>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4b2a      	ldr	r3, [pc, #168]	; (800374c <_Z11PIDPositionv+0xe8>)
 80036a4:	601a      	str	r2, [r3, #0]

	//if(millis() - TimeStampPID_P >= 10){
	//	TimeStampPID_P = millis();

		ErrPos[0] = OutPosition - KalP;
 80036a6:	4b2a      	ldr	r3, [pc, #168]	; (8003750 <_Z11PIDPositionv+0xec>)
 80036a8:	ed93 7a00 	vldr	s14, [r3]
 80036ac:	4b29      	ldr	r3, [pc, #164]	; (8003754 <_Z11PIDPositionv+0xf0>)
 80036ae:	edd3 7a00 	vldr	s15, [r3]
 80036b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b6:	4b28      	ldr	r3, [pc, #160]	; (8003758 <_Z11PIDPositionv+0xf4>)
 80036b8:	edc3 7a00 	vstr	s15, [r3]
	//	ErrPos[0] = OutVelocity - KalV;
		sumError = sumError + ErrPos[0];
 80036bc:	4b26      	ldr	r3, [pc, #152]	; (8003758 <_Z11PIDPositionv+0xf4>)
 80036be:	ed93 7a00 	vldr	s14, [r3]
 80036c2:	4b26      	ldr	r3, [pc, #152]	; (800375c <_Z11PIDPositionv+0xf8>)
 80036c4:	edd3 7a00 	vldr	s15, [r3]
 80036c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036cc:	4b23      	ldr	r3, [pc, #140]	; (800375c <_Z11PIDPositionv+0xf8>)
 80036ce:	edc3 7a00 	vstr	s15, [r3]

		Propo = K_P * ErrPos[0];
 80036d2:	4b21      	ldr	r3, [pc, #132]	; (8003758 <_Z11PIDPositionv+0xf4>)
 80036d4:	ed93 7a00 	vldr	s14, [r3]
 80036d8:	4b21      	ldr	r3, [pc, #132]	; (8003760 <_Z11PIDPositionv+0xfc>)
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <_Z11PIDPositionv+0x100>)
 80036e4:	edc3 7a00 	vstr	s15, [r3]

		Integral = K_I * sumError; // Integral -Newton-Leibniz
 80036e8:	4b1f      	ldr	r3, [pc, #124]	; (8003768 <_Z11PIDPositionv+0x104>)
 80036ea:	ed93 7a00 	vldr	s14, [r3]
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <_Z11PIDPositionv+0xf8>)
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f8:	4b1c      	ldr	r3, [pc, #112]	; (800376c <_Z11PIDPositionv+0x108>)
 80036fa:	edc3 7a00 	vstr	s15, [r3]

		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 80036fe:	4b16      	ldr	r3, [pc, #88]	; (8003758 <_Z11PIDPositionv+0xf4>)
 8003700:	ed93 7a00 	vldr	s14, [r3]
 8003704:	4b14      	ldr	r3, [pc, #80]	; (8003758 <_Z11PIDPositionv+0xf4>)
 8003706:	edd3 7a01 	vldr	s15, [r3, #4]
 800370a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800370e:	4b18      	ldr	r3, [pc, #96]	; (8003770 <_Z11PIDPositionv+0x10c>)
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003718:	4b16      	ldr	r3, [pc, #88]	; (8003774 <_Z11PIDPositionv+0x110>)
 800371a:	edc3 7a00 	vstr	s15, [r3]

		ufromposit = Propo + Integral + Derivate;
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <_Z11PIDPositionv+0x100>)
 8003720:	ed93 7a00 	vldr	s14, [r3]
 8003724:	4b11      	ldr	r3, [pc, #68]	; (800376c <_Z11PIDPositionv+0x108>)
 8003726:	edd3 7a00 	vldr	s15, [r3]
 800372a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <_Z11PIDPositionv+0x110>)
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <_Z11PIDPositionv+0x114>)
 800373a:	edc3 7a00 	vstr	s15, [r3]

		//u_contr = ufromposit ;
		ErrPos[1] = ErrPos[0]; // log previous error
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <_Z11PIDPositionv+0xf4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a05      	ldr	r2, [pc, #20]	; (8003758 <_Z11PIDPositionv+0xf4>)
 8003744:	6053      	str	r3, [r2, #4]
	}
}
 8003746:	bf00      	nop
 8003748:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800374c:	200006f8 	.word	0x200006f8
 8003750:	20000590 	.word	0x20000590
 8003754:	200006d0 	.word	0x200006d0
 8003758:	20000700 	.word	0x20000700
 800375c:	2000070c 	.word	0x2000070c
 8003760:	200001a0 	.word	0x200001a0
 8003764:	20000714 	.word	0x20000714
 8003768:	20000710 	.word	0x20000710
 800376c:	20000718 	.word	0x20000718
 8003770:	200001a4 	.word	0x200001a4
 8003774:	2000071c 	.word	0x2000071c
 8003778:	20000708 	.word	0x20000708

0800377c <_Z11PIDVelocityv>:

void PIDVelocity(){
 800377c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003780:	af00      	add	r7, sp, #0

	if(micros() - TimeStampPID_V >= 10000){
 8003782:	f000 fb15 	bl	8003db0 <_Z6microsv>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4930      	ldr	r1, [pc, #192]	; (800384c <_Z11PIDVelocityv+0xd0>)
 800378c:	6809      	ldr	r1, [r1, #0]
 800378e:	2000      	movs	r0, #0
 8003790:	4688      	mov	r8, r1
 8003792:	4681      	mov	r9, r0
 8003794:	ebb2 0408 	subs.w	r4, r2, r8
 8003798:	eb63 0509 	sbc.w	r5, r3, r9
 800379c:	f242 7310 	movw	r3, #10000	; 0x2710
 80037a0:	429c      	cmp	r4, r3
 80037a2:	f175 0300 	sbcs.w	r3, r5, #0
 80037a6:	bf2c      	ite	cs
 80037a8:	2301      	movcs	r3, #1
 80037aa:	2300      	movcc	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d048      	beq.n	8003844 <_Z11PIDVelocityv+0xc8>
		TimeStampPID_V = micros();
 80037b2:	f000 fafd 	bl	8003db0 <_Z6microsv>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4b24      	ldr	r3, [pc, #144]	; (800384c <_Z11PIDVelocityv+0xd0>)
 80037bc:	601a      	str	r2, [r3, #0]
		Vcontr[1] = Vcontr[0] ;
		ErrVelo[2] = ErrVelo[1] ;
		ErrVelo[1] = ErrVelo[0] ;
		*/

		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <_Z11PIDVelocityv+0xd4>)
 80037c0:	ed93 7a00 	vldr	s14, [r3]
 80037c4:	4b23      	ldr	r3, [pc, #140]	; (8003854 <_Z11PIDVelocityv+0xd8>)
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037ce:	4b22      	ldr	r3, [pc, #136]	; (8003858 <_Z11PIDVelocityv+0xdc>)
 80037d0:	edd3 7a00 	vldr	s15, [r3]
 80037d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037d8:	4b20      	ldr	r3, [pc, #128]	; (800385c <_Z11PIDVelocityv+0xe0>)
 80037da:	edc3 7a00 	vstr	s15, [r3]
		SumAll = SumAll + ErrVelo[0];
 80037de:	4b1f      	ldr	r3, [pc, #124]	; (800385c <_Z11PIDVelocityv+0xe0>)
 80037e0:	ed93 7a00 	vldr	s14, [r3]
 80037e4:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <_Z11PIDVelocityv+0xe4>)
 80037e6:	edd3 7a00 	vldr	s15, [r3]
 80037ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ee:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <_Z11PIDVelocityv+0xe4>)
 80037f0:	edc3 7a00 	vstr	s15, [r3]

		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <_Z11PIDVelocityv+0xe0>)
 80037f6:	ed93 7a00 	vldr	s14, [r3]
 80037fa:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <_Z11PIDVelocityv+0xe8>)
 80037fc:	edd3 7a00 	vldr	s15, [r3]
 8003800:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003804:	4b18      	ldr	r3, [pc, #96]	; (8003868 <_Z11PIDVelocityv+0xec>)
 8003806:	edd3 6a00 	vldr	s13, [r3]
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <_Z11PIDVelocityv+0xe4>)
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003814:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003818:	4b10      	ldr	r3, [pc, #64]	; (800385c <_Z11PIDVelocityv+0xe0>)
 800381a:	edd3 6a00 	vldr	s13, [r3]
 800381e:	4b0f      	ldr	r3, [pc, #60]	; (800385c <_Z11PIDVelocityv+0xe0>)
 8003820:	edd3 7a01 	vldr	s15, [r3, #4]
 8003824:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003828:	4b10      	ldr	r3, [pc, #64]	; (800386c <_Z11PIDVelocityv+0xf0>)
 800382a:	edd3 7a00 	vldr	s15, [r3]
 800382e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003836:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <_Z11PIDVelocityv+0xf4>)
 8003838:	edc3 7a00 	vstr	s15, [r3]
		ErrVelo[1] = ErrVelo[0]; // log previous error
 800383c:	4b07      	ldr	r3, [pc, #28]	; (800385c <_Z11PIDVelocityv+0xe0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a06      	ldr	r2, [pc, #24]	; (800385c <_Z11PIDVelocityv+0xe0>)
 8003842:	6053      	str	r3, [r2, #4]
		}
}
 8003844:	bf00      	nop
 8003846:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800384a:	bf00      	nop
 800384c:	20000730 	.word	0x20000730
 8003850:	20000594 	.word	0x20000594
 8003854:	20000708 	.word	0x20000708
 8003858:	200006d4 	.word	0x200006d4
 800385c:	20000720 	.word	0x20000720
 8003860:	2000072c 	.word	0x2000072c
 8003864:	200001a8 	.word	0x200001a8
 8003868:	200001ac 	.word	0x200001ac
 800386c:	200001a4 	.word	0x200001a4
 8003870:	20000734 	.word	0x20000734
 8003874:	00000000 	.word	0x00000000

08003878 <_Z11controlloopv>:

void controlloop(){
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0

	if( abs( Finalposition - KalP) < 0.005 && abs(KalV) < 0.0005){
 800387c:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <_Z11controlloopv+0xb0>)
 800387e:	ed93 7a00 	vldr	s14, [r3]
 8003882:	4b2a      	ldr	r3, [pc, #168]	; (800392c <_Z11controlloopv+0xb4>)
 8003884:	edd3 7a00 	vldr	s15, [r3]
 8003888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800388c:	eeb0 0a67 	vmov.f32	s0, s15
 8003890:	f7fd fb34 	bl	8000efc <_ZSt3absf>
 8003894:	ee10 3a10 	vmov	r3, s0
 8003898:	4618      	mov	r0, r3
 800389a:	f7fc fe55 	bl	8000548 <__aeabi_f2d>
 800389e:	a31e      	add	r3, pc, #120	; (adr r3, 8003918 <_Z11controlloopv+0xa0>)
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f7fd f91a 	bl	8000adc <__aeabi_dcmplt>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d015      	beq.n	80038da <_Z11controlloopv+0x62>
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <_Z11controlloopv+0xb8>)
 80038b0:	edd3 7a00 	vldr	s15, [r3]
 80038b4:	eeb0 0a67 	vmov.f32	s0, s15
 80038b8:	f7fd fb20 	bl	8000efc <_ZSt3absf>
 80038bc:	ee10 3a10 	vmov	r3, s0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fc fe41 	bl	8000548 <__aeabi_f2d>
 80038c6:	a316      	add	r3, pc, #88	; (adr r3, 8003920 <_Z11controlloopv+0xa8>)
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f7fd f906 	bl	8000adc <__aeabi_dcmplt>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <_Z11controlloopv+0x62>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <_Z11controlloopv+0x64>
 80038da:	2300      	movs	r3, #0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d010      	beq.n	8003902 <_Z11controlloopv+0x8a>
		PWMOut = 0;
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <_Z11controlloopv+0xbc>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	801a      	strh	r2, [r3, #0]
		check = 8;
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <_Z11controlloopv+0xc0>)
 80038e8:	2208      	movs	r2, #8
 80038ea:	701a      	strb	r2, [r3, #0]

		flagNewpos = 0;
 80038ec:	4b13      	ldr	r3, [pc, #76]	; (800393c <_Z11controlloopv+0xc4>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
		flag_finishTra = 1;
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <_Z11controlloopv+0xc8>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	701a      	strb	r2, [r3, #0]
		TimeinS = 0;
 80038f8:	4b12      	ldr	r3, [pc, #72]	; (8003944 <_Z11controlloopv+0xcc>)
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
	else{
		PIDPosition();
		PIDVelocity();
		MotDrvCytron();
	}
}
 8003900:	e005      	b.n	800390e <_Z11controlloopv+0x96>
		PIDPosition();
 8003902:	f7ff feaf 	bl	8003664 <_Z11PIDPositionv>
		PIDVelocity();
 8003906:	f7ff ff39 	bl	800377c <_Z11PIDVelocityv>
		MotDrvCytron();
 800390a:	f000 f81d 	bl	8003948 <_Z12MotDrvCytronv>
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	f3af 8000 	nop.w
 8003918:	47ae147b 	.word	0x47ae147b
 800391c:	3f747ae1 	.word	0x3f747ae1
 8003920:	d2f1a9fc 	.word	0xd2f1a9fc
 8003924:	3f40624d 	.word	0x3f40624d
 8003928:	20000580 	.word	0x20000580
 800392c:	200006d0 	.word	0x200006d0
 8003930:	200006d4 	.word	0x200006d4
 8003934:	20000574 	.word	0x20000574
 8003938:	2000073c 	.word	0x2000073c
 800393c:	200005a8 	.word	0x200005a8
 8003940:	20000504 	.word	0x20000504
 8003944:	200005a0 	.word	0x200005a0

08003948 <_Z12MotDrvCytronv>:


void MotDrvCytron(){
 8003948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800394c:	af00      	add	r7, sp, #0
	//   direction chk
	//if(u_contr > 0){mot_dirctn= 0;}
	//else if(u_contr < 0) {mot_dirctn = 1;}
	//else{PWMOut = 0;}

	if(micros() - TimeDrive >= 10000){
 800394e:	f000 fa2f 	bl	8003db0 <_Z6microsv>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4932      	ldr	r1, [pc, #200]	; (8003a20 <_Z12MotDrvCytronv+0xd8>)
 8003958:	6809      	ldr	r1, [r1, #0]
 800395a:	2000      	movs	r0, #0
 800395c:	4688      	mov	r8, r1
 800395e:	4681      	mov	r9, r0
 8003960:	ebb2 0408 	subs.w	r4, r2, r8
 8003964:	eb63 0509 	sbc.w	r5, r3, r9
 8003968:	f242 7310 	movw	r3, #10000	; 0x2710
 800396c:	429c      	cmp	r4, r3
 800396e:	f175 0300 	sbcs.w	r3, r5, #0
 8003972:	bf2c      	ite	cs
 8003974:	2301      	movcs	r3, #1
 8003976:	2300      	movcc	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d049      	beq.n	8003a12 <_Z12MotDrvCytronv+0xca>
			TimeDrive = micros();
 800397e:	f000 fa17 	bl	8003db0 <_Z6microsv>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <_Z12MotDrvCytronv+0xd8>)
 8003988:	601a      	str	r2, [r3, #0]
			u_contr = u_contr * 833.3;
 800398a:	4b26      	ldr	r3, [pc, #152]	; (8003a24 <_Z12MotDrvCytronv+0xdc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fc fdda 	bl	8000548 <__aeabi_f2d>
 8003994:	a320      	add	r3, pc, #128	; (adr r3, 8003a18 <_Z12MotDrvCytronv+0xd0>)
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	f7fc fe2d 	bl	80005f8 <__aeabi_dmul>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4610      	mov	r0, r2
 80039a4:	4619      	mov	r1, r3
 80039a6:	f7fd f8d7 	bl	8000b58 <__aeabi_d2f>
 80039aa:	4603      	mov	r3, r0
 80039ac:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <_Z12MotDrvCytronv+0xdc>)
 80039ae:	6013      	str	r3, [r2, #0]
			// u_contr = 2500;
			if(u_contr > 0){
 80039b0:	4b1c      	ldr	r3, [pc, #112]	; (8003a24 <_Z12MotDrvCytronv+0xdc>)
 80039b2:	edd3 7a00 	vldr	s15, [r3]
 80039b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039be:	dd03      	ble.n	80039c8 <_Z12MotDrvCytronv+0x80>
				mot_dirctn= 1;
 80039c0:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <_Z12MotDrvCytronv+0xe0>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
 80039c6:	e00e      	b.n	80039e6 <_Z12MotDrvCytronv+0x9e>
			}
			else if(u_contr < 0) {
 80039c8:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <_Z12MotDrvCytronv+0xdc>)
 80039ca:	edd3 7a00 	vldr	s15, [r3]
 80039ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d6:	d503      	bpl.n	80039e0 <_Z12MotDrvCytronv+0x98>
				mot_dirctn = 0;
 80039d8:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <_Z12MotDrvCytronv+0xe0>)
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	e002      	b.n	80039e6 <_Z12MotDrvCytronv+0x9e>
			}
			else{
				PWMOut = 0;
 80039e0:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <_Z12MotDrvCytronv+0xe4>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	801a      	strh	r2, [r3, #0]
			}
	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 80039e6:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <_Z12MotDrvCytronv+0xdc>)
 80039e8:	edd3 7a00 	vldr	s15, [r3]
 80039ec:	eef0 7ae7 	vabs.f32	s15, s15
 80039f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039f4:	ee17 3a90 	vmov	r3, s15
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <_Z12MotDrvCytronv+0xe4>)
 80039fc:	801a      	strh	r2, [r3, #0]
	if(PWMOut > 5000){PWMOut = 5000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 80039fe:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <_Z12MotDrvCytronv+0xe4>)
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d903      	bls.n	8003a12 <_Z12MotDrvCytronv+0xca>
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <_Z12MotDrvCytronv+0xe4>)
 8003a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a10:	801a      	strh	r2, [r3, #0]
	//if(PWMOut < 1600 ){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
	//&& fabsf(ErrPos[0]) >= 4
	//if(flag_finishTra == 1){PWMOut = 0;}
	}
}
 8003a12:	bf00      	nop
 8003a14:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a18:	66666666 	.word	0x66666666
 8003a1c:	408a0a66 	.word	0x408a0a66
 8003a20:	20000738 	.word	0x20000738
 8003a24:	20000734 	.word	0x20000734
 8003a28:	2000057c 	.word	0x2000057c
 8003a2c:	20000574 	.word	0x20000574

08003a30 <_Z13GraytoBinarioth>:

///////////////////// [Abs Encoder I2C] ////////////////////////////////////////////
////////// [Absolute Encoder] ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	460a      	mov	r2, r1
 8003a3a:	80fb      	strh	r3, [r7, #6]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 8003a44:	88fa      	ldrh	r2, [r7, #6]
 8003a46:	797b      	ldrb	r3, [r7, #5]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	fa42 f303 	asr.w	r3, r2, r3
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 8003a56:	2301      	movs	r3, #1
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	797b      	ldrb	r3, [r7, #5]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	da1e      	bge.n	8003aa0 <_Z13GraytoBinarioth+0x70>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 8003a62:	8afb      	ldrh	r3, [r7, #22]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	7979      	ldrb	r1, [r7, #5]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	3301      	adds	r3, #1
 8003a72:	1acb      	subs	r3, r1, r3
 8003a74:	fa42 f303 	asr.w	r3, r2, r3
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d103      	bne.n	8003a8e <_Z13GraytoBinarioth+0x5e>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 8003a86:	8afb      	ldrh	r3, [r7, #22]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	82fb      	strh	r3, [r7, #22]
 8003a8c:	e004      	b.n	8003a98 <_Z13GraytoBinarioth+0x68>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8003a8e:	8afb      	ldrh	r3, [r7, #22]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3301      	adds	r3, #1
 8003a96:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	e7dc      	b.n	8003a5a <_Z13GraytoBinarioth+0x2a>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 8003aa0:	8afb      	ldrh	r3, [r7, #22]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <_Z14IOExpenderInitv>:

void IOExpenderInit() {// call when start system
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Xetting,
 8003ab6:	2364      	movs	r3, #100	; 0x64
 8003ab8:	9302      	str	r3, [sp, #8]
 8003aba:	2316      	movs	r3, #22
 8003abc:	9301      	str	r3, [sp, #4]
 8003abe:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <_Z14IOExpenderInitv+0x24>)
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2140      	movs	r1, #64	; 0x40
 8003ac8:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <_Z14IOExpenderInitv+0x28>)
 8003aca:	f013 fccf 	bl	801746c <HAL_I2C_Mem_Write>
			0x16, 100);

}
 8003ace:	bf00      	nop
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	200001c4 	.word	0x200001c4
 8003ad8:	20000274 	.word	0x20000274

08003adc <_Z14AbsEncI2CReadxPh>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af04      	add	r7, sp, #16
 8003ae2:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8003ae4:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <_Z14AbsEncI2CReadxPh+0x98>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <_Z14AbsEncI2CReadxPh+0x20>
 8003aec:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <_Z14AbsEncI2CReadxPh+0x9c>)
 8003aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	d101      	bne.n	8003afc <_Z14AbsEncI2CReadxPh+0x20>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <_Z14AbsEncI2CReadxPh+0x22>
 8003afc:	2300      	movs	r3, #0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d033      	beq.n	8003b6a <_Z14AbsEncI2CReadxPh+0x8e>

		HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 8003b02:	2364      	movs	r3, #100	; 0x64
 8003b04:	9302      	str	r3, [sp, #8]
 8003b06:	2302      	movs	r3, #2
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	2301      	movs	r3, #1
 8003b10:	2212      	movs	r2, #18
 8003b12:	2140      	movs	r1, #64	; 0x40
 8003b14:	4818      	ldr	r0, [pc, #96]	; (8003b78 <_Z14AbsEncI2CReadxPh+0x9c>)
 8003b16:	f013 fda3 	bl	8017660 <HAL_I2C_Mem_Read>
								RawRAB, 2, 100);

		GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8003b1a:	4b18      	ldr	r3, [pc, #96]	; (8003b7c <_Z14AbsEncI2CReadxPh+0xa0>)
 8003b1c:	785b      	ldrb	r3, [r3, #1]
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	b21a      	sxth	r2, r3
 8003b22:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <_Z14AbsEncI2CReadxPh+0xa0>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	b21b      	sxth	r3, r3
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	b21b      	sxth	r3, r3
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003b30:	801a      	strh	r2, [r3, #0]
		// 1023- to reverse
		BinPosXI = 1023 - (GraytoBinario(GrayCBitXI, 10) + POSOFFSET) ;//
 8003b32:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	210a      	movs	r1, #10
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff79 	bl	8003a30 <_Z13GraytoBinarioth>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f5c3 7372 	rsb	r3, r3, #968	; 0x3c8
 8003b44:	3303      	adds	r3, #3
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <_Z14AbsEncI2CReadxPh+0xa8>)
 8003b4a:	801a      	strh	r2, [r3, #0]
		if (BinPosXI >= 1024){BinPosXI %= 1024;}
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <_Z14AbsEncI2CReadxPh+0xa8>)
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b54:	d306      	bcc.n	8003b64 <_Z14AbsEncI2CReadxPh+0x88>
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <_Z14AbsEncI2CReadxPh+0xa8>)
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <_Z14AbsEncI2CReadxPh+0xa8>)
 8003b62:	801a      	strh	r2, [r3, #0]

		flag_absenc = 0;
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <_Z14AbsEncI2CReadxPh+0x98>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
//			flag_absenc = 0;
//		break;
//
//		}
	}
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000572 	.word	0x20000572
 8003b78:	20000274 	.word	0x20000274
 8003b7c:	2000056c 	.word	0x2000056c
 8003b80:	2000056e 	.word	0x2000056e
 8003b84:	20000570 	.word	0x20000570

08003b88 <_Z13Efft_activatev>:

/////////////////////// [End Effector] //////////////////////////////////

void Efft_activate(){
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 8003b8e:	2345      	movs	r3, #69	; 0x45
 8003b90:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;
	switch(efshoot){
 8003b92:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <_Z13Efft_activatev+0x90>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d01a      	beq.n	8003bd0 <_Z13Efft_activatev+0x48>
	default:
	case ef_INIT:
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8003b9a:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <_Z13Efft_activatev+0x94>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <_Z13Efft_activatev+0x2a>
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <_Z13Efft_activatev+0x98>)
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d101      	bne.n	8003bb2 <_Z13Efft_activatev+0x2a>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <_Z13Efft_activatev+0x2c>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d028      	beq.n	8003c0a <_Z13Efft_activatev+0x82>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 8003bb8:	1dfa      	adds	r2, r7, #7
 8003bba:	2301      	movs	r3, #1
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2146      	movs	r1, #70	; 0x46
 8003bc2:	4817      	ldr	r0, [pc, #92]	; (8003c20 <_Z13Efft_activatev+0x98>)
 8003bc4:	f013 ff72 	bl	8017aac <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
 8003bc8:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <_Z13Efft_activatev+0x90>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003bce:	e01c      	b.n	8003c0a <_Z13Efft_activatev+0x82>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 8003bd0:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <_Z13Efft_activatev+0x98>)
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d013      	beq.n	8003c0e <_Z13Efft_activatev+0x86>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 8003be6:	1dfa      	adds	r2, r7, #7
 8003be8:	2320      	movs	r3, #32
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2301      	movs	r3, #1
 8003bee:	2146      	movs	r1, #70	; 0x46
 8003bf0:	480b      	ldr	r0, [pc, #44]	; (8003c20 <_Z13Efft_activatev+0x98>)
 8003bf2:	f013 ff5b 	bl	8017aac <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 8003bf6:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <_Z13Efft_activatev+0x90>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 8003bfc:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <_Z13Efft_activatev+0x94>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 1;
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <_Z13Efft_activatev+0x9c>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003c08:	e001      	b.n	8003c0e <_Z13Efft_activatev+0x86>
	break;
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <_Z13Efft_activatev+0x88>
	break;
 8003c0e:	bf00      	nop
	}

}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	200007e6 	.word	0x200007e6
 8003c1c:	2000073e 	.word	0x2000073e
 8003c20:	200002c8 	.word	0x200002c8
 8003c24:	20000740 	.word	0x20000740

08003c28 <_Z9Efft_readPh>:

void Efft_read(uint8_t *Rddata){
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	6078      	str	r0, [r7, #4]
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	static uint8_t efrdStatus = 0;
	switch(efrdStatus){
 8003c30:	4b1f      	ldr	r3, [pc, #124]	; (8003cb0 <_Z9Efft_readPh+0x88>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d01a      	beq.n	8003c6e <_Z9Efft_readPh+0x46>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8003c38:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <_Z9Efft_readPh+0x8c>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <_Z9Efft_readPh+0x28>
 8003c40:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <_Z9Efft_readPh+0x90>)
 8003c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d101      	bne.n	8003c50 <_Z9Efft_readPh+0x28>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <_Z9Efft_readPh+0x2a>
 8003c50:	2300      	movs	r3, #0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d025      	beq.n	8003ca2 <_Z9Efft_readPh+0x7a>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 8003c56:	2302      	movs	r3, #2
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	4a17      	ldr	r2, [pc, #92]	; (8003cbc <_Z9Efft_readPh+0x94>)
 8003c5e:	2146      	movs	r1, #70	; 0x46
 8003c60:	4815      	ldr	r0, [pc, #84]	; (8003cb8 <_Z9Efft_readPh+0x90>)
 8003c62:	f013 ff23 	bl	8017aac <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <_Z9Efft_readPh+0x88>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003c6c:	e019      	b.n	8003ca2 <_Z9Efft_readPh+0x7a>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <_Z9Efft_readPh+0x90>)
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	bf0c      	ite	eq
 8003c7a:	2301      	moveq	r3, #1
 8003c7c:	2300      	movne	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d010      	beq.n	8003ca6 <_Z9Efft_readPh+0x7e>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 8003c84:	2320      	movs	r3, #32
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	2301      	movs	r3, #1
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	2146      	movs	r1, #70	; 0x46
 8003c8e:	480a      	ldr	r0, [pc, #40]	; (8003cb8 <_Z9Efft_readPh+0x90>)
 8003c90:	f013 ffd2 	bl	8017c38 <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 8003c94:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <_Z9Efft_readPh+0x8c>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <_Z9Efft_readPh+0x88>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
			}
	break;
 8003ca0:	e001      	b.n	8003ca6 <_Z9Efft_readPh+0x7e>
	break;
 8003ca2:	bf00      	nop
 8003ca4:	e000      	b.n	8003ca8 <_Z9Efft_readPh+0x80>
	break;
 8003ca6:	bf00      	nop
	}

}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	200007e7 	.word	0x200007e7
 8003cb4:	2000073f 	.word	0x2000073f
 8003cb8:	200002c8 	.word	0x200002c8
 8003cbc:	200001da 	.word	0x200001da

08003cc0 <HAL_GPIO_EXTI_Callback>:

/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	80fb      	strh	r3, [r7, #6]
	//============// EMER ////=====================
	if(GPIO_Pin == GPIO_PIN_11){
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd0:	d108      	bne.n	8003ce4 <HAL_GPIO_EXTI_Callback+0x24>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		grandState = emer;
 8003cd2:	4b2e      	ldr	r3, [pc, #184]	; (8003d8c <HAL_GPIO_EXTI_Callback+0xcc>)
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 8003cd8:	4b2d      	ldr	r3, [pc, #180]	; (8003d90 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 8003cde:	4b2d      	ldr	r3, [pc, #180]	; (8003d94 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//=============// Stop ////======================
	if(GPIO_Pin == GPIO_PIN_10){
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cea:	d110      	bne.n	8003d0e <HAL_GPIO_EXTI_Callback+0x4e>
		PWMOut = 0;
 8003cec:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 8003cf2:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 8003cf8:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_GPIO_EXTI_Callback+0xcc>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d103      	bne.n	8003d08 <HAL_GPIO_EXTI_Callback+0x48>
 8003d00:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <HAL_GPIO_EXTI_Callback+0xcc>)
 8003d02:	2204      	movs	r2, #4
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	e002      	b.n	8003d0e <HAL_GPIO_EXTI_Callback+0x4e>
		else{grandState = stop;}
 8003d08:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_GPIO_EXTI_Callback+0xcc>)
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	701a      	strb	r2, [r3, #0]

		}
	//=========// work Blue button //=========//
	if(GPIO_Pin == GPIO_PIN_13){
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d14:	d120      	bne.n	8003d58 <HAL_GPIO_EXTI_Callback+0x98>
		bluecounter++;
 8003d16:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003d20:	701a      	strb	r2, [r3, #0]
//		    		positionlog[i] = PosDataSet[i];
//		    	}
		//if(grandState == Ready){}

		////===== Zero Calibrate Func /////////////
		if (bluecounter % 2 == 0){
 8003d22:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d111      	bne.n	8003d52 <HAL_GPIO_EXTI_Callback+0x92>
			PWMOut = 1100;
 8003d2e:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003d30:	f240 424c 	movw	r2, #1100	; 0x44c
 8003d34:	801a      	strh	r2, [r3, #0]
			mot_dirctn++; mot_dirctn%=2;
 8003d36:	4b18      	ldr	r3, [pc, #96]	; (8003d98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	4b15      	ldr	r3, [pc, #84]	; (8003d98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	4b12      	ldr	r3, [pc, #72]	; (8003d98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e002      	b.n	8003d58 <HAL_GPIO_EXTI_Callback+0x98>

		}else{PWMOut = 0;}
 8003d52:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	801a      	strh	r2, [r3, #0]
		//flag_efftActi = 1;
		//trig_efftRead = 1;
	}

	//=============// setzero //================//
		if(GPIO_Pin == GPIO_PIN_2){
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d10f      	bne.n	8003d7e <HAL_GPIO_EXTI_Callback+0xbe>
			position_order = 0;
 8003d5e:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
			positionlog[position_order] = 0.0122; // 0.000613 - 0.0122 => 1-2/1024
 8003d64:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	4a0d      	ldr	r2, [pc, #52]	; (8003da4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8003d70:	601a      	str	r2, [r3, #0]
			Velocity = 7.0;
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003d74:	4a0d      	ldr	r2, [pc, #52]	; (8003dac <HAL_GPIO_EXTI_Callback+0xec>)
 8003d76:	601a      	str	r2, [r3, #0]
			grandState = SetZeroGr;
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_GPIO_EXTI_Callback+0xcc>)
 8003d7a:	2205      	movs	r2, #5
 8003d7c:	701a      	strb	r2, [r3, #0]
		}
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	200004fa 	.word	0x200004fa
 8003d90:	200006fc 	.word	0x200006fc
 8003d94:	20000574 	.word	0x20000574
 8003d98:	2000057c 	.word	0x2000057c
 8003d9c:	20000515 	.word	0x20000515
 8003da0:	20000144 	.word	0x20000144
 8003da4:	3c47e282 	.word	0x3c47e282
 8003da8:	20000588 	.word	0x20000588
 8003dac:	40e00000 	.word	0x40e00000

08003db0 <_Z6microsv>:

///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 8003db0:	b4b0      	push	{r4, r5, r7}
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <_Z6microsv+0x2c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	2200      	movs	r2, #0
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <_Z6microsv+0x30>)
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	1884      	adds	r4, r0, r2
 8003dc8:	eb41 0503 	adc.w	r5, r1, r3
 8003dcc:	4622      	mov	r2, r4
 8003dce:	462b      	mov	r3, r5
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bcb0      	pop	{r4, r5, r7}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	200003ac 	.word	0x200003ac
 8003de0:	20000508 	.word	0x20000508

08003de4 <_Z6millisv>:
uint32_t millis()
{return _millis;}// + htim10.Instance->CNT
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	4b03      	ldr	r3, [pc, #12]	; (8003df8 <_Z6millisv+0x14>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	20000510 	.word	0x20000510

08003dfc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003dfc:	b4b0      	push	{r4, r5, r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d10a      	bne.n	8003e22 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e16:	1854      	adds	r4, r2, r1
 8003e18:	f143 0500 	adc.w	r5, r3, #0
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003e1e:	e9c3 4500 	strd	r4, r5, [r3]
 if(htim == &htim10)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a08      	ldr	r2, [pc, #32]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d104      	bne.n	8003e34 <HAL_TIM_PeriodElapsedCallback+0x38>
 {_millis++;}
 8003e2a:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	4a06      	ldr	r2, [pc, #24]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003e32:	6013      	str	r3, [r2, #0]
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bcb0      	pop	{r4, r5, r7}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	200003ac 	.word	0x200003ac
 8003e44:	20000508 	.word	0x20000508
 8003e48:	20000364 	.word	0x20000364
 8003e4c:	20000510 	.word	0x20000510

08003e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e54:	b672      	cpsid	i
}
 8003e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e58:	e7fe      	b.n	8003e58 <Error_Handler+0x8>

08003e5a <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	bf00      	nop
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 8003e9c:	b5b0      	push	{r4, r5, r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fdd8 	bl	8004a5c <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 8003eac:	4604      	mov	r4, r0
 8003eae:	f107 030c 	add.w	r3, r7, #12
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fddd 	bl	8004a72 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 8003eb8:	f107 020c 	add.w	r2, r7, #12
 8003ebc:	f107 0308 	add.w	r3, r7, #8
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fde0 	bl	8004a88 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 8003ec8:	bf00      	nop
 8003eca:	4628      	mov	r0, r5
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bdb0      	pop	{r4, r5, r7, pc}

08003ed2 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>:
#endif

// Suppresses 'unused variable' warnings.
namespace Eigen {
  namespace internal {
    template<typename T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void ignore_unused_variable(const T&) {}
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>:
      * a matrix to 0 is not supported.
      *
      * \sa resize(Index,Index)
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Matrix() : Base()
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fde2 	bl	8004aba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
    {
      Base::_check_template_params();
 8003ef6:	f000 fdf0 	bl	8004ada <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>:
    Matrix() : Base()
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fdf6 	bl	8004b00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 8003f14:	f000 fe04 	bl	8004b20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
    }
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>:
    Matrix() : Base()
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fe0a 	bl	8004b46 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8003f32:	f000 fe18 	bl	8004b66 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
    }
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>:
    Matrix() : Base()
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fe1e 	bl	8004b8c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8003f50:	f000 fe2c 	bl	8004bac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
    }
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>:
  * \note According the c++ standard, the argument expressions of this comma initializer are evaluated in arbitrary order.
  *
  * \sa CommaInitializer::finished(), class CommaInitializer
  */
template<typename Derived>
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
{
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 fe24 	bl	8004bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>
}
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
    finished();
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fe59 	bl	8004c3c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>
  }
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689c      	ldr	r4, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fe7e 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8003fac:	4603      	mov	r3, r0
 8003fae:	429c      	cmp	r4, r3
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01d      	beq.n	8003ff8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	441a      	add	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	605a      	str	r2, [r3, #4]
      m_col = 0;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685c      	ldr	r4, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fe6d 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	429c      	cmp	r4, r3
 8003fe8:	db05      	blt.n	8003ff6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x62>
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xcc>)
 8003fec:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8003fee:	2148      	movs	r1, #72	; 0x48
 8003ff0:	481d      	ldr	r0, [pc, #116]	; (8004068 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8003ff2:	f019 fd7b 	bl	801daec <__assert_func>
 8003ff6:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689c      	ldr	r4, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fe51 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004006:	4603      	mov	r3, r0
 8004008:	429c      	cmp	r4, r3
 800400a:	db05      	blt.n	8004018 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x84>
 800400c:	4b17      	ldr	r3, [pc, #92]	; (800406c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd8>)
 800400e:	4a15      	ldr	r2, [pc, #84]	; (8004064 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8004010:	214b      	movs	r1, #75	; 0x4b
 8004012:	4815      	ldr	r0, [pc, #84]	; (8004068 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8004014:	f019 fd6a 	bl	801daec <__assert_func>
 8004018:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d005      	beq.n	800402e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x9a>
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xdc>)
 8004024:	4a0f      	ldr	r2, [pc, #60]	; (8004064 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8004026:	214d      	movs	r1, #77	; 0x4d
 8004028:	480f      	ldr	r0, [pc, #60]	; (8004068 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 800402a:	f019 fd5f 	bl	801daec <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461c      	mov	r4, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6858      	ldr	r0, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	1c59      	adds	r1, r3, #1
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6091      	str	r1, [r2, #8]
 8004042:	461a      	mov	r2, r3
 8004044:	4601      	mov	r1, r0
 8004046:	4620      	mov	r0, r4
 8004048:	f000 fe44 	bl	8004cd4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 800404c:	4602      	mov	r2, r0
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6013      	str	r3, [r2, #0]
    return *this;
 8004054:	687b      	ldr	r3, [r7, #4]
  }
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	bd90      	pop	{r4, r7, pc}
 800405e:	bf00      	nop
 8004060:	0801eb68 	.word	0x0801eb68
 8004064:	0801ebb8 	.word	0x0801ebb8
 8004068:	0801ec7c 	.word	0x0801ec7c
 800406c:	0801ecd8 	.word	0x0801ecd8
 8004070:	0801ed30 	.word	0x0801ed30

08004074 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fe3f 	bl	8004d08 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>
}
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
    finished();
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fe74 	bl	8004d88 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>
  }
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689c      	ldr	r4, [r3, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fe98 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80040c4:	4603      	mov	r3, r0
 80040c6:	429c      	cmp	r4, r3
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01d      	beq.n	8004110 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	441a      	add	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685c      	ldr	r4, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fe87 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80040fc:	4603      	mov	r3, r0
 80040fe:	429c      	cmp	r4, r3
 8004100:	db05      	blt.n	800410e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x62>
 8004102:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xcc>)
 8004104:	4a1d      	ldr	r2, [pc, #116]	; (800417c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8004106:	2148      	movs	r1, #72	; 0x48
 8004108:	481d      	ldr	r0, [pc, #116]	; (8004180 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 800410a:	f019 fcef 	bl	801daec <__assert_func>
 800410e:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689c      	ldr	r4, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fe6b 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800411e:	4603      	mov	r3, r0
 8004120:	429c      	cmp	r4, r3
 8004122:	db05      	blt.n	8004130 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x84>
 8004124:	4b17      	ldr	r3, [pc, #92]	; (8004184 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd8>)
 8004126:	4a15      	ldr	r2, [pc, #84]	; (800417c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8004128:	214b      	movs	r1, #75	; 0x4b
 800412a:	4815      	ldr	r0, [pc, #84]	; (8004180 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 800412c:	f019 fcde 	bl	801daec <__assert_func>
 8004130:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d005      	beq.n	8004146 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x9a>
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xdc>)
 800413c:	4a0f      	ldr	r2, [pc, #60]	; (800417c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 800413e:	214d      	movs	r1, #77	; 0x4d
 8004140:	480f      	ldr	r0, [pc, #60]	; (8004180 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8004142:	f019 fcd3 	bl	801daec <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461c      	mov	r4, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6858      	ldr	r0, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	1c59      	adds	r1, r3, #1
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6091      	str	r1, [r2, #8]
 800415a:	461a      	mov	r2, r3
 800415c:	4601      	mov	r1, r0
 800415e:	4620      	mov	r0, r4
 8004160:	f000 fe5e 	bl	8004e20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8004164:	4602      	mov	r2, r0
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6013      	str	r3, [r2, #0]
    return *this;
 800416c:	687b      	ldr	r3, [r7, #4]
  }
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bd90      	pop	{r4, r7, pc}
 8004176:	bf00      	nop
 8004178:	0801eb68 	.word	0x0801eb68
 800417c:	0801ed48 	.word	0x0801ed48
 8004180:	0801ec7c 	.word	0x0801ec7c
 8004184:	0801ecd8 	.word	0x0801ecd8
 8004188:	0801ed30 	.word	0x0801ed30

0800418c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 fe59 	bl	8004e54 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>
}
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
    finished();
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fe8e 	bl	8004ed4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>
  }
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 feb4 	bl	8004f40 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>
}
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
    finished();
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fee9 	bl	8004fc0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>
  }
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 80041f8:	b590      	push	{r4, r7, lr}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689c      	ldr	r4, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 ff0e 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004210:	4603      	mov	r3, r0
 8004212:	429c      	cmp	r4, r3
 8004214:	bf0c      	ite	eq
 8004216:	2301      	moveq	r3, #1
 8004218:	2300      	movne	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01d      	beq.n	800425c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	441a      	add	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	605a      	str	r2, [r3, #4]
      m_col = 0;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685c      	ldr	r4, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fefd 	bl	8005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8004248:	4603      	mov	r3, r0
 800424a:	429c      	cmp	r4, r3
 800424c:	db05      	blt.n	800425a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x62>
 800424e:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xcc>)
 8004250:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8004252:	2148      	movs	r1, #72	; 0x48
 8004254:	481d      	ldr	r0, [pc, #116]	; (80042cc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8004256:	f019 fc49 	bl	801daec <__assert_func>
 800425a:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689c      	ldr	r4, [r3, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fee1 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800426a:	4603      	mov	r3, r0
 800426c:	429c      	cmp	r4, r3
 800426e:	db05      	blt.n	800427c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x84>
 8004270:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd8>)
 8004272:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8004274:	214b      	movs	r1, #75	; 0x4b
 8004276:	4815      	ldr	r0, [pc, #84]	; (80042cc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8004278:	f019 fc38 	bl	801daec <__assert_func>
 800427c:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d005      	beq.n	8004292 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x9a>
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xdc>)
 8004288:	4a0f      	ldr	r2, [pc, #60]	; (80042c8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 800428a:	214d      	movs	r1, #77	; 0x4d
 800428c:	480f      	ldr	r0, [pc, #60]	; (80042cc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 800428e:	f019 fc2d 	bl	801daec <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461c      	mov	r4, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6858      	ldr	r0, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	1c59      	adds	r1, r3, #1
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6091      	str	r1, [r2, #8]
 80042a6:	461a      	mov	r2, r3
 80042a8:	4601      	mov	r1, r0
 80042aa:	4620      	mov	r0, r4
 80042ac:	f000 fed4 	bl	8005058 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 80042b0:	4602      	mov	r2, r0
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6013      	str	r3, [r2, #0]
    return *this;
 80042b8:	687b      	ldr	r3, [r7, #4]
  }
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd90      	pop	{r4, r7, pc}
 80042c2:	bf00      	nop
 80042c4:	0801eb68 	.word	0x0801eb68
 80042c8:	0801ee0c 	.word	0x0801ee0c
 80042cc:	0801ec7c 	.word	0x0801ec7c
 80042d0:	0801ecd8 	.word	0x0801ecd8
 80042d4:	0801ed30 	.word	0x0801ed30

080042d8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>:
      * \sa operator[](Index)
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator()(Index row, Index col)
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
    {
      eigen_assert(row >= 0 && row < rows()
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	db10      	blt.n	800430c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fecd 	bl	800508a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4293      	cmp	r3, r2
 80042f6:	da09      	bge.n	800430c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	db06      	blt.n	800430c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fed3 	bl	80050aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004304:	4602      	mov	r2, r0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4293      	cmp	r3, r2
 800430a:	db06      	blt.n	800431a <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x42>
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x58>)
 800430e:	4a09      	ldr	r2, [pc, #36]	; (8004334 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x5c>)
 8004310:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8004314:	4808      	ldr	r0, [pc, #32]	; (8004338 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x60>)
 8004316:	f019 fbe9 	bl	801daec <__assert_func>
          && col >= 0 && col < cols());
      return coeffRef(row, col);
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68b9      	ldr	r1, [r7, #8]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 feec 	bl	80050fc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>
 8004324:	4603      	mov	r3, r0
    }
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	0801eed0 	.word	0x0801eed0
 8004334:	0801ef08 	.word	0x0801ef08
 8004338:	0801eff4 	.word	0x0801eff4

0800433c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800433c:	b5b0      	push	{r4, r5, r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	ed87 0a01 	vstr	s0, [r7, #4]
 8004346:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7fc f8fd 	bl	8000548 <__aeabi_f2d>
 800434e:	4604      	mov	r4, r0
 8004350:	460d      	mov	r5, r1
 8004352:	6838      	ldr	r0, [r7, #0]
 8004354:	f7fc f8e6 	bl	8000524 <__aeabi_i2d>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	ec43 2b11 	vmov	d1, r2, r3
 8004360:	ec45 4b10 	vmov	d0, r4, r5
 8004364:	f018 fc86 	bl	801cc74 <pow>
 8004368:	eeb0 7a40 	vmov.f32	s14, s0
 800436c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8004370:	eeb0 0a47 	vmov.f32	s0, s14
 8004374:	eef0 0a67 	vmov.f32	s1, s15
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bdb0      	pop	{r4, r5, r7, pc}

0800437e <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>:
  * on the behavior of CwiseNullaryOp.
  *
  * \sa class CwiseUnaryOp, class CwiseBinaryOp, DenseBase::NullaryExpr
  */
template<typename NullaryOp, typename PlainObjectType>
class CwiseNullaryOp : public internal::dense_xpr_base< CwiseNullaryOp<NullaryOp, PlainObjectType> >::type, internal::no_assignment_operator
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	1d1a      	adds	r2, r3, #4
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	3304      	adds	r3, #4
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f000 ffae 	bl	80052f4 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>:
  return CwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>(derived(), other.derived(), func);
}


#ifndef EIGEN_PARSED_BY_DOXYGEN
EIGEN_MAKE_SCALAR_BINARY_OP(operator*,product)
 80043a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043a4:	b089      	sub	sp, #36	; 0x24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	68b8      	ldr	r0, [r7, #8]
 80043b0:	f000 fec7 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80043b4:	4604      	mov	r4, r0
 80043b6:	68b8      	ldr	r0, [r7, #8]
 80043b8:	f000 fec3 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80043bc:	4603      	mov	r3, r0
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fd23 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80043c4:	4605      	mov	r5, r0
 80043c6:	68b8      	ldr	r0, [r7, #8]
 80043c8:	f000 febb 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80043cc:	4603      	mov	r3, r0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fd10 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80043d4:	4606      	mov	r6, r0
 80043d6:	f107 0318 	add.w	r3, r7, #24
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 febb 	bl	8005158 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>
 80043e2:	f107 0318 	add.w	r3, r7, #24
 80043e6:	f107 0010 	add.w	r0, r7, #16
 80043ea:	4632      	mov	r2, r6
 80043ec:	4629      	mov	r1, r5
 80043ee:	f000 fecf 	bl	8005190 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>
 80043f2:	f107 031c 	add.w	r3, r7, #28
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 ff02 	bl	8005200 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80043fc:	f107 031c 	add.w	r3, r7, #28
 8004400:	f107 0210 	add.w	r2, r7, #16
 8004404:	4621      	mov	r1, r4
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 ff34 	bl	8005274 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	3724      	adds	r7, #36	; 0x24
 8004410:	46bd      	mov	sp, r7
 8004412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004414 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>:
  *
  * \sa transposeInPlace(), adjoint() */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
Transpose<Derived>
DenseBase<Derived>::transpose()
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
{
  return TransposeReturnType(derived());
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 ff85 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004422:	4602      	mov	r2, r0
 8004424:	f107 030c 	add.w	r3, r7, #12
 8004428:	4611      	mov	r1, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f000 ffa1 	bl	8005372 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>
 8004430:	68fb      	ldr	r3, [r7, #12]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>:
  * CwiseBinaryOp types explicitly.
  *
  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
  */
template<typename BinaryOp, typename LhsType, typename RhsType>
class CwiseBinaryOp :
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	1d1a      	adds	r2, r3, #4
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	3304      	adds	r3, #4
 8004454:	4619      	mov	r1, r3
 8004456:	4610      	mov	r0, r2
 8004458:	f7ff ff91 	bl	800437e <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f103 020c 	add.w	r2, r3, #12
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	4619      	mov	r1, r3
 8004468:	4610      	mov	r0, r2
 800446a:	f000 ff53 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived, OtherDerived>
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004478:	b590      	push	{r4, r7, lr}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)
#ifdef EIGEN_DEBUG_PRODUCT
  internal::product_type<Derived,OtherDerived>::debug();
#endif

  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004484:	68b8      	ldr	r0, [r7, #8]
 8004486:	f000 ff84 	bl	8005392 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800448a:	4604      	mov	r4, r0
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 ff8b 	bl	80053a8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8004492:	4603      	mov	r3, r0
 8004494:	461a      	mov	r2, r3
 8004496:	4621      	mov	r1, r4
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 ffd1 	bl	8005440 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>
}
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd90      	pop	{r4, r7, pc}

080044a6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6839      	ldr	r1, [r7, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fff3 	bl	80054a0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 80044ba:	4603      	mov	r3, r0
    }
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80044d0:	68b8      	ldr	r0, [r7, #8]
 80044d2:	f000 fffe 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80044d6:	4604      	mov	r4, r0
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fe32 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80044de:	4603      	mov	r3, r0
 80044e0:	461a      	mov	r2, r3
 80044e2:	4621      	mov	r1, r4
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f001 f823 	bl	8005530 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd90      	pop	{r4, r7, pc}

080044f2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6839      	ldr	r1, [r7, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f001 f843 	bl	800558c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004506:	4603      	mov	r3, r0
    }
 8004508:	4618      	mov	r0, r3
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 800451c:	68b8      	ldr	r0, [r7, #8]
 800451e:	f000 ffd8 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004522:	4604      	mov	r4, r0
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 ffd4 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800452a:	4603      	mov	r3, r0
 800452c:	461a      	mov	r2, r3
 800452e:	4621      	mov	r1, r4
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f001 f869 	bl	8005608 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>
}
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	bd90      	pop	{r4, r7, pc}

0800453e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f001 f88c 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800454c:	4602      	mov	r2, r0
 800454e:	f107 030c 	add.w	r3, r7, #12
 8004552:	4611      	mov	r1, r2
 8004554:	4618      	mov	r0, r3
 8004556:	f001 f8a8 	bl	80056aa <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>
 800455a:	68fb      	ldr	r3, [r7, #12]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004570:	68b8      	ldr	r0, [r7, #8]
 8004572:	f001 f8aa 	bl	80056ca <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 8004576:	4604      	mov	r4, r0
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f001 f8b1 	bl	80056e0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	4621      	mov	r1, r4
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f001 f8f7 	bl	8005778 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>
}
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	bd90      	pop	{r4, r7, pc}

08004592 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004592:	b5b0      	push	{r4, r5, r7, lr}
 8004594:	b086      	sub	sp, #24
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
 800459e:	68b8      	ldr	r0, [r7, #8]
 80045a0:	f001 f91a 	bl	80057d8 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 80045a4:	4604      	mov	r4, r0
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 ff93 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80045ac:	4605      	mov	r5, r0
 80045ae:	f107 0314 	add.w	r3, r7, #20
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 f91b 	bl	80057ee <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80045b8:	f107 0314 	add.w	r3, r7, #20
 80045bc:	462a      	mov	r2, r5
 80045be:	4621      	mov	r1, r4
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f001 f953 	bl	800586c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bdb0      	pop	{r4, r5, r7, pc}

080045ce <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f001 f991 	bl	8005904 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
 80045e2:	4603      	mov	r3, r0
    }
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f001 f99e 	bl	8005936 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80045fa:	4602      	mov	r2, r0
 80045fc:	f107 030c 	add.w	r3, r7, #12
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f001 f9ba 	bl	800597c <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>
 8004608:	68fb      	ldr	r3, [r7, #12]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004612:	b590      	push	{r4, r7, lr}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 800461e:	68b8      	ldr	r0, [r7, #8]
 8004620:	f000 ff57 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004624:	4604      	mov	r4, r0
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f001 f9b8 	bl	800599c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	4621      	mov	r1, r4
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f001 f9f0 	bl	8005a18 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>
}
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	bd90      	pop	{r4, r7, pc}

08004640 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004640:	b590      	push	{r4, r7, lr}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 800464c:	68b8      	ldr	r0, [r7, #8]
 800464e:	f001 fa11 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004652:	4604      	mov	r4, r0
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 ff3c 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800465a:	4603      	mov	r3, r0
 800465c:	461a      	mov	r2, r3
 800465e:	4621      	mov	r1, r4
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f001 fa37 	bl	8005ad4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	bd90      	pop	{r4, r7, pc}

0800466e <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800466e:	b590      	push	{r4, r7, lr}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 800467a:	68b8      	ldr	r0, [r7, #8]
 800467c:	f001 fa58 	bl	8005b30 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8004680:	4604      	mov	r4, r0
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f001 f98a 	bl	800599c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8004688:	4603      	mov	r3, r0
 800468a:	461a      	mov	r2, r3
 800468c:	4621      	mov	r1, r4
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f001 fa8c 	bl	8005bac <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>
}
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	bd90      	pop	{r4, r7, pc}

0800469c <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
 800469c:	b5b0      	push	{r4, r5, r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	68b8      	ldr	r0, [r7, #8]
 80046aa:	f001 faaf 	bl	8005c0c <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 80046ae:	4604      	mov	r4, r0
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f001 fab6 	bl	8005c22 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 80046b6:	4605      	mov	r5, r0
 80046b8:	f107 0314 	add.w	r3, r7, #20
 80046bc:	4618      	mov	r0, r3
 80046be:	f001 f896 	bl	80057ee <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80046c2:	f107 0314 	add.w	r3, r7, #20
 80046c6:	462a      	mov	r2, r5
 80046c8:	4621      	mov	r1, r4
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f001 fafe 	bl	8005ccc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bdb0      	pop	{r4, r5, r7, pc}

080046d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  inline const Derived& const_derived() const
  { return *static_cast<const Derived*>(this); }

  /** \returns the number of rows. \sa cols(), RowsAtCompileTime */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f001 fb33 	bl	8005d4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 fb3a 	bl	8005d62 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80046ee:	4603      	mov	r3, r0
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  /** \returns the number of columns. \sa rows(), ColsAtCompileTime*/
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f001 fb23 	bl	8005d4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004706:	4603      	mov	r3, r0
 8004708:	4618      	mov	r0, r3
 800470a:	f001 fb37 	bl	8005d7c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800470e:	4603      	mov	r3, r0
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>:
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	ca07      	ldmia	r2, {r0, r1, r2}
 8004728:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	60da      	str	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f103 0210 	add.w	r2, r3, #16
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	3310      	adds	r3, #16
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f001 f8d3 	bl	80058ec <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>:
  *
  * \sa computeInverseAndDetWithCheck()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC
inline const Inverse<Derived> MatrixBase<Derived>::inverse() const
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
{
  EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsInteger,THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES)
  eigen_assert(rows() == cols());
 800475a:	6838      	ldr	r0, [r7, #0]
 800475c:	f7ff ffbc 	bl	80046d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8004760:	4604      	mov	r4, r0
 8004762:	6838      	ldr	r0, [r7, #0]
 8004764:	f7ff ffc8 	bl	80046f8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8004768:	4603      	mov	r3, r0
 800476a:	429c      	cmp	r4, r3
 800476c:	d006      	beq.n	800477c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x2c>
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x44>)
 8004770:	4a09      	ldr	r2, [pc, #36]	; (8004798 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x48>)
 8004772:	f240 115f 	movw	r1, #351	; 0x15f
 8004776:	4809      	ldr	r0, [pc, #36]	; (800479c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x4c>)
 8004778:	f019 f9b8 	bl	801daec <__assert_func>
  return Inverse<Derived>(derived());
 800477c:	6838      	ldr	r0, [r7, #0]
 800477e:	f001 fae5 	bl	8005d4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004782:	4603      	mov	r3, r0
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f001 fb1d 	bl	8005dc6 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
}
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bd90      	pop	{r4, r7, pc}
 8004794:	0801f050 	.word	0x0801f050
 8004798:	0801f064 	.word	0x0801f064
 800479c:	0801f1b8 	.word	0x0801f1b8

080047a0 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>:
  * This class represents an abstract expression of A.inverse()
  * and most of the time this is the only way it is used.
  *
  */
template<typename XprType>
class Inverse : public InverseImpl<XprType,typename internal::traits<XprType>::StorageKind>
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	4611      	mov	r1, r2
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff ffb1 	bl	8004718 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4618      	mov	r0, r3
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80047cc:	68b8      	ldr	r0, [r7, #8]
 80047ce:	f001 fb0c 	bl	8005dea <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 80047d2:	4604      	mov	r4, r0
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f001 fb13 	bl	8005e00 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 80047da:	4603      	mov	r3, r0
 80047dc:	461a      	mov	r2, r3
 80047de:	4621      	mov	r1, r4
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f001 fb57 	bl	8005e94 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>
}
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd90      	pop	{r4, r7, pc}

080047ee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6839      	ldr	r1, [r7, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f001 fb7b 	bl	8005ef8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004802:	4603      	mov	r3, r0
    }
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800480c:	b590      	push	{r4, r7, lr}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004818:	68b8      	ldr	r0, [r7, #8]
 800481a:	f001 f92b 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800481e:	4604      	mov	r4, r0
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fc8e 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004826:	4603      	mov	r3, r0
 8004828:	461a      	mov	r2, r3
 800482a:	4621      	mov	r1, r4
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f001 fba1 	bl	8005f74 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	bd90      	pop	{r4, r7, pc}

0800483a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 800483a:	b5b0      	push	{r4, r5, r7, lr}
 800483c:	b086      	sub	sp, #24
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	68b8      	ldr	r0, [r7, #8]
 8004848:	f001 f9eb 	bl	8005c22 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800484c:	4604      	mov	r4, r0
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 fbbe 	bl	8005fd0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8004854:	4605      	mov	r5, r0
 8004856:	f107 0314 	add.w	r3, r7, #20
 800485a:	4618      	mov	r0, r3
 800485c:	f001 fbc3 	bl	8005fe6 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004860:	f107 0314 	add.w	r3, r7, #20
 8004864:	462a      	mov	r2, r5
 8004866:	4621      	mov	r1, r4
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f001 fbfb 	bl	8006064 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bdb0      	pop	{r4, r5, r7, pc}

08004876 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>:
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	1d1a      	adds	r2, r3, #4
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	3304      	adds	r3, #4
 8004890:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004894:	e882 0003 	stmia.w	r2, {r0, r1}
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f103 020c 	add.w	r2, r3, #12
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f001 fc1f 	bl	80060e8 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80048b4:	b590      	push	{r4, r7, lr}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80048c0:	68b8      	ldr	r0, [r7, #8]
 80048c2:	f000 fc3e 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80048c6:	4604      	mov	r4, r0
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f001 fc19 	bl	8006100 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 80048ce:	4603      	mov	r3, r0
 80048d0:	461a      	mov	r2, r3
 80048d2:	4621      	mov	r1, r4
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f001 fc51 	bl	800617c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>
}
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd90      	pop	{r4, r7, pc}

080048e2 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>:
  * The other template parameters are:
  * \tparam Option     can be DefaultProduct, AliasFreeProduct, or LazyProduct
  *
  */
template<typename _Lhs, typename _Rhs, int Option>
class Product : public ProductImpl<_Lhs,_Rhs,Option,
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	1d1a      	adds	r2, r3, #4
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f7ff ffb9 	bl	8004876 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 800490e:	b5b0      	push	{r4, r5, r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	68b8      	ldr	r0, [r7, #8]
 800491c:	f000 fc11 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004920:	4604      	mov	r4, r0
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f001 fc5a 	bl	80061dc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>
 8004928:	4605      	mov	r5, r0
 800492a:	f107 0314 	add.w	r3, r7, #20
 800492e:	4618      	mov	r0, r3
 8004930:	f000 ff5d 	bl	80057ee <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004934:	f107 0314 	add.w	r3, r7, #20
 8004938:	462a      	mov	r2, r5
 800493a:	4621      	mov	r1, r4
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f001 fc8d 	bl	800625c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bdb0      	pop	{r4, r5, r7, pc}

0800494a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f001 fcbf 	bl	80062dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
 800495e:	4603      	mov	r3, r0
    }
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004974:	68b8      	ldr	r0, [r7, #8]
 8004976:	f000 fbe4 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800497a:	4604      	mov	r4, r0
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f001 f879 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004982:	4603      	mov	r3, r0
 8004984:	461a      	mov	r2, r3
 8004986:	4621      	mov	r1, r4
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f001 fce5 	bl	8006358 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>
}
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	bd90      	pop	{r4, r7, pc}

08004996 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004996:	b5b0      	push	{r4, r5, r7, lr}
 8004998:	b086      	sub	sp, #24
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	68b8      	ldr	r0, [r7, #8]
 80049a4:	f000 fd95 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80049a8:	4604      	mov	r4, r0
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f001 fd02 	bl	80063b4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>
 80049b0:	4605      	mov	r5, r0
 80049b2:	f107 0314 	add.w	r3, r7, #20
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 fb15 	bl	8005fe6 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 80049bc:	f107 0314 	add.w	r3, r7, #20
 80049c0:	462a      	mov	r2, r5
 80049c2:	4621      	mov	r1, r4
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f001 fd35 	bl	8006434 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bdb0      	pop	{r4, r5, r7, pc}

080049d2 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>:
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	1d1a      	adds	r2, r3, #4
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	3304      	adds	r3, #4
 80049ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80049f0:	e882 0003 	stmia.w	r2, {r0, r1}
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f103 020c 	add.w	r2, r3, #12
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	330c      	adds	r3, #12
 80049fe:	4619      	mov	r1, r3
 8004a00:	4610      	mov	r0, r2
 8004a02:	f001 fb71 	bl	80060e8 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004a10:	b590      	push	{r4, r7, lr}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004a1c:	68b8      	ldr	r0, [r7, #8]
 8004a1e:	f001 fd4b 	bl	80064b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 8004a22:	4604      	mov	r4, r0
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fd54 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4621      	mov	r1, r4
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f001 fd7f 	bl	8006534 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>
}
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd90      	pop	{r4, r7, pc}

08004a3e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b082      	sub	sp, #8
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6839      	ldr	r1, [r7, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f001 fd9f 	bl	8006590 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004a52:	4603      	mov	r3, r0
    }
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4618      	mov	r0, r3
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue,        pow, power to \c p, const RealScalar& p)
    EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \c p, const std::complex<RealScalar>& p)

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(MatrixBase)
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MatrixBase)
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f001 fd89 	bl	80065c2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    // Prevent user from trying to instantiate PlainObjectBase objects
    // by making all its constructor protected. See bug 1074.
  protected:

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff ffed 	bl	8004aa2 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 fd84 	bl	80065d8 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>
    {
//       _check_template_params();
//       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void swap(DenseBase<OtherDerived> const & other)
    { Base::swap(other.derived()); }

    EIGEN_DEVICE_FUNC
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004ada:	b480      	push	{r7}
 8004adc:	af00      	add	r7, sp, #0
                        && ((MaxColsAtCompileTime == Dynamic) || (MaxColsAtCompileTime >= 0))
                        && (MaxRowsAtCompileTime == RowsAtCompileTime || RowsAtCompileTime==Dynamic)
                        && (MaxColsAtCompileTime == ColsAtCompileTime || ColsAtCompileTime==Dynamic)
                        && (Options & (DontAlign|RowMajor)) == Options),
        INVALID_MATRIX_TEMPLATE_PARAMETERS)
    }
 8004ade:	bf00      	nop
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f001 fd7e 	bl	80065f2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4618      	mov	r0, r3
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff ffed 	bl	8004ae8 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 fd79 	bl	8006608 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>
    }
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
    }
 8004b24:	bf00      	nop
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f001 fd73 	bl	8006622 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff ffed 	bl	8004b2e <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f001 fd6e 	bl	8006638 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>
    }
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004b66:	b480      	push	{r7}
 8004b68:	af00      	add	r7, sp, #0
    }
 8004b6a:	bf00      	nop
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f001 fd68 	bl	8006652 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff ffed 	bl	8004b74 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 fd63 	bl	8006668 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>
    }
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
    }
 8004bb0:	bf00      	nop
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	605a      	str	r2, [r3, #4]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	609a      	str	r2, [r3, #8]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 f86a 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	dd07      	ble.n	8004c00 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x44>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 f857 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	dc05      	bgt.n	8004c0c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x50>
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x74>)
 8004c02:	4a0c      	ldr	r2, [pc, #48]	; (8004c34 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x78>)
 8004c04:	2124      	movs	r1, #36	; 0x24
 8004c06:	480c      	ldr	r0, [pc, #48]	; (8004c38 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x7c>)
 8004c08:	f018 ff70 	bl	801daec <__assert_func>
 8004c0c:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2200      	movs	r2, #0
 8004c14:	2100      	movs	r1, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 f85c 	bl	8004cd4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6013      	str	r3, [r2, #0]
  }
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	0801f210 	.word	0x0801f210
 8004c34:	0801f26c 	.word	0x0801f26c
 8004c38:	0801ec7c 	.word	0x0801ec7c

08004c3c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	18d4      	adds	r4, r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f833 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	429c      	cmp	r4, r3
 8004c5c:	d007      	beq.n	8004c6e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x32>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f820 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x46>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689c      	ldr	r4, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f816 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	429c      	cmp	r4, r3
 8004c80:	d005      	beq.n	8004c8e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x52>
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x60>)
 8004c84:	4a06      	ldr	r2, [pc, #24]	; (8004ca0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x64>)
 8004c86:	217a      	movs	r1, #122	; 0x7a
 8004c88:	4806      	ldr	r0, [pc, #24]	; (8004ca4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x68>)
 8004c8a:	f018 ff2f 	bl	801daec <__assert_func>
 8004c8e:	bf00      	nop
      return m_xpr;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
  }
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd90      	pop	{r4, r7, pc}
 8004c9c:	0801f31c 	.word	0x0801f31c
 8004ca0:	0801f3bc 	.word	0x0801f3bc
 8004ca4:	0801ec7c 	.word	0x0801ec7c

08004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	f001 fce7 	bl	8006682 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	f001 fce4 	bl	8006692 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 fcdd 	bl	80066a2 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 8004ce8:	4604      	mov	r4, r0
 8004cea:	f001 fcd2 	bl	8006692 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	fb03 f202 	mul.w	r2, r3, r2
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4423      	add	r3, r4
    }
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd90      	pop	{r4, r7, pc}
	...

08004d08 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	605a      	str	r2, [r3, #4]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	609a      	str	r2, [r3, #8]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 f86a 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	dd07      	ble.n	8004d4c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x44>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 f857 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	dc05      	bgt.n	8004d58 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x50>
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x74>)
 8004d4e:	4a0c      	ldr	r2, [pc, #48]	; (8004d80 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x78>)
 8004d50:	2124      	movs	r1, #36	; 0x24
 8004d52:	480c      	ldr	r0, [pc, #48]	; (8004d84 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x7c>)
 8004d54:	f018 feca 	bl	801daec <__assert_func>
 8004d58:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2100      	movs	r1, #0
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 f85c 	bl	8004e20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6013      	str	r3, [r2, #0]
  }
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	0801f210 	.word	0x0801f210
 8004d80:	0801f424 	.word	0x0801f424
 8004d84:	0801ec7c 	.word	0x0801ec7c

08004d88 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8004d88:	b590      	push	{r4, r7, lr}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	18d4      	adds	r4, r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 f833 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004da4:	4603      	mov	r3, r0
 8004da6:	429c      	cmp	r4, r3
 8004da8:	d007      	beq.n	8004dba <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x32>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 f820 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d109      	bne.n	8004dce <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x46>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689c      	ldr	r4, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f816 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	429c      	cmp	r4, r3
 8004dcc:	d005      	beq.n	8004dda <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x52>
 8004dce:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x60>)
 8004dd0:	4a06      	ldr	r2, [pc, #24]	; (8004dec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x64>)
 8004dd2:	217a      	movs	r1, #122	; 0x7a
 8004dd4:	4806      	ldr	r0, [pc, #24]	; (8004df0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x68>)
 8004dd6:	f018 fe89 	bl	801daec <__assert_func>
 8004dda:	bf00      	nop
      return m_xpr;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
  }
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd90      	pop	{r4, r7, pc}
 8004de8:	0801f31c 	.word	0x0801f31c
 8004dec:	0801f4d4 	.word	0x0801f4d4
 8004df0:	0801ec7c 	.word	0x0801ec7c

08004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	f001 fc5c 	bl	80066b8 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>
 8004e00:	4603      	mov	r3, r0
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	f001 fc59 	bl	80066c8 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 8004e16:	4603      	mov	r3, r0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8004e20:	b590      	push	{r4, r7, lr}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 fc52 	bl	80066d8 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 8004e34:	4604      	mov	r4, r0
 8004e36:	f001 fc47 	bl	80066c8 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	fb03 f202 	mul.w	r2, r3, r2
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4423      	add	r3, r4
    }
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd90      	pop	{r4, r7, pc}
	...

08004e54 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	605a      	str	r2, [r3, #4]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	609a      	str	r2, [r3, #8]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 ff0e 	bl	8005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	dd07      	ble.n	8004e98 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x44>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 ff11 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	dc05      	bgt.n	8004ea4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x50>
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x74>)
 8004e9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ecc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x78>)
 8004e9c:	2124      	movs	r1, #36	; 0x24
 8004e9e:	480c      	ldr	r0, [pc, #48]	; (8004ed0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x7c>)
 8004ea0:	f018 fe24 	bl	801daec <__assert_func>
 8004ea4:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2100      	movs	r1, #0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f001 fc1d 	bl	80066ee <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6013      	str	r3, [r2, #0]
  }
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	0801f210 	.word	0x0801f210
 8004ecc:	0801f53c 	.word	0x0801f53c
 8004ed0:	0801ec7c 	.word	0x0801ec7c

08004ed4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8004ed4:	b590      	push	{r4, r7, lr}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	18d4      	adds	r4, r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fed7 	bl	8005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	429c      	cmp	r4, r3
 8004ef4:	d007      	beq.n	8004f06 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x32>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 feda 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x46>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689c      	ldr	r4, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fed0 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004f14:	4603      	mov	r3, r0
 8004f16:	429c      	cmp	r4, r3
 8004f18:	d005      	beq.n	8004f26 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x52>
 8004f1a:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x60>)
 8004f1c:	4a06      	ldr	r2, [pc, #24]	; (8004f38 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x64>)
 8004f1e:	217a      	movs	r1, #122	; 0x7a
 8004f20:	4806      	ldr	r0, [pc, #24]	; (8004f3c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x68>)
 8004f22:	f018 fde3 	bl	801daec <__assert_func>
 8004f26:	bf00      	nop
      return m_xpr;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
  }
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd90      	pop	{r4, r7, pc}
 8004f34:	0801f31c 	.word	0x0801f31c
 8004f38:	0801f5ec 	.word	0x0801f5ec
 8004f3c:	0801ec7c 	.word	0x0801ec7c

08004f40 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	605a      	str	r2, [r3, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	609a      	str	r2, [r3, #8]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 f86a 	bl	8005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	dd07      	ble.n	8004f84 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x44>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 f857 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	dc05      	bgt.n	8004f90 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x50>
 8004f84:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x74>)
 8004f86:	4a0c      	ldr	r2, [pc, #48]	; (8004fb8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x78>)
 8004f88:	2124      	movs	r1, #36	; 0x24
 8004f8a:	480c      	ldr	r0, [pc, #48]	; (8004fbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x7c>)
 8004f8c:	f018 fdae 	bl	801daec <__assert_func>
 8004f90:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2200      	movs	r2, #0
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 f85c 	bl	8005058 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6013      	str	r3, [r2, #0]
  }
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	0801f210 	.word	0x0801f210
 8004fb8:	0801f654 	.word	0x0801f654
 8004fbc:	0801ec7c 	.word	0x0801ec7c

08004fc0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	18d4      	adds	r4, r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 f833 	bl	8005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	429c      	cmp	r4, r3
 8004fe0:	d007      	beq.n	8004ff2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x32>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f820 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x46>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689c      	ldr	r4, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 f816 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005000:	4603      	mov	r3, r0
 8005002:	429c      	cmp	r4, r3
 8005004:	d005      	beq.n	8005012 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x52>
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x60>)
 8005008:	4a06      	ldr	r2, [pc, #24]	; (8005024 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x64>)
 800500a:	217a      	movs	r1, #122	; 0x7a
 800500c:	4806      	ldr	r0, [pc, #24]	; (8005028 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x68>)
 800500e:	f018 fd6d 	bl	801daec <__assert_func>
 8005012:	bf00      	nop
      return m_xpr;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
  }
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	bd90      	pop	{r4, r7, pc}
 8005020:	0801f31c 	.word	0x0801f31c
 8005024:	0801f704 	.word	0x0801f704
 8005028:	0801ec7c 	.word	0x0801ec7c

0800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	f001 fb74 	bl	8006720 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 8005038:	4603      	mov	r3, r0
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	f001 fb71 	bl	8006730 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>
 800504e:	4603      	mov	r3, r0
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8005058:	b590      	push	{r4, r7, lr}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
        return m_storage.data()[colId + rowId * m_storage.cols()];
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4618      	mov	r0, r3
 8005068:	f001 fb6a 	bl	8006740 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 800506c:	4604      	mov	r4, r0
 800506e:	f001 fb57 	bl	8006720 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 8005072:	4602      	mov	r2, r0
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	fb03 f202 	mul.w	r2, r3, r2
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4423      	add	r3, r4
    }
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	bd90      	pop	{r4, r7, pc}

0800508a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800508a:	b580      	push	{r7, lr}
 800508c:	b082      	sub	sp, #8
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f855 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005098:	4603      	mov	r3, r0
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff feb5 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80050a0:	4603      	mov	r3, r0
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f845 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80050b8:	4603      	mov	r3, r0
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff fe9a 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80050c0:	4603      	mov	r3, r0
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
protected:
  Index m_outerStride;
};

template<typename Derived>
struct evaluator<PlainObjectBase<Derived> >
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f001 fb4f 	bl	8006776 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:

  plainobjectbase_evaluator_data<Scalar,OuterStrideAtCompileTime> m_d;
};

template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff ffec 	bl	80050ca <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)
 80050fc:	b590      	push	{r4, r7, lr}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
      return internal::evaluator<Derived>(derived()).coeffRef(row,col);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f90f 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800510e:	4602      	mov	r2, r0
 8005110:	f107 0314 	add.w	r3, r7, #20
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f001 fb1d 	bl	8006756 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800511c:	f107 0314 	add.w	r3, r7, #20
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	4618      	mov	r0, r3
 8005126:	f001 fb31 	bl	800678c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>
 800512a:	4604      	mov	r4, r0
 800512c:	bf00      	nop
 800512e:	f107 0314 	add.w	r3, r7, #20
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff ffd5 	bl	80050e2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8005138:	4623      	mov	r3, r4
    }
 800513a:	4618      	mov	r0, r3
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	bd90      	pop	{r4, r7, pc}

08005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>:
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f001 fb1b 	bl	80067bc <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>:

    typedef typename internal::dense_xpr_base<CwiseNullaryOp>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(CwiseNullaryOp)

    EIGEN_DEVICE_FUNC
    CwiseNullaryOp(Index rows, Index cols, const NullaryOp& func = NullaryOp())
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
      : m_rows(rows), m_cols(cols), m_functor(func)
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff ffea 	bl	8005178 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f001 fb13 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3301      	adds	r3, #1
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f001 fb27 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3304      	adds	r3, #4
 80051be:	6839      	ldr	r1, [r7, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 f897 	bl	80052f4 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
    {
      eigen_assert(rows >= 0
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	db08      	blt.n	80051de <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d105      	bne.n	80051de <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	db02      	blt.n	80051de <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d005      	beq.n	80051ea <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x5a>
 80051de:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x64>)
 80051e0:	4a05      	ldr	r2, [pc, #20]	; (80051f8 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x68>)
 80051e2:	2147      	movs	r1, #71	; 0x47
 80051e4:	4805      	ldr	r0, [pc, #20]	; (80051fc <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x6c>)
 80051e6:	f018 fc81 	bl	801daec <__assert_func>
            && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
            &&  cols >= 0
            && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols));
    }
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	0801f76c 	.word	0x0801f76c
 80051f8:	0801f804 	.word	0x0801f804
 80051fc:	0801f8f8 	.word	0x0801f8f8

08005200 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_product_op)
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f001 fb0c 	bl	800683c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>:
    const BinaryOp m_functor;
};

// Generic API dispatcher
template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
class CwiseBinaryOpImpl
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff ffed 	bl	8005216 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index rows() const { return m_rows.value(); }
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	f001 fb00 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8005252:	4603      	mov	r3, r0
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const { return m_cols.value(); }
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	f001 fafd 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8005268:	4603      	mov	r3, r0
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7ff ffd3 	bl	800522e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3304      	adds	r3, #4
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff f872 	bl	800437e <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	330c      	adds	r3, #12
 800529e:	6839      	ldr	r1, [r7, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 f837 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff fdae 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80052ae:	4604      	mov	r4, r0
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff ffc8 	bl	8005246 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80052b6:	4603      	mov	r3, r0
 80052b8:	429c      	cmp	r4, r3
 80052ba:	d10a      	bne.n	80052d2 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x5e>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fd98 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80052c4:	4604      	mov	r4, r0
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff ffc8 	bl	800525c <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80052cc:	4603      	mov	r3, r0
 80052ce:	429c      	cmp	r4, r3
 80052d0:	d005      	beq.n	80052de <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x6a>
 80052d2:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x74>)
 80052d4:	4a05      	ldr	r2, [pc, #20]	; (80052ec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x78>)
 80052d6:	2174      	movs	r1, #116	; 0x74
 80052d8:	4805      	ldr	r0, [pc, #20]	; (80052f0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x7c>)
 80052da:	f018 fc07 	bl	801daec <__assert_func>
    }
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd90      	pop	{r4, r7, pc}
 80052e8:	0801f954 	.word	0x0801f954
 80052ec:	0801f990 	.word	0x0801f990
 80052f0:	0801fbb8 	.word	0x0801fbb8

080052f4 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>:
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4618      	mov	r0, r3
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f001 fa91 	bl	8006872 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800535a:	b580      	push	{r7, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff ffed 	bl	8005342 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff ffec 	bl	800535a <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4618      	mov	r0, r3
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
 80053be:	b580      	push	{r7, lr}
 80053c0:	b082      	sub	sp, #8
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f001 fa5e 	bl	8006888 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>:
};

namespace internal {

template<typename Lhs, typename Rhs, int Option, int ProductTag = internal::product_type<Lhs,Rhs>::ret>
class dense_product_base
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff ffed 	bl	80053be <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>:
  public:
    typedef typename internal::generic_xpr_base<Product<Lhs,Rhs,Option>, MatrixXpr, StorageKind>::type Base;
};

template<typename Lhs, typename Rhs, int Option>
class ProductImpl<Lhs,Rhs,Option,Dense>
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b082      	sub	sp, #8
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff ffed 	bl	80053d6 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff fcee 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005418:	4603      	mov	r3, r0
    }
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff fce0 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005434:	4603      	mov	r3, r0
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f7ff ffce 	bl	80053ee <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	4618      	mov	r0, r3
 8005458:	f7fe ffef 	bl	800443a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3310      	adds	r3, #16
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005466:	68b8      	ldr	r0, [r7, #8]
 8005468:	f7ff ffcd 	bl	8005406 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 800546c:	4604      	mov	r4, r0
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff ffd7 	bl	8005422 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005474:	4603      	mov	r3, r0
 8005476:	429c      	cmp	r4, r3
 8005478:	d005      	beq.n	8005486 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x46>
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x54>)
 800547c:	4a06      	ldr	r2, [pc, #24]	; (8005498 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x58>)
 800547e:	2160      	movs	r1, #96	; 0x60
 8005480:	4806      	ldr	r0, [pc, #24]	; (800549c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x5c>)
 8005482:	f018 fb33 	bl	801daec <__assert_func>
 8005486:	bf00      	nop
    }
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	bd90      	pop	{r4, r7, pc}
 8005492:	bf00      	nop
 8005494:	0801fc14 	.word	0x0801fc14
 8005498:	0801fca0 	.word	0x0801fca0
 800549c:	0801ff64 	.word	0x0801ff64

080054a0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f8da 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80054b0:	4604      	mov	r4, r0
 80054b2:	6838      	ldr	r0, [r7, #0]
 80054b4:	f001 f9f3 	bl	800689e <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 80054b8:	4603      	mov	r3, r0
 80054ba:	4619      	mov	r1, r3
 80054bc:	4620      	mov	r0, r4
 80054be:	f001 f9f9 	bl	80068b4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>
      return this->derived();
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f8ce 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80054c8:	4603      	mov	r3, r0
    }
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd90      	pop	{r4, r7, pc}

080054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f001 f9f4 	bl	80068de <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4618      	mov	r0, r3
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>:
class dense_product_base
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ffed 	bl	80054e8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff ffed 	bl	8005500 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005530:	b590      	push	{r4, r7, lr}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f7ff ffeb 	bl	8005518 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff fba9 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005556:	4604      	mov	r4, r0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff fc55 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005560:	4603      	mov	r3, r0
 8005562:	429c      	cmp	r4, r3
 8005564:	d005      	beq.n	8005572 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 8005566:	4b06      	ldr	r3, [pc, #24]	; (8005580 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005568:	4a06      	ldr	r2, [pc, #24]	; (8005584 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 800556a:	2160      	movs	r1, #96	; 0x60
 800556c:	4806      	ldr	r0, [pc, #24]	; (8005588 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 800556e:	f018 fabd 	bl	801daec <__assert_func>
 8005572:	bf00      	nop
    }
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	bd90      	pop	{r4, r7, pc}
 800557e:	bf00      	nop
 8005580:	0801fc14 	.word	0x0801fc14
 8005584:	0801ffb8 	.word	0x0801ffb8
 8005588:	0801ff64 	.word	0x0801ff64

0800558c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff fec8 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800559c:	4604      	mov	r4, r0
 800559e:	6838      	ldr	r0, [r7, #0]
 80055a0:	f001 f9a8 	bl	80068f4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 80055a4:	4603      	mov	r3, r0
 80055a6:	4619      	mov	r1, r3
 80055a8:	4620      	mov	r0, r4
 80055aa:	f001 f9ae 	bl	800690a <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff febc 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80055b4:	4603      	mov	r3, r0
    }
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd90      	pop	{r4, r7, pc}

080055be <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 f9b4 	bl	8006934 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>:
class dense_product_base
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b082      	sub	sp, #8
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff ffed 	bl	80055be <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff ffed 	bl	80055d6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005608:	b590      	push	{r4, r7, lr}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff ffea 	bl	80055ee <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fb3d 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800562e:	4604      	mov	r4, r0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff fb43 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005638:	4603      	mov	r3, r0
 800563a:	429c      	cmp	r4, r3
 800563c:	d005      	beq.n	800564a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x42>
 800563e:	4b06      	ldr	r3, [pc, #24]	; (8005658 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x50>)
 8005640:	4a06      	ldr	r2, [pc, #24]	; (800565c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x54>)
 8005642:	2160      	movs	r1, #96	; 0x60
 8005644:	4806      	ldr	r0, [pc, #24]	; (8005660 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x58>)
 8005646:	f018 fa51 	bl	801daec <__assert_func>
 800564a:	bf00      	nop
    }
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	bd90      	pop	{r4, r7, pc}
 8005656:	bf00      	nop
 8005658:	0801fc14 	.word	0x0801fc14
 800565c:	080200e0 	.word	0x080200e0
 8005660:	0801ff64 	.word	0x0801ff64

08005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4618      	mov	r0, r3
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f001 f961 	bl	800694a <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff ffed 	bl	800567a <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff ffec 	bl	8005692 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>:
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 f92e 	bl	8006960 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>:
class dense_product_base
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff ffed 	bl	80056f6 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff ffed 	bl	800570e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff faac 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005750:	4603      	mov	r3, r0
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800575a:	b580      	push	{r7, lr}
 800575c:	b082      	sub	sp, #8
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fa9e 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800576c:	4603      	mov	r3, r0
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f7ff ffce 	bl	8005726 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005792:	e883 0003 	stmia.w	r3, {r0, r1}
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3308      	adds	r3, #8
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6812      	ldr	r2, [r2, #0]
 800579e:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 80057a0:	68b8      	ldr	r0, [r7, #8]
 80057a2:	f7ff ffcc 	bl	800573e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 80057a6:	4604      	mov	r4, r0
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff ffd6 	bl	800575a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80057ae:	4603      	mov	r3, r0
 80057b0:	429c      	cmp	r4, r3
 80057b2:	d005      	beq.n	80057c0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x48>
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x54>)
 80057b6:	4a06      	ldr	r2, [pc, #24]	; (80057d0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x58>)
 80057b8:	2160      	movs	r1, #96	; 0x60
 80057ba:	4806      	ldr	r0, [pc, #24]	; (80057d4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x5c>)
 80057bc:	f018 f996 	bl	801daec <__assert_func>
 80057c0:	bf00      	nop
    }
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4618      	mov	r0, r3
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd90      	pop	{r4, r7, pc}
 80057cc:	0801fc14 	.word	0x0801fc14
 80057d0:	08020208 	.word	0x08020208
 80057d4:	0801ff64 	.word	0x0801ff64

080057d8 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4618      	mov	r0, r3
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>:
  EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op)
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f001 f8b2 	bl	8006976 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff ffed 	bl	8005804 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4618      	mov	r0, r3
 8005840:	f001 f8a4 	bl	800698c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 8005844:	4603      	mov	r3, r0
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3308      	adds	r3, #8
 800585a:	4618      	mov	r0, r3
 800585c:	f001 f8a4 	bl	80069a8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005860:	4603      	mov	r3, r0
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f7ff ffce 	bl	800581c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	ca07      	ldmia	r2, {r0, r1, r2}
 8005886:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	60da      	str	r2, [r3, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3310      	adds	r3, #16
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f828 	bl	80058ec <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800589c:	68b8      	ldr	r0, [r7, #8]
 800589e:	f7ff ffc9 	bl	8005834 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 80058a2:	4604      	mov	r4, r0
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff fa09 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80058ac:	4603      	mov	r3, r0
 80058ae:	429c      	cmp	r4, r3
 80058b0:	d10a      	bne.n	80058c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x5c>
 80058b2:	68b8      	ldr	r0, [r7, #8]
 80058b4:	f7ff ffcb 	bl	800584e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 80058b8:	4604      	mov	r4, r0
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff f9f3 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80058c2:	4603      	mov	r3, r0
 80058c4:	429c      	cmp	r4, r3
 80058c6:	d005      	beq.n	80058d4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x68>
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x74>)
 80058ca:	4a06      	ldr	r2, [pc, #24]	; (80058e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x78>)
 80058cc:	2174      	movs	r1, #116	; 0x74
 80058ce:	4806      	ldr	r0, [pc, #24]	; (80058e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x7c>)
 80058d0:	f018 f90c 	bl	801daec <__assert_func>
    }
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd90      	pop	{r4, r7, pc}
 80058de:	bf00      	nop
 80058e0:	0801f954 	.word	0x0801f954
 80058e4:	080203b4 	.word	0x080203b4
 80058e8:	0801fbb8 	.word	0x0801fbb8

080058ec <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>:
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005904:	b590      	push	{r4, r7, lr}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff fea8 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005914:	4604      	mov	r4, r0
 8005916:	6838      	ldr	r0, [r7, #0]
 8005918:	f001 f854 	bl	80069c4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>
 800591c:	4603      	mov	r3, r0
 800591e:	4619      	mov	r1, r3
 8005920:	4620      	mov	r0, r4
 8005922:	f001 f85a 	bl	80069da <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>
      return this->derived();
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff fe9c 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800592c:	4603      	mov	r3, r0
    }
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	bd90      	pop	{r4, r7, pc}

08005936 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4618      	mov	r0, r3
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 f855 	bl	8006a04 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff ffed 	bl	800594c <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4618      	mov	r0, r3
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff ffec 	bl	8005964 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4618      	mov	r0, r3
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b082      	sub	sp, #8
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f001 f82d 	bl	8006a1a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>:
class dense_product_base
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff ffed 	bl	80059b2 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b082      	sub	sp, #8
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7ff ffed 	bl	80059ca <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff fb10 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005a18:	b590      	push	{r4, r7, lr}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff ffdc 	bl	80059e2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3304      	adds	r3, #4
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff f933 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005a42:	4604      	mov	r4, r0
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff ffd8 	bl	80059fa <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	429c      	cmp	r4, r3
 8005a4e:	d005      	beq.n	8005a5c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x44>
 8005a50:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x50>)
 8005a52:	4a06      	ldr	r2, [pc, #24]	; (8005a6c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x54>)
 8005a54:	2160      	movs	r1, #96	; 0x60
 8005a56:	4806      	ldr	r0, [pc, #24]	; (8005a70 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x58>)
 8005a58:	f018 f848 	bl	801daec <__assert_func>
 8005a5c:	bf00      	nop
    }
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd90      	pop	{r4, r7, pc}
 8005a68:	0801fc14 	.word	0x0801fc14
 8005a6c:	08020628 	.word	0x08020628
 8005a70:	0801ff64 	.word	0x0801ff64

08005a74 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 ffcc 	bl	8006a30 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>:
class dense_product_base
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff ffed 	bl	8005a8a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff ffed 	bl	8005aa2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7ff ffea 	bl	8005aba <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff fa99 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005afa:	4604      	mov	r4, r0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff f8dd 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005b04:	4603      	mov	r3, r0
 8005b06:	429c      	cmp	r4, r3
 8005b08:	d005      	beq.n	8005b16 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8005b0a:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005b0c:	4a06      	ldr	r2, [pc, #24]	; (8005b28 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005b0e:	2160      	movs	r1, #96	; 0x60
 8005b10:	4806      	ldr	r0, [pc, #24]	; (8005b2c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005b12:	f017 ffeb 	bl	801daec <__assert_func>
 8005b16:	bf00      	nop
    }
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd90      	pop	{r4, r7, pc}
 8005b22:	bf00      	nop
 8005b24:	0801fc14 	.word	0x0801fc14
 8005b28:	08020774 	.word	0x08020774
 8005b2c:	0801ff64 	.word	0x0801ff64

08005b30 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>:
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b082      	sub	sp, #8
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 ff79 	bl	8006a46 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff ffed 	bl	8005b46 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff ffed 	bl	8005b5e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff f884 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005bac:	b590      	push	{r4, r7, lr}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7ff ffdc 	bl	8005b76 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bc6:	e883 0003 	stmia.w	r3, {r0, r1}
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3308      	adds	r3, #8
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005bd4:	68b8      	ldr	r0, [r7, #8]
 8005bd6:	f7ff ffda 	bl	8005b8e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8005bda:	4604      	mov	r4, r0
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff ff0c 	bl	80059fa <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005be2:	4603      	mov	r3, r0
 8005be4:	429c      	cmp	r4, r3
 8005be6:	d005      	beq.n	8005bf4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x48>
 8005be8:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x54>)
 8005bea:	4a06      	ldr	r2, [pc, #24]	; (8005c04 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x58>)
 8005bec:	2160      	movs	r1, #96	; 0x60
 8005bee:	4806      	ldr	r0, [pc, #24]	; (8005c08 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x5c>)
 8005bf0:	f017 ff7c 	bl	801daec <__assert_func>
 8005bf4:	bf00      	nop
    }
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd90      	pop	{r4, r7, pc}
 8005c00:	0801fc14 	.word	0x0801fc14
 8005c04:	0802089c 	.word	0x0802089c
 8005c08:	0801ff64 	.word	0x0801ff64

08005c0c <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4618      	mov	r0, r3
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 ff0b 	bl	8006a5c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff ffed 	bl	8005c38 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4618      	mov	r0, r3
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fefd 	bl	8006a72 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b082      	sub	sp, #8
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3308      	adds	r3, #8
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fefd 	bl	8006a8e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005c94:	4603      	mov	r3, r0
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b082      	sub	sp, #8
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	f000 ff00 	bl	8006aaa <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 8005caa:	4603      	mov	r3, r0
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	f000 fefd 	bl	8006aba <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005ccc:	b590      	push	{r4, r7, lr}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff ffb8 	bl	8005c50 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ce6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	60da      	str	r2, [r3, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3310      	adds	r3, #16
 8005cf4:	6839      	ldr	r1, [r7, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fdf8 	bl	80058ec <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005cfc:	68b8      	ldr	r0, [r7, #8]
 8005cfe:	f7ff ffb3 	bl	8005c68 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8005d02:	4604      	mov	r4, r0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff ffc9 	bl	8005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	429c      	cmp	r4, r3
 8005d10:	d10a      	bne.n	8005d28 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x5c>
 8005d12:	68b8      	ldr	r0, [r7, #8]
 8005d14:	f7ff ffb5 	bl	8005c82 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005d18:	4604      	mov	r4, r0
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff ffc9 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005d22:	4603      	mov	r3, r0
 8005d24:	429c      	cmp	r4, r3
 8005d26:	d005      	beq.n	8005d34 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x68>
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x74>)
 8005d2a:	4a06      	ldr	r2, [pc, #24]	; (8005d44 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x78>)
 8005d2c:	2174      	movs	r1, #116	; 0x74
 8005d2e:	4806      	ldr	r0, [pc, #24]	; (8005d48 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x7c>)
 8005d30:	f017 fedc 	bl	801daec <__assert_func>
    }
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd90      	pop	{r4, r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	0801f954 	.word	0x0801f954
 8005d44:	08020a48 	.word	0x08020a48
 8005d48:	0801fbb8 	.word	0x0801fbb8

08005d4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>:
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff ff7b 	bl	8005c68 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8005d72:	4603      	mov	r3, r0
    }
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff ff7b 	bl	8005c82 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005d8c:	4603      	mov	r3, r0
    }
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b082      	sub	sp, #8
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fe93 	bl	8006aca <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>:
  XprTypeNested m_xpr;
};

// Generic API dispatcher
template<typename XprType, typename StorageKind>
class InverseImpl
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff ffed 	bl	8005d96 <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit EIGEN_DEVICE_FUNC Inverse(const XprType &xpr)
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
    : m_xpr(xpr)
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff ffec 	bl	8005dae <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe fc9c 	bl	8004718 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
  {}
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>:
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>:
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b082      	sub	sp, #8
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fe5e 	bl	8006ae0 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>:
class dense_product_base
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff ffed 	bl	8005e16 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff ffed 	bl	8005e2e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fe0f 	bl	8006a8e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005e70:	4603      	mov	r3, r0
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index rows() const EIGEN_NOEXCEPT { return m_xpr.cols(); }
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff ff79 	bl	8005d7c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005e94:	b590      	push	{r4, r7, lr}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff ffd0 	bl	8005e46 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005eae:	e883 0003 	stmia.w	r3, {r0, r1}
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe fc71 	bl	80047a0 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8005ebe:	68b8      	ldr	r0, [r7, #8]
 8005ec0:	f7ff ffcd 	bl	8005e5e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff ffd7 	bl	8005e7a <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	429c      	cmp	r4, r3
 8005ed0:	d005      	beq.n	8005ede <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x4a>
 8005ed2:	4b06      	ldr	r3, [pc, #24]	; (8005eec <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x58>)
 8005ed4:	4a06      	ldr	r2, [pc, #24]	; (8005ef0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x5c>)
 8005ed6:	2160      	movs	r1, #96	; 0x60
 8005ed8:	4806      	ldr	r0, [pc, #24]	; (8005ef4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x60>)
 8005eda:	f017 fe07 	bl	801daec <__assert_func>
 8005ede:	bf00      	nop
    }
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd90      	pop	{r4, r7, pc}
 8005eea:	bf00      	nop
 8005eec:	0801fc14 	.word	0x0801fc14
 8005ef0:	08020cbc 	.word	0x08020cbc
 8005ef4:	0801ff64 	.word	0x0801ff64

08005ef8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff fa12 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005f08:	4604      	mov	r4, r0
 8005f0a:	6838      	ldr	r0, [r7, #0]
 8005f0c:	f000 fdf3 	bl	8006af6 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 8005f10:	4603      	mov	r3, r0
 8005f12:	4619      	mov	r1, r3
 8005f14:	4620      	mov	r0, r4
 8005f16:	f000 fdf9 	bl	8006b0c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>
      return this->derived();
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff fa06 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005f20:	4603      	mov	r3, r0
    }
 8005f22:	4618      	mov	r0, r3
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd90      	pop	{r4, r7, pc}

08005f2a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fdff 	bl	8006b36 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff ffed 	bl	8005f2a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff ffed 	bl	8005f42 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005f74:	b590      	push	{r4, r7, lr}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f7ff ffea 	bl	8005f5a <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff f849 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe ff33 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	429c      	cmp	r4, r3
 8005fa8:	d005      	beq.n	8005fb6 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005fac:	4a06      	ldr	r2, [pc, #24]	; (8005fc8 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005fae:	2160      	movs	r1, #96	; 0x60
 8005fb0:	4806      	ldr	r0, [pc, #24]	; (8005fcc <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005fb2:	f017 fd9b 	bl	801daec <__assert_func>
 8005fb6:	bf00      	nop
    }
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd90      	pop	{r4, r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	0801fc14 	.word	0x0801fc14
 8005fc8:	08021044 	.word	0x08021044
 8005fcc:	0801ff64 	.word	0x0801ff64

08005fd0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_difference_op : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_difference_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_difference_op)
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fda1 	bl	8006b4c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4618      	mov	r0, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff ffed 	bl	8005ffc <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff f802 	bl	8005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800603e:	4603      	mov	r3, r0
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	4618      	mov	r0, r3
 8006056:	f7fe fecd 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800605a:	4603      	mov	r3, r0
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006064:	b590      	push	{r4, r7, lr}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff ffce 	bl	8006014 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3304      	adds	r3, #4
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006088:	e883 0003 	stmia.w	r3, {r0, r1}
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	330c      	adds	r3, #12
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f000 f828 	bl	80060e8 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4618      	mov	r0, r3
 800609c:	f7ff fdff 	bl	8005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80060a0:	4604      	mov	r4, r0
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff ffc2 	bl	800602c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 80060a8:	4603      	mov	r3, r0
 80060aa:	429c      	cmp	r4, r3
 80060ac:	d10a      	bne.n	80060c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff fdff 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80060b6:	4604      	mov	r4, r0
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff ffc5 	bl	8006048 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 80060be:	4603      	mov	r3, r0
 80060c0:	429c      	cmp	r4, r3
 80060c2:	d005      	beq.n	80060d0 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 80060c6:	4a06      	ldr	r2, [pc, #24]	; (80060e0 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 80060c8:	2174      	movs	r1, #116	; 0x74
 80060ca:	4806      	ldr	r0, [pc, #24]	; (80060e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 80060cc:	f017 fd0e 	bl	801daec <__assert_func>
    }
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd90      	pop	{r4, r7, pc}
 80060da:	bf00      	nop
 80060dc:	0801f954 	.word	0x0801f954
 80060e0:	0802116c 	.word	0x0802116c
 80060e4:	0801fbb8 	.word	0x0801fbb8

080060e8 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>:
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>:
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fd1f 	bl	8006b62 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>:
class dense_product_base
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff ffed 	bl	8006116 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8006146:	b580      	push	{r7, lr}
 8006148:	b082      	sub	sp, #8
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff ffed 	bl	800612e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800615e:	b580      	push	{r7, lr}
 8006160:	b082      	sub	sp, #8
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff fd97 	bl	8005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8006170:	4603      	mov	r3, r0
    }
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800617c:	b590      	push	{r4, r7, lr}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff ffdc 	bl	8006146 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3304      	adds	r3, #4
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe fb6b 	bl	8004876 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fe fe26 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80061a8:	4604      	mov	r4, r0
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff ffd7 	bl	800615e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 80061b0:	4603      	mov	r3, r0
 80061b2:	429c      	cmp	r4, r3
 80061b4:	d005      	beq.n	80061c2 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x46>
 80061b6:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x54>)
 80061b8:	4a06      	ldr	r2, [pc, #24]	; (80061d4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x58>)
 80061ba:	2160      	movs	r1, #96	; 0x60
 80061bc:	4806      	ldr	r0, [pc, #24]	; (80061d8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x5c>)
 80061be:	f017 fc95 	bl	801daec <__assert_func>
 80061c2:	bf00      	nop
    }
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd90      	pop	{r4, r7, pc}
 80061ce:	bf00      	nop
 80061d0:	0801fc14 	.word	0x0801fc14
 80061d4:	08021364 	.word	0x08021364
 80061d8:	0801ff64 	.word	0x0801ff64

080061dc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>:
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fcbc 	bl	8006b78 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff ffed 	bl	80061f2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8006222:	b580      	push	{r7, lr}
 8006224:	b082      	sub	sp, #8
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f7fe fdeb 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006234:	4603      	mov	r3, r0
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800623e:	b580      	push	{r7, lr}
 8006240:	b082      	sub	sp, #8
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3304      	adds	r3, #4
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fc9f 	bl	8006b8e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 8006250:	4603      	mov	r3, r0
 8006252:	4618      	mov	r0, r3
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800625c:	b590      	push	{r4, r7, lr}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff ffcd 	bl	800620a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3304      	adds	r3, #4
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	4618      	mov	r0, r3
 800627e:	f7fe fb30 	bl	80048e2 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3318      	adds	r3, #24
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff fb2f 	bl	80058ec <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4618      	mov	r0, r3
 8006292:	f7fe fdba 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006296:	4604      	mov	r4, r0
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff ffc2 	bl	8006222 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 800629e:	4603      	mov	r3, r0
 80062a0:	429c      	cmp	r4, r3
 80062a2:	d10a      	bne.n	80062ba <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x5e>
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fda4 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80062ac:	4604      	mov	r4, r0
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff ffc5 	bl	800623e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 80062b4:	4603      	mov	r3, r0
 80062b6:	429c      	cmp	r4, r3
 80062b8:	d005      	beq.n	80062c6 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x6a>
 80062ba:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x74>)
 80062bc:	4a05      	ldr	r2, [pc, #20]	; (80062d4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x78>)
 80062be:	2174      	movs	r1, #116	; 0x74
 80062c0:	4805      	ldr	r0, [pc, #20]	; (80062d8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x7c>)
 80062c2:	f017 fc13 	bl	801daec <__assert_func>
    }
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd90      	pop	{r4, r7, pc}
 80062d0:	0801f954 	.word	0x0801f954
 80062d4:	080215d0 	.word	0x080215d0
 80062d8:	0801fbb8 	.word	0x0801fbb8

080062dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 80062dc:	b590      	push	{r4, r7, lr}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff f820 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80062ec:	4604      	mov	r4, r0
 80062ee:	6838      	ldr	r0, [r7, #0]
 80062f0:	f000 fc5b 	bl	8006baa <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 80062f4:	4603      	mov	r3, r0
 80062f6:	4619      	mov	r1, r3
 80062f8:	4620      	mov	r0, r4
 80062fa:	f000 fc61 	bl	8006bc0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>
      return this->derived();
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff f814 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006304:	4603      	mov	r3, r0
    }
 8006306:	4618      	mov	r0, r3
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	bd90      	pop	{r4, r7, pc}

0800630e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fc67 	bl	8006bea <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>:
class dense_product_base
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff ffed 	bl	800630e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7ff ffed 	bl	8006326 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006358:	b590      	push	{r4, r7, lr}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f7ff ffea 	bl	800633e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	4618      	mov	r0, r3
 800637a:	f7fe fd3b 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800637e:	4604      	mov	r4, r0
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe fe5d 	bl	8005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006388:	4603      	mov	r3, r0
 800638a:	429c      	cmp	r4, r3
 800638c:	d005      	beq.n	800639a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 800638e:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8006390:	4a06      	ldr	r2, [pc, #24]	; (80063ac <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8006392:	2160      	movs	r1, #96	; 0x60
 8006394:	4806      	ldr	r0, [pc, #24]	; (80063b0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 8006396:	f017 fba9 	bl	801daec <__assert_func>
 800639a:	bf00      	nop
    }
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd90      	pop	{r4, r7, pc}
 80063a6:	bf00      	nop
 80063a8:	0801fc14 	.word	0x0801fc14
 80063ac:	08021904 	.word	0x08021904
 80063b0:	0801ff64 	.word	0x0801ff64

080063b4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>:
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4618      	mov	r0, r3
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fc14 	bl	8006c00 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff ffed 	bl	80063ca <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe fcff 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800640c:	4603      	mov	r3, r0
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe fe02 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006428:	4603      	mov	r3, r0
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006434:	b590      	push	{r4, r7, lr}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff ffcd 	bl	80063e2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3304      	adds	r3, #4
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006458:	e883 0003 	stmia.w	r3, {r0, r1}
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	330c      	adds	r3, #12
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff fe40 	bl	80060e8 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4618      	mov	r0, r3
 800646c:	f7fe fc27 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006470:	4604      	mov	r4, r0
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7ff ffc1 	bl	80063fa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 8006478:	4603      	mov	r3, r0
 800647a:	429c      	cmp	r4, r3
 800647c:	d10a      	bne.n	8006494 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4618      	mov	r0, r3
 8006482:	f7fe fc11 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006486:	4604      	mov	r4, r0
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7ff ffc4 	bl	8006416 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 800648e:	4603      	mov	r3, r0
 8006490:	429c      	cmp	r4, r3
 8006492:	d005      	beq.n	80064a0 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 8006496:	4a06      	ldr	r2, [pc, #24]	; (80064b0 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 8006498:	2174      	movs	r1, #116	; 0x74
 800649a:	4806      	ldr	r0, [pc, #24]	; (80064b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 800649c:	f017 fb26 	bl	801daec <__assert_func>
    }
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd90      	pop	{r4, r7, pc}
 80064aa:	bf00      	nop
 80064ac:	0801f954 	.word	0x0801f954
 80064b0:	08021a2c 	.word	0x08021a2c
 80064b4:	0801fbb8 	.word	0x0801fbb8

080064b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>:
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4618      	mov	r0, r3
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fb9d 	bl	8006c16 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>:
class dense_product_base
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b082      	sub	sp, #8
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7ff ffed 	bl	80064ce <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff ffed 	bl	80064e6 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe fbc0 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006528:	4603      	mov	r3, r0
    }
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006534:	b590      	push	{r4, r7, lr}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f7ff ffdc 	bl	80064fe <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe fa41 	bl	80049d2 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 8006556:	68b8      	ldr	r0, [r7, #8]
 8006558:	f7ff ffdd 	bl	8006516 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 800655c:	4604      	mov	r4, r0
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4618      	mov	r0, r3
 8006562:	f7fe fbac 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006566:	4603      	mov	r3, r0
 8006568:	429c      	cmp	r4, r3
 800656a:	d005      	beq.n	8006578 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x44>
 800656c:	4b05      	ldr	r3, [pc, #20]	; (8006584 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x50>)
 800656e:	4a06      	ldr	r2, [pc, #24]	; (8006588 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x54>)
 8006570:	2160      	movs	r1, #96	; 0x60
 8006572:	4806      	ldr	r0, [pc, #24]	; (800658c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x58>)
 8006574:	f017 faba 	bl	801daec <__assert_func>
 8006578:	bf00      	nop
    }
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	bd90      	pop	{r4, r7, pc}
 8006584:	0801fc14 	.word	0x0801fc14
 8006588:	08021c24 	.word	0x08021c24
 800658c:	0801ff64 	.word	0x0801ff64

08006590 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8006590:	b590      	push	{r4, r7, lr}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff f862 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80065a0:	4604      	mov	r4, r0
 80065a2:	6838      	ldr	r0, [r7, #0]
 80065a4:	f000 fb42 	bl	8006c2c <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 80065a8:	4603      	mov	r3, r0
 80065aa:	4619      	mov	r1, r3
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 fb48 	bl	8006c42 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff f856 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80065b8:	4603      	mov	r3, r0
    }
 80065ba:	4618      	mov	r0, r3
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd90      	pop	{r4, r7, pc}

080065c2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    }

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(DenseBase)
    /** Default constructor. Do nothing. */
    EIGEN_DEVICE_FUNC DenseBase()
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
#ifdef EIGEN_INTERNAL_DEBUGGING
      EIGEN_STATIC_ASSERT((EIGEN_IMPLIES(MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1, int(IsRowMajor))
                        && EIGEN_IMPLIES(MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1, int(!IsRowMajor))),
                          INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION)
#endif
    }
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>:
// purely fixed-size matrix
template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage
{
    internal::plain_array<T,Size,_Options> m_data;
  public:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fb42 	bl	8006c6c <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>
      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
    }
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
    }
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fb35 	bl	8006c82 <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>
    }
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
    }
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fb28 	bl	8006c98 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>
    }
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
    }
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fb1b 	bl	8006cae <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>
    }
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>:
    }
    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
      numext::swap(m_data, other.m_data);
    }
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006682:	b480      	push	{r7}
 8006684:	af00      	add	r7, sp, #0
 8006686:	2303      	movs	r3, #3
 8006688:	4618      	mov	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006692:	b480      	push	{r7}
 8006694:	af00      	add	r7, sp, #0
 8006696:	2303      	movs	r3, #3
 8006698:	4618      	mov	r0, r3
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4618      	mov	r0, r3
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 80066b8:	b480      	push	{r7}
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	2301      	movs	r3, #1
 80066be:	4618      	mov	r0, r3
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	2303      	movs	r3, #3
 80066ce:	4618      	mov	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4618      	mov	r0, r3
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 80066ee:	b590      	push	{r4, r7, lr}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 fae1 	bl	8006cc4 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 8006702:	4604      	mov	r4, r0
 8006704:	f000 f9d1 	bl	8006aaa <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 8006708:	4602      	mov	r2, r0
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	fb03 f202 	mul.w	r2, r3, r2
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4423      	add	r3, r4
    }
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	bd90      	pop	{r4, r7, pc}

08006720 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
 8006724:	2303      	movs	r3, #3
 8006726:	4618      	mov	r0, r3
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
 8006734:	2301      	movs	r3, #1
 8006736:	4618      	mov	r0, r3
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>:

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  evaluator() {}

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit evaluator(const XprType& m)
 8006756:	b580      	push	{r7, lr}
 8006758:	b082      	sub	sp, #8
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	4611      	mov	r1, r2
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fab7 	bl	8006cda <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
  { }
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800678c:	b590      	push	{r4, r7, lr}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681c      	ldr	r4, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fab2 	bl	8006d08 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 80067a4:	4602      	mov	r2, r0
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	fb03 f202 	mul.w	r2, r3, r2
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4423      	add	r3, r4
  }
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd90      	pop	{r4, r7, pc}

080067bc <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
    }
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4618      	mov	r0, r3
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
	...

080067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>:
  */
template<typename T, int Value> class variable_if_dynamic
{
  public:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(variable_if_dynamic)
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d005      	beq.n	80067f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x1c>
 80067e4:	4b05      	ldr	r3, [pc, #20]	; (80067fc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x28>)
 80067e6:	4a06      	ldr	r2, [pc, #24]	; (8006800 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x2c>)
 80067e8:	2185      	movs	r1, #133	; 0x85
 80067ea:	4806      	ldr	r0, [pc, #24]	; (8006804 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x30>)
 80067ec:	f017 f97e 	bl	801daec <__assert_func>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	08021e90 	.word	0x08021e90
 8006800:	08021ea0 	.word	0x08021ea0
 8006804:	08021f08 	.word	0x08021f08

08006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>:
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d005      	beq.n	8006824 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x1c>
 8006818:	4b05      	ldr	r3, [pc, #20]	; (8006830 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x28>)
 800681a:	4a06      	ldr	r2, [pc, #24]	; (8006834 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x2c>)
 800681c:	2185      	movs	r1, #133	; 0x85
 800681e:	4806      	ldr	r0, [pc, #24]	; (8006838 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x30>)
 8006820:	f017 f964 	bl	801daec <__assert_func>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	08021e90 	.word	0x08021e90
 8006834:	08021f64 	.word	0x08021f64
 8006838:	08021f08 	.word	0x08021f08

0800683c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
    }
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>:
    EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    T value() { return T(Value); }
 8006852:	b480      	push	{r7}
 8006854:	af00      	add	r7, sp, #0
 8006856:	2303      	movs	r3, #3
 8006858:	4618      	mov	r0, r3
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>:
 8006862:	b480      	push	{r7}
 8006864:	af00      	add	r7, sp, #0
 8006866:	2301      	movs	r3, #1
 8006868:	4618      	mov	r0, r3
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
    }
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
    }
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>:
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>:
// So this intermediate function removes everything related to "assume-aliasing" such that Assignment
// does not has to bother about these annoying details.

template<typename Dst, typename Src>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src)
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
{
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 80068be:	f107 030c 	add.w	r3, r7, #12
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fa2b 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80068c8:	f107 020c 	add.w	r2, r7, #12
 80068cc:	2300      	movs	r3, #0
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fa2f 	bl	8006d34 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>
}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
    }
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4618      	mov	r0, r3
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006914:	f107 030c 	add.w	r3, r7, #12
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fa00 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800691e:	f107 020c 	add.w	r2, r7, #12
 8006922:	2300      	movs	r3, #0
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fa1c 	bl	8006d64 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>
}
 800692c:	bf00      	nop
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
    }
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
    }
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
    }
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4618      	mov	r0, r3
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
    }
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4618      	mov	r0, r3
 800699a:	f7fe f990 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800699e:	4603      	mov	r3, r0
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe f982 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80069ba:	4603      	mov	r3, r0
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>:
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4618      	mov	r0, r3
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 80069e4:	f107 030c 	add.w	r3, r7, #12
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 f998 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80069ee:	f107 020c 	add.w	r2, r7, #12
 80069f2:	2300      	movs	r3, #0
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f9cc 	bl	8006d94 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 80069fc:	bf00      	nop
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
    }
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
    }
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4618      	mov	r0, r3
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
    }
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
    }
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
    }
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4618      	mov	r0, r3
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>:
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b082      	sub	sp, #8
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fe fadf 	bl	8005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006a84:	4603      	mov	r3, r0
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b082      	sub	sp, #8
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fad1 	bl	8005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006aaa:	b480      	push	{r7}
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006aba:	b480      	push	{r7}
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
    }
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
    }
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4618      	mov	r0, r3
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>:
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006b16:	f107 030c 	add.w	r3, r7, #12
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 f8ff 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006b20:	f107 020c 	add.w	r2, r7, #12
 8006b24:	2300      	movs	r3, #0
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f943 	bl	8006db4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
    }
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4618      	mov	r0, r3
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
    }
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4618      	mov	r0, r3
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
    }
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
    }
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4618      	mov	r0, r3
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7ff f88a 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8006ba0:	4603      	mov	r3, r0
    }
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>:
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006bca:	f107 030c 	add.w	r3, r7, #12
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 f8a5 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006bd4:	f107 020c 	add.w	r2, r7, #12
 8006bd8:	2300      	movs	r3, #0
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f901 	bl	8006de4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>
}
 8006be2:	bf00      	nop
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
    }
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
    }
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
    }
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>:
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006c4c:	f107 030c 	add.w	r3, r7, #12
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 f864 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006c56:	f107 020c 	add.w	r2, r7, #12
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f8d8 	bl	8006e14 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8006c64:	bf00      	nop
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>:
  plain_array()
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006c74:	f000 f8e6 	bl	8006e44 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>:
  plain_array()
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006c8a:	f000 f8e2 	bl	8006e52 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>
  }
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4618      	mov	r0, r3
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>:
  plain_array()
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006ca0:	f000 f8de 	bl	8006e60 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>:
  plain_array()
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b082      	sub	sp, #8
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006cb6:	f000 f8d3 	bl	8006e60 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8006cda:	b590      	push	{r4, r7, lr}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f8cf 	bl	8006e88 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8006cea:	687c      	ldr	r4, [r7, #4]
 8006cec:	6838      	ldr	r0, [r7, #0]
 8006cee:	f000 f8be 	bl	8006e6e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 f8d0 	bl	8006e9e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd90      	pop	{r4, r7, pc}

08006d08 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	2300      	movs	r3, #0
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>:
}

// Deal with "assume-aliasing"
template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08e      	sub	sp, #56	; 0x38
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]
{
  typename plain_matrix_type<Src>::type tmp(src);
 8006d42:	f107 0314 	add.w	r3, r7, #20
 8006d46:	68b9      	ldr	r1, [r7, #8]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 f8ba 	bl	8006ec2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006d4e:	f107 0314 	add.w	r3, r7, #20
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	4619      	mov	r1, r3
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f8c8 	bl	8006eec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006d5c:	bf00      	nop
 8006d5e:	3738      	adds	r7, #56	; 0x38
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006d72:	f107 0314 	add.w	r3, r7, #20
 8006d76:	68b9      	ldr	r1, [r7, #8]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 f8c8 	bl	8006f0e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006d7e:	f107 0314 	add.w	r3, r7, #20
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	4619      	mov	r1, r3
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f8d6 	bl	8006f38 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006d8c:	bf00      	nop
 8006d8e:	3720      	adds	r7, #32
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:

template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if<!evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
{
  call_assignment_no_alias(dst, src, func);
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	68b9      	ldr	r1, [r7, #8]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f8d7 	bl	8006f5a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006dac:	bf00      	nop
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b088      	sub	sp, #32
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006dc2:	f107 0314 	add.w	r3, r7, #20
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 f8d7 	bl	8006f7c <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006dce:	f107 0314 	add.w	r3, r7, #20
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 f8ae 	bl	8006f38 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006ddc:	bf00      	nop
 8006dde:	3720      	adds	r7, #32
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006df2:	f107 0314 	add.w	r3, r7, #20
 8006df6:	68b9      	ldr	r1, [r7, #8]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 f8d4 	bl	8006fa6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006dfe:	f107 0314 	add.w	r3, r7, #20
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	4619      	mov	r1, r3
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 f896 	bl	8006f38 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006e0c:	bf00      	nop
 8006e0e:	3720      	adds	r7, #32
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08e      	sub	sp, #56	; 0x38
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006e22:	f107 0314 	add.w	r3, r7, #20
 8006e26:	68b9      	ldr	r1, [r7, #8]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 f8d1 	bl	8006fd0 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006e2e:	f107 0314 	add.w	r3, r7, #20
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	4619      	mov	r1, r3
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 f858 	bl	8006eec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006e3c:	bf00      	nop
 8006e3e:	3738      	adds	r7, #56	; 0x38
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>:
void check_static_allocation_size()
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
}
 8006e48:	bf00      	nop
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>:
void check_static_allocation_size()
 8006e52:	b480      	push	{r7}
 8006e54:	af00      	add	r7, sp, #0
}
 8006e56:	bf00      	nop
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>:
void check_static_allocation_size()
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
}
 8006e64:	bf00      	nop
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 f8be 	bl	8006ffa <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4618      	mov	r0, r3
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8006eb0:	1d3b      	adds	r3, r7, #4
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fd f80d 	bl	8003ed2 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>:
#ifndef EIGEN_PARSED_BY_DOXYGEN

    // This constructor is for both 1x1 matrices and dynamic vectors
    template<typename T>
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    explicit Matrix(const T& x)
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
    {
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fd fdf3 	bl	8004aba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8006ed4:	f7fd fe01 	bl	8004ada <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 f8a3 	bl	8007028 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
}


template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
                      ) && int(Dst::SizeAtCompileTime) != 1
  };

  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst>::type ActualDstTypeCleaned;
  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst&>::type ActualDstType;
  ActualDstType actualDst(dst);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	617b      	str	r3, [r7, #20]
  // TODO check whether this is the right place to perform these checks:
  EIGEN_STATIC_ASSERT_LVALUE(Dst)
  EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ActualDstTypeCleaned,Src)
  EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename ActualDstTypeCleaned::Scalar,typename Src::Scalar);

  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	6978      	ldr	r0, [r7, #20]
 8006f02:	f000 f89e 	bl	8007042 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 8006f06:	bf00      	nop
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	6039      	str	r1, [r7, #0]
    {
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fd fe13 	bl	8004b46 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8006f20:	f7fd fe21 	bl	8004b66 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 f89d 	bl	8007068 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	68b9      	ldr	r1, [r7, #8]
 8006f4c:	6978      	ldr	r0, [r7, #20]
 8006f4e:	f000 f898 	bl	8007082 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 8006f52:	bf00      	nop
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b086      	sub	sp, #24
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	68b9      	ldr	r1, [r7, #8]
 8006f6e:	6978      	ldr	r0, [r7, #20]
 8006f70:	f000 f89a 	bl	80070a8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8006f74:	bf00      	nop
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
    {
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fd fddc 	bl	8004b46 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8006f8e:	f7fd fdea 	bl	8004b66 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f899 	bl	80070ce <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b082      	sub	sp, #8
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
    {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fd fdc7 	bl	8004b46 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8006fb8:	f7fd fdd5 	bl	8004b66 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 f891 	bl	80070e8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
    {
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fd fd6c 	bl	8004aba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8006fe2:	f7fd fd7a 	bl	8004ada <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 f889 	bl	8007102 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>:
    { }

    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f87f 	bl	800711c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>
 800701e:	4603      	mov	r3, r0
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f87d 	bl	8007134 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800703a:	bf00      	nop
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
// both partial specialization+SFINAE without ambiguous specialization
template< typename DstXprType, typename SrcXprType, typename Functor, typename Weak>
struct Assignment<DstXprType, SrcXprType, Functor, Dense2Dense, Weak>
{
  EIGEN_DEVICE_FUNC
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	607a      	str	r2, [r7, #4]
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
 800704e:	68b9      	ldr	r1, [r7, #8]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f890 	bl	8007176 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>
#endif

    call_dense_assignment_loop(dst, src, func);
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 f8c4 	bl	80071e8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f8ef 	bl	8007258 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800707a:	bf00      	nop
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800708e:	68b9      	ldr	r1, [r7, #8]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 f902 	bl	800729a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 f908 	bl	80072b0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 f932 	bl	8007320 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	68b9      	ldr	r1, [r7, #8]
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f9ca 	bl	800745a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b082      	sub	sp, #8
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f9f5 	bl	80074ca <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80070e0:	bf00      	nop
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa09 	bl	800750c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80070fa:	bf00      	nop
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007102:	b580      	push	{r7, lr}
 8007104:	b082      	sub	sp, #8
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fa1d 	bl	800754e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8007114:	bf00      	nop
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fa33 	bl	8007590 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>
 800712a:	4603      	mov	r3, r0
    }
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007134:	b5b0      	push	{r4, r5, r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fe fa90 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007144:	4604      	mov	r4, r0
 8007146:	6838      	ldr	r0, [r7, #0]
 8007148:	f7ff fba9 	bl	800689e <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 800714c:	4605      	mov	r5, r0
 800714e:	f107 030c 	add.w	r3, r7, #12
 8007152:	4618      	mov	r0, r3
 8007154:	f7ff fde3 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007158:	f107 030c 	add.w	r3, r7, #12
 800715c:	461a      	mov	r2, r3
 800715e:	4629      	mov	r1, r5
 8007160:	4620      	mov	r0, r4
 8007162:	f000 fa27 	bl	80075b4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fe fa7c 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800716c:	4603      	mov	r3, r0
    }
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bdb0      	pop	{r4, r5, r7, pc}

08007176 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>:
    {
    }
};

template<typename Dst, typename Src>
void check_for_aliasing(const Dst &dst, const Src &src)
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
{
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4618      	mov	r0, r3
 8007184:	f7fd fd9b 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007188:	4603      	mov	r3, r0
 800718a:	2b01      	cmp	r3, #1
 800718c:	dd08      	ble.n	80071a0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4618      	mov	r0, r3
 8007192:	f7fd fd89 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007196:	4603      	mov	r3, r0
 8007198:	2b01      	cmp	r3, #1
 800719a:	dd01      	ble.n	80071a0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 800719c:	2301      	movs	r3, #1
 800719e:	e000      	b.n	80071a2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2c>
 80071a0:	2300      	movs	r3, #0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fa14 	bl	80075d6 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>
}
 80071ae:	bf00      	nop
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa24 	bl	800760c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4618      	mov	r0, r3
 80071da:	f7ff ffec 	bl	80071b6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08c      	sub	sp, #48	; 0x30
 80071ec:	af02      	add	r7, sp, #8
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80071f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071f8:	68b9      	ldr	r1, [r7, #8]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 f9f6 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fa0d 	bl	8007624 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800720a:	f107 0320 	add.w	r3, r7, #32
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	4618      	mov	r0, r3
 8007212:	f000 f9eb 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 fa50 	bl	80076bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 800721c:	4603      	mov	r3, r0
 800721e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007222:	f107 0120 	add.w	r1, r7, #32
 8007226:	f107 0010 	add.w	r0, r7, #16
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f000 fa50 	bl	80076d2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8007232:	f107 0310 	add.w	r3, r7, #16
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fa65 	bl	8007706 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 800723c:	f107 0320 	add.w	r3, r7, #32
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff ffc4 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8007246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff ffbf 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
}
 8007250:	bf00      	nop
 8007252:	3728      	adds	r7, #40	; 0x28
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007258:	b5b0      	push	{r4, r5, r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fe f862 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007268:	4604      	mov	r4, r0
 800726a:	6838      	ldr	r0, [r7, #0]
 800726c:	f7ff fb42 	bl	80068f4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8007270:	4605      	mov	r5, r0
 8007272:	f107 030c 	add.w	r3, r7, #12
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff fd51 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800727c:	f107 030c 	add.w	r3, r7, #12
 8007280:	461a      	mov	r2, r3
 8007282:	4629      	mov	r1, r5
 8007284:	4620      	mov	r0, r4
 8007286:	f000 fa49 	bl	800771c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fe f84e 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007290:	4603      	mov	r3, r0
    }
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bdb0      	pop	{r4, r5, r7, pc}

0800729a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	6039      	str	r1, [r7, #0]
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08c      	sub	sp, #48	; 0x30
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80072bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072c0:	68b9      	ldr	r1, [r7, #8]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff fa47 	bl	8006756 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 fa37 	bl	8007740 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80072d2:	f107 0320 	add.w	r3, r7, #32
 80072d6:	68f9      	ldr	r1, [r7, #12]
 80072d8:	4618      	mov	r0, r3
 80072da:	f7ff fa3c 	bl	8006756 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 fa7a 	bl	80077d8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 80072e4:	4603      	mov	r3, r0
 80072e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80072ea:	f107 0120 	add.w	r1, r7, #32
 80072ee:	f107 0010 	add.w	r0, r7, #16
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f000 fa7a 	bl	80077ee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80072fa:	f107 0310 	add.w	r3, r7, #16
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 fa8f 	bl	8007822 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 8007304:	f107 0320 	add.w	r3, r7, #32
 8007308:	4618      	mov	r0, r3
 800730a:	f7fd feea 	bl	80050e2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800730e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007312:	4618      	mov	r0, r3
 8007314:	f7fd fee5 	bl	80050e2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
}
 8007318:	bf00      	nop
 800731a:	3728      	adds	r7, #40	; 0x28
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4618      	mov	r0, r3
 800732e:	f7fd fcc6 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007332:	4603      	mov	r3, r0
 8007334:	2b01      	cmp	r3, #1
 8007336:	dd08      	ble.n	800734a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4618      	mov	r0, r3
 800733c:	f7fd fcb4 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007340:	4603      	mov	r3, r0
 8007342:	2b01      	cmp	r3, #1
 8007344:	dd01      	ble.n	800734a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2c>
 800734a:	2300      	movs	r3, #0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fa70 	bl	8007838 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fa8a 	bl	8007882 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff ffec 	bl	8007360 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>:
};

// This is the default evaluator implementation for products:
// It creates a temporary and call generic_product_impl
template<typename Lhs, typename Rhs, int Options, int ProductTag, typename LhsShape, typename RhsShape>
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8007392:	b580      	push	{r7, lr}
 8007394:	b082      	sub	sp, #8
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff ffeb 	bl	8007378 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4618      	mov	r0, r3
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff ffeb 	bl	8007392 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff ffeb 	bl	80073ac <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff feef 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>:
  }

protected:

  // this helper permits to completely eliminate the functor if it is empty
  struct Data
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	332c      	adds	r3, #44	; 0x2c
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff ffea 	bl	80073e0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	4618      	mov	r0, r3
 8007412:	f7ff ffd8 	bl	80073c6 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4618      	mov	r0, r3
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff ffe5 	bl	80073fa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa1b 	bl	800786c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff ffe8 	bl	8007420 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800745a:	b580      	push	{r7, lr}
 800745c:	b098      	sub	sp, #96	; 0x60
 800745e:	af02      	add	r7, sp, #8
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8007466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 f9ee 	bl	800784e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fa28 	bl	80078cc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800747c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007480:	68f9      	ldr	r1, [r7, #12]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 f8b2 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f917 	bl	80076bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 800748e:	4603      	mov	r3, r0
 8007490:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007494:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007498:	f107 0014 	add.w	r0, r7, #20
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f000 fa5e 	bl	8007960 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80074a4:	f107 0314 	add.w	r3, r7, #20
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 fa73 	bl	8007994 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 80074ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff fe8b 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80074b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff ffbf 	bl	8007440 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
}
 80074c2:	bf00      	nop
 80074c4:	3758      	adds	r7, #88	; 0x58
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80074ca:	b5b0      	push	{r4, r5, r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7fd ff29 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80074da:	4604      	mov	r4, r0
 80074dc:	6838      	ldr	r0, [r7, #0]
 80074de:	f7ff fb0a 	bl	8006af6 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 80074e2:	4605      	mov	r5, r0
 80074e4:	f107 030c 	add.w	r3, r7, #12
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff fc18 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80074ee:	f107 030c 	add.w	r3, r7, #12
 80074f2:	461a      	mov	r2, r3
 80074f4:	4629      	mov	r1, r5
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 fa57 	bl	80079aa <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7fd ff15 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007502:	4603      	mov	r3, r0
    }
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bdb0      	pop	{r4, r5, r7, pc}

0800750c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800750c:	b5b0      	push	{r4, r5, r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7fd ff08 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800751c:	4604      	mov	r4, r0
 800751e:	6838      	ldr	r0, [r7, #0]
 8007520:	f7ff fb43 	bl	8006baa <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 8007524:	4605      	mov	r5, r0
 8007526:	f107 030c 	add.w	r3, r7, #12
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff fbf7 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007530:	f107 030c 	add.w	r3, r7, #12
 8007534:	461a      	mov	r2, r3
 8007536:	4629      	mov	r1, r5
 8007538:	4620      	mov	r0, r4
 800753a:	f000 fa47 	bl	80079cc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fd fef4 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007544:	4603      	mov	r3, r0
    }
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bdb0      	pop	{r4, r5, r7, pc}

0800754e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800754e:	b5b0      	push	{r4, r5, r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7fe f883 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800755e:	4604      	mov	r4, r0
 8007560:	6838      	ldr	r0, [r7, #0]
 8007562:	f7ff fb63 	bl	8006c2c <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 8007566:	4605      	mov	r5, r0
 8007568:	f107 030c 	add.w	r3, r7, #12
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff fbd6 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007572:	f107 030c 	add.w	r3, r7, #12
 8007576:	461a      	mov	r2, r3
 8007578:	4629      	mov	r1, r5
 800757a:	4620      	mov	r0, r4
 800757c:	f000 fa37 	bl	80079ee <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7fe f86f 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007586:	4603      	mov	r3, r0
    }
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bdb0      	pop	{r4, r5, r7, pc}

08007590 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>:
  /** \returns the number of coefficients, which is rows()*cols().
    * \sa rows(), cols(), SizeAtCompileTime. */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8007590:	b590      	push	{r4, r7, lr}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7fd fd76 	bl	800508a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800759e:	4604      	mov	r4, r0
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7fd fd82 	bl	80050aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80075a6:	4603      	mov	r3, r0
 80075a8:	fb04 f303 	mul.w	r3, r4, r3
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd90      	pop	{r4, r7, pc}

080075b4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	6978      	ldr	r0, [r7, #20]
 80075ca:	f000 fa3c 	bl	8007a46 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 80075ce:	bf00      	nop
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>:
    static void run(const Derived&, const OtherDerived&)
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
    }
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	4611      	mov	r1, r2
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 fa5c 	bl	8007aba <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
  { }
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4618      	mov	r0, r3
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	4618      	mov	r0, r3
 8007634:	f7fd fb43 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007638:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4618      	mov	r0, r3
 800763e:	f7fd fb33 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007642:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4618      	mov	r0, r3
 8007648:	f7fd fb39 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800764c:	4602      	mov	r2, r0
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	4293      	cmp	r3, r2
 8007652:	d107      	bne.n	8007664 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4618      	mov	r0, r3
 8007658:	f7fd fb26 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	4293      	cmp	r3, r2
 8007662:	d001      	beq.n	8007668 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8007664:	2301      	movs	r3, #1
 8007666:	e000      	b.n	800766a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8007668:	2300      	movs	r3, #0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	6979      	ldr	r1, [r7, #20]
 8007674:	4618      	mov	r0, r3
 8007676:	f000 fa3b 	bl	8007af0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4618      	mov	r0, r3
 800767e:	f7fd fb1e 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007682:	4602      	mov	r2, r0
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	4293      	cmp	r3, r2
 8007688:	d107      	bne.n	800769a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	4618      	mov	r0, r3
 800768e:	f7fd fb0b 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007692:	4602      	mov	r2, r0
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	4293      	cmp	r3, r2
 8007698:	d006      	beq.n	80076a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 800769a:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800769c:	4a05      	ldr	r2, [pc, #20]	; (80076b4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800769e:	f240 21fd 	movw	r1, #765	; 0x2fd
 80076a2:	4805      	ldr	r0, [pc, #20]	; (80076b8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 80076a4:	f016 fa22 	bl	801daec <__assert_func>
}
 80076a8:	bf00      	nop
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	08021fcc 	.word	0x08021fcc
 80076b4:	08021ffc 	.word	0x08021ffc
 80076b8:	080220e0 	.word	0x080220e0

080076bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4618      	mov	r0, r3
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80076d2:	b480      	push	{r7}
 80076d4:	b085      	sub	sp, #20
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
 80076de:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	605a      	str	r2, [r3, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	609a      	str	r2, [r3, #8]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	60da      	str	r2, [r3, #12]
  }
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa20 	bl	8007b54 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>
  }
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	68b9      	ldr	r1, [r7, #8]
 8007730:	6978      	ldr	r0, [r7, #20]
 8007732:	f000 fa3a 	bl	8007baa <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8007736:	bf00      	nop
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4618      	mov	r0, r3
 8007750:	f7fd fb5b 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007754:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	4618      	mov	r0, r3
 800775a:	f7fd fb4b 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800775e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4618      	mov	r0, r3
 8007764:	f7fd fb51 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007768:	4602      	mov	r2, r0
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	4293      	cmp	r3, r2
 800776e:	d107      	bne.n	8007780 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4618      	mov	r0, r3
 8007774:	f7fd fb3e 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007778:	4602      	mov	r2, r0
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	4293      	cmp	r3, r2
 800777e:	d001      	beq.n	8007784 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8007780:	2301      	movs	r3, #1
 8007782:	e000      	b.n	8007786 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8007784:	2300      	movs	r3, #0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d005      	beq.n	8007796 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	6979      	ldr	r1, [r7, #20]
 8007790:	4618      	mov	r0, r3
 8007792:	f000 fa45 	bl	8007c20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	4618      	mov	r0, r3
 800779a:	f7fd fb36 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800779e:	4602      	mov	r2, r0
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d107      	bne.n	80077b6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fd fb23 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80077ae:	4602      	mov	r2, r0
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d006      	beq.n	80077c4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 80077b6:	4b05      	ldr	r3, [pc, #20]	; (80077cc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80077b8:	4a05      	ldr	r2, [pc, #20]	; (80077d0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80077ba:	f240 21fd 	movw	r1, #765	; 0x2fd
 80077be:	4805      	ldr	r0, [pc, #20]	; (80077d4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 80077c0:	f016 f994 	bl	801daec <__assert_func>
}
 80077c4:	bf00      	nop
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	08021fcc 	.word	0x08021fcc
 80077d0:	0802213c 	.word	0x0802213c
 80077d4:	080220e0 	.word	0x080220e0

080077d8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4618      	mov	r0, r3
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80077ee:	b480      	push	{r7}
 80077f0:	b085      	sub	sp, #20
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	60f8      	str	r0, [r7, #12]
 80077f6:	60b9      	str	r1, [r7, #8]
 80077f8:	607a      	str	r2, [r7, #4]
 80077fa:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	605a      	str	r2, [r3, #4]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	609a      	str	r2, [r3, #8]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	60da      	str	r2, [r3, #12]
  }
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fa2a 	bl	8007c84 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>
  }
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
    }
 8007842:	bf00      	nop
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800784e:	b580      	push	{r7, lr}
 8007850:	b082      	sub	sp, #8
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	6039      	str	r1, [r7, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	4618      	mov	r0, r3
 800785e:	f000 fa20 	bl	8007ca2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4618      	mov	r0, r3
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fd ffc6 	bl	8005834 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 80078a8:	4603      	mov	r3, r0
    }
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fd ffc6 	bl	800584e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 80078c2:	4603      	mov	r3, r0
    }
 80078c4:	4618      	mov	r0, r3
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80078d8:	68b8      	ldr	r0, [r7, #8]
 80078da:	f7ff ffdd 	bl	8007898 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>
 80078de:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80078e0:	68b8      	ldr	r0, [r7, #8]
 80078e2:	f7ff ffe6 	bl	80078b2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>
 80078e6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fd f9e7 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80078f0:	4602      	mov	r2, r0
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d107      	bne.n	8007908 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fd f9d4 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	4293      	cmp	r3, r2
 8007906:	d001      	beq.n	800790c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007908:	2301      	movs	r3, #1
 800790a:	e000      	b.n	800790e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800790c:	2300      	movs	r3, #0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d005      	beq.n	800791e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	6979      	ldr	r1, [r7, #20]
 8007918:	4618      	mov	r0, r3
 800791a:	f000 f8e9 	bl	8007af0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4618      	mov	r0, r3
 8007922:	f7fd f9cc 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007926:	4602      	mov	r2, r0
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	4293      	cmp	r3, r2
 800792c:	d107      	bne.n	800793e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	4618      	mov	r0, r3
 8007932:	f7fd f9b9 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007936:	4602      	mov	r2, r0
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	4293      	cmp	r3, r2
 800793c:	d006      	beq.n	800794c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800793e:	4b05      	ldr	r3, [pc, #20]	; (8007954 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8007940:	4a05      	ldr	r2, [pc, #20]	; (8007958 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007942:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007946:	4805      	ldr	r0, [pc, #20]	; (800795c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007948:	f016 f8d0 	bl	801daec <__assert_func>
}
 800794c:	bf00      	nop
 800794e:	3718      	adds	r7, #24
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	08021fcc 	.word	0x08021fcc
 8007958:	08022220 	.word	0x08022220
 800795c:	080220e0 	.word	0x080220e0

08007960 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	605a      	str	r2, [r3, #4]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	609a      	str	r2, [r3, #8]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	60da      	str	r2, [r3, #12]
  }
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4618      	mov	r0, r3
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f992 	bl	8007cc6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b086      	sub	sp, #24
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	60f8      	str	r0, [r7, #12]
 80079b2:	60b9      	str	r1, [r7, #8]
 80079b4:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	6978      	ldr	r0, [r7, #20]
 80079c0:	f000 f9ac 	bl	8007d1c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 80079c4:	bf00      	nop
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	6978      	ldr	r0, [r7, #20]
 80079e2:	f000 f9d5 	bl	8007d90 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>
}
 80079e6:	bf00      	nop
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b086      	sub	sp, #24
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	60f8      	str	r0, [r7, #12]
 80079f6:	60b9      	str	r1, [r7, #8]
 80079f8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	6978      	ldr	r0, [r7, #20]
 8007a04:	f000 fa09 	bl	8007e1a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007a08:	bf00      	nop
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>:
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 fa37 	bl	8007e8e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8007a20:	4603      	mov	r3, r0
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	3310      	adds	r3, #16
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 fa37 	bl	8007eaa <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::assign_op<Scalar,Scalar>, Dense2Dense,
  typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
{
  typedef Product<Lhs,Rhs,Options> SrcXprType;
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007a46:	b590      	push	{r4, r7, lr}
 8007a48:	b087      	sub	sp, #28
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	607a      	str	r2, [r7, #4]
  {
    Index dstRows = src.rows();
 8007a52:	68b8      	ldr	r0, [r7, #8]
 8007a54:	f7ff ffdc 	bl	8007a10 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>
 8007a58:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007a5a:	68b8      	ldr	r0, [r7, #8]
 8007a5c:	f7ff ffe5 	bl	8007a2a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>
 8007a60:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fd f92a 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d107      	bne.n	8007a82 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fd f917 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d001      	beq.n	8007a86 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 8007a86:	2300      	movs	r3, #0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	6979      	ldr	r1, [r7, #20]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 f82c 	bl	8007af0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    // FIXME shall we handle nested_eval here?
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007a98:	68b8      	ldr	r0, [r7, #8]
 8007a9a:	f000 fa14 	bl	8007ec6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	68b8      	ldr	r0, [r7, #8]
 8007aa2:	f000 fa1b 	bl	8007edc <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4621      	mov	r1, r4
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 fa21 	bl	8007ef4 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>
  }
 8007ab2:	bf00      	nop
 8007ab4:	371c      	adds	r7, #28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd90      	pop	{r4, r7, pc}

08007aba <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8007aba:	b5b0      	push	{r4, r5, r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fa50 	bl	8007f6a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8007aca:	687c      	ldr	r4, [r7, #4]
 8007acc:	6838      	ldr	r0, [r7, #0]
 8007ace:	f000 fa2f 	bl	8007f30 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	6838      	ldr	r0, [r7, #0]
 8007ad6:	f000 fa38 	bl	8007f4a <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>
 8007ada:	4603      	mov	r3, r0
 8007adc:	461a      	mov	r2, r3
 8007ade:	4629      	mov	r1, r5
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 fa4d 	bl	8007f80 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bdb0      	pop	{r4, r5, r7, pc}

08007af0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d108      	bne.n	8007b14 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d105      	bne.n	8007b14 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	db02      	blt.n	8007b14 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	da06      	bge.n	8007b22 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x32>
 8007b14:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x58>)
 8007b16:	4a0d      	ldr	r2, [pc, #52]	; (8007b4c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x5c>)
 8007b18:	f240 1111 	movw	r1, #273	; 0x111
 8007b1c:	480c      	ldr	r0, [pc, #48]	; (8007b50 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x60>)
 8007b1e:	f015 ffe5 	bl	801daec <__assert_func>
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	617b      	str	r3, [r7, #20]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	613b      	str	r3, [r7, #16]
  }
 8007b2a:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	fb02 f103 	mul.w	r1, r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	f000 fa33 	bl	8007fa4 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>
    }
 8007b3e:	bf00      	nop
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	080223e4 	.word	0x080223e4
 8007b4c:	08022574 	.word	0x08022574
 8007b50:	08022600 	.word	0x08022600

08007b54 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fa2d 	bl	8007fbe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fa48 	bl	8007ffa <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>
  }
 8007b6a:	bf00      	nop
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b082      	sub	sp, #8
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fd f89d 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007b84:	4603      	mov	r3, r0
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fd f92a 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007baa:	b590      	push	{r4, r7, lr}
 8007bac:	b087      	sub	sp, #28
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	60f8      	str	r0, [r7, #12]
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007bb6:	68b8      	ldr	r0, [r7, #8]
 8007bb8:	f7ff ffdb 	bl	8007b72 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8007bbc:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007bbe:	68b8      	ldr	r0, [r7, #8]
 8007bc0:	f7ff ffe5 	bl	8007b8e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8007bc4:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fd f91e 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d107      	bne.n	8007be6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x3c>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fd f90b 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007bde:	4602      	mov	r2, r0
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d001      	beq.n	8007bea <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x40>
 8007be6:	2301      	movs	r3, #1
 8007be8:	e000      	b.n	8007bec <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x42>
 8007bea:	2300      	movs	r3, #0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d005      	beq.n	8007bfc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x52>
      dst.resize(dstRows, dstCols);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	6979      	ldr	r1, [r7, #20]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 f812 	bl	8007c20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007bfc:	68b8      	ldr	r0, [r7, #8]
 8007bfe:	f000 fa0b 	bl	8008018 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 8007c02:	4604      	mov	r4, r0
 8007c04:	68b8      	ldr	r0, [r7, #8]
 8007c06:	f000 fa13 	bl	8008030 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	4621      	mov	r1, r4
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 fa19 	bl	8008048 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>
  }
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd90      	pop	{r4, r7, pc}
	...

08007c20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d108      	bne.n	8007c44 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d105      	bne.n	8007c44 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	db02      	blt.n	8007c44 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	da06      	bge.n	8007c52 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x32>
 8007c44:	4b0c      	ldr	r3, [pc, #48]	; (8007c78 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x58>)
 8007c46:	4a0d      	ldr	r2, [pc, #52]	; (8007c7c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x5c>)
 8007c48:	f240 1111 	movw	r1, #273	; 0x111
 8007c4c:	480c      	ldr	r0, [pc, #48]	; (8007c80 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x60>)
 8007c4e:	f015 ff4d 	bl	801daec <__assert_func>
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	617b      	str	r3, [r7, #20]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	613b      	str	r3, [r7, #16]
  }
 8007c5a:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	fb02 f103 	mul.w	r1, r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	f000 fa0b 	bl	8008084 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>
    }
 8007c6e:	bf00      	nop
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	080223e4 	.word	0x080223e4
 8007c7c:	0802265c 	.word	0x0802265c
 8007c80:	08022600 	.word	0x08022600

08007c84 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa05 	bl	800809e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fa20 	bl	80080da <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>
  }
 8007c9a:	bf00      	nop
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fa23 	bl	80080f8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 fa29 	bl	800810e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>
  }
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa43 	bl	800815e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fa59 	bl	8008190 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 8007cde:	bf00      	nop
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fa5d 	bl	80081b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 fa5d 	bl	80081cc <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8007d12:	4603      	mov	r3, r0
 8007d14:	4618      	mov	r0, r3
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007d1c:	b590      	push	{r4, r7, lr}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007d28:	68b8      	ldr	r0, [r7, #8]
 8007d2a:	f7ff ffdc 	bl	8007ce6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>
 8007d2e:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007d30:	68b8      	ldr	r0, [r7, #8]
 8007d32:	f7ff ffe5 	bl	8007d00 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>
 8007d36:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fd f865 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007d40:	4602      	mov	r2, r0
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d107      	bne.n	8007d58 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x3c>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fd f852 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007d50:	4602      	mov	r2, r0
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d001      	beq.n	8007d5c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x40>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x42>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x52>
      dst.resize(dstRows, dstCols);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	6979      	ldr	r1, [r7, #20]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7ff ff59 	bl	8007c20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007d6e:	68b8      	ldr	r0, [r7, #8]
 8007d70:	f000 fa39 	bl	80081e6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>
 8007d74:	4604      	mov	r4, r0
 8007d76:	68b8      	ldr	r0, [r7, #8]
 8007d78:	f000 fa40 	bl	80081fc <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	461a      	mov	r2, r3
 8007d80:	4621      	mov	r1, r4
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f000 fa46 	bl	8008214 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>
  }
 8007d88:	bf00      	nop
 8007d8a:	371c      	adds	r7, #28
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd90      	pop	{r4, r7, pc}

08007d90 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>:
template<typename DstXprType, typename OtherXpr, typename ProductType, typename Func1, typename Func2>
struct assignment_from_xpr_op_product
{
  template<typename SrcXprType, typename InitialFunc>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 8007d90:	b590      	push	{r4, r7, lr}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  {
    call_assignment_no_alias(dst, src.lhs(), Func1());
 8007d9c:	68b8      	ldr	r0, [r7, #8]
 8007d9e:	f000 fa57 	bl	8008250 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>
 8007da2:	4604      	mov	r4, r0
 8007da4:	f107 0310 	add.w	r3, r7, #16
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe ffb8 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007dae:	f107 0310 	add.w	r3, r7, #16
 8007db2:	461a      	mov	r2, r3
 8007db4:	4621      	mov	r1, r4
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f7ff f8be 	bl	8006f38 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 8007dbc:	68b8      	ldr	r0, [r7, #8]
 8007dbe:	f000 fa53 	bl	8008268 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	f107 0314 	add.w	r3, r7, #20
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 fa59 	bl	8008280 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8007dce:	f107 0314 	add.w	r3, r7, #20
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 fa5d 	bl	8008296 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007ddc:	bf00      	nop
 8007dde:	371c      	adds	r7, #28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd90      	pop	{r4, r7, pc}

08007de4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 fa62 	bl	80082b8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8007df4:	4603      	mov	r3, r0
 8007df6:	4618      	mov	r0, r3
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fc ff4c 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007e10:	4603      	mov	r3, r0
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007e1a:	b590      	push	{r4, r7, lr}
 8007e1c:	b087      	sub	sp, #28
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007e26:	68b8      	ldr	r0, [r7, #8]
 8007e28:	f7ff ffdc 	bl	8007de4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>
 8007e2c:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007e2e:	68b8      	ldr	r0, [r7, #8]
 8007e30:	f7ff ffe5 	bl	8007dfe <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>
 8007e34:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fc ff40 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d107      	bne.n	8007e56 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x3c>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fc ff2d 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d001      	beq.n	8007e5a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x40>
 8007e56:	2301      	movs	r3, #1
 8007e58:	e000      	b.n	8007e5c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x42>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x52>
      dst.resize(dstRows, dstCols);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	6979      	ldr	r1, [r7, #20]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff fe42 	bl	8007af0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007e6c:	68b8      	ldr	r0, [r7, #8]
 8007e6e:	f000 fa31 	bl	80082d4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>
 8007e72:	4604      	mov	r4, r0
 8007e74:	68b8      	ldr	r0, [r7, #8]
 8007e76:	f000 fa38 	bl	80082ea <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	4621      	mov	r1, r4
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 fa3e 	bl	8008302 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>
  }
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd90      	pop	{r4, r7, pc}

08007e8e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fc ffb5 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007ea0:	4603      	mov	r3, r0
    }
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fc ffa7 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8007ec6:	b480      	push	{r7}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3310      	adds	r3, #16
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>:
struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode>
{
  typedef typename Product<Lhs,Rhs>::Scalar Scalar;

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	; 0x28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  {
    // Same as: dst.noalias() = lhs.lazyProduct(rhs);
    // but easier on the compiler side
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8007f00:	f107 0310 	add.w	r3, r7, #16
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	68b9      	ldr	r1, [r7, #8]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 fa18 	bl	800833e <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>
 8007f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fe ff03 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007f18:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007f1c:	f107 0310 	add.w	r3, r7, #16
 8007f20:	4619      	mov	r1, r3
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 fa22 	bl	800836c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007f28:	bf00      	nop
 8007f2a:	3728      	adds	r7, #40	; 0x28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 fa27 	bl	800838e <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 8007f40:	4603      	mov	r3, r0
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>:
      *          in a column-major matrix).
      *
      * \sa innerStride(), rowStride(), colStride()
      */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b082      	sub	sp, #8
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
    {
      return derived().outerStride();
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7fd fabd 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 fa22 	bl	80083a4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8007f60:	4603      	mov	r3, r0
    }
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4618      	mov	r0, r3
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8007f92:	1d3b      	adds	r3, r7, #4
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fb ff9c 	bl	8003ed2 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
 8007fb0:	603b      	str	r3, [r7, #0]
 8007fb2:	bf00      	nop
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8007fbe:	b5b0      	push	{r4, r5, r7, lr}
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689c      	ldr	r4, [r3, #8]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 f9f2 	bl	80083bc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>
 8007fd8:	4605      	mov	r5, r0
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 f9fb 	bl	80083dc <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	461a      	mov	r2, r3
 8007fea:	4629      	mov	r1, r5
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 fa05 	bl	80083fc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bdb0      	pop	{r4, r5, r7, pc}

08007ffa <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008002:	2101      	movs	r1, #1
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff ffda 	bl	8007fbe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fa06 	bl	800841c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>
  }
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	4618      	mov	r0, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008048:	b580      	push	{r7, lr}
 800804a:	b088      	sub	sp, #32
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8008054:	f107 0314 	add.w	r3, r7, #20
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	4618      	mov	r0, r3
 800805e:	f000 f9ec 	bl	800843a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8008062:	f107 031c 	add.w	r3, r7, #28
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe fe59 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800806c:	f107 021c 	add.w	r2, r7, #28
 8008070:	f107 0314 	add.w	r3, r7, #20
 8008074:	4619      	mov	r1, r3
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f000 f9f6 	bl	8008468 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800807c:	bf00      	nop
 800807e:	3720      	adds	r7, #32
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>:
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	603b      	str	r3, [r7, #0]
 8008092:	bf00      	nop
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800809e:	b5b0      	push	{r4, r5, r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	689c      	ldr	r4, [r3, #8]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 f9e9 	bl	800848a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 80080b8:	4605      	mov	r5, r0
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 f9f2 	bl	80084aa <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>
 80080c6:	4603      	mov	r3, r0
 80080c8:	461a      	mov	r2, r3
 80080ca:	4629      	mov	r1, r5
 80080cc:	4620      	mov	r0, r4
 80080ce:	f000 f995 	bl	80083fc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bdb0      	pop	{r4, r5, r7, pc}

080080da <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80080e2:	2101      	movs	r1, #1
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff ffda 	bl	800809e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f9ed 	bl	80084ca <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>
  }
 80080f0:	bf00      	nop
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4618      	mov	r0, r3
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>:
  {
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800810e:	b590      	push	{r4, r7, lr}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	6039      	str	r1, [r7, #0]
 8008118:	687c      	ldr	r4, [r7, #4]
 800811a:	6838      	ldr	r0, [r7, #0]
 800811c:	f000 f9e4 	bl	80084e8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>
 8008120:	4603      	mov	r3, r0
 8008122:	4619      	mov	r1, r3
 8008124:	4620      	mov	r0, r4
 8008126:	f7fd fbe1 	bl	80058ec <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	1d1c      	adds	r4, r3, #4
 800812e:	6838      	ldr	r0, [r7, #0]
 8008130:	f000 f9e6 	bl	8008500 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>
 8008134:	4603      	mov	r3, r0
 8008136:	4619      	mov	r1, r3
 8008138:	4620      	mov	r0, r4
 800813a:	f000 f9f8 	bl	800852e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008144:	6838      	ldr	r0, [r7, #0]
 8008146:	f000 f9e6 	bl	8008516 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>
 800814a:	4603      	mov	r3, r0
 800814c:	4619      	mov	r1, r3
 800814e:	4620      	mov	r0, r4
 8008150:	f000 f9fc 	bl	800854c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4618      	mov	r0, r3
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	bd90      	pop	{r4, r7, pc}

0800815e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800815e:	b580      	push	{r7, lr}
 8008160:	b086      	sub	sp, #24
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	68b8      	ldr	r0, [r7, #8]
 800816e:	f000 f9fc 	bl	800856a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8008172:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8008174:	6879      	ldr	r1, [r7, #4]
 8008176:	68b8      	ldr	r0, [r7, #8]
 8008178:	f000 fa03 	bl	8008582 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800817c:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	6979      	ldr	r1, [r7, #20]
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 fa09 	bl	800859a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8008188:	bf00      	nop
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008198:	2201      	movs	r2, #1
 800819a:	2100      	movs	r1, #0
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7ff ffde 	bl	800815e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa1f 	bl	80085e6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 80081a8:	bf00      	nop
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fc fd7e 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80081c2:	4603      	mov	r3, r0
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index cols() const EIGEN_NOEXCEPT { return m_xpr.rows(); }
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fd fdc3 	bl	8005d62 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80081dc:	4603      	mov	r3, r0
 80081de:	4618      	mov	r0, r3
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3308      	adds	r3, #8
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008214:	b580      	push	{r7, lr}
 8008216:	b08c      	sub	sp, #48	; 0x30
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8008220:	f107 0310 	add.w	r3, r7, #16
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	68b9      	ldr	r1, [r7, #8]
 8008228:	4618      	mov	r0, r3
 800822a:	f000 f9ec 	bl	8008606 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>
 800822e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe fd73 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008238:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800823c:	f107 0310 	add.w	r3, r7, #16
 8008240:	4619      	mov	r1, r3
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 f9f6 	bl	8008634 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008248:	bf00      	nop
 800824a:	3730      	adds	r7, #48	; 0x30
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4618      	mov	r0, r3
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	3304      	adds	r3, #4
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with addition
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4618      	mov	r0, r3
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008296:	b580      	push	{r7, lr}
 8008298:	b086      	sub	sp, #24
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	68b9      	ldr	r1, [r7, #8]
 80082aa:	6978      	ldr	r0, [r7, #20]
 80082ac:	f000 f9d4 	bl	8008658 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 80082b0:	bf00      	nop
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fc fcfa 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80082ca:	4603      	mov	r3, r0
    }
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4618      	mov	r0, r3
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80082ea:	b480      	push	{r7}
 80082ec:	b083      	sub	sp, #12
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	4618      	mov	r0, r3
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008302:	b580      	push	{r7, lr}
 8008304:	b08a      	sub	sp, #40	; 0x28
 8008306:	af00      	add	r7, sp, #0
 8008308:	60f8      	str	r0, [r7, #12]
 800830a:	60b9      	str	r1, [r7, #8]
 800830c:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800830e:	f107 0310 	add.w	r3, r7, #16
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 f9d8 	bl	80086cc <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>
 800831c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008320:	4618      	mov	r0, r3
 8008322:	f7fe fcfc 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008326:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800832a:	f107 0310 	add.w	r3, r7, #16
 800832e:	4619      	mov	r1, r3
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 f9e2 	bl	80086fa <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008336:	bf00      	nop
 8008338:	3728      	adds	r7, #40	; 0x28
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived,OtherDerived,LazyProduct>
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800833e:	b590      	push	{r4, r7, lr}
 8008340:	b085      	sub	sp, #20
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
    INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS)
  EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),
    INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)

  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800834a:	68b8      	ldr	r0, [r7, #8]
 800834c:	f7fd f821 	bl	8005392 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 8008350:	4604      	mov	r4, r0
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7fd f828 	bl	80053a8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8008358:	4603      	mov	r3, r0
 800835a:	461a      	mov	r2, r3
 800835c:	4621      	mov	r1, r4
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 fa00 	bl	8008764 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>
}
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	bd90      	pop	{r4, r7, pc}

0800836c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	68b9      	ldr	r1, [r7, #8]
 8008380:	6978      	ldr	r0, [r7, #20]
 8008382:	f000 fa1f 	bl	80087c4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 8008386:	bf00      	nop
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>:
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fa1c 	bl	80087ea <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>
 80083b2:	4603      	mov	r3, r0
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
  }
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
  }
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	601a      	str	r2, [r3, #0]
 8008410:	bf00      	nop
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008424:	2102      	movs	r1, #2
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7ff fdc9 	bl	8007fbe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f9e8 	bl	8008802 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>
  }
 8008432:	bf00      	nop
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800843a:	b590      	push	{r4, r7, lr}
 800843c:	b085      	sub	sp, #20
 800843e:	af00      	add	r7, sp, #0
 8008440:	60f8      	str	r0, [r7, #12]
 8008442:	60b9      	str	r1, [r7, #8]
 8008444:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008446:	68b8      	ldr	r0, [r7, #8]
 8008448:	f7fd f843 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800844c:	4604      	mov	r4, r0
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7fc fe77 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8008454:	4603      	mov	r3, r0
 8008456:	461a      	mov	r2, r3
 8008458:	4621      	mov	r1, r4
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 fa04 	bl	8008868 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>
}
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	bd90      	pop	{r4, r7, pc}

08008468 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	6978      	ldr	r0, [r7, #20]
 800847e:	f000 fa21 	bl	80088c4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8008482:	bf00      	nop
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
  }
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
  }
 80084be:	4618      	mov	r0, r3
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80084d2:	2102      	movs	r1, #2
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff fde2 	bl	800809e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fa05 	bl	80088ea <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>
  }
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3310      	adds	r3, #16
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4618      	mov	r0, r3
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	4618      	mov	r0, r3
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	6039      	str	r1, [r7, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	4618      	mov	r0, r3
 800853e:	f000 f9de 	bl	80088fe <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4618      	mov	r0, r3
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>:
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff f846 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800856a:	b480      	push	{r7}
 800856c:	b083      	sub	sp, #12
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]
      : inner;
 8008574:	683b      	ldr	r3, [r7, #0]
  }
 8008576:	4618      	mov	r0, r3
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	6039      	str	r1, [r7, #0]
      : outer;
 800858c:	687b      	ldr	r3, [r7, #4]
  }
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800859a:	b5b0      	push	{r4, r5, r7, lr}
 800859c:	b086      	sub	sp, #24
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	60b9      	str	r1, [r7, #8]
 80085a4:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	689c      	ldr	r4, [r3, #8]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	68b9      	ldr	r1, [r7, #8]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 f9b2 	bl	800891c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 80085b8:	4605      	mov	r5, r0
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 f9c2 	bl	800894c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>
 80085c8:	eef0 7a40 	vmov.f32	s15, s0
 80085cc:	edc7 7a05 	vstr	s15, [r7, #20]
 80085d0:	f107 0314 	add.w	r3, r7, #20
 80085d4:	461a      	mov	r2, r3
 80085d6:	4629      	mov	r1, r5
 80085d8:	4620      	mov	r0, r4
 80085da:	f7ff ff0f 	bl	80083fc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80085de:	bf00      	nop
 80085e0:	3718      	adds	r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bdb0      	pop	{r4, r5, r7, pc}

080085e6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b082      	sub	sp, #8
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80085ee:	2202      	movs	r2, #2
 80085f0:	2100      	movs	r1, #0
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff fdb3 	bl	800815e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f9ce 	bl	800899a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008606:	b590      	push	{r4, r7, lr}
 8008608:	b085      	sub	sp, #20
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008612:	68b8      	ldr	r0, [r7, #8]
 8008614:	f7fd fbe9 	bl	8005dea <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 8008618:	4604      	mov	r4, r0
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7fd fbf0 	bl	8005e00 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 8008620:	4603      	mov	r3, r0
 8008622:	461a      	mov	r2, r3
 8008624:	4621      	mov	r1, r4
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 f9ec 	bl	8008a04 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>
}
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	bd90      	pop	{r4, r7, pc}

08008634 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	68b9      	ldr	r1, [r7, #8]
 8008648:	6978      	ldr	r0, [r7, #20]
 800864a:	f000 fa0d 	bl	8008a68 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 800864e:	bf00      	nop
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<Scalar,Scalar> &)
 8008658:	b590      	push	{r4, r7, lr}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4618      	mov	r0, r3
 8008668:	f7fc fbcf 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800866c:	4604      	mov	r4, r0
 800866e:	68b8      	ldr	r0, [r7, #8]
 8008670:	f7fd fdd7 	bl	8006222 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 8008674:	4603      	mov	r3, r0
 8008676:	429c      	cmp	r4, r3
 8008678:	d10a      	bne.n	8008690 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x38>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4618      	mov	r0, r3
 800867e:	f7fc fbb9 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008682:	4604      	mov	r4, r0
 8008684:	68b8      	ldr	r0, [r7, #8]
 8008686:	f7fd fdda 	bl	800623e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 800868a:	4603      	mov	r3, r0
 800868c:	429c      	cmp	r4, r3
 800868e:	d005      	beq.n	800869c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x44>
 8008690:	4b0b      	ldr	r3, [pc, #44]	; (80086c0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x68>)
 8008692:	4a0c      	ldr	r2, [pc, #48]	; (80086c4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x6c>)
 8008694:	21a1      	movs	r1, #161	; 0xa1
 8008696:	480c      	ldr	r0, [pc, #48]	; (80086c8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x70>)
 8008698:	f015 fa28 	bl	801daec <__assert_func>
    generic_product_impl<Lhs, Rhs>::addTo(dst, src.lhs(), src.rhs());
 800869c:	68b8      	ldr	r0, [r7, #8]
 800869e:	f000 f9f6 	bl	8008a8e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>
 80086a2:	4604      	mov	r4, r0
 80086a4:	68b8      	ldr	r0, [r7, #8]
 80086a6:	f000 f9fe 	bl	8008aa6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>
 80086aa:	4603      	mov	r3, r0
 80086ac:	461a      	mov	r2, r3
 80086ae:	4621      	mov	r1, r4
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 fa04 	bl	8008abe <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>
  }
 80086b6:	bf00      	nop
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd90      	pop	{r4, r7, pc}
 80086be:	bf00      	nop
 80086c0:	080226e8 	.word	0x080226e8
 80086c4:	08022720 	.word	0x08022720
 80086c8:	08022be0 	.word	0x08022be0

080086cc <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80086cc:	b590      	push	{r4, r7, lr}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80086d8:	68b8      	ldr	r0, [r7, #8]
 80086da:	f7fd feed 	bl	80064b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 80086de:	4604      	mov	r4, r0
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7fc fef6 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80086e6:	4603      	mov	r3, r0
 80086e8:	461a      	mov	r2, r3
 80086ea:	4621      	mov	r1, r4
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 fa29 	bl	8008b44 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>
}
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd90      	pop	{r4, r7, pc}

080086fa <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b086      	sub	sp, #24
 80086fe:	af00      	add	r7, sp, #0
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	60b9      	str	r1, [r7, #8]
 8008704:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	68b9      	ldr	r1, [r7, #8]
 800870e:	6978      	ldr	r0, [r7, #20]
 8008710:	f000 fa46 	bl	8008ba0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008714:	bf00      	nop
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fa4e 	bl	8008bc6 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>:
class dense_product_base
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff ffed 	bl	800871c <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7ff ffed 	bl	8008734 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008764:	b590      	push	{r4, r7, lr}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f7ff ffeb 	bl	800874c <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	68b9      	ldr	r1, [r7, #8]
 800877a:	4618      	mov	r0, r3
 800877c:	f7fb fe5d 	bl	800443a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3310      	adds	r3, #16
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	6812      	ldr	r2, [r2, #0]
 8008788:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800878a:	68b8      	ldr	r0, [r7, #8]
 800878c:	f7fc fe3b 	bl	8005406 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8008790:	4604      	mov	r4, r0
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7fc fe45 	bl	8005422 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008798:	4603      	mov	r3, r0
 800879a:	429c      	cmp	r4, r3
 800879c:	d005      	beq.n	80087aa <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x46>
 800879e:	4b06      	ldr	r3, [pc, #24]	; (80087b8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x54>)
 80087a0:	4a06      	ldr	r2, [pc, #24]	; (80087bc <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x58>)
 80087a2:	2160      	movs	r1, #96	; 0x60
 80087a4:	4806      	ldr	r0, [pc, #24]	; (80087c0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x5c>)
 80087a6:	f015 f9a1 	bl	801daec <__assert_func>
 80087aa:	bf00      	nop
    }
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd90      	pop	{r4, r7, pc}
 80087b6:	bf00      	nop
 80087b8:	0801fc14 	.word	0x0801fc14
 80087bc:	08022c40 	.word	0x08022c40
 80087c0:	0801ff64 	.word	0x0801ff64

080087c4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 fa02 	bl	8008bdc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	68b9      	ldr	r1, [r7, #8]
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 fab3 	bl	8008d48 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80087e2:	bf00      	nop
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fae0 	bl	8008db8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80087f8:	4603      	mov	r3, r0
    }
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008802:	b580      	push	{r7, lr}
 8008804:	b082      	sub	sp, #8
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800880a:	2103      	movs	r1, #3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7ff fbd6 	bl	8007fbe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fae0 	bl	8008dd8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>
  }
 8008818:	bf00      	nop
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fae4 	bl	8008df6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4618      	mov	r0, r3
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>:
class dense_product_base
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff ffed 	bl	8008820 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4618      	mov	r0, r3
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff ffed 	bl	8008838 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008868:	b590      	push	{r4, r7, lr}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f7ff ffeb 	bl	8008850 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	4618      	mov	r0, r3
 800888a:	f7fc fa0d 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800888e:	4604      	mov	r4, r0
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4618      	mov	r0, r3
 8008894:	f7fc fab9 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008898:	4603      	mov	r3, r0
 800889a:	429c      	cmp	r4, r3
 800889c:	d005      	beq.n	80088aa <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x42>
 800889e:	4b06      	ldr	r3, [pc, #24]	; (80088b8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x50>)
 80088a0:	4a06      	ldr	r2, [pc, #24]	; (80088bc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x54>)
 80088a2:	2160      	movs	r1, #96	; 0x60
 80088a4:	4806      	ldr	r0, [pc, #24]	; (80088c0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x58>)
 80088a6:	f015 f921 	bl	801daec <__assert_func>
 80088aa:	bf00      	nop
    }
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4618      	mov	r0, r3
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd90      	pop	{r4, r7, pc}
 80088b6:	bf00      	nop
 80088b8:	0801fc14 	.word	0x0801fc14
 80088bc:	08022f04 	.word	0x08022f04
 80088c0:	0801ff64 	.word	0x0801ff64

080088c4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80088d0:	68b9      	ldr	r1, [r7, #8]
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 fa9a 	bl	8008e0c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	68b9      	ldr	r1, [r7, #8]
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 fac3 	bl	8008e68 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80088e2:	bf00      	nop
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80088ea:	b480      	push	{r7}
 80088ec:	b083      	sub	sp, #12
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	bf00      	nop
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	6039      	str	r1, [r7, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 fae3 	bl	8008ed8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800891c:	b590      	push	{r4, r7, lr}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681c      	ldr	r4, [r3, #0]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4618      	mov	r0, r3
 8008930:	f000 fb0f 	bl	8008f52 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008934:	4602      	mov	r2, r0
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	fb03 f202 	mul.w	r2, r3, r2
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4413      	add	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4423      	add	r3, r4
  }
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	bd90      	pop	{r4, r7, pc}

0800894c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800894c:	b5b0      	push	{r4, r5, r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fb04 	bl	8008f68 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>
 8008960:	4604      	mov	r4, r0
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3304      	adds	r3, #4
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	68b9      	ldr	r1, [r7, #8]
 800896a:	4618      	mov	r0, r3
 800896c:	f000 fb07 	bl	8008f7e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>
 8008970:	4605      	mov	r5, r0
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	332c      	adds	r3, #44	; 0x2c
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	68b9      	ldr	r1, [r7, #8]
 800897a:	4618      	mov	r0, r3
 800897c:	f000 fb17 	bl	8008fae <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>
 8008980:	4603      	mov	r3, r0
 8008982:	461a      	mov	r2, r3
 8008984:	4629      	mov	r1, r5
 8008986:	4620      	mov	r0, r4
 8008988:	f000 fb29 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800898c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008990:	eeb0 0a67 	vmov.f32	s0, s15
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bdb0      	pop	{r4, r5, r7, pc}

0800899a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80089a2:	2200      	movs	r2, #0
 80089a4:	2101      	movs	r1, #1
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7ff fbd9 	bl	800815e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fb2b 	bl	8009008 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 80089b2:	bf00      	nop
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fb30 	bl	8009028 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>:
class dense_product_base
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b082      	sub	sp, #8
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7ff ffed 	bl	80089ba <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b082      	sub	sp, #8
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff ffed 	bl	80089d2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008a04:	b590      	push	{r4, r7, lr}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f7ff ffea 	bl	80089ea <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3308      	adds	r3, #8
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fb feb9 	bl	80047a0 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8008a2e:	68b8      	ldr	r0, [r7, #8]
 8008a30:	f7fd fa15 	bl	8005e5e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8008a34:	4604      	mov	r4, r0
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7fd fa1f 	bl	8005e7a <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	429c      	cmp	r4, r3
 8008a40:	d005      	beq.n	8008a4e <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x4a>
 8008a42:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x58>)
 8008a44:	4a06      	ldr	r2, [pc, #24]	; (8008a60 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x5c>)
 8008a46:	2160      	movs	r1, #96	; 0x60
 8008a48:	4806      	ldr	r0, [pc, #24]	; (8008a64 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x60>)
 8008a4a:	f015 f84f 	bl	801daec <__assert_func>
 8008a4e:	bf00      	nop
    }
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd90      	pop	{r4, r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	0801fc14 	.word	0x0801fc14
 8008a60:	0802302c 	.word	0x0802302c
 8008a64:	0801ff64 	.word	0x0801ff64

08008a68 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008a74:	68b9      	ldr	r1, [r7, #8]
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 fae1 	bl	800903e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	68b9      	ldr	r1, [r7, #8]
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 fb23 	bl	80090cc <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008a86:	bf00      	nop
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008aa6:	b480      	push	{r7}
 8008aa8:	b083      	sub	sp, #12
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>:

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b08a      	sub	sp, #40	; 0x28
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	607a      	str	r2, [r7, #4]
  {
    // dst.noalias() += lhs.lazyProduct(rhs);
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::add_assign_op<typename Dst::Scalar,Scalar>());
 8008aca:	f107 0310 	add.w	r3, r7, #16
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	68b9      	ldr	r1, [r7, #8]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 fb32 	bl	800913c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>
 8008ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff fbcf 	bl	8008280 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8008ae2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008ae6:	f107 0310 	add.w	r3, r7, #16
 8008aea:	4619      	mov	r1, r3
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f000 fb3c 	bl	800916a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008af2:	bf00      	nop
 8008af4:	3728      	adds	r7, #40	; 0x28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b082      	sub	sp, #8
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fb42 	bl	800918c <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>:
class dense_product_base
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b082      	sub	sp, #8
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff ffed 	bl	8008afa <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b082      	sub	sp, #8
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff ffed 	bl	8008b12 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008b44:	b590      	push	{r4, r7, lr}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7ff ffea 	bl	8008b2a <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	68b9      	ldr	r1, [r7, #8]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fb ff39 	bl	80049d2 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 8008b66:	68b8      	ldr	r0, [r7, #8]
 8008b68:	f7fd fcd5 	bl	8006516 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fc f8a4 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008b76:	4603      	mov	r3, r0
 8008b78:	429c      	cmp	r4, r3
 8008b7a:	d005      	beq.n	8008b88 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x44>
 8008b7c:	4b05      	ldr	r3, [pc, #20]	; (8008b94 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x50>)
 8008b7e:	4a06      	ldr	r2, [pc, #24]	; (8008b98 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x54>)
 8008b80:	2160      	movs	r1, #96	; 0x60
 8008b82:	4806      	ldr	r0, [pc, #24]	; (8008b9c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x58>)
 8008b84:	f014 ffb2 	bl	801daec <__assert_func>
 8008b88:	bf00      	nop
    }
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd90      	pop	{r4, r7, pc}
 8008b94:	0801fc14 	.word	0x0801fc14
 8008b98:	080233b4 	.word	0x080233b4
 8008b9c:	0801ff64 	.word	0x0801ff64

08008ba0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008bac:	68b9      	ldr	r1, [r7, #8]
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f000 faf7 	bl	80091a2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	68b9      	ldr	r1, [r7, #8]
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 fb35 	bl	8009228 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008bbe:	bf00      	nop
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
    }
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fc f868 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	dd08      	ble.n	8008c06 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fc f856 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	dd01      	ble.n	8008c06 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8008c02:	2301      	movs	r3, #1
 8008c04:	e000      	b.n	8008c08 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2c>
 8008c06:	2300      	movs	r3, #0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d003      	beq.n	8008c14 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fb42 	bl	8009298 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>
}
 8008c14:	bf00      	nop
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct evaluator<const T>
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fc fa5b 	bl	80050e2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b082      	sub	sp, #8
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fb5a 	bl	80092f8 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<const T>
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7ff ffec 	bl	8008c36 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3308      	adds	r3, #8
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7ff ffea 	bl	8008c4e <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7ff ffcc 	bl	8008c1c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b082      	sub	sp, #8
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff ffe5 	bl	8008c68 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fb1f 	bl	80092e2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7ff ffe8 	bl	8008c8e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fc fa05 	bl	80050e2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fb18 	bl	800930e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff ffe8 	bl	8008cc8 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>:

template<int StorageOrder, int UnrollingIndex, typename Lhs, typename Rhs, typename Packet, int LoadMode>
struct etor_product_packet_impl;

template<typename Lhs, typename Rhs, int ProductTag>
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	3324      	adds	r3, #36	; 0x24
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff ffea 	bl	8008ce8 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3314      	adds	r3, #20
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7ff ffc8 	bl	8008cae <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fad4 	bl	80092cc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b082      	sub	sp, #8
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff ffe2 	bl	8008d02 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b096      	sub	sp, #88	; 0x58
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8008d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d58:	68b9      	ldr	r1, [r7, #8]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 faa7 	bl	80092ae <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>
  resize_if_allowed(dst, src, func);
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	68b9      	ldr	r1, [r7, #8]
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 faf9 	bl	800935c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8008d6a:	f107 0320 	add.w	r3, r7, #32
 8008d6e:	68f9      	ldr	r1, [r7, #12]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe fc3b 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f7fe fca0 	bl	80076bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008d82:	f107 0120 	add.w	r1, r7, #32
 8008d86:	f107 0010 	add.w	r0, r7, #16
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f000 fb2f 	bl	80093f0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8008d92:	f107 0310 	add.w	r3, r7, #16
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 fb44 	bl	8009424 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>
  DstEvaluatorType dstEvaluator(dst);
 8008d9c:	f107 0320 	add.w	r3, r7, #32
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe fa14 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7ff ffbf 	bl	8008d2e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
}
 8008db0:	bf00      	nop
 8008db2:	3750      	adds	r7, #80	; 0x50
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7fc fb86 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fb ff78 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008de0:	2104      	movs	r1, #4
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7ff f8eb 	bl	8007fbe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fb26 	bl	800943a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>
  }
 8008dee:	bf00      	nop
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
    }
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4618      	mov	r0, r3
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b082      	sub	sp, #8
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	330c      	adds	r3, #12
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fc f957 	bl	80050e2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3308      	adds	r3, #8
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7fe f9c8 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fb19 	bl	8009476 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4618      	mov	r0, r3
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b082      	sub	sp, #8
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7ff ffe2 	bl	8008e22 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4618      	mov	r0, r3
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b090      	sub	sp, #64	; 0x40
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8008e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e78:	68b9      	ldr	r1, [r7, #8]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 faec 	bl	8009458 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	68b9      	ldr	r1, [r7, #8]
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 fb1d 	bl	80094c4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8008e8a:	f107 0320 	add.w	r3, r7, #32
 8008e8e:	68f9      	ldr	r1, [r7, #12]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fd fc60 	bl	8006756 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f7fe fc9e 	bl	80077d8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008ea2:	f107 0120 	add.w	r1, r7, #32
 8008ea6:	f107 0010 	add.w	r0, r7, #16
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f000 fb53 	bl	8009558 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8008eb2:	f107 0310 	add.w	r3, r7, #16
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fb68 	bl	800958c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8008ebc:	f107 0320 	add.w	r3, r7, #32
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fc f90e 	bl	80050e2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7ff ffbf 	bl	8008e4e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
}
 8008ed0:	bf00      	nop
 8008ed2:	3738      	adds	r7, #56	; 0x38
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 8008ed8:	b5b0      	push	{r4, r5, r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 fb5c 	bl	80095a2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	1d1c      	adds	r4, r3, #4
 8008eee:	6838      	ldr	r0, [r7, #0]
 8008ef0:	f7fc fca0 	bl	8005834 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	60bb      	str	r3, [r7, #8]
 8008ef8:	6838      	ldr	r0, [r7, #0]
 8008efa:	f7fc fca8 	bl	800584e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8008efe:	4603      	mov	r3, r0
 8008f00:	60fb      	str	r3, [r7, #12]
 8008f02:	f107 020c 	add.w	r2, r7, #12
 8008f06:	f107 0308 	add.w	r3, r7, #8
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f000 fb55 	bl	80095bc <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4619      	mov	r1, r3
 8008f16:	2004      	movs	r0, #4
 8008f18:	f7f8 f810 	bl	8000f3c <_ZnwjPv>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	3304      	adds	r3, #4
 8008f22:	4619      	mov	r1, r3
 8008f24:	4610      	mov	r0, r2
 8008f26:	f000 fb62 	bl	80095ee <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	1d1c      	adds	r4, r3, #4
 8008f2e:	6838      	ldr	r0, [r7, #0]
 8008f30:	f000 fb6d 	bl	800960e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 8008f34:	4605      	mov	r5, r0
 8008f36:	6838      	ldr	r0, [r7, #0]
 8008f38:	f000 fb74 	bl	8009624 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	461a      	mov	r2, r3
 8008f40:	4629      	mov	r1, r5
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 fb7a 	bl	800963c <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>
  }
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bdb0      	pop	{r4, r5, r7, pc}

08008f52 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const BinaryOp& func() const { return op; }
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4618      	mov	r0, r3
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8008f7e:	b590      	push	{r4, r7, lr}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	60b9      	str	r1, [r7, #8]
 8008f88:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681c      	ldr	r4, [r3, #0]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7ff ffde 	bl	8008f52 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008f96:	4602      	mov	r2, r0
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	fb03 f202 	mul.w	r2, r3, r2
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4423      	add	r3, r4
  }
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd90      	pop	{r4, r7, pc}

08008fae <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8008fae:	b590      	push	{r4, r7, lr}
 8008fb0:	b085      	sub	sp, #20
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681c      	ldr	r4, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7ff ffc6 	bl	8008f52 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	fb03 f202 	mul.w	r2, r3, r2
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4423      	add	r3, r4
  }
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd90      	pop	{r4, r7, pc}

08008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8008fde:	b480      	push	{r7}
 8008fe0:	b085      	sub	sp, #20
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	607a      	str	r2, [r7, #4]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	ed93 7a00 	vldr	s14, [r3]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	edd3 7a00 	vldr	s15, [r3]
 8008ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009010:	2201      	movs	r2, #1
 8009012:	2101      	movs	r1, #1
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff f8a2 	bl	800815e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fb2c 	bl	8009678 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
    }
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4618      	mov	r0, r3
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	6039      	str	r1, [r7, #0]
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fb35 	bl	80096cc <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4618      	mov	r0, r3
 8009078:	f7ff ffec 	bl	8009054 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	3314      	adds	r3, #20
 8009092:	4618      	mov	r0, r3
 8009094:	f7ff ffea 	bl	800906c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	3310      	adds	r3, #16
 800909c:	4618      	mov	r0, r3
 800909e:	f7fc f820 	bl	80050e2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fb07 	bl	80096b6 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4618      	mov	r0, r3
 80090be:	f7ff ffe2 	bl	8009086 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4618      	mov	r0, r3
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b092      	sub	sp, #72	; 0x48
 80090d0:	af02      	add	r7, sp, #8
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80090d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090dc:	68b9      	ldr	r1, [r7, #8]
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fada 	bl	8009698 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>
  resize_if_allowed(dst, src, func);
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f000 fb15 	bl	8009718 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80090ee:	f107 0320 	add.w	r3, r7, #32
 80090f2:	68f9      	ldr	r1, [r7, #12]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fd fb2e 	bl	8006756 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f7fe fb6c 	bl	80077d8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8009100:	4603      	mov	r3, r0
 8009102:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009106:	f107 0120 	add.w	r1, r7, #32
 800910a:	f107 0010 	add.w	r0, r7, #16
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f000 fb4b 	bl	80097ac <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009116:	f107 0310 	add.w	r3, r7, #16
 800911a:	4618      	mov	r0, r3
 800911c:	f000 fb60 	bl	80097e0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>
  DstEvaluatorType dstEvaluator(dst);
 8009120:	f107 0320 	add.w	r3, r7, #32
 8009124:	4618      	mov	r0, r3
 8009126:	f7fb ffdc 	bl	80050e2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800912a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800912e:	4618      	mov	r0, r3
 8009130:	f7ff ffbf 	bl	80090b2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
}
 8009134:	bf00      	nop
 8009136:	3740      	adds	r7, #64	; 0x40
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800913c:	b590      	push	{r4, r7, lr}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8009148:	68b8      	ldr	r0, [r7, #8]
 800914a:	f7fb fffa 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800914e:	4604      	mov	r4, r0
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7fc ffd5 	bl	8006100 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 8009156:	4603      	mov	r3, r0
 8009158:	461a      	mov	r2, r3
 800915a:	4621      	mov	r1, r4
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f000 fb6f 	bl	8009840 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>
}
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	bd90      	pop	{r4, r7, pc}

0800916a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800916a:	b580      	push	{r7, lr}
 800916c:	b086      	sub	sp, #24
 800916e:	af00      	add	r7, sp, #0
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	60b9      	str	r1, [r7, #8]
 8009174:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	68b9      	ldr	r1, [r7, #8]
 800917e:	6978      	ldr	r0, [r7, #20]
 8009180:	f000 fb8e 	bl	80098a0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8009184:	bf00      	nop
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
    }
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4618      	mov	r0, r3
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fb fd85 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	dd08      	ble.n	80091cc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fb fd73 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	dd01      	ble.n	80091cc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 80091c8:	2301      	movs	r3, #1
 80091ca:	e000      	b.n	80091ce <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2c>
 80091cc:	2300      	movs	r3, #0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fb76 	bl	80098c6 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>
}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	332c      	adds	r3, #44	; 0x2c
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fd ffed 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3328      	adds	r3, #40	; 0x28
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fd ffe8 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fb7b 	bl	80098fa <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4618      	mov	r0, r3
 800921a:	f7ff ffe2 	bl	80091e2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4618      	mov	r0, r3
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009228:	b580      	push	{r7, lr}
 800922a:	b098      	sub	sp, #96	; 0x60
 800922c:	af02      	add	r7, sp, #8
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009238:	68b9      	ldr	r1, [r7, #8]
 800923a:	4618      	mov	r0, r3
 800923c:	f000 fb4e 	bl	80098dc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	68b9      	ldr	r1, [r7, #8]
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fb7f 	bl	8009948 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800924a:	f107 0320 	add.w	r3, r7, #32
 800924e:	68f9      	ldr	r1, [r7, #12]
 8009250:	4618      	mov	r0, r3
 8009252:	f7fe f9cb 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f7fe fa30 	bl	80076bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 800925c:	4603      	mov	r3, r0
 800925e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009262:	f107 0120 	add.w	r1, r7, #32
 8009266:	f107 0010 	add.w	r0, r7, #16
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f000 fbb5 	bl	80099dc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009272:	f107 0310 	add.w	r3, r7, #16
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fbca 	bl	8009a10 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 800927c:	f107 0320 	add.w	r3, r7, #32
 8009280:	4618      	mov	r0, r3
 8009282:	f7fd ffa4 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8009286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff ffbf 	bl	800920e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
}
 8009290:	bf00      	nop
 8009292:	3758      	adds	r7, #88	; 0x58
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>:
    static void run(const Derived&, const OtherDerived&)
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
    }
 80092a2:	bf00      	nop
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	6039      	str	r1, [r7, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fbb2 	bl	8009a26 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4618      	mov	r0, r3
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4618      	mov	r0, r3
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4618      	mov	r0, r3
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4618      	mov	r0, r3
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe fdad 	bl	8007e8e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8009334:	4603      	mov	r3, r0
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800933e:	b580      	push	{r7, lr}
 8009340:	b082      	sub	sp, #8
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	3310      	adds	r3, #16
 800934a:	4618      	mov	r0, r3
 800934c:	f7fe fdad 	bl	8007eaa <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009350:	4603      	mov	r3, r0
 8009352:	4618      	mov	r0, r3
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
	...

0800935c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009368:	68b8      	ldr	r0, [r7, #8]
 800936a:	f7ff ffdb 	bl	8009324 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>
 800936e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009370:	68b8      	ldr	r0, [r7, #8]
 8009372:	f7ff ffe4 	bl	800933e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>
 8009376:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	4618      	mov	r0, r3
 800937c:	f7fb fc9f 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009380:	4602      	mov	r2, r0
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	4293      	cmp	r3, r2
 8009386:	d107      	bne.n	8009398 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4618      	mov	r0, r3
 800938c:	f7fb fc8c 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009390:	4602      	mov	r2, r0
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	4293      	cmp	r3, r2
 8009396:	d001      	beq.n	800939c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009398:	2301      	movs	r3, #1
 800939a:	e000      	b.n	800939e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800939c:	2300      	movs	r3, #0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d005      	beq.n	80093ae <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	6979      	ldr	r1, [r7, #20]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fe fba1 	bl	8007af0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fb fc84 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80093b6:	4602      	mov	r2, r0
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d107      	bne.n	80093ce <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fb fc71 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80093c6:	4602      	mov	r2, r0
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d006      	beq.n	80093dc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80093ce:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80093d0:	4a05      	ldr	r2, [pc, #20]	; (80093e8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80093d2:	f240 21fd 	movw	r1, #765	; 0x2fd
 80093d6:	4805      	ldr	r0, [pc, #20]	; (80093ec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80093d8:	f014 fb88 	bl	801daec <__assert_func>
}
 80093dc:	bf00      	nop
 80093de:	3718      	adds	r7, #24
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	08021fcc 	.word	0x08021fcc
 80093e8:	08023620 	.word	0x08023620
 80093ec:	080220e0 	.word	0x080220e0

080093f0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
 80093fc:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	605a      	str	r2, [r3, #4]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	609a      	str	r2, [r3, #8]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	60da      	str	r2, [r3, #12]
  }
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fb32 	bl	8009a96 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>
  }
 8009432:	bf00      	nop
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009442:	2105      	movs	r1, #5
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7fe fdba 	bl	8007fbe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fb33 	bl	8009ab6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>
  }
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>:
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	4618      	mov	r0, r3
 8009468:	f000 fb34 	bl	8009ad4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4618      	mov	r0, r3
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4618      	mov	r0, r3
 800949a:	f7fb fc10 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800949e:	4603      	mov	r3, r0
 80094a0:	4618      	mov	r0, r3
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fb fc9d 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80094ba:	4603      	mov	r3, r0
 80094bc:	4618      	mov	r0, r3
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80094d0:	68b8      	ldr	r0, [r7, #8]
 80094d2:	f7ff ffdb 	bl	800948c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>
 80094d6:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80094d8:	68b8      	ldr	r0, [r7, #8]
 80094da:	f7ff ffe5 	bl	80094a8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>
 80094de:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fb fc91 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80094e8:	4602      	mov	r2, r0
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d107      	bne.n	8009500 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fb fc7e 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80094f8:	4602      	mov	r2, r0
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d001      	beq.n	8009504 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009500:	2301      	movs	r3, #1
 8009502:	e000      	b.n	8009506 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009504:	2300      	movs	r3, #0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d005      	beq.n	8009516 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	6979      	ldr	r1, [r7, #20]
 8009510:	4618      	mov	r0, r3
 8009512:	f7fe fb85 	bl	8007c20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	4618      	mov	r0, r3
 800951a:	f7fb fc76 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800951e:	4602      	mov	r2, r0
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	4293      	cmp	r3, r2
 8009524:	d107      	bne.n	8009536 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	4618      	mov	r0, r3
 800952a:	f7fb fc63 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800952e:	4602      	mov	r2, r0
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	4293      	cmp	r3, r2
 8009534:	d006      	beq.n	8009544 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009536:	4b05      	ldr	r3, [pc, #20]	; (800954c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009538:	4a05      	ldr	r2, [pc, #20]	; (8009550 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800953a:	f240 21fd 	movw	r1, #765	; 0x2fd
 800953e:	4805      	ldr	r0, [pc, #20]	; (8009554 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009540:	f014 fad4 	bl	801daec <__assert_func>
}
 8009544:	bf00      	nop
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	08021fcc 	.word	0x08021fcc
 8009550:	08023800 	.word	0x08023800
 8009554:	080220e0 	.word	0x080220e0

08009558 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
 8009564:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	601a      	str	r2, [r3, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	605a      	str	r2, [r3, #4]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	609a      	str	r2, [r3, #8]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	69ba      	ldr	r2, [r7, #24]
 800957c:	60da      	str	r2, [r3, #12]
  }
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4618      	mov	r0, r3
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fad2 	bl	8009b3e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
  evaluator() {}
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b082      	sub	sp, #8
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 fad5 	bl	8009b5c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	607a      	str	r2, [r7, #4]
    {
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 fae4 	bl	8009b98 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 80095d0:	f000 faf2 	bl	8009bb8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	6819      	ldr	r1, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	2300      	movs	r3, #0
 80095e0:	f000 faf1 	bl	8009bc6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	4611      	mov	r1, r2
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 faf5 	bl	8009bee <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>
  { }
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800960e:	b480      	push	{r7}
 8009610:	b083      	sub	sp, #12
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4618      	mov	r0, r3
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3308      	adds	r3, #8
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8009648:	f107 0310 	add.w	r3, r7, #16
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	68b9      	ldr	r1, [r7, #8]
 8009650:	4618      	mov	r0, r3
 8009652:	f000 fae7 	bl	8009c24 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>
 8009656:	f107 031c 	add.w	r3, r7, #28
 800965a:	4618      	mov	r0, r3
 800965c:	f7fd fb5f 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8009660:	f107 021c 	add.w	r2, r7, #28
 8009664:	f107 0310 	add.w	r3, r7, #16
 8009668:	4619      	mov	r1, r3
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 faf1 	bl	8009c52 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009670:	bf00      	nop
 8009672:	3720      	adds	r7, #32
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009680:	2202      	movs	r2, #2
 8009682:	2101      	movs	r1, #1
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7fe fd6a 	bl	800815e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 faf2 	bl	8009c74 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 8009690:	bf00      	nop
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 faf4 	bl	8009c94 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4618      	mov	r0, r3
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe fd5f 	bl	80081b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 80096f2:	4603      	mov	r3, r0
 80096f4:	4618      	mov	r0, r3
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3308      	adds	r3, #8
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe fd5f 	bl	80081cc <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800970e:	4603      	mov	r3, r0
 8009710:	4618      	mov	r0, r3
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009724:	68b8      	ldr	r0, [r7, #8]
 8009726:	f7ff ffdc 	bl	80096e2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>
 800972a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800972c:	68b8      	ldr	r0, [r7, #8]
 800972e:	f7ff ffe5 	bl	80096fc <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>
 8009732:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4618      	mov	r0, r3
 8009738:	f7fb fb67 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800973c:	4602      	mov	r2, r0
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	4293      	cmp	r3, r2
 8009742:	d107      	bne.n	8009754 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4618      	mov	r0, r3
 8009748:	f7fb fb54 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800974c:	4602      	mov	r2, r0
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	4293      	cmp	r3, r2
 8009752:	d001      	beq.n	8009758 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009754:	2301      	movs	r3, #1
 8009756:	e000      	b.n	800975a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009758:	2300      	movs	r3, #0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d005      	beq.n	800976a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	6979      	ldr	r1, [r7, #20]
 8009764:	4618      	mov	r0, r3
 8009766:	f7fe fa5b 	bl	8007c20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4618      	mov	r0, r3
 800976e:	f7fb fb4c 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009772:	4602      	mov	r2, r0
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	4293      	cmp	r3, r2
 8009778:	d107      	bne.n	800978a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	4618      	mov	r0, r3
 800977e:	f7fb fb39 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009782:	4602      	mov	r2, r0
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	4293      	cmp	r3, r2
 8009788:	d006      	beq.n	8009798 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800978a:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800978c:	4a05      	ldr	r2, [pc, #20]	; (80097a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800978e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009792:	4805      	ldr	r0, [pc, #20]	; (80097a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009794:	f014 f9aa 	bl	801daec <__assert_func>
}
 8009798:	bf00      	nop
 800979a:	3718      	adds	r7, #24
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	08021fcc 	.word	0x08021fcc
 80097a4:	08023914 	.word	0x08023914
 80097a8:	080220e0 	.word	0x080220e0

080097ac <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
 80097b8:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	605a      	str	r2, [r3, #4]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	609a      	str	r2, [r3, #8]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	69ba      	ldr	r2, [r7, #24]
 80097d0:	60da      	str	r2, [r3, #12]
  }
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	4618      	mov	r0, r3
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fa8e 	bl	8009d0a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>
  }
 80097ee:	bf00      	nop
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fa92 	bl	8009d28 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4618      	mov	r0, r3
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>:
class dense_product_base
 800980e:	b580      	push	{r7, lr}
 8009810:	b082      	sub	sp, #8
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff ffed 	bl	80097f6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8009826:	b580      	push	{r7, lr}
 8009828:	b082      	sub	sp, #8
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f7ff ffed 	bl	800980e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
	...

08009840 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8009840:	b590      	push	{r4, r7, lr}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f7ff ffea 	bl	8009826 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	3304      	adds	r3, #4
 800985c:	6879      	ldr	r1, [r7, #4]
 800985e:	4618      	mov	r0, r3
 8009860:	f7fb f809 	bl	8004876 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	4618      	mov	r0, r3
 8009868:	f7fb fac4 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800986c:	4604      	mov	r4, r0
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7fc fc75 	bl	800615e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8009874:	4603      	mov	r3, r0
 8009876:	429c      	cmp	r4, r3
 8009878:	d005      	beq.n	8009886 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x46>
 800987a:	4b06      	ldr	r3, [pc, #24]	; (8009894 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x54>)
 800987c:	4a06      	ldr	r2, [pc, #24]	; (8009898 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x58>)
 800987e:	2160      	movs	r1, #96	; 0x60
 8009880:	4806      	ldr	r0, [pc, #24]	; (800989c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x5c>)
 8009882:	f014 f933 	bl	801daec <__assert_func>
 8009886:	bf00      	nop
    }
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	4618      	mov	r0, r3
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	bd90      	pop	{r4, r7, pc}
 8009892:	bf00      	nop
 8009894:	0801fc14 	.word	0x0801fc14
 8009898:	08023b58 	.word	0x08023b58
 800989c:	0801ff64 	.word	0x0801ff64

080098a0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80098ac:	68b9      	ldr	r1, [r7, #8]
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f000 fa45 	bl	8009d3e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	68b9      	ldr	r1, [r7, #8]
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f000 fa6e 	bl	8009d9a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80098be:	bf00      	nop
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 80098c6:	b480      	push	{r7}
 80098c8:	b083      	sub	sp, #12
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	6039      	str	r1, [r7, #0]
    }
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>:
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fa8d 	bl	8009e0a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4618      	mov	r0, r3
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4618      	mov	r0, r3
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe fccc 	bl	80082b8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8009920:	4603      	mov	r3, r0
 8009922:	4618      	mov	r0, r3
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800992a:	b580      	push	{r7, lr}
 800992c:	b082      	sub	sp, #8
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	4618      	mov	r0, r3
 8009938:	f7fb f9b6 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800993c:	4603      	mov	r3, r0
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
	...

08009948 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009954:	68b8      	ldr	r0, [r7, #8]
 8009956:	f7ff ffdb 	bl	8009910 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>
 800995a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800995c:	68b8      	ldr	r0, [r7, #8]
 800995e:	f7ff ffe4 	bl	800992a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>
 8009962:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	4618      	mov	r0, r3
 8009968:	f7fb f9a9 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800996c:	4602      	mov	r2, r0
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	4293      	cmp	r3, r2
 8009972:	d107      	bne.n	8009984 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	4618      	mov	r0, r3
 8009978:	f7fb f996 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800997c:	4602      	mov	r2, r0
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	4293      	cmp	r3, r2
 8009982:	d001      	beq.n	8009988 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009984:	2301      	movs	r3, #1
 8009986:	e000      	b.n	800998a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009988:	2300      	movs	r3, #0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d005      	beq.n	800999a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	6979      	ldr	r1, [r7, #20]
 8009994:	4618      	mov	r0, r3
 8009996:	f7fe f8ab 	bl	8007af0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	4618      	mov	r0, r3
 800999e:	f7fb f98e 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80099a2:	4602      	mov	r2, r0
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d107      	bne.n	80099ba <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fb f97b 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80099b2:	4602      	mov	r2, r0
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d006      	beq.n	80099c8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80099ba:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80099bc:	4a05      	ldr	r2, [pc, #20]	; (80099d4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80099be:	f240 21fd 	movw	r1, #765	; 0x2fd
 80099c2:	4805      	ldr	r0, [pc, #20]	; (80099d8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80099c4:	f014 f892 	bl	801daec <__assert_func>
}
 80099c8:	bf00      	nop
 80099ca:	3718      	adds	r7, #24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	08021fcc 	.word	0x08021fcc
 80099d4:	08023dc4 	.word	0x08023dc4
 80099d8:	080220e0 	.word	0x080220e0

080099dc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	605a      	str	r2, [r3, #4]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	609a      	str	r2, [r3, #8]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	69ba      	ldr	r2, [r7, #24]
 8009a00:	60da      	str	r2, [r3, #12]
  }
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4618      	mov	r0, r3
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fa2c 	bl	8009e76 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8009a1e:	bf00      	nop
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>:
  typedef Product<Lhs, Rhs, LazyProduct> XprType;
  typedef typename XprType::Scalar Scalar;
  typedef typename XprType::CoeffReturnType CoeffReturnType;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
 8009a26:	b590      	push	{r4, r7, lr}
 8009a28:	b083      	sub	sp, #12
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	6039      	str	r1, [r7, #0]
    : m_lhs(xpr.lhs()),
      m_rhs(xpr.rhs()),
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
                            //       or perhaps declare them on the fly on the packet method... We have experiment to check what's best.
      m_innerDim(xpr.lhs().cols())
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fa47 	bl	8009ec4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8009a36:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009a38:	6838      	ldr	r0, [r7, #0]
 8009a3a:	f000 fa2c 	bl	8009e96 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8009a3e:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009a40:	4619      	mov	r1, r3
 8009a42:	4620      	mov	r0, r4
 8009a44:	f7fa fcf9 	bl	800443a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
      m_rhs(xpr.rhs()),
 8009a48:	6838      	ldr	r0, [r7, #0]
 8009a4a:	f000 fa2f 	bl	8009eac <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>
 8009a4e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	3310      	adds	r3, #16
 8009a54:	6812      	ldr	r2, [r2, #0]
 8009a56:	601a      	str	r2, [r3, #0]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3314      	adds	r3, #20
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009a5c:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009a5e:	4611      	mov	r1, r2
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 fa3a 	bl	8009eda <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f103 0224 	add.w	r2, r3, #36	; 0x24
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3310      	adds	r3, #16
      m_innerDim(xpr.lhs().cols())
 8009a70:	4619      	mov	r1, r3
 8009a72:	4610      	mov	r0, r2
 8009a74:	f000 fa40 	bl	8009ef8 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
 8009a78:	6838      	ldr	r0, [r7, #0]
 8009a7a:	f000 fa0c 	bl	8009e96 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7fb fcc0 	bl	8005406 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8009a86:	4602      	mov	r2, r0
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	629a      	str	r2, [r3, #40]	; 0x28
    std::cerr << "CanVectorizeInner=    " << CanVectorizeInner << "\n";
    std::cerr << "EvalToRowMajor=       " << EvalToRowMajor << "\n";
    std::cerr << "Alignment=            " << Alignment << "\n";
    std::cerr << "Flags=                " << Flags << "\n";
#endif
  }
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd90      	pop	{r4, r7, pc}

08009a96 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fa37 	bl	8009f16 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fa4d 	bl	8009f48 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>
  }
 8009aae:	bf00      	nop
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b082      	sub	sp, #8
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009abe:	2106      	movs	r1, #6
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7fe fa7c 	bl	8007fbe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa4e 	bl	8009f68 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>
  }
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fa69 	bl	8009fb6 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8009ae4:	6838      	ldr	r0, [r7, #0]
 8009ae6:	f000 fa4e 	bl	8009f86 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 8009aea:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8009af0:	6838      	ldr	r0, [r7, #0]
 8009af2:	f000 fa54 	bl	8009f9e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>
 8009af6:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	605a      	str	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8009b06:	4619      	mov	r1, r3
 8009b08:	4610      	mov	r0, r2
 8009b0a:	f7fd fd6f 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8009b18:	4619      	mov	r1, r3
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	f7fc fe1b 	bl	8006756 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009b20:	6838      	ldr	r0, [r7, #0]
 8009b22:	f000 fa30 	bl	8009f86 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 8009b26:	4603      	mov	r3, r0
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fb f8bd 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	611a      	str	r2, [r3, #16]
  }
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4618      	mov	r0, r3
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b082      	sub	sp, #8
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009b46:	2100      	movs	r1, #0
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fa3f 	bl	8009fcc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fa5f 	bl	800a012 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8009b54:	bf00      	nop
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>:
  evaluator()
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fa63 	bl	800a030 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2203      	movs	r2, #3
 8009b6e:	2100      	movs	r1, #0
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fe fa05 	bl	8007f80 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fa5c 	bl	800a046 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4618      	mov	r0, r3
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7ff ffed 	bl	8009b80 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fa57 	bl	800a05c <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>
    }
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8009bb8:	b480      	push	{r7}
 8009bba:	af00      	add	r7, sp, #0
    }
 8009bbc:	bf00      	nop
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b086      	sub	sp, #24
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	60f8      	str	r0, [r7, #12]
 8009bce:	60b9      	str	r1, [r7, #8]
 8009bd0:	607a      	str	r2, [r7, #4]
 8009bd2:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	68b9      	ldr	r1, [r7, #8]
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 fa49 	bl	800a078 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
    }
 8009be6:	bf00      	nop
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8009bee:	b5b0      	push	{r4, r5, r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fa19 	bl	800a030 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009bfe:	687c      	ldr	r4, [r7, #4]
 8009c00:	6838      	ldr	r0, [r7, #0]
 8009c02:	f000 fa6b 	bl	800a0dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>
 8009c06:	4605      	mov	r5, r0
 8009c08:	6838      	ldr	r0, [r7, #0]
 8009c0a:	f000 fa74 	bl	800a0f6 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	461a      	mov	r2, r3
 8009c12:	4629      	mov	r1, r5
 8009c14:	4620      	mov	r0, r4
 8009c16:	f7fe f9b3 	bl	8007f80 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bdb0      	pop	{r4, r5, r7, pc}

08009c24 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8009c24:	b590      	push	{r4, r7, lr}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8009c30:	68b8      	ldr	r0, [r7, #8]
 8009c32:	f7fb fd4a 	bl	80056ca <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 8009c36:	4604      	mov	r4, r0
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7fb fd51 	bl	80056e0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	461a      	mov	r2, r3
 8009c42:	4621      	mov	r1, r4
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f000 fa8b 	bl	800a160 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>
}
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd90      	pop	{r4, r7, pc}

08009c52 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b086      	sub	sp, #24
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	60f8      	str	r0, [r7, #12]
 8009c5a:	60b9      	str	r1, [r7, #8]
 8009c5c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	68b9      	ldr	r1, [r7, #8]
 8009c66:	6978      	ldr	r0, [r7, #20]
 8009c68:	f000 faaa 	bl	800a1c0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 8009c6c:	bf00      	nop
 8009c6e:	3718      	adds	r7, #24
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2102      	movs	r1, #2
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7fe fa6c 	bl	800815e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 faad 	bl	800a1e6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>:
  explicit product_evaluator(const XprType& xpr)
 8009c94:	b590      	push	{r4, r7, lr}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fac8 	bl	800a234 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8009ca4:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009ca6:	6838      	ldr	r0, [r7, #0]
 8009ca8:	f000 faad 	bl	800a206 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 8009cac:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009cae:	4619      	mov	r1, r3
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f000 faca 	bl	800a24a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f103 040c 	add.w	r4, r3, #12
      m_rhs(xpr.rhs()),
 8009cbc:	6838      	ldr	r0, [r7, #0]
 8009cbe:	f000 faad 	bl	800a21c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>
 8009cc2:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f000 fad4 	bl	800a274 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	3310      	adds	r3, #16
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009cd0:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fc fd3e 	bl	8006756 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f103 0214 	add.w	r2, r3, #20
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	330c      	adds	r3, #12
      m_innerDim(xpr.lhs().cols())
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	f000 fad9 	bl	800a29e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 8009cec:	6838      	ldr	r0, [r7, #0]
 8009cee:	f000 fa8a 	bl	800a206 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fc f8b2 	bl	8005e5e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	619a      	str	r2, [r3, #24]
  }
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4618      	mov	r0, r3
 8009d04:	370c      	adds	r7, #12
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd90      	pop	{r4, r7, pc}

08009d0a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b082      	sub	sp, #8
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009d12:	2100      	movs	r1, #0
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fad2 	bl	800a2be <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 faf2 	bl	800a304 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>
  }
 8009d20:	bf00      	nop
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
    }
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4618      	mov	r0, r3
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009d3e:	b480      	push	{r7}
 8009d40:	b083      	sub	sp, #12
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	330c      	adds	r3, #12
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7ff f983 	bl	800906c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3308      	adds	r3, #8
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fb f9b9 	bl	80050e2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fae5 	bl	800a340 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff ffe2 	bl	8009d54 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4618      	mov	r0, r3
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b090      	sub	sp, #64	; 0x40
 8009d9e:	af02      	add	r7, sp, #8
 8009da0:	60f8      	str	r0, [r7, #12]
 8009da2:	60b9      	str	r1, [r7, #8]
 8009da4:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 fab8 	bl	800a322 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	68b9      	ldr	r1, [r7, #8]
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 faea 	bl	800a390 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 8009dbc:	f107 0320 	add.w	r3, r7, #32
 8009dc0:	68f9      	ldr	r1, [r7, #12]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fc fcc7 	bl	8006756 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f7fd fd05 	bl	80077d8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009dd4:	f107 0120 	add.w	r1, r7, #32
 8009dd8:	f107 0010 	add.w	r0, r7, #16
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f000 fb04 	bl	800a3ec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009de4:	f107 0310 	add.w	r3, r7, #16
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 fb19 	bl	800a420 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8009dee:	f107 0320 	add.w	r3, r7, #32
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fb f975 	bl	80050e2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8009df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7ff ffbf 	bl	8009d80 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
}
 8009e02:	bf00      	nop
 8009e04:	3738      	adds	r7, #56	; 0x38
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 8009e0a:	b590      	push	{r4, r7, lr}
 8009e0c:	b083      	sub	sp, #12
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
 8009e12:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fb25 	bl	800a464 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8009e1a:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009e1c:	6838      	ldr	r0, [r7, #0]
 8009e1e:	f000 fb0a 	bl	800a436 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 8009e22:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009e24:	4619      	mov	r1, r3
 8009e26:	4620      	mov	r0, r4
 8009e28:	f000 fb27 	bl	800a47a <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>
      m_rhs(xpr.rhs()),
 8009e2c:	6838      	ldr	r0, [r7, #0]
 8009e2e:	f000 fb0d 	bl	800a44c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>
 8009e32:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	625a      	str	r2, [r3, #36]	; 0x24
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009e3c:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009e3e:	4611      	mov	r1, r2
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fd fbd3 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      m_innerDim(xpr.lhs().cols())
 8009e50:	4619      	mov	r1, r3
 8009e52:	4610      	mov	r0, r2
 8009e54:	f7fd fbca 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009e58:	6838      	ldr	r0, [r7, #0]
 8009e5a:	f000 faec 	bl	800a436 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fc fb58 	bl	8006516 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8009e66:	4602      	mov	r2, r0
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd90      	pop	{r4, r7, pc}

08009e76 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b082      	sub	sp, #8
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009e7e:	2200      	movs	r2, #0
 8009e80:	2100      	movs	r1, #0
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fb0e 	bl	800a4a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fb24 	bl	800a4d6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009e96:	b480      	push	{r7}
 8009e98:	b083      	sub	sp, #12
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	3310      	adds	r3, #16
 8009eb8:	4618      	mov	r0, r3
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b082      	sub	sp, #8
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	6039      	str	r1, [r7, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 fb04 	bl	800a4f6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 fb07 	bl	800a51a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b086      	sub	sp, #24
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	60f8      	str	r0, [r7, #12]
 8009f1e:	60b9      	str	r1, [r7, #8]
 8009f20:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8009f22:	6879      	ldr	r1, [r7, #4]
 8009f24:	68b8      	ldr	r0, [r7, #8]
 8009f26:	f000 fb0e 	bl	800a546 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8009f2a:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8009f2c:	6879      	ldr	r1, [r7, #4]
 8009f2e:	68b8      	ldr	r0, [r7, #8]
 8009f30:	f000 fb15 	bl	800a55e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8009f34:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	6979      	ldr	r1, [r7, #20]
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 fb1b 	bl	800a576 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8009f40:	bf00      	nop
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009f50:	2201      	movs	r2, #1
 8009f52:	2100      	movs	r1, #0
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff ffde 	bl	8009f16 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fb31 	bl	800a5c2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>
  }
 8009f60:	bf00      	nop
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009f70:	2107      	movs	r1, #7
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7fe f823 	bl	8007fbe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fb32 	bl	800a5e2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>
  }
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009f86:	b480      	push	{r7}
 8009f88:	b083      	sub	sp, #12
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4618      	mov	r0, r3
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009f9e:	b480      	push	{r7}
 8009fa0:	b083      	sub	sp, #12
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	4618      	mov	r0, r3
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8009fb6:	b480      	push	{r7}
 8009fb8:	b083      	sub	sp, #12
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8009fcc:	b5b0      	push	{r4, r5, r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	689c      	ldr	r4, [r3, #8]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe fa52 	bl	800848a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 fb06 	bl	800a600 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 8009ff4:	eef0 7a40 	vmov.f32	s15, s0
 8009ff8:	edc7 7a03 	vstr	s15, [r7, #12]
 8009ffc:	f107 030c 	add.w	r3, r7, #12
 800a000:	461a      	mov	r2, r3
 800a002:	4629      	mov	r1, r5
 800a004:	4620      	mov	r0, r4
 800a006:	f7fe f9f9 	bl	80083fc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a00a:	bf00      	nop
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bdb0      	pop	{r4, r5, r7, pc}

0800a012 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a012:	b580      	push	{r7, lr}
 800a014:	b082      	sub	sp, #8
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a01a:	2101      	movs	r1, #1
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7ff ffd5 	bl	8009fcc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fb25 	bl	800a672 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4618      	mov	r0, r3
 800a03c:	370c      	adds	r7, #12
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a046:	b480      	push	{r7}
 800a048:	b083      	sub	sp, #12
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
    }
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4618      	mov	r0, r3
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fb12 	bl	800a690 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>
    }
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4618      	mov	r0, r3
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
	...

0800a078 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2b03      	cmp	r3, #3
 800a088:	d108      	bne.n	800a09c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b03      	cmp	r3, #3
 800a08e:	d105      	bne.n	800a09c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	db02      	blt.n	800a09c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	da06      	bge.n	800a0aa <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x32>
 800a09c:	4b0c      	ldr	r3, [pc, #48]	; (800a0d0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x58>)
 800a09e:	4a0d      	ldr	r2, [pc, #52]	; (800a0d4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x5c>)
 800a0a0:	f240 1111 	movw	r1, #273	; 0x111
 800a0a4:	480c      	ldr	r0, [pc, #48]	; (800a0d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x60>)
 800a0a6:	f013 fd21 	bl	801daec <__assert_func>
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	617b      	str	r3, [r7, #20]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	613b      	str	r3, [r7, #16]
  }
 800a0b2:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	fb02 f103 	mul.w	r1, r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	f000 faf0 	bl	800a6a6 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>
    }
 800a0c6:	bf00      	nop
 800a0c8:	3718      	adds	r7, #24
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	080223e4 	.word	0x080223e4
 800a0d4:	08023f7c 	.word	0x08023f7c
 800a0d8:	08022600 	.word	0x08022600

0800a0dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 faea 	bl	800a6c0 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b082      	sub	sp, #8
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
      return derived().outerStride();
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fae9 	bl	800a6d6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800a104:	4603      	mov	r3, r0
 800a106:	4618      	mov	r0, r3
 800a108:	f000 faf0 	bl	800a6ec <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>
 800a10c:	4603      	mov	r3, r0
    }
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 faf0 	bl	800a704 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4618      	mov	r0, r3
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>:
class dense_product_base
 800a12e:	b580      	push	{r7, lr}
 800a130:	b082      	sub	sp, #8
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7ff ffed 	bl	800a116 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4618      	mov	r0, r3
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800a146:	b580      	push	{r7, lr}
 800a148:	b082      	sub	sp, #8
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f7ff ffed 	bl	800a12e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4618      	mov	r0, r3
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
	...

0800a160 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800a160:	b590      	push	{r4, r7, lr}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f7ff ffea 	bl	800a146 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a17a:	e883 0003 	stmia.w	r3, {r0, r1}
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	3308      	adds	r3, #8
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	6812      	ldr	r2, [r2, #0]
 800a186:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800a188:	68b8      	ldr	r0, [r7, #8]
 800a18a:	f7fb fad8 	bl	800573e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800a18e:	4604      	mov	r4, r0
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7fb fae2 	bl	800575a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800a196:	4603      	mov	r3, r0
 800a198:	429c      	cmp	r4, r3
 800a19a:	d005      	beq.n	800a1a8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x48>
 800a19c:	4b05      	ldr	r3, [pc, #20]	; (800a1b4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x54>)
 800a19e:	4a06      	ldr	r2, [pc, #24]	; (800a1b8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x58>)
 800a1a0:	2160      	movs	r1, #96	; 0x60
 800a1a2:	4806      	ldr	r0, [pc, #24]	; (800a1bc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x5c>)
 800a1a4:	f013 fca2 	bl	801daec <__assert_func>
 800a1a8:	bf00      	nop
    }
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd90      	pop	{r4, r7, pc}
 800a1b4:	0801fc14 	.word	0x0801fc14
 800a1b8:	08024010 	.word	0x08024010
 800a1bc:	0801ff64 	.word	0x0801ff64

0800a1c0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800a1cc:	68b9      	ldr	r1, [r7, #8]
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 fab9 	bl	800a746 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	68b9      	ldr	r1, [r7, #8]
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 fb14 	bl	800a806 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800a1de:	bf00      	nop
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b082      	sub	sp, #8
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	2102      	movs	r1, #2
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7fd ffb3 	bl	800815e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fb3c 	bl	800a876 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800a1fe:	bf00      	nop
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a206:	b480      	push	{r7}
 800a208:	b083      	sub	sp, #12
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4618      	mov	r0, r3
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3308      	adds	r3, #8
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4618      	mov	r0, r3
 800a240:	370c      	adds	r7, #12
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b082      	sub	sp, #8
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	6039      	str	r1, [r7, #0]
    {
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4618      	mov	r0, r3
 800a258:	f7fa fc75 	bl	8004b46 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a25c:	f7fa fc83 	bl	8004b66 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6839      	ldr	r1, [r7, #0]
 800a264:	4618      	mov	r0, r3
 800a266:	f000 fb16 	bl	800a896 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4618      	mov	r0, r3
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>:
    explicit Matrix(const T& x)
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
    {
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4618      	mov	r0, r3
 800a282:	f7fa fc3d 	bl	8004b00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a286:	f7fa fc4b 	bl	8004b20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6839      	ldr	r1, [r7, #0]
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 fb0e 	bl	800a8b0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4618      	mov	r0, r3
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b082      	sub	sp, #8
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 fb0b 	bl	800a8ca <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>
  { }
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a2be:	b5b0      	push	{r4, r5, r7, lr}
 800a2c0:	b084      	sub	sp, #16
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	689c      	ldr	r4, [r3, #8]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6839      	ldr	r1, [r7, #0]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fe f8d9 	bl	800848a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a2d8:	4605      	mov	r5, r0
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 fb09 	bl	800a8f8 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>
 800a2e6:	eef0 7a40 	vmov.f32	s15, s0
 800a2ea:	edc7 7a03 	vstr	s15, [r7, #12]
 800a2ee:	f107 030c 	add.w	r3, r7, #12
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f7fe f880 	bl	80083fc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a2fc:	bf00      	nop
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bdb0      	pop	{r4, r5, r7, pc}

0800a304 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a30c:	2101      	movs	r1, #1
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7ff ffd5 	bl	800a2be <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fb28 	bl	800a96a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>
  }
 800a31a:	bf00      	nop
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a322:	b580      	push	{r7, lr}
 800a324:	b082      	sub	sp, #8
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	6039      	str	r1, [r7, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	4618      	mov	r0, r3
 800a332:	f000 fb29 	bl	800a988 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4618      	mov	r0, r3
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800a356:	b580      	push	{r7, lr}
 800a358:	b082      	sub	sp, #8
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4618      	mov	r0, r3
 800a364:	f7fa fd51 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a368:	4603      	mov	r3, r0
 800a36a:	4618      	mov	r0, r3
 800a36c:	3708      	adds	r7, #8
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800a372:	b580      	push	{r7, lr}
 800a374:	b082      	sub	sp, #8
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fc fc05 	bl	8006b8e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 800a384:	4603      	mov	r3, r0
 800a386:	4618      	mov	r0, r3
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
	...

0800a390 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 800a390:	b590      	push	{r4, r7, lr}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fa fd33 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	68b8      	ldr	r0, [r7, #8]
 800a3a8:	f7ff ffd5 	bl	800a356 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	429c      	cmp	r4, r3
 800a3b0:	d10a      	bne.n	800a3c8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7fa fd1d 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	68b8      	ldr	r0, [r7, #8]
 800a3be:	f7ff ffd8 	bl	800a372 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	429c      	cmp	r4, r3
 800a3c6:	d006      	beq.n	800a3d6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 800a3c8:	4b05      	ldr	r3, [pc, #20]	; (800a3e0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 800a3ca:	4a06      	ldr	r2, [pc, #24]	; (800a3e4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 800a3cc:	f240 21f2 	movw	r1, #754	; 0x2f2
 800a3d0:	4805      	ldr	r0, [pc, #20]	; (800a3e8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 800a3d2:	f013 fb8b 	bl	801daec <__assert_func>
}
 800a3d6:	bf00      	nop
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd90      	pop	{r4, r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	080226e8 	.word	0x080226e8
 800a3e4:	080241bc 	.word	0x080241bc
 800a3e8:	080220e0 	.word	0x080220e0

0800a3ec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	601a      	str	r2, [r3, #0]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	605a      	str	r2, [r3, #4]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	683a      	ldr	r2, [r7, #0]
 800a40a:	609a      	str	r2, [r3, #8]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	69ba      	ldr	r2, [r7, #24]
 800a410:	60da      	str	r2, [r3, #12]
  }
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	4618      	mov	r0, r3
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fae6 	bl	800a9fa <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>
  }
 800a42e:	bf00      	nop
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a436:	b480      	push	{r7}
 800a438:	b083      	sub	sp, #12
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4618      	mov	r0, r3
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	4618      	mov	r0, r3
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4618      	mov	r0, r3
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b082      	sub	sp, #8
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	6039      	str	r1, [r7, #0]
    {
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4618      	mov	r0, r3
 800a488:	f7fa fb17 	bl	8004aba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800a48c:	f7fa fb25 	bl	8004ada <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	4618      	mov	r0, r3
 800a496:	f000 fabf 	bl	800aa18 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4618      	mov	r0, r3
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800a4b0:	6879      	ldr	r1, [r7, #4]
 800a4b2:	68b8      	ldr	r0, [r7, #8]
 800a4b4:	f000 fabd 	bl	800aa32 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800a4b8:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800a4ba:	6879      	ldr	r1, [r7, #4]
 800a4bc:	68b8      	ldr	r0, [r7, #8]
 800a4be:	f000 fac4 	bl	800aa4a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800a4c2:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	6979      	ldr	r1, [r7, #20]
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f000 faca 	bl	800aa62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800a4ce:	bf00      	nop
 800a4d0:	3718      	adds	r7, #24
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b082      	sub	sp, #8
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a4de:	2201      	movs	r2, #1
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff ffde 	bl	800a4a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 fae0 	bl	800aaae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 800a4ee:	bf00      	nop
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fae4 	bl	800aace <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6839      	ldr	r1, [r7, #0]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 faea 	bl	800aae4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800a51a:	b590      	push	{r4, r7, lr}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	6039      	str	r1, [r7, #0]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fb11 	bl	800ab4c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800a52a:	687c      	ldr	r4, [r7, #4]
 800a52c:	6838      	ldr	r0, [r7, #0]
 800a52e:	f000 fb01 	bl	800ab34 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800a532:	4603      	mov	r3, r0
 800a534:	4619      	mov	r1, r3
 800a536:	4620      	mov	r0, r4
 800a538:	f7fc f90d 	bl	8006756 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4618      	mov	r0, r3
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	bd90      	pop	{r4, r7, pc}

0800a546 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800a546:	b480      	push	{r7}
 800a548:	b083      	sub	sp, #12
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	6039      	str	r1, [r7, #0]
      : inner;
 800a550:	683b      	ldr	r3, [r7, #0]
  }
 800a552:	4618      	mov	r0, r3
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800a55e:	b480      	push	{r7}
 800a560:	b083      	sub	sp, #12
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	6039      	str	r1, [r7, #0]
      : outer;
 800a568:	687b      	ldr	r3, [r7, #4]
  }
 800a56a:	4618      	mov	r0, r3
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800a576:	b5b0      	push	{r4, r5, r7, lr}
 800a578:	b086      	sub	sp, #24
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	60b9      	str	r1, [r7, #8]
 800a580:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	689c      	ldr	r4, [r3, #8]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	68b9      	ldr	r1, [r7, #8]
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fe f9c4 	bl	800891c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800a594:	4605      	mov	r5, r0
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	68b9      	ldr	r1, [r7, #8]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 fadf 	bl	800ab62 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>
 800a5a4:	eef0 7a40 	vmov.f32	s15, s0
 800a5a8:	edc7 7a05 	vstr	s15, [r7, #20]
 800a5ac:	f107 0314 	add.w	r3, r7, #20
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f7fd ff21 	bl	80083fc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a5ba:	bf00      	nop
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bdb0      	pop	{r4, r5, r7, pc}

0800a5c2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7ff fca1 	bl	8009f16 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 faf7 	bl	800abc8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>
  }
 800a5da:	bf00      	nop
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b082      	sub	sp, #8
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a5ea:	2108      	movs	r1, #8
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7fd fce6 	bl	8007fbe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 faf8 	bl	800abe8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>
  }
 800a5f8:	bf00      	nop
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  /* Allow index-based non-packet access. It is impossible though to allow index-based packed access,
   * which is why we don't set the LinearAccessBit.
   * TODO: this seems possible when the result is a vector
   */
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  const CoeffReturnType coeff(Index index) const
 800a600:	b580      	push	{r7, lr}
 800a602:	b0a4      	sub	sp, #144	; 0x90
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  {
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800a610:	2300      	movs	r3, #0
 800a612:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6819      	ldr	r1, [r3, #0]
 800a61a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a61e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a622:	4618      	mov	r0, r3
 800a624:	f000 faea 	bl	800abfc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800a628:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a62c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a630:	4611      	mov	r1, r2
 800a632:	4618      	mov	r0, r3
 800a634:	f000 faf5 	bl	800ac22 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6859      	ldr	r1, [r3, #4]
 800a63c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a640:	2200      	movs	r2, #0
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fafe 	bl	800ac44 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>
 800a648:	f107 030c 	add.w	r3, r7, #12
 800a64c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a650:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a654:	4618      	mov	r0, r3
 800a656:	f000 fb08 	bl	800ac6a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800a65a:	f107 030c 	add.w	r3, r7, #12
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 fb31 	bl	800acc6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>
 800a664:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a668:	eeb0 0a67 	vmov.f32	s0, s15
 800a66c:	3790      	adds	r7, #144	; 0x90
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a672:	b580      	push	{r7, lr}
 800a674:	b082      	sub	sp, #8
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a67a:	2102      	movs	r1, #2
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f7ff fca5 	bl	8009fcc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fb3a 	bl	800acfc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 800a688:	bf00      	nop
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>:
  plain_array()
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800a698:	f7fc fbd4 	bl	8006e44 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800a6a6:	b480      	push	{r7}
 800a6a8:	b085      	sub	sp, #20
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	60f8      	str	r0, [r7, #12]
 800a6ae:	60b9      	str	r1, [r7, #8]
 800a6b0:	607a      	str	r2, [r7, #4]
 800a6b2:	603b      	str	r3, [r7, #0]
 800a6b4:	bf00      	nop
 800a6b6:	3714      	adds	r7, #20
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800a6d6:	b480      	push	{r7}
 800a6d8:	b083      	sub	sp, #12
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fb0b 	bl	800ad10 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
    }
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4618      	mov	r0, r3
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b082      	sub	sp, #8
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	f000 fb01 	bl	800ad28 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>
 800a726:	4603      	mov	r3, r0
 800a728:	4618      	mov	r0, r3
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	f000 fafe 	bl	800ad38 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>
 800a73c:	4603      	mov	r3, r0
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800a746:	b580      	push	{r7, lr}
 800a748:	b082      	sub	sp, #8
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4618      	mov	r0, r3
 800a754:	f7ff ffe1 	bl	800a71a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	dd08      	ble.n	800a770 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4618      	mov	r0, r3
 800a762:	f7ff ffe5 	bl	800a730 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800a766:	4603      	mov	r3, r0
 800a768:	2b01      	cmp	r3, #1
 800a76a:	dd01      	ble.n	800a770 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800a76c:	2301      	movs	r3, #1
 800a76e:	e000      	b.n	800a772 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2c>
 800a770:	2300      	movs	r3, #0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800a776:	6839      	ldr	r1, [r7, #0]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fae5 	bl	800ad48 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>
}
 800a77e:	bf00      	nop
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	4618      	mov	r0, r3
 800a792:	f7fc fd1c 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fafb 	bl	800ad92 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7ff ffe8 	bl	800a786 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3708      	adds	r7, #8
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	332c      	adds	r3, #44	; 0x2c
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7ff ffea 	bl	800a7a6 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	3328      	adds	r3, #40	; 0x28
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fc fcf9 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 facd 	bl	800ad7c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7ff ffe2 	bl	800a7c0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4618      	mov	r0, r3
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800a806:	b580      	push	{r7, lr}
 800a808:	b098      	sub	sp, #96	; 0x60
 800a80a:	af02      	add	r7, sp, #8
 800a80c:	60f8      	str	r0, [r7, #12]
 800a80e:	60b9      	str	r1, [r7, #8]
 800a810:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800a812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 faa0 	bl	800ad5e <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	68b9      	ldr	r1, [r7, #8]
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f000 fadc 	bl	800ade0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800a828:	f107 0320 	add.w	r3, r7, #32
 800a82c:	68f9      	ldr	r1, [r7, #12]
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fe fedd 	bl	80095ee <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f000 fb1d 	bl	800ae74 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a840:	f107 0120 	add.w	r1, r7, #32
 800a844:	f107 0010 	add.w	r0, r7, #16
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f000 fb1d 	bl	800ae8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800a850:	f107 0310 	add.w	r3, r7, #16
 800a854:	4618      	mov	r0, r3
 800a856:	f000 fb32 	bl	800aebe <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800a85a:	f107 0320 	add.w	r3, r7, #32
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fc fd8a 	bl	8007378 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800a864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff ffbf 	bl	800a7ec <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
}
 800a86e:	bf00      	nop
 800a870:	3758      	adds	r7, #88	; 0x58
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a876:	b580      	push	{r7, lr}
 800a878:	b082      	sub	sp, #8
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a87e:	2202      	movs	r2, #2
 800a880:	2102      	movs	r1, #2
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7fd fc6b 	bl	800815e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fb23 	bl	800aed4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800a896:	b580      	push	{r7, lr}
 800a898:	b082      	sub	sp, #8
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800a8a0:	6839      	ldr	r1, [r7, #0]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fb20 	bl	800aee8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800a8a8:	bf00      	nop
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fb34 	bl	800af2a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800a8c2:	bf00      	nop
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800a8ca:	b590      	push	{r4, r7, lr}
 800a8cc:	b083      	sub	sp, #12
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fb56 	bl	800af86 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 800a8da:	687c      	ldr	r4, [r7, #4]
 800a8dc:	6838      	ldr	r0, [r7, #0]
 800a8de:	f000 fb45 	bl	800af6c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f7fc fad8 	bl	8006e9e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd90      	pop	{r4, r7, pc}

0800a8f8 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b0a2      	sub	sp, #136	; 0x88
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800a908:	2300      	movs	r3, #0
 800a90a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a90e:	6879      	ldr	r1, [r7, #4]
 800a910:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a914:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a918:	4618      	mov	r0, r3
 800a91a:	f000 fb3f 	bl	800af9c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800a91e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a922:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800a926:	4611      	mov	r1, r2
 800a928:	4618      	mov	r0, r3
 800a92a:	f000 fb4a 	bl	800afc2 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f103 010c 	add.w	r1, r3, #12
 800a934:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a938:	2200      	movs	r2, #0
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 fb52 	bl	800afe4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800a940:	f107 030c 	add.w	r3, r7, #12
 800a944:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800a948:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800a94c:	4618      	mov	r0, r3
 800a94e:	f000 fb5c 	bl	800b00a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800a952:	f107 030c 	add.w	r3, r7, #12
 800a956:	4618      	mov	r0, r3
 800a958:	f000 fb85 	bl	800b066 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800a95c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a960:	eeb0 0a67 	vmov.f32	s0, s15
 800a964:	3788      	adds	r7, #136	; 0x88
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b082      	sub	sp, #8
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a972:	2102      	movs	r1, #2
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7ff fca2 	bl	800a2be <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fb8e 	bl	800b09c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>
  }
 800a980:	bf00      	nop
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 800a988:	b590      	push	{r4, r7, lr}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fba4 	bl	800b0e0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800a998:	6838      	ldr	r0, [r7, #0]
 800a99a:	f000 fb89 	bl	800b0b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800a99e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	1d1c      	adds	r4, r3, #4
      m_rhs(xpr.rhs()),
 800a9a8:	6838      	ldr	r0, [r7, #0]
 800a9aa:	f000 fb8d 	bl	800b0c8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>
 800a9ae:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f000 fb9f 	bl	800b0f6 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	f7fb fec6 	bl	8006756 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	f7ff fc61 	bl	800a29e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 800a9dc:	6838      	ldr	r0, [r7, #0]
 800a9de:	f000 fb67 	bl	800b0b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fa fa05 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	611a      	str	r2, [r3, #16]
  }
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd90      	pop	{r4, r7, pc}

0800a9fa <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b082      	sub	sp, #8
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800aa02:	2100      	movs	r1, #0
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fb8b 	bl	800b120 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fbab 	bl	800b166 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>
  }
 800aa10:	bf00      	nop
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800aa22:	6839      	ldr	r1, [r7, #0]
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 fbad 	bl	800b184 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800aa2a:	bf00      	nop
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800aa32:	b480      	push	{r7}
 800aa34:	b083      	sub	sp, #12
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	6039      	str	r1, [r7, #0]
      : inner;
 800aa3c:	683b      	ldr	r3, [r7, #0]
  }
 800aa3e:	4618      	mov	r0, r3
 800aa40:	370c      	adds	r7, #12
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800aa4a:	b480      	push	{r7}
 800aa4c:	b083      	sub	sp, #12
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	6039      	str	r1, [r7, #0]
      : outer;
 800aa54:	687b      	ldr	r3, [r7, #4]
  }
 800aa56:	4618      	mov	r0, r3
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800aa62:	b5b0      	push	{r4, r5, r7, lr}
 800aa64:	b086      	sub	sp, #24
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	60f8      	str	r0, [r7, #12]
 800aa6a:	60b9      	str	r1, [r7, #8]
 800aa6c:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	689c      	ldr	r4, [r3, #8]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	68b9      	ldr	r1, [r7, #8]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fd ff4e 	bl	800891c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800aa80:	4605      	mov	r5, r0
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	68b9      	ldr	r1, [r7, #8]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 fb9b 	bl	800b1c6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>
 800aa90:	eef0 7a40 	vmov.f32	s15, s0
 800aa94:	edc7 7a05 	vstr	s15, [r7, #20]
 800aa98:	f107 0314 	add.w	r3, r7, #20
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f7fd fcab 	bl	80083fc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800aaa6:	bf00      	nop
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bdb0      	pop	{r4, r5, r7, pc}

0800aaae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800aab6:	2202      	movs	r2, #2
 800aab8:	2100      	movs	r1, #0
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7ff fcf2 	bl	800a4a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 fbb2 	bl	800b22a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 800aac6:	bf00      	nop
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800aace:	b480      	push	{r7}
 800aad0:	b083      	sub	sp, #12
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4618      	mov	r0, r3
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800aae4:	b590      	push	{r4, r7, lr}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	687c      	ldr	r4, [r7, #4]
 800aaf0:	6838      	ldr	r0, [r7, #0]
 800aaf2:	f000 fbaa 	bl	800b24a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4620      	mov	r0, r4
 800aafc:	f7fa fc0a 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	1d1c      	adds	r4, r3, #4
 800ab04:	6838      	ldr	r0, [r7, #0]
 800ab06:	f000 fbac 	bl	800b262 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f000 fbbf 	bl	800b292 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f103 0408 	add.w	r4, r3, #8
 800ab1a:	6838      	ldr	r0, [r7, #0]
 800ab1c:	f000 fbad 	bl	800b27a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>
 800ab20:	4603      	mov	r3, r0
 800ab22:	4619      	mov	r1, r3
 800ab24:	4620      	mov	r0, r4
 800ab26:	f000 fbc3 	bl	800b2b0 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd90      	pop	{r4, r7, pc}

0800ab34 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4618      	mov	r0, r3
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4618      	mov	r0, r3
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b0a4      	sub	sp, #144	; 0x90
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	60f8      	str	r0, [r7, #12]
 800ab6a:	60b9      	str	r1, [r7, #8]
 800ab6c:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800ab6e:	68f9      	ldr	r1, [r7, #12]
 800ab70:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 fbde 	bl	800b338 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>
 800ab7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ab80:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ab84:	4611      	mov	r1, r2
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 fbf9 	bl	800b37e <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f103 0110 	add.w	r1, r3, #16
 800ab92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f000 fc01 	bl	800b3a0 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>
 800ab9e:	f107 0310 	add.w	r3, r7, #16
 800aba2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800aba6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 fc0b 	bl	800b3c6 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>
 800abb0:	f107 0310 	add.w	r3, r7, #16
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 fc34 	bl	800b422 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>
 800abba:	eef0 7a40 	vmov.f32	s15, s0
  }
 800abbe:	eeb0 0a67 	vmov.f32	s0, s15
 800abc2:	3790      	adds	r7, #144	; 0x90
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800abd0:	2200      	movs	r2, #0
 800abd2:	2101      	movs	r1, #1
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7ff f99e 	bl	8009f16 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fc3c 	bl	800b458 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>
  }
 800abe0:	bf00      	nop
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	bf00      	nop
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>:
  return RowXpr(derived(), i);
}

/// This is the const version of row(). */
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
ConstRowXpr row(Index i) const
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
{
  return ConstRowXpr(derived(), i);
 800ac08:	68b8      	ldr	r0, [r7, #8]
 800ac0a:	f7fa fc62 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	4619      	mov	r1, r3
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f000 fc2f 	bl	800b478 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>
}
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b082      	sub	sp, #8
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800ac2c:	6838      	ldr	r0, [r7, #0]
 800ac2e:	f000 fc4d 	bl	800b4cc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 800ac32:	4603      	mov	r3, r0
 800ac34:	4619      	mov	r1, r3
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 fc6b 	bl	800b512 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>
}
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800ac50:	68b8      	ldr	r0, [r7, #8]
 800ac52:	f7fa fa76 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800ac56:	4603      	mov	r3, r0
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f000 fc6f 	bl	800b540 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>
}
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
  * \sa class CwiseBinaryOp, cwiseAbs2
  */
template<typename OtherDerived>
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE const EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800ac6a:	b5b0      	push	{r4, r5, r7, lr}
 800ac6c:	b086      	sub	sp, #24
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	60f8      	str	r0, [r7, #12]
 800ac72:	60b9      	str	r1, [r7, #8]
 800ac74:	607a      	str	r2, [r7, #4]
{
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800ac76:	68b8      	ldr	r0, [r7, #8]
 800ac78:	f000 fc8a 	bl	800b590 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fc91 	bl	800b5a6 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>
 800ac84:	4605      	mov	r5, r0
 800ac86:	f107 0314 	add.w	r3, r7, #20
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fa fab8 	bl	8005200 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800ac90:	f107 0314 	add.w	r3, r7, #20
 800ac94:	462a      	mov	r2, r5
 800ac96:	4621      	mov	r1, r4
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f000 fcd7 	bl	800b64c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	3718      	adds	r7, #24
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bdb0      	pop	{r4, r5, r7, pc}

0800aca6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b082      	sub	sp, #8
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fd2a 	bl	800b708 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800acb4:	4603      	mov	r3, r0
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 fd31 	bl	800b71e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>
 800acbc:	4603      	mov	r3, r0
 800acbe:	4618      	mov	r0, r3
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>:
  *
  * \sa trace(), prod(), mean()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
DenseBase<Derived>::sum() const
 800acc6:	b590      	push	{r4, r7, lr}
 800acc8:	b085      	sub	sp, #20
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
{
  if(SizeAtCompileTime==0 || (SizeAtCompileTime==Dynamic && size()==0))
    return Scalar(0);
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fd1a 	bl	800b708 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800acd4:	4604      	mov	r4, r0
 800acd6:	f107 030c 	add.w	r3, r7, #12
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fa fd87 	bl	80057ee <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800ace0:	f107 030c 	add.w	r3, r7, #12
 800ace4:	4619      	mov	r1, r3
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 fdf4 	bl	800b8d4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800acec:	eef0 7a40 	vmov.f32	s15, s0
 800acf0:	bf00      	nop
}
 800acf2:	eeb0 0a67 	vmov.f32	s0, s15
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd90      	pop	{r4, r7, pc}

0800acfc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fe21 	bl	800b960 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800ad1e:	4603      	mov	r3, r0
    }
 800ad20:	4618      	mov	r0, r3
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 800ad28:	b480      	push	{r7}
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	2303      	movs	r3, #3
 800ad2e:	4618      	mov	r0, r3
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 800ad38:	b480      	push	{r7}
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	4618      	mov	r0, r3
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>:
    static void run(const Derived&, const OtherDerived&)
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
    }
 800ad52:	bf00      	nop
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b082      	sub	sp, #8
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	6039      	str	r1, [r7, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6839      	ldr	r1, [r7, #0]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f000 fe07 	bl	800b980 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4618      	mov	r0, r3
 800ad76:	3708      	adds	r7, #8
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4618      	mov	r0, r3
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fb fdea 	bl	800698c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800adb8:	4603      	mov	r3, r0
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b082      	sub	sp, #8
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	3308      	adds	r3, #8
 800adce:	4618      	mov	r0, r3
 800add0:	f7fb fdea 	bl	80069a8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800add4:	4603      	mov	r3, r0
 800add6:	4618      	mov	r0, r3
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
	...

0800ade0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800adec:	68b8      	ldr	r0, [r7, #8]
 800adee:	f7ff ffdb 	bl	800ada8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>
 800adf2:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800adf4:	68b8      	ldr	r0, [r7, #8]
 800adf6:	f7ff ffe4 	bl	800adc2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>
 800adfa:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff fc8b 	bl	800a71a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800ae04:	4602      	mov	r2, r0
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d107      	bne.n	800ae1c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7ff fc8e 	bl	800a730 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800ae14:	4602      	mov	r2, r0
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d001      	beq.n	800ae20 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e000      	b.n	800ae22 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800ae20:	2300      	movs	r3, #0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d005      	beq.n	800ae32 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	6979      	ldr	r1, [r7, #20]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7ff f923 	bl	800a078 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7ff fc70 	bl	800a71a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d107      	bne.n	800ae52 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7ff fc73 	bl	800a730 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d006      	beq.n	800ae60 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800ae52:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800ae54:	4a05      	ldr	r2, [pc, #20]	; (800ae6c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800ae56:	f240 21fd 	movw	r1, #765	; 0x2fd
 800ae5a:	4805      	ldr	r0, [pc, #20]	; (800ae70 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800ae5c:	f012 fe46 	bl	801daec <__assert_func>
}
 800ae60:	bf00      	nop
 800ae62:	3718      	adds	r7, #24
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	08021fcc 	.word	0x08021fcc
 800ae6c:	08024378 	.word	0x08024378
 800ae70:	080220e0 	.word	0x080220e0

0800ae74 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800ae8a:	b480      	push	{r7}
 800ae8c:	b085      	sub	sp, #20
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	60f8      	str	r0, [r7, #12]
 800ae92:	60b9      	str	r1, [r7, #8]
 800ae94:	607a      	str	r2, [r7, #4]
 800ae96:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	601a      	str	r2, [r3, #0]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	605a      	str	r2, [r3, #4]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	683a      	ldr	r2, [r7, #0]
 800aea8:	609a      	str	r2, [r3, #8]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	69ba      	ldr	r2, [r7, #24]
 800aeae:	60da      	str	r2, [r3, #12]
  }
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fd92 	bl	800b9f0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>
  }
 800aecc:	bf00      	nop
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800aee8:	b5b0      	push	{r4, r5, r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7fa fa1a 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800aef8:	4604      	mov	r4, r0
 800aefa:	6838      	ldr	r0, [r7, #0]
 800aefc:	f7fa ff75 	bl	8005dea <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 800af00:	4605      	mov	r5, r0
 800af02:	f107 030c 	add.w	r3, r7, #12
 800af06:	4618      	mov	r0, r3
 800af08:	f7fb ff09 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800af0c:	f107 030c 	add.w	r3, r7, #12
 800af10:	461a      	mov	r2, r3
 800af12:	4629      	mov	r1, r5
 800af14:	4620      	mov	r0, r4
 800af16:	f000 fd7b 	bl	800ba10 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7fa fa06 	bl	800532c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800af20:	4603      	mov	r3, r0
    }
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bdb0      	pop	{r4, r5, r7, pc}

0800af2a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800af2a:	b5b0      	push	{r4, r5, r7, lr}
 800af2c:	b084      	sub	sp, #16
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 fd7c 	bl	800ba32 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800af3a:	4604      	mov	r4, r0
 800af3c:	6838      	ldr	r0, [r7, #0]
 800af3e:	f7fa ff5f 	bl	8005e00 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 800af42:	4605      	mov	r5, r0
 800af44:	f107 030c 	add.w	r3, r7, #12
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fb fee8 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800af4e:	f107 030c 	add.w	r3, r7, #12
 800af52:	461a      	mov	r2, r3
 800af54:	4629      	mov	r1, r5
 800af56:	4620      	mov	r0, r4
 800af58:	f000 fd76 	bl	800ba48 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 fd68 	bl	800ba32 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800af62:	4603      	mov	r3, r0
    }
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bdb0      	pop	{r4, r5, r7, pc}

0800af6c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4618      	mov	r0, r3
 800af78:	f000 fd77 	bl	800ba6a <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 800af7c:	4603      	mov	r3, r0
 800af7e:	4618      	mov	r0, r3
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800af86:	b480      	push	{r7}
 800af88:	b083      	sub	sp, #12
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4618      	mov	r0, r3
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>:
ConstRowXpr row(Index i) const
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800afa8:	68b8      	ldr	r0, [r7, #8]
 800afaa:	f7fa f8ca 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800afae:	4603      	mov	r3, r0
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	4619      	mov	r1, r3
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f000 fd6f 	bl	800ba98 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>
}
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b082      	sub	sp, #8
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800afcc:	6838      	ldr	r0, [r7, #0]
 800afce:	f000 fd8d 	bl	800baec <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>
 800afd2:	4603      	mov	r3, r0
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fdab 	bl	800bb32 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>
}
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800aff0:	68b8      	ldr	r0, [r7, #8]
 800aff2:	f7fa fe16 	bl	8005c22 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800aff6:	4603      	mov	r3, r0
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	4619      	mov	r1, r3
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f000 fdaf 	bl	800bb60 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>
}
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b00a:	b5b0      	push	{r4, r5, r7, lr}
 800b00c:	b086      	sub	sp, #24
 800b00e:	af00      	add	r7, sp, #0
 800b010:	60f8      	str	r0, [r7, #12]
 800b012:	60b9      	str	r1, [r7, #8]
 800b014:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b016:	68b8      	ldr	r0, [r7, #8]
 800b018:	f000 fdd4 	bl	800bbc4 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 800b01c:	4604      	mov	r4, r0
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fddb 	bl	800bbda <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>
 800b024:	4605      	mov	r5, r0
 800b026:	f107 0314 	add.w	r3, r7, #20
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fa f8e8 	bl	8005200 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b030:	f107 0314 	add.w	r3, r7, #20
 800b034:	462a      	mov	r2, r5
 800b036:	4621      	mov	r1, r4
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 fe21 	bl	800bc80 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bdb0      	pop	{r4, r5, r7, pc}

0800b046 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800b046:	b580      	push	{r7, lr}
 800b048:	b082      	sub	sp, #8
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fe72 	bl	800bd38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b054:	4603      	mov	r3, r0
 800b056:	4618      	mov	r0, r3
 800b058:	f000 fe79 	bl	800bd4e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>
 800b05c:	4603      	mov	r3, r0
 800b05e:	4618      	mov	r0, r3
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b066:	b590      	push	{r4, r7, lr}
 800b068:	b085      	sub	sp, #20
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fe62 	bl	800bd38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b074:	4604      	mov	r4, r0
 800b076:	f107 030c 	add.w	r3, r7, #12
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fa fbb7 	bl	80057ee <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b080:	f107 030c 	add.w	r3, r7, #12
 800b084:	4619      	mov	r1, r3
 800b086:	4620      	mov	r0, r4
 800b088:	f000 ff3c 	bl	800bf04 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b08c:	eef0 7a40 	vmov.f32	s15, s0
 800b090:	bf00      	nop
}
 800b092:	eeb0 0a67 	vmov.f32	s0, s15
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd90      	pop	{r4, r7, pc}

0800b09c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	bf00      	nop
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>:
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	370c      	adds	r7, #12
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
    {
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4618      	mov	r0, r3
 800b104:	f7f9 fcfc 	bl	8004b00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800b108:	f7f9 fd0a 	bl	8004b20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	4618      	mov	r0, r3
 800b112:	f000 ff3d 	bl	800bf90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4618      	mov	r0, r3
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800b120:	b5b0      	push	{r4, r5, r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	689c      	ldr	r4, [r3, #8]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	4618      	mov	r0, r3
 800b136:	f7fd f9a8 	bl	800848a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800b13a:	4605      	mov	r5, r0
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	4618      	mov	r0, r3
 800b144:	f000 ff31 	bl	800bfaa <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>
 800b148:	eef0 7a40 	vmov.f32	s15, s0
 800b14c:	edc7 7a03 	vstr	s15, [r7, #12]
 800b150:	f107 030c 	add.w	r3, r7, #12
 800b154:	461a      	mov	r2, r3
 800b156:	4629      	mov	r1, r5
 800b158:	4620      	mov	r0, r4
 800b15a:	f000 ff5f 	bl	800c01c <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>
  }
 800b15e:	bf00      	nop
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bdb0      	pop	{r4, r5, r7, pc}

0800b166 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800b166:	b580      	push	{r7, lr}
 800b168:	b082      	sub	sp, #8
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800b16e:	2101      	movs	r1, #1
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7ff ffd5 	bl	800b120 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 ff67 	bl	800c04a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>
  }
 800b17c:	bf00      	nop
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b184:	b5b0      	push	{r4, r5, r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7fa fa68 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b194:	4604      	mov	r4, r0
 800b196:	6838      	ldr	r0, [r7, #0]
 800b198:	f7fb f98e 	bl	80064b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800b19c:	4605      	mov	r5, r0
 800b19e:	f107 030c 	add.w	r3, r7, #12
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fb fdbb 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b1a8:	f107 030c 	add.w	r3, r7, #12
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f000 ff59 	bl	800c068 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f7fa fa54 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b1bc:	4603      	mov	r3, r0
    }
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bdb0      	pop	{r4, r5, r7, pc}

0800b1c6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b0a4      	sub	sp, #144	; 0x90
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	60b9      	str	r1, [r7, #8]
 800b1d0:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800b1d2:	68f9      	ldr	r1, [r7, #12]
 800b1d4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7ff fd0e 	bl	800abfc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800b1e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b1e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7ff fd19 	bl	800ac22 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b1f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 ff45 	bl	800c08a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 800b200:	f107 0314 	add.w	r3, r7, #20
 800b204:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b208:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 ff4f 	bl	800c0b0 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 800b212:	f107 0314 	add.w	r3, r7, #20
 800b216:	4618      	mov	r0, r3
 800b218:	f000 ff78 	bl	800c10c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 800b21c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800b220:	eeb0 0a67 	vmov.f32	s0, s15
 800b224:	3790      	adds	r7, #144	; 0x90
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b082      	sub	sp, #8
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b232:	2200      	movs	r2, #0
 800b234:	2101      	movs	r1, #1
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7ff f934 	bl	800a4a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 ff80 	bl	800c142 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 800b242:	bf00      	nop
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800b24a:	b480      	push	{r7}
 800b24c:	b083      	sub	sp, #12
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	330c      	adds	r3, #12
 800b256:	4618      	mov	r0, r3
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800b262:	b480      	push	{r7}
 800b264:	b083      	sub	sp, #12
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4618      	mov	r0, r3
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800b27a:	b480      	push	{r7}
 800b27c:	b083      	sub	sp, #12
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	3304      	adds	r3, #4
 800b286:	4618      	mov	r0, r3
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800b292:	b580      	push	{r7, lr}
 800b294:	b082      	sub	sp, #8
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	6039      	str	r1, [r7, #0]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6839      	ldr	r1, [r7, #0]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7fb fa58 	bl	8006756 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>:
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6839      	ldr	r1, [r7, #0]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 ff4f 	bl	800c162 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>:
    typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
  public:

    typedef typename internal::dense_xpr_base<BlockType>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b082      	sub	sp, #8
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	6039      	str	r1, [r7, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	4611      	mov	r1, r2
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7f9 f8ab 	bl	800443a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3310      	adds	r3, #16
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	6912      	ldr	r2, [r2, #16]
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl)
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	683a      	ldr	r2, [r7, #0]
 800b306:	4611      	mov	r1, r2
 800b308:	4618      	mov	r0, r3
 800b30a:	f7ff ffe0 	bl	800b2ce <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4618      	mov	r0, r3
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Block)
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	683a      	ldr	r2, [r7, #0]
 800b326:	4611      	mov	r1, r2
 800b328:	4618      	mov	r0, r3
 800b32a:	f7ff ffe5 	bl	800b2f8 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4618      	mov	r0, r3
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>:
ConstRowXpr row(Index i) const
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800b344:	68b8      	ldr	r0, [r7, #8]
 800b346:	f7fa f824 	bl	8005392 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800b34a:	4603      	mov	r3, r0
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	4619      	mov	r1, r3
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f000 ff1d 	bl	800c190 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>
}
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Transpose)
 800b35e:	b580      	push	{r7, lr}
 800b360:	b082      	sub	sp, #8
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	6039      	str	r1, [r7, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	4611      	mov	r1, r2
 800b36e:	4618      	mov	r0, r3
 800b370:	f7ff ffd2 	bl	800b318 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4618      	mov	r0, r3
 800b378:	3708      	adds	r7, #8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b37e:	b580      	push	{r7, lr}
 800b380:	b082      	sub	sp, #8
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b388:	6838      	ldr	r0, [r7, #0]
 800b38a:	f000 ff29 	bl	800c1e0 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>
 800b38e:	4603      	mov	r3, r0
 800b390:	4619      	mov	r1, r3
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 ff47 	bl	800c226 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
}
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b3ac:	68b8      	ldr	r0, [r7, #8]
 800b3ae:	f7f9 fffb 	bl	80053a8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f000 ff47 	bl	800c24c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>
}
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b3c6:	b5b0      	push	{r4, r5, r7, lr}
 800b3c8:	b086      	sub	sp, #24
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	60f8      	str	r0, [r7, #12]
 800b3ce:	60b9      	str	r1, [r7, #8]
 800b3d0:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b3d2:	68b8      	ldr	r0, [r7, #8]
 800b3d4:	f000 ff62 	bl	800c29c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>
 800b3d8:	4604      	mov	r4, r0
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 ff69 	bl	800c2b2 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	f107 0314 	add.w	r3, r7, #20
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7f9 ff0a 	bl	8005200 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b3ec:	f107 0314 	add.w	r3, r7, #20
 800b3f0:	462a      	mov	r2, r5
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f000 ffaf 	bl	800c358 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>
}
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bdb0      	pop	{r4, r5, r7, pc}

0800b402 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>:
 800b402:	b580      	push	{r7, lr}
 800b404:	b082      	sub	sp, #8
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 fffe 	bl	800c40c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b410:	4603      	mov	r3, r0
 800b412:	4618      	mov	r0, r3
 800b414:	f001 f805 	bl	800c422 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>
 800b418:	4603      	mov	r3, r0
 800b41a:	4618      	mov	r0, r3
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b422:	b590      	push	{r4, r7, lr}
 800b424:	b085      	sub	sp, #20
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 ffee 	bl	800c40c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b430:	4604      	mov	r4, r0
 800b432:	f107 030c 	add.w	r3, r7, #12
 800b436:	4618      	mov	r0, r3
 800b438:	f7fa f9d9 	bl	80057ee <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b43c:	f107 030c 	add.w	r3, r7, #12
 800b440:	4619      	mov	r1, r3
 800b442:	4620      	mov	r0, r4
 800b444:	f001 f8da 	bl	800c5fc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b448:	eef0 7a40 	vmov.f32	s15, s0
 800b44c:	bf00      	nop
}
 800b44e:	eeb0 0a67 	vmov.f32	s0, s15
 800b452:	3714      	adds	r7, #20
 800b454:	46bd      	mov	sp, r7
 800b456:	bd90      	pop	{r4, r7, pc}

0800b458 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b460:	2201      	movs	r2, #1
 800b462:	2101      	movs	r1, #1
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f7fe fd56 	bl	8009f16 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f001 f90c 	bl	800c688 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>
  }
 800b470:	bf00      	nop
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	68b9      	ldr	r1, [r7, #8]
 800b48a:	4618      	mov	r0, r3
 800b48c:	f001 f90c 	bl	800c6a8 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	db07      	blt.n	800b4a6 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x2e>
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	4618      	mov	r0, r3
 800b49a:	f7f9 fc10 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	db05      	blt.n	800b4b2 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x3a>
 800b4a6:	4b06      	ldr	r3, [pc, #24]	; (800b4c0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x48>)
 800b4a8:	4a06      	ldr	r2, [pc, #24]	; (800b4c4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x4c>)
 800b4aa:	2178      	movs	r1, #120	; 0x78
 800b4ac:	4806      	ldr	r0, [pc, #24]	; (800b4c8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x50>)
 800b4ae:	f012 fb1d 	bl	801daec <__assert_func>
 800b4b2:	bf00      	nop
    }
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	080244d8 	.word	0x080244d8
 800b4c4:	08024580 	.word	0x08024580
 800b4c8:	0802465c 	.word	0x0802465c

0800b4cc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b082      	sub	sp, #8
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f001 f8ed 	bl	800c6ca <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3708      	adds	r7, #8
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b082      	sub	sp, #8
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7ff ffed 	bl	800b4e2 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4618      	mov	r0, r3
 800b50c:	3708      	adds	r7, #8
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800b512:	b5b0      	push	{r4, r5, r7, lr}
 800b514:	b082      	sub	sp, #8
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
 800b51a:	6039      	str	r1, [r7, #0]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7ff ffec 	bl	800b4fa <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	4614      	mov	r4, r2
 800b528:	461d      	mov	r5, r3
 800b52a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b52c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b52e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b532:	e884 0003 	stmia.w	r4, {r0, r1}
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4618      	mov	r0, r3
 800b53a:	3708      	adds	r7, #8
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bdb0      	pop	{r4, r5, r7, pc}

0800b540 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	68b9      	ldr	r1, [r7, #8]
 800b552:	4618      	mov	r0, r3
 800b554:	f001 f8c4 	bl	800c6e0 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	db07      	blt.n	800b56e <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	4618      	mov	r0, r3
 800b562:	f7f9 fc47 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800b566:	4602      	mov	r2, r0
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4293      	cmp	r3, r2
 800b56c:	db05      	blt.n	800b57a <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800b56e:	4b05      	ldr	r3, [pc, #20]	; (800b584 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800b570:	4a05      	ldr	r2, [pc, #20]	; (800b588 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800b572:	2178      	movs	r1, #120	; 0x78
 800b574:	4805      	ldr	r0, [pc, #20]	; (800b58c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800b576:	f012 fab9 	bl	801daec <__assert_func>
    }
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	080244d8 	.word	0x080244d8
 800b588:	080246b0 	.word	0x080246b0
 800b58c:	0802465c 	.word	0x0802465c

0800b590 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>:
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4618      	mov	r0, r3
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>:
 800b5a6:	b480      	push	{r7}
 800b5a8:	b083      	sub	sp, #12
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f001 f89c 	bl	800c702 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7ff ffed 	bl	800b5bc <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f001 f88e 	bl	800c718 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	4618      	mov	r0, r3
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800b606:	b580      	push	{r7, lr}
 800b608:	b082      	sub	sp, #8
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4618      	mov	r0, r3
 800b612:	f001 f88c 	bl	800c72e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>
 800b616:	4603      	mov	r3, r0
 800b618:	4618      	mov	r0, r3
 800b61a:	3708      	adds	r7, #8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>:

    typedef typename Base::CoeffReturnType CoeffReturnType;

    /** \copydoc DenseBase::rows() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	f7fb f913 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800b62c:	4603      	mov	r3, r0
 800b62e:	4618      	mov	r0, r3
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>:
    /** \copydoc DenseBase::cols() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800b636:	b580      	push	{r7, lr}
 800b638:	b082      	sub	sp, #8
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
 800b63e:	f7fb f910 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b642:	4603      	mov	r3, r0
 800b644:	4618      	mov	r0, r3
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800b64c:	b5b0      	push	{r4, r5, r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff ffba 	bl	800b5d4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 800b660:	68fa      	ldr	r2, [r7, #12]
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	4614      	mov	r4, r2
 800b666:	461d      	mov	r5, r3
 800b668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b66a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b66c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b670:	e884 0003 	stmia.w	r4, {r0, r1}
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f103 0218 	add.w	r2, r3, #24
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4614      	mov	r4, r2
 800b67e:	461d      	mov	r5, r3
 800b680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b684:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b688:	e884 0003 	stmia.w	r4, {r0, r1}
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	3330      	adds	r3, #48	; 0x30
 800b690:	6839      	ldr	r1, [r7, #0]
 800b692:	4618      	mov	r0, r3
 800b694:	f7f9 fe3e 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800b698:	68b8      	ldr	r0, [r7, #8]
 800b69a:	f7ff ffa7 	bl	800b5ec <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800b69e:	4604      	mov	r4, r0
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7ff ffbc 	bl	800b620 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	429c      	cmp	r4, r3
 800b6ac:	d10a      	bne.n	800b6c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 800b6ae:	68b8      	ldr	r0, [r7, #8]
 800b6b0:	f7ff ffa9 	bl	800b606 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff ffbc 	bl	800b636 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	429c      	cmp	r4, r3
 800b6c2:	d005      	beq.n	800b6d0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 800b6c4:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800b6c6:	4a06      	ldr	r2, [pc, #24]	; (800b6e0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800b6c8:	2174      	movs	r1, #116	; 0x74
 800b6ca:	4806      	ldr	r0, [pc, #24]	; (800b6e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 800b6cc:	f012 fa0e 	bl	801daec <__assert_func>
    }
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bdb0      	pop	{r4, r5, r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	0801f954 	.word	0x0801f954
 800b6e0:	0802478c 	.word	0x0802478c
 800b6e4:	0801fbb8 	.word	0x0801fbb8

0800b6e8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f809 	bl	800b708 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f001 f823 	bl	800c744 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>
 800b6fe:	4603      	mov	r3, r0
 800b700:	4618      	mov	r0, r3
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4618      	mov	r0, r3
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800b71e:	b580      	push	{r7, lr}
 800b720:	b082      	sub	sp, #8
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4618      	mov	r0, r3
 800b72a:	f7ff ff5f 	bl	800b5ec <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800b72e:	4603      	mov	r3, r0
    }
 800b730:	4618      	mov	r0, r3
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
// but that might complicate template specialization
template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator;

template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator : evaluator_base<Derived>
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f001 f831 	bl	800c7a8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4618      	mov	r0, r3
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>:

// TODO: This evaluator does not actually use the child evaluator;
// all action is via the data() as returned by the Block expression.

template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7ff ffec 	bl	800b738 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4618      	mov	r0, r3
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b082      	sub	sp, #8
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4618      	mov	r0, r3
 800b776:	f7ff ffeb 	bl	800b750 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4618      	mov	r0, r3
 800b77e:	3708      	adds	r7, #8
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<const T>
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4618      	mov	r0, r3
 800b790:	f7ff ffeb 	bl	800b76a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4618      	mov	r0, r3
 800b798:	3708      	adds	r7, #8
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b082      	sub	sp, #8
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7ff ffeb 	bl	800b784 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 ffef 	bl	800c792 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b082      	sub	sp, #8
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7ff ffe8 	bl	800b79e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7ff ffeb 	bl	800b7be <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 ffdf 	bl	800c7be <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4618      	mov	r0, r3
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b082      	sub	sp, #8
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4618      	mov	r0, r3
 800b816:	f7ff ffec 	bl	800b7f2 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4618      	mov	r0, r3
 800b81e:	3708      	adds	r7, #8
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b824:	b580      	push	{r7, lr}
 800b826:	b082      	sub	sp, #8
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4618      	mov	r0, r3
 800b830:	f7ff ffeb 	bl	800b80a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4618      	mov	r0, r3
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800b83e:	b580      	push	{r7, lr}
 800b840:	b082      	sub	sp, #8
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4618      	mov	r0, r3
 800b84a:	f7ff ffeb 	bl	800b824 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4618      	mov	r0, r3
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	330c      	adds	r3, #12
 800b864:	4618      	mov	r0, r3
 800b866:	f7ff ffea 	bl	800b83e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	3304      	adds	r3, #4
 800b86e:	4618      	mov	r0, r3
 800b870:	f7ff ffb2 	bl	800b7d8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	4618      	mov	r0, r3
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800b87e:	b580      	push	{r7, lr}
 800b880:	b082      	sub	sp, #8
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4618      	mov	r0, r3
 800b88a:	f7ff ffe5 	bl	800b858 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 ff74 	bl	800c77c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	4618      	mov	r0, r3
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7ff ffe8 	bl	800b87e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7ff ffeb 	bl	800b89e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
	...

0800b8d4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	ed2d 8b02 	vpush	{d8}
 800b8da:	b088      	sub	sp, #32
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f7ff f9df 	bl	800aca6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	dd05      	ble.n	800b8fa <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f7ff fefa 	bl	800b6e8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	dc06      	bgt.n	800b908 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800b8fa:	4b16      	ldr	r3, [pc, #88]	; (800b954 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800b8fc:	4a16      	ldr	r2, [pc, #88]	; (800b958 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800b8fe:	f240 119b 	movw	r1, #411	; 0x19b
 800b902:	4816      	ldr	r0, [pc, #88]	; (800b95c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800b904:	f012 f8f2 	bl	801daec <__assert_func>
 800b908:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff fefc 	bl	800b708 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b910:	4602      	mov	r2, r0
 800b912:	f107 030c 	add.w	r3, r7, #12
 800b916:	4611      	mov	r1, r2
 800b918:	4618      	mov	r0, r3
 800b91a:	f000 ff20 	bl	800c75e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7ff fef2 	bl	800b708 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b924:	4602      	mov	r2, r0
 800b926:	f107 030c 	add.w	r3, r7, #12
 800b92a:	6839      	ldr	r1, [r7, #0]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 ff51 	bl	800c7d4 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800b932:	eeb0 8a40 	vmov.f32	s16, s0
 800b936:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800b938:	f107 030c 	add.w	r3, r7, #12
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7ff ffbb 	bl	800b8b8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800b942:	eef0 7a48 	vmov.f32	s15, s16
}
 800b946:	eeb0 0a67 	vmov.f32	s0, s15
 800b94a:	3720      	adds	r7, #32
 800b94c:	46bd      	mov	sp, r7
 800b94e:	ecbd 8b02 	vpop	{d8}
 800b952:	bd80      	pop	{r7, pc}
 800b954:	080249d4 	.word	0x080249d4
 800b958:	08024a18 	.word	0x08024a18
 800b95c:	08024be0 	.word	0x08024be0

0800b960 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f7fe feb4 	bl	800a6d6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800b96e:	4603      	mov	r3, r0
 800b970:	4618      	mov	r0, r3
 800b972:	f7fe fedd 	bl	800a730 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b976:	4603      	mov	r3, r0
 800b978:	4618      	mov	r0, r3
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800b980:	b590      	push	{r4, r7, lr}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 ff4a 	bl	800c824 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>
 800b990:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800b992:	6838      	ldr	r0, [r7, #0]
 800b994:	f000 ff2f 	bl	800c7f6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800b998:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800b99a:	4619      	mov	r1, r3
 800b99c:	4620      	mov	r0, r4
 800b99e:	f000 ff4c 	bl	800c83a <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>
      m_rhs(xpr.rhs()),
 800b9a2:	6838      	ldr	r0, [r7, #0]
 800b9a4:	f000 ff32 	bl	800c80c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>
 800b9a8:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	3324      	adds	r3, #36	; 0x24
 800b9ae:	6812      	ldr	r2, [r2, #0]
 800b9b0:	601a      	str	r2, [r3, #0]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800b9b6:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800b9b8:	4611      	mov	r1, r2
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fb fe16 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	3324      	adds	r3, #36	; 0x24
      m_innerDim(xpr.lhs().cols())
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	f000 ff49 	bl	800c864 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
 800b9d2:	6838      	ldr	r0, [r7, #0]
 800b9d4:	f000 ff0f 	bl	800c7f6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7f9 feaf 	bl	800573e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd90      	pop	{r4, r7, pc}

0800b9f0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 ff40 	bl	800c882 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 ff56 	bl	800c8b4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>
  }
 800ba08:	bf00      	nop
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	68b9      	ldr	r1, [r7, #8]
 800ba24:	6978      	ldr	r0, [r7, #20]
 800ba26:	f000 ff55 	bl	800c8d4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800ba2a:	bf00      	nop
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800ba32:	b480      	push	{r7}
 800ba34:	b083      	sub	sp, #12
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b086      	sub	sp, #24
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	68b9      	ldr	r1, [r7, #8]
 800ba5c:	6978      	ldr	r0, [r7, #20]
 800ba5e:	f000 ff73 	bl	800c948 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800ba62:	bf00      	nop
 800ba64:	3718      	adds	r7, #24
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800ba6a:	b480      	push	{r7}
 800ba6c:	b083      	sub	sp, #12
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4618      	mov	r0, r3
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 ff9c 	bl	800c9c6 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	4618      	mov	r0, r3
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	607a      	str	r2, [r7, #4]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	68b9      	ldr	r1, [r7, #8]
 800baaa:	4618      	mov	r0, r3
 800baac:	f000 ff97 	bl	800c9de <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	db07      	blt.n	800bac6 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	4618      	mov	r0, r3
 800baba:	f7f9 f9a6 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800babe:	4602      	mov	r2, r0
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4293      	cmp	r3, r2
 800bac4:	db05      	blt.n	800bad2 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 800bac6:	4b06      	ldr	r3, [pc, #24]	; (800bae0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 800bac8:	4a06      	ldr	r2, [pc, #24]	; (800bae4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 800baca:	2178      	movs	r1, #120	; 0x78
 800bacc:	4806      	ldr	r0, [pc, #24]	; (800bae8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x50>)
 800bace:	f012 f80d 	bl	801daec <__assert_func>
 800bad2:	bf00      	nop
    }
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	080244d8 	.word	0x080244d8
 800bae4:	08024c34 	.word	0x08024c34
 800bae8:	0802465c 	.word	0x0802465c

0800baec <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4618      	mov	r0, r3
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 ff78 	bl	800ca00 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4618      	mov	r0, r3
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b082      	sub	sp, #8
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7ff ffed 	bl	800bb02 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800bb32:	b5b0      	push	{r4, r5, r7, lr}
 800bb34:	b082      	sub	sp, #8
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	6039      	str	r1, [r7, #0]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f7ff ffec 	bl	800bb1a <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	4614      	mov	r4, r2
 800bb48:	461d      	mov	r5, r3
 800bb4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bb52:	e884 0003 	stmia.w	r4, {r0, r1}
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bdb0      	pop	{r4, r5, r7, pc}

0800bb60 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	68b9      	ldr	r1, [r7, #8]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 ff4f 	bl	800ca16 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	db0f      	blt.n	800bb9e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x3e>
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fa f88c 	bl	8005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800bb86:	4602      	mov	r2, r0
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	db0d      	blt.n	800bbaa <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fa f88f 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800bb96:	4602      	mov	r2, r0
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	db05      	blt.n	800bbaa <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800bb9e:	4b06      	ldr	r3, [pc, #24]	; (800bbb8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x58>)
 800bba0:	4a06      	ldr	r2, [pc, #24]	; (800bbbc <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x5c>)
 800bba2:	2178      	movs	r1, #120	; 0x78
 800bba4:	4806      	ldr	r0, [pc, #24]	; (800bbc0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x60>)
 800bba6:	f011 ffa1 	bl	801daec <__assert_func>
 800bbaa:	bf00      	nop
    }
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	080244d8 	.word	0x080244d8
 800bbbc:	08024d10 	.word	0x08024d10
 800bbc0:	0802465c 	.word	0x0802465c

0800bbc4 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>:
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>:
 800bbda:	b480      	push	{r7}
 800bbdc:	b083      	sub	sp, #12
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 ff1d 	bl	800ca38 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4618      	mov	r0, r3
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7ff ffed 	bl	800bbf0 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f000 ff0f 	bl	800ca4e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>
 800bc30:	4603      	mov	r3, r0
 800bc32:	4618      	mov	r0, r3
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4618      	mov	r0, r3
 800bc46:	f000 ff0d 	bl	800ca64 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3708      	adds	r7, #8
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	f7fa fe01 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bc60:	4603      	mov	r3, r0
 800bc62:	4618      	mov	r0, r3
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b082      	sub	sp, #8
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
 800bc72:	f7fa fdf6 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bc76:	4603      	mov	r3, r0
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800bc80:	b5b0      	push	{r4, r5, r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f7ff ffba 	bl	800bc08 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	4614      	mov	r4, r2
 800bc9a:	461d      	mov	r5, r3
 800bc9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bca0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bca4:	e884 0003 	stmia.w	r4, {r0, r1}
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f103 0218 	add.w	r2, r3, #24
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4614      	mov	r4, r2
 800bcb2:	461d      	mov	r5, r3
 800bcb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	6023      	str	r3, [r4, #0]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	332c      	adds	r3, #44	; 0x2c
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7f9 fb26 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800bcc8:	68b8      	ldr	r0, [r7, #8]
 800bcca:	f7ff ffa9 	bl	800bc20 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800bcce:	4604      	mov	r4, r0
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7ff ffbe 	bl	800bc54 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	429c      	cmp	r4, r3
 800bcdc:	d10a      	bne.n	800bcf4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x74>
 800bcde:	68b8      	ldr	r0, [r7, #8]
 800bce0:	f7ff ffab 	bl	800bc3a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800bce4:	4604      	mov	r4, r0
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7ff ffbe 	bl	800bc6a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	429c      	cmp	r4, r3
 800bcf2:	d005      	beq.n	800bd00 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x80>
 800bcf4:	4b05      	ldr	r3, [pc, #20]	; (800bd0c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x8c>)
 800bcf6:	4a06      	ldr	r2, [pc, #24]	; (800bd10 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800bcf8:	2174      	movs	r1, #116	; 0x74
 800bcfa:	4806      	ldr	r0, [pc, #24]	; (800bd14 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800bcfc:	f011 fef6 	bl	801daec <__assert_func>
    }
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	4618      	mov	r0, r3
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bdb0      	pop	{r4, r5, r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	0801f954 	.word	0x0801f954
 800bd10:	08024dec 	.word	0x08024dec
 800bd14:	0801fbb8 	.word	0x0801fbb8

0800bd18 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 f809 	bl	800bd38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800bd26:	4603      	mov	r3, r0
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f000 fea6 	bl	800ca7a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	4618      	mov	r0, r3
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4618      	mov	r0, r3
 800bd44:	370c      	adds	r7, #12
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b082      	sub	sp, #8
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7ff ff61 	bl	800bc20 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800bd5e:	4603      	mov	r3, r0
    }
 800bd60:	4618      	mov	r0, r3
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 feb4 	bl	800cade <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7ff ffec 	bl	800bd68 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4618      	mov	r0, r3
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b082      	sub	sp, #8
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7ff ffeb 	bl	800bd80 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4618      	mov	r0, r3
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7ff ffeb 	bl	800bd9a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b082      	sub	sp, #8
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7ff ffeb 	bl	800bdb4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fe72 	bl	800cac8 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4618      	mov	r0, r3
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7ff ffe8 	bl	800bdce <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4618      	mov	r0, r3
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff ffeb 	bl	800bdee <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4618      	mov	r0, r3
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800be22:	b580      	push	{r7, lr}
 800be24:	b082      	sub	sp, #8
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fe62 	bl	800caf4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4618      	mov	r0, r3
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b082      	sub	sp, #8
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4618      	mov	r0, r3
 800be46:	f7ff ffec 	bl	800be22 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4618      	mov	r0, r3
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff ffeb 	bl	800be3a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4618      	mov	r0, r3
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800be6e:	b580      	push	{r7, lr}
 800be70:	b082      	sub	sp, #8
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4618      	mov	r0, r3
 800be7a:	f7ff ffeb 	bl	800be54 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4618      	mov	r0, r3
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	330c      	adds	r3, #12
 800be94:	4618      	mov	r0, r3
 800be96:	f7ff ffea 	bl	800be6e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	3304      	adds	r3, #4
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7ff ffb2 	bl	800be08 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4618      	mov	r0, r3
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800beae:	b580      	push	{r7, lr}
 800beb0:	b082      	sub	sp, #8
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4618      	mov	r0, r3
 800beba:	f7ff ffe5 	bl	800be88 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 fdf7 	bl	800cab2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4618      	mov	r0, r3
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800bece:	b580      	push	{r7, lr}
 800bed0:	b082      	sub	sp, #8
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4618      	mov	r0, r3
 800beda:	f7ff ffe8 	bl	800beae <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7ff ffeb 	bl	800bece <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4618      	mov	r0, r3
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
	...

0800bf04 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800bf04:	b580      	push	{r7, lr}
 800bf06:	ed2d 8b02 	vpush	{d8}
 800bf0a:	b088      	sub	sp, #32
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f7ff f897 	bl	800b046 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	dd05      	ble.n	800bf2a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f7ff fefa 	bl	800bd18 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	dc06      	bgt.n	800bf38 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800bf2a:	4b16      	ldr	r3, [pc, #88]	; (800bf84 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800bf2c:	4a16      	ldr	r2, [pc, #88]	; (800bf88 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800bf2e:	f240 119b 	movw	r1, #411	; 0x19b
 800bf32:	4816      	ldr	r0, [pc, #88]	; (800bf8c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800bf34:	f011 fdda 	bl	801daec <__assert_func>
 800bf38:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7ff fefc 	bl	800bd38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800bf40:	4602      	mov	r2, r0
 800bf42:	f107 030c 	add.w	r3, r7, #12
 800bf46:	4611      	mov	r1, r2
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f000 fda3 	bl	800ca94 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7ff fef2 	bl	800bd38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800bf54:	4602      	mov	r2, r0
 800bf56:	f107 030c 	add.w	r3, r7, #12
 800bf5a:	6839      	ldr	r1, [r7, #0]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f000 fdd4 	bl	800cb0a <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800bf62:	eeb0 8a40 	vmov.f32	s16, s0
 800bf66:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bf68:	f107 030c 	add.w	r3, r7, #12
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff ffbb 	bl	800bee8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bf72:	eef0 7a48 	vmov.f32	s15, s16
}
 800bf76:	eeb0 0a67 	vmov.f32	s0, s15
 800bf7a:	3720      	adds	r7, #32
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	ecbd 8b02 	vpop	{d8}
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	080249d4 	.word	0x080249d4
 800bf88:	08025034 	.word	0x08025034
 800bf8c:	08024be0 	.word	0x08024be0

0800bf90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800bf9a:	6839      	ldr	r1, [r7, #0]
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 fdc5 	bl	800cb2c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800bfa2:	bf00      	nop
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b0a2      	sub	sp, #136	; 0x88
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
 800bfb2:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6819      	ldr	r1, [r3, #0]
 800bfc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800bfc8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7fe ffe5 	bl	800af9c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800bfd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bfd6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800bfda:	4611      	mov	r1, r2
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7fe fff0 	bl	800afc2 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	1d19      	adds	r1, r3, #4
 800bfe6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800bfea:	2200      	movs	r2, #0
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7fe fff9 	bl	800afe4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800bff2:	f107 030c 	add.w	r3, r7, #12
 800bff6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800bffa:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800bffe:	4618      	mov	r0, r3
 800c000:	f7ff f803 	bl	800b00a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800c004:	f107 030c 	add.w	r3, r7, #12
 800c008:	4618      	mov	r0, r3
 800c00a:	f7ff f82c 	bl	800b066 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800c00e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c012:	eeb0 0a67 	vmov.f32	s0, s15
 800c016:	3788      	adds	r7, #136	; 0x88
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 800c01c:	b480      	push	{r7}
 800c01e:	b085      	sub	sp, #20
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	60b9      	str	r1, [r7, #8]
 800c026:	607a      	str	r2, [r7, #4]
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	ed93 7a00 	vldr	s14, [r3]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	edd3 7a00 	vldr	s15, [r3]
 800c034:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	edc3 7a00 	vstr	s15, [r3]
 800c03e:	bf00      	nop
 800c040:	3714      	adds	r7, #20
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr

0800c04a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b082      	sub	sp, #8
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800c052:	2102      	movs	r1, #2
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f7ff f863 	bl	800b120 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 fd87 	bl	800cb6e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>
  }
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800c068:	b580      	push	{r7, lr}
 800c06a:	b086      	sub	sp, #24
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	68b9      	ldr	r1, [r7, #8]
 800c07c:	6978      	ldr	r0, [r7, #20]
 800c07e:	f000 fd80 	bl	800cb82 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800c082:	bf00      	nop
 800c084:	3718      	adds	r7, #24
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b084      	sub	sp, #16
 800c08e:	af00      	add	r7, sp, #0
 800c090:	60f8      	str	r0, [r7, #12]
 800c092:	60b9      	str	r1, [r7, #8]
 800c094:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800c096:	68b8      	ldr	r0, [r7, #8]
 800c098:	f7f9 fa1b 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800c09c:	4603      	mov	r3, r0
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f000 fd98 	bl	800cbd8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>
}
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800c0b0:	b5b0      	push	{r4, r5, r7, lr}
 800c0b2:	b086      	sub	sp, #24
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800c0bc:	68b8      	ldr	r0, [r7, #8]
 800c0be:	f7ff fa67 	bl	800b590 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fdaf 	bl	800cc28 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 800c0ca:	4605      	mov	r5, r0
 800c0cc:	f107 0314 	add.w	r3, r7, #20
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7f9 f895 	bl	8005200 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800c0d6:	f107 0314 	add.w	r3, r7, #20
 800c0da:	462a      	mov	r2, r5
 800c0dc:	4621      	mov	r1, r4
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f000 fddc 	bl	800cc9c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>
}
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	3718      	adds	r7, #24
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bdb0      	pop	{r4, r5, r7, pc}

0800c0ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fe2f 	bl	800cd58 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 fe36 	bl	800cd6e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>
 800c102:	4603      	mov	r3, r0
 800c104:	4618      	mov	r0, r3
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800c10c:	b590      	push	{r4, r7, lr}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fe1f 	bl	800cd58 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c11a:	4604      	mov	r4, r0
 800c11c:	f107 030c 	add.w	r3, r7, #12
 800c120:	4618      	mov	r0, r3
 800c122:	f7f9 fb64 	bl	80057ee <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800c126:	f107 030c 	add.w	r3, r7, #12
 800c12a:	4619      	mov	r1, r3
 800c12c:	4620      	mov	r0, r4
 800c12e:	f000 fe9b 	bl	800ce68 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800c132:	eef0 7a40 	vmov.f32	s15, s0
 800c136:	bf00      	nop
}
 800c138:	eeb0 0a67 	vmov.f32	s0, s15
 800c13c:	3714      	adds	r7, #20
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd90      	pop	{r4, r7, pc}

0800c142 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c142:	b580      	push	{r7, lr}
 800c144:	b082      	sub	sp, #8
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c14a:	2201      	movs	r2, #1
 800c14c:	2101      	movs	r1, #1
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7fe f9a8 	bl	800a4a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fecd 	bl	800cef4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 800c15a:	bf00      	nop
 800c15c:	3708      	adds	r7, #8
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)
 800c162:	b590      	push	{r4, r7, lr}
 800c164:	b083      	sub	sp, #12
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
 800c16a:	6039      	str	r1, [r7, #0]
    : m_functor(n.functor()), m_wrapper()
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fedd 	bl	800cf2c <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800c172:	687c      	ldr	r4, [r7, #4]
 800c174:	6838      	ldr	r0, [r7, #0]
 800c176:	f000 fecd 	bl	800cf14 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 800c17a:	4603      	mov	r3, r0
 800c17c:	4619      	mov	r1, r3
 800c17e:	4620      	mov	r0, r4
 800c180:	f7f9 f8b8 	bl	80052f4 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
  }
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4618      	mov	r0, r3
 800c188:	370c      	adds	r7, #12
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd90      	pop	{r4, r7, pc}
	...

0800c190 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	68b9      	ldr	r1, [r7, #8]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 fecd 	bl	800cf42 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>
      eigen_assert( (i>=0) && (
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	db06      	blt.n	800c1bc <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x2c>
 800c1ae:	68b8      	ldr	r0, [r7, #8]
 800c1b0:	f7fb fe6d 	bl	8007e8e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	db05      	blt.n	800c1c8 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x38>
 800c1bc:	4b05      	ldr	r3, [pc, #20]	; (800c1d4 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x44>)
 800c1be:	4a06      	ldr	r2, [pc, #24]	; (800c1d8 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x48>)
 800c1c0:	2178      	movs	r1, #120	; 0x78
 800c1c2:	4806      	ldr	r0, [pc, #24]	; (800c1dc <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x4c>)
 800c1c4:	f011 fc92 	bl	801daec <__assert_func>
 800c1c8:	bf00      	nop
    }
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3710      	adds	r7, #16
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	080244d8 	.word	0x080244d8
 800c1d8:	080251fc 	.word	0x080251fc
 800c1dc:	0802465c 	.word	0x0802465c

0800c1e0 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b082      	sub	sp, #8
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 feb0 	bl	800cf64 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	4618      	mov	r0, r3
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800c20e:	b580      	push	{r7, lr}
 800c210:	b082      	sub	sp, #8
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff ffed 	bl	800c1f6 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4618      	mov	r0, r3
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800c226:	b580      	push	{r7, lr}
 800c228:	b082      	sub	sp, #8
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
 800c22e:	6039      	str	r1, [r7, #0]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f7ff ffec 	bl	800c20e <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7ff f86c 	bl	800b318 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4618      	mov	r0, r3
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
	...

0800c24c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	68b9      	ldr	r1, [r7, #8]
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 fe8b 	bl	800cf7a <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	db06      	blt.n	800c278 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x2c>
 800c26a:	68b8      	ldr	r0, [r7, #8]
 800c26c:	f7fb fe1d 	bl	8007eaa <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800c270:	4602      	mov	r2, r0
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4293      	cmp	r3, r2
 800c276:	db05      	blt.n	800c284 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x38>
 800c278:	4b05      	ldr	r3, [pc, #20]	; (800c290 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x44>)
 800c27a:	4a06      	ldr	r2, [pc, #24]	; (800c294 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x48>)
 800c27c:	2178      	movs	r1, #120	; 0x78
 800c27e:	4806      	ldr	r0, [pc, #24]	; (800c298 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x4c>)
 800c280:	f011 fc34 	bl	801daec <__assert_func>
    }
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	080244d8 	.word	0x080244d8
 800c294:	08025394 	.word	0x08025394
 800c298:	0802465c 	.word	0x0802465c

0800c29c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>:
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	370c      	adds	r7, #12
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr

0800c2b2 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>:
 800c2b2:	b480      	push	{r7}
 800c2b4:	b083      	sub	sp, #12
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fe63 	bl	800cf9c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f7ff ffed 	bl	800c2c8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4618      	mov	r0, r3
 800c304:	f000 fe55 	bl	800cfb2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>
 800c308:	4603      	mov	r3, r0
 800c30a:	4618      	mov	r0, r3
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800c312:	b580      	push	{r7, lr}
 800c314:	b082      	sub	sp, #8
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 fe53 	bl	800cfc8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>
 800c322:	4603      	mov	r3, r0
 800c324:	4618      	mov	r0, r3
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	f7fa fa95 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c338:	4603      	mov	r3, r0
 800c33a:	4618      	mov	r0, r3
 800c33c:	3708      	adds	r7, #8
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c342:	b580      	push	{r7, lr}
 800c344:	b082      	sub	sp, #8
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
 800c34a:	f7fa fa8a 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c34e:	4603      	mov	r3, r0
 800c350:	4618      	mov	r0, r3
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c358:	b5b0      	push	{r4, r5, r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	607a      	str	r2, [r7, #4]
 800c364:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c366:	68f8      	ldr	r0, [r7, #12]
 800c368:	f7ff ffba 	bl	800c2e0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	3304      	adds	r3, #4
 800c370:	68b9      	ldr	r1, [r7, #8]
 800c372:	4618      	mov	r0, r3
 800c374:	f7fe fff3 	bl	800b35e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f103 021c 	add.w	r2, r3, #28
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4614      	mov	r4, r2
 800c382:	461d      	mov	r5, r3
 800c384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c388:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c38c:	e884 0003 	stmia.w	r4, {r0, r1}
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	3334      	adds	r3, #52	; 0x34
 800c394:	6839      	ldr	r1, [r7, #0]
 800c396:	4618      	mov	r0, r3
 800c398:	f7f8 ffbc 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c39c:	68b8      	ldr	r0, [r7, #8]
 800c39e:	f7ff ffab 	bl	800c2f8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff ffc0 	bl	800c32c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	429c      	cmp	r4, r3
 800c3b0:	d10a      	bne.n	800c3c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x70>
 800c3b2:	68b8      	ldr	r0, [r7, #8]
 800c3b4:	f7ff ffad 	bl	800c312 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7ff ffc0 	bl	800c342 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	429c      	cmp	r4, r3
 800c3c6:	d005      	beq.n	800c3d4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x7c>
 800c3c8:	4b05      	ldr	r3, [pc, #20]	; (800c3e0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x88>)
 800c3ca:	4a06      	ldr	r2, [pc, #24]	; (800c3e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x8c>)
 800c3cc:	2174      	movs	r1, #116	; 0x74
 800c3ce:	4806      	ldr	r0, [pc, #24]	; (800c3e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x90>)
 800c3d0:	f011 fb8c 	bl	801daec <__assert_func>
    }
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bdb0      	pop	{r4, r5, r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	0801f954 	.word	0x0801f954
 800c3e4:	08025484 	.word	0x08025484
 800c3e8:	0801fbb8 	.word	0x0801fbb8

0800c3ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 f809 	bl	800c40c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f000 fdee 	bl	800cfde <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>
 800c402:	4603      	mov	r3, r0
 800c404:	4618      	mov	r0, r3
 800c406:	3708      	adds	r7, #8
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4618      	mov	r0, r3
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c422:	b580      	push	{r7, lr}
 800c424:	b082      	sub	sp, #8
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	3304      	adds	r3, #4
 800c42e:	4618      	mov	r0, r3
 800c430:	f7ff ff62 	bl	800c2f8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c434:	4603      	mov	r3, r0
    }
 800c436:	4618      	mov	r0, r3
 800c438:	3708      	adds	r7, #8
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<const T>
 800c43e:	b580      	push	{r7, lr}
 800c440:	b082      	sub	sp, #8
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4618      	mov	r0, r3
 800c44a:	f7fc fc30 	bl	8008cae <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4618      	mov	r0, r3
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>, IndexBased>
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4618      	mov	r0, r3
 800c464:	f7ff ffeb 	bl	800c43e <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 fdeb 	bl	800d044 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4618      	mov	r0, r3
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /*HasDirectAccess*/ false>
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	4618      	mov	r0, r3
 800c484:	f7ff ffe8 	bl	800c458 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	4618      	mov	r0, r3
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c492:	b580      	push	{r7, lr}
 800c494:	b082      	sub	sp, #8
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7ff ffeb 	bl	800c478 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7ff ffeb 	bl	800c492 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3708      	adds	r7, #8
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}

0800c4c6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b082      	sub	sp, #8
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7ff ffeb 	bl	800c4ac <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fda9 	bl	800d02e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b082      	sub	sp, #8
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7ff ffe8 	bl	800c4c6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7ff ffeb 	bl	800c4e6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4618      	mov	r0, r3
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c51a:	b580      	push	{r7, lr}
 800c51c:	b082      	sub	sp, #8
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fd99 	bl	800d05a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4618      	mov	r0, r3
 800c52c:	3708      	adds	r7, #8
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c532:	b580      	push	{r7, lr}
 800c534:	b082      	sub	sp, #8
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7ff ffec 	bl	800c51a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4618      	mov	r0, r3
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4618      	mov	r0, r3
 800c558:	f7ff ffeb 	bl	800c532 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4618      	mov	r0, r3
 800c560:	3708      	adds	r7, #8
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c566:	b580      	push	{r7, lr}
 800c568:	b082      	sub	sp, #8
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4618      	mov	r0, r3
 800c572:	f7ff ffeb 	bl	800c54c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	4618      	mov	r0, r3
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>:
  struct Data
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	3320      	adds	r3, #32
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7ff ffea 	bl	800c566 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	3304      	adds	r3, #4
 800c596:	4618      	mov	r0, r3
 800c598:	f7ff ffb2 	bl	800c500 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b082      	sub	sp, #8
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7ff ffe5 	bl	800c580 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fd2e 	bl	800d018 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b082      	sub	sp, #8
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7ff ffe8 	bl	800c5a6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7ff ffeb 	bl	800c5c6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
	...

0800c5fc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	ed2d 8b02 	vpush	{d8}
 800c602:	b08c      	sub	sp, #48	; 0x30
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f7fe fef9 	bl	800b402 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	dd05      	ble.n	800c622 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f7ff fee8 	bl	800c3ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	dc06      	bgt.n	800c630 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c622:	4b16      	ldr	r3, [pc, #88]	; (800c67c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c624:	4a16      	ldr	r2, [pc, #88]	; (800c680 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c626:	f240 119b 	movw	r1, #411	; 0x19b
 800c62a:	4816      	ldr	r0, [pc, #88]	; (800c684 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c62c:	f011 fa5e 	bl	801daec <__assert_func>
 800c630:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7ff feea 	bl	800c40c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c638:	4602      	mov	r2, r0
 800c63a:	f107 0308 	add.w	r3, r7, #8
 800c63e:	4611      	mov	r1, r2
 800c640:	4618      	mov	r0, r3
 800c642:	f000 fcda 	bl	800cffa <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7ff fee0 	bl	800c40c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c64c:	4602      	mov	r2, r0
 800c64e:	f107 0308 	add.w	r3, r7, #8
 800c652:	6839      	ldr	r1, [r7, #0]
 800c654:	4618      	mov	r0, r3
 800c656:	f000 fd0b 	bl	800d070 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>
 800c65a:	eeb0 8a40 	vmov.f32	s16, s0
 800c65e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c660:	f107 0308 	add.w	r3, r7, #8
 800c664:	4618      	mov	r0, r3
 800c666:	f7ff ffbb 	bl	800c5e0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c66a:	eef0 7a48 	vmov.f32	s15, s16
}
 800c66e:	eeb0 0a67 	vmov.f32	s0, s15
 800c672:	3730      	adds	r7, #48	; 0x30
 800c674:	46bd      	mov	sp, r7
 800c676:	ecbd 8b02 	vpop	{d8}
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	080249d4 	.word	0x080249d4
 800c680:	0802586c 	.word	0x0802586c
 800c684:	08024be0 	.word	0x08024be0

0800c688 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c690:	2202      	movs	r2, #2
 800c692:	2101      	movs	r1, #1
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7fd fc3e 	bl	8009f16 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 fcf9 	bl	800d092 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>
  }
 800c6a0:	bf00      	nop
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	68b9      	ldr	r1, [r7, #8]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 fcf9 	bl	800d0b2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3710      	adds	r7, #16
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c6ca:	b480      	push	{r7}
 800c6cc:	b083      	sub	sp, #12
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
    }
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	68b9      	ldr	r1, [r7, #8]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 fd13 	bl	800d11e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c702:	b480      	push	{r7}
 800c704:	b083      	sub	sp, #12
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
    }
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4618      	mov	r0, r3
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>:
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	f7fa f897 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800c724:	4603      	mov	r3, r0
 800c726:	4618      	mov	r0, r3
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c72e:	b580      	push	{r7, lr}
 800c730:	b082      	sub	sp, #8
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	f7fa f894 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c73a:	4603      	mov	r3, r0
 800c73c:	4618      	mov	r0, r3
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fe ff59 	bl	800b606 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800c754:	4603      	mov	r3, r0
    }
 800c756:	4618      	mov	r0, r3
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800c75e:	b580      	push	{r7, lr}
 800c760:	b082      	sub	sp, #8
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	6039      	str	r1, [r7, #0]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f000 fd0c 	bl	800d18a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	4618      	mov	r0, r3
 800c776:	3708      	adds	r7, #8
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800c77c:	b480      	push	{r7}
 800c77e:	b083      	sub	sp, #12
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	4618      	mov	r0, r3
 800c788:	370c      	adds	r7, #12
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr

0800c792 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
 800c792:	b480      	push	{r7}
 800c794:	b083      	sub	sp, #12
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4618      	mov	r0, r3
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	370c      	adds	r7, #12
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr

0800c7be <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
 800c7be:	b480      	push	{r7}
 800c7c0:	b083      	sub	sp, #12
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800c7e0:	68b9      	ldr	r1, [r7, #8]
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f000 fce0 	bl	800d1a8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800c7e8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c7ec:	eeb0 0a67 	vmov.f32	s0, s15
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800c7f6:	b480      	push	{r7}
 800c7f8:	b083      	sub	sp, #12
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4618      	mov	r0, r3
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	3308      	adds	r3, #8
 800c818:	4618      	mov	r0, r3
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4618      	mov	r0, r3
 800c830:	370c      	adds	r7, #12
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr

0800c83a <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b082      	sub	sp, #8
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
 800c842:	6039      	str	r1, [r7, #0]
    {
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	4618      	mov	r0, r3
 800c848:	f7f8 f937 	bl	8004aba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800c84c:	f7f8 f945 	bl	8004ada <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	4618      	mov	r0, r3
 800c856:	f000 fccb 	bl	800d1f0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>
    }
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4618      	mov	r0, r3
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6839      	ldr	r1, [r7, #0]
 800c872:	4618      	mov	r0, r3
 800c874:	f000 fcc9 	bl	800d20a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4618      	mov	r0, r3
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800c882:	b580      	push	{r7, lr}
 800c884:	b086      	sub	sp, #24
 800c886:	af00      	add	r7, sp, #0
 800c888:	60f8      	str	r0, [r7, #12]
 800c88a:	60b9      	str	r1, [r7, #8]
 800c88c:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800c88e:	6879      	ldr	r1, [r7, #4]
 800c890:	68b8      	ldr	r0, [r7, #8]
 800c892:	f000 fcd0 	bl	800d236 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800c896:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800c898:	6879      	ldr	r1, [r7, #4]
 800c89a:	68b8      	ldr	r0, [r7, #8]
 800c89c:	f000 fcd7 	bl	800d24e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800c8a0:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800c8a2:	693a      	ldr	r2, [r7, #16]
 800c8a4:	6979      	ldr	r1, [r7, #20]
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f000 fcdd 	bl	800d266 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800c8ac:	bf00      	nop
 800c8ae:	3718      	adds	r7, #24
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c8bc:	2201      	movs	r2, #1
 800c8be:	2100      	movs	r1, #0
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f7ff ffde 	bl	800c882 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fcf3 	bl	800d2b2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>
  }
 800c8cc:	bf00      	nop
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800c8d4:	b590      	push	{r4, r7, lr}
 800c8d6:	b087      	sub	sp, #28
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800c8e0:	68b8      	ldr	r0, [r7, #8]
 800c8e2:	f7fb fc65 	bl	80081b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800c8e6:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800c8e8:	68b8      	ldr	r0, [r7, #8]
 800c8ea:	f7f9 fab8 	bl	8005e5e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800c8ee:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7f8 fa89 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d107      	bne.n	800c910 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x3c>
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	4618      	mov	r0, r3
 800c904:	f7f8 fa76 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800c908:	4602      	mov	r2, r0
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d001      	beq.n	800c914 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x40>
 800c910:	2301      	movs	r3, #1
 800c912:	e000      	b.n	800c916 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x42>
 800c914:	2300      	movs	r3, #0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d005      	beq.n	800c926 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x52>
      dst.resize(dstRows, dstCols);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	6979      	ldr	r1, [r7, #20]
 800c920:	4618      	mov	r0, r3
 800c922:	f7fb f97d 	bl	8007c20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800c926:	68b8      	ldr	r0, [r7, #8]
 800c928:	f000 fcd3 	bl	800d2d2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>
 800c92c:	4604      	mov	r4, r0
 800c92e:	68b8      	ldr	r0, [r7, #8]
 800c930:	f000 fcdb 	bl	800d2ea <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>
 800c934:	4603      	mov	r3, r0
 800c936:	461a      	mov	r2, r3
 800c938:	4621      	mov	r1, r4
 800c93a:	68f8      	ldr	r0, [r7, #12]
 800c93c:	f000 fce1 	bl	800d302 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>
  }
 800c940:	bf00      	nop
 800c942:	371c      	adds	r7, #28
 800c944:	46bd      	mov	sp, r7
 800c946:	bd90      	pop	{r4, r7, pc}

0800c948 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename XprType::Scalar> &)
 800c948:	b580      	push	{r7, lr}
 800c94a:	b088      	sub	sp, #32
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800c954:	68b8      	ldr	r0, [r7, #8]
 800c956:	f7f9 fa90 	bl	8005e7a <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 800c95a:	61f8      	str	r0, [r7, #28]
    Index dstCols = src.cols();
 800c95c:	68b8      	ldr	r0, [r7, #8]
 800c95e:	f7fb fc35 	bl	80081cc <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800c962:	61b8      	str	r0, [r7, #24]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	4618      	mov	r0, r3
 800c968:	f7f9 f999 	bl	8005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800c96c:	4602      	mov	r2, r0
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	4293      	cmp	r3, r2
 800c972:	d107      	bne.n	800c984 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	4618      	mov	r0, r3
 800c978:	f7f9 f99c 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800c97c:	4602      	mov	r2, r0
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	4293      	cmp	r3, r2
 800c982:	d001      	beq.n	800c988 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 800c984:	2301      	movs	r3, #1
 800c986:	e000      	b.n	800c98a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 800c988:	2300      	movs	r3, #0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d005      	beq.n	800c99a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	69ba      	ldr	r2, [r7, #24]
 800c992:	69f9      	ldr	r1, [r7, #28]
 800c994:	4618      	mov	r0, r3
 800c996:	f000 fcd3 	bl	800d340 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    const int Size = EIGEN_PLAIN_ENUM_MIN(XprType::ColsAtCompileTime,DstXprType::ColsAtCompileTime);
 800c99a:	2301      	movs	r3, #1
 800c99c:	617b      	str	r3, [r7, #20]
    ActualXprType actual_xpr(src.nestedExpression());
 800c99e:	68b8      	ldr	r0, [r7, #8]
 800c9a0:	f000 fd00 	bl	800d3a4 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	f107 0310 	add.w	r3, r7, #16
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 fd04 	bl	800d3ba <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>
    compute_inverse<ActualXprTypeCleanded, DstXprType>::run(actual_xpr, dst);
 800c9b2:	f107 0310 	add.w	r3, r7, #16
 800c9b6:	68f9      	ldr	r1, [r7, #12]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f000 fd13 	bl	800d3e4 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>
  }
 800c9be:	bf00      	nop
 800c9c0:	3720      	adds	r7, #32
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b082      	sub	sp, #8
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fd47 	bl	800d462 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>
 800c9d4:	4603      	mov	r3, r0
    }
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3708      	adds	r7, #8
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b084      	sub	sp, #16
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	60f8      	str	r0, [r7, #12]
 800c9e6:	60b9      	str	r1, [r7, #8]
 800c9e8:	607a      	str	r2, [r7, #4]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	68b9      	ldr	r1, [r7, #8]
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f000 fd58 	bl	800d4a6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
    }
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	370c      	adds	r7, #12
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b084      	sub	sp, #16
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	60f8      	str	r0, [r7, #12]
 800ca1e:	60b9      	str	r1, [r7, #8]
 800ca20:	607a      	str	r2, [r7, #4]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	68b9      	ldr	r1, [r7, #8]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f000 fd6d 	bl	800d508 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	4618      	mov	r0, r3
 800ca32:	3710      	adds	r7, #16
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
    }
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4618      	mov	r0, r3
 800ca44:	370c      	adds	r7, #12
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr

0800ca4e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b082      	sub	sp, #8
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	f7f9 ff04 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	f7f9 fef9 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ca70:	4603      	mov	r3, r0
 800ca72:	4618      	mov	r0, r3
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b082      	sub	sp, #8
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7ff f8d8 	bl	800bc3a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800ca8a:	4603      	mov	r3, r0
    }
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 fd61 	bl	800d56a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	4618      	mov	r0, r3
 800caac:	3708      	adds	r7, #8
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}

0800cab2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800cab2:	b480      	push	{r7}
 800cab4:	b083      	sub	sp, #12
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4618      	mov	r0, r3
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4618      	mov	r0, r3
 800cad4:	370c      	adds	r7, #12
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
 800cade:	b480      	push	{r7}
 800cae0:	b083      	sub	sp, #12
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4618      	mov	r0, r3
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4618      	mov	r0, r3
 800cb00:	370c      	adds	r7, #12
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr

0800cb0a <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b084      	sub	sp, #16
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	60f8      	str	r0, [r7, #12]
 800cb12:	60b9      	str	r1, [r7, #8]
 800cb14:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800cb16:	68b9      	ldr	r1, [r7, #8]
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f000 fd35 	bl	800d588 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800cb1e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cb22:	eeb0 0a67 	vmov.f32	s0, s15
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800cb2c:	b5b0      	push	{r4, r5, r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7fe ff7b 	bl	800ba32 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	6838      	ldr	r0, [r7, #0]
 800cb40:	f7f9 fade 	bl	8006100 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 800cb44:	4605      	mov	r5, r0
 800cb46:	f107 030c 	add.w	r3, r7, #12
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7fa f8e7 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800cb50:	f107 030c 	add.w	r3, r7, #12
 800cb54:	461a      	mov	r2, r3
 800cb56:	4629      	mov	r1, r5
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f000 fd26 	bl	800d5aa <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7fe ff67 	bl	800ba32 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800cb64:	4603      	mov	r3, r0
    }
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bdb0      	pop	{r4, r5, r7, pc}

0800cb6e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800cb6e:	b480      	push	{r7}
 800cb70:	b083      	sub	sp, #12
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	bf00      	nop
 800cb78:	370c      	adds	r7, #12
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr

0800cb82 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800cb82:	b590      	push	{r4, r7, lr}
 800cb84:	b087      	sub	sp, #28
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	60f8      	str	r0, [r7, #12]
 800cb8a:	60b9      	str	r1, [r7, #8]
 800cb8c:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800cb8e:	68b8      	ldr	r0, [r7, #8]
 800cb90:	f000 fd1c 	bl	800d5cc <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>
 800cb94:	4604      	mov	r4, r0
 800cb96:	f107 0310 	add.w	r3, r7, #16
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fa f8bf 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800cba0:	f107 0310 	add.w	r3, r7, #16
 800cba4:	461a      	mov	r2, r3
 800cba6:	4621      	mov	r1, r4
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	f7fa f99f 	bl	8006eec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800cbae:	68b8      	ldr	r0, [r7, #8]
 800cbb0:	f000 fd18 	bl	800d5e4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	f107 0314 	add.w	r3, r7, #20
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f000 fd1e 	bl	800d5fc <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800cbc0:	f107 0314 	add.w	r3, r7, #20
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f000 fd22 	bl	800d612 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800cbce:	bf00      	nop
 800cbd0:	371c      	adds	r7, #28
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd90      	pop	{r4, r7, pc}
	...

0800cbd8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	68b9      	ldr	r1, [r7, #8]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f000 fd22 	bl	800d634 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	db07      	blt.n	800cc06 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7f8 f855 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4293      	cmp	r3, r2
 800cc04:	db05      	blt.n	800cc12 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800cc06:	4b05      	ldr	r3, [pc, #20]	; (800cc1c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800cc08:	4a05      	ldr	r2, [pc, #20]	; (800cc20 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800cc0a:	2178      	movs	r1, #120	; 0x78
 800cc0c:	4805      	ldr	r0, [pc, #20]	; (800cc24 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800cc0e:	f010 ff6d 	bl	801daec <__assert_func>
    }
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	4618      	mov	r0, r3
 800cc16:	3710      	adds	r7, #16
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	080244d8 	.word	0x080244d8
 800cc20:	08025b00 	.word	0x08025b00
 800cc24:	0802465c 	.word	0x0802465c

0800cc28 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>:
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	4618      	mov	r0, r3
 800cc34:	370c      	adds	r7, #12
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b082      	sub	sp, #8
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 fd05 	bl	800d656 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3708      	adds	r7, #8
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b082      	sub	sp, #8
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f7ff ffed 	bl	800cc3e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4618      	mov	r0, r3
 800cc68:	3708      	adds	r7, #8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>:
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b082      	sub	sp, #8
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	f7f9 fdec 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3708      	adds	r7, #8
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	f7f9 fde9 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cc90:	4603      	mov	r3, r0
 800cc92:	4618      	mov	r0, r3
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
	...

0800cc9c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800cc9c:	b5b0      	push	{r4, r5, r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
 800cca8:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f7ff ffd3 	bl	800cc56 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	4614      	mov	r4, r2
 800ccb6:	461d      	mov	r5, r3
 800ccb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ccc0:	e884 0003 	stmia.w	r4, {r0, r1}
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f103 0218 	add.w	r2, r3, #24
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4614      	mov	r4, r2
 800ccce:	461d      	mov	r5, r3
 800ccd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ccd8:	e884 0003 	stmia.w	r4, {r0, r1}
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	3330      	adds	r3, #48	; 0x30
 800cce0:	6839      	ldr	r1, [r7, #0]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7f8 fb16 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800cce8:	68b8      	ldr	r0, [r7, #8]
 800ccea:	f7fe fc7f 	bl	800b5ec <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800ccee:	4604      	mov	r4, r0
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7ff ffbb 	bl	800cc6e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	429c      	cmp	r4, r3
 800ccfc:	d10a      	bne.n	800cd14 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x78>
 800ccfe:	68b8      	ldr	r0, [r7, #8]
 800cd00:	f7fe fc81 	bl	800b606 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800cd04:	4604      	mov	r4, r0
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7ff ffbb 	bl	800cc84 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	429c      	cmp	r4, r3
 800cd12:	d005      	beq.n	800cd20 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x84>
 800cd14:	4b05      	ldr	r3, [pc, #20]	; (800cd2c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x90>)
 800cd16:	4a06      	ldr	r2, [pc, #24]	; (800cd30 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x94>)
 800cd18:	2174      	movs	r1, #116	; 0x74
 800cd1a:	4806      	ldr	r0, [pc, #24]	; (800cd34 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x98>)
 800cd1c:	f010 fee6 	bl	801daec <__assert_func>
    }
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	4618      	mov	r0, r3
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bdb0      	pop	{r4, r5, r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	0801f954 	.word	0x0801f954
 800cd30:	08025bdc 	.word	0x08025bdc
 800cd34:	0801fbb8 	.word	0x0801fbb8

0800cd38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f809 	bl	800cd58 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800cd46:	4603      	mov	r3, r0
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 fc8f 	bl	800d66c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	4618      	mov	r0, r3
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4618      	mov	r0, r3
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b082      	sub	sp, #8
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7fe fc37 	bl	800b5ec <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800cd7e:	4603      	mov	r3, r0
    }
 800cd80:	4618      	mov	r0, r3
 800cd82:	3708      	adds	r7, #8
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 fc92 	bl	800d6ba <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7ff ffec 	bl	800cd88 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b082      	sub	sp, #8
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7ff ffeb 	bl	800cda0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7ff ffeb 	bl	800cdba <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b082      	sub	sp, #8
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	330c      	adds	r3, #12
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7ff ffea 	bl	800cdd4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3304      	adds	r3, #4
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fe fce7 	bl	800b7d8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7ff ffe5 	bl	800cdee <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 fc3d 	bl	800d6a4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7ff ffe8 	bl	800ce14 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b082      	sub	sp, #8
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7ff ffeb 	bl	800ce34 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4618      	mov	r0, r3
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	ed2d 8b02 	vpush	{d8}
 800ce6e:	b088      	sub	sp, #32
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f7ff f938 	bl	800c0ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	dd05      	ble.n	800ce8e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f7ff ff58 	bl	800cd38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	dc06      	bgt.n	800ce9c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800ce8e:	4b16      	ldr	r3, [pc, #88]	; (800cee8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800ce90:	4a16      	ldr	r2, [pc, #88]	; (800ceec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800ce92:	f240 119b 	movw	r1, #411	; 0x19b
 800ce96:	4816      	ldr	r0, [pc, #88]	; (800cef0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800ce98:	f010 fe28 	bl	801daec <__assert_func>
 800ce9c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f7ff ff5a 	bl	800cd58 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800cea4:	4602      	mov	r2, r0
 800cea6:	f107 030c 	add.w	r3, r7, #12
 800ceaa:	4611      	mov	r1, r2
 800ceac:	4618      	mov	r0, r3
 800ceae:	f000 fbea 	bl	800d686 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f7ff ff50 	bl	800cd58 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	f107 030c 	add.w	r3, r7, #12
 800cebe:	6839      	ldr	r1, [r7, #0]
 800cec0:	4618      	mov	r0, r3
 800cec2:	f000 fc05 	bl	800d6d0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 800cec6:	eeb0 8a40 	vmov.f32	s16, s0
 800ceca:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800cecc:	f107 030c 	add.w	r3, r7, #12
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7ff ffbc 	bl	800ce4e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ced6:	eef0 7a48 	vmov.f32	s15, s16
}
 800ceda:	eeb0 0a67 	vmov.f32	s0, s15
 800cede:	3720      	adds	r7, #32
 800cee0:	46bd      	mov	sp, r7
 800cee2:	ecbd 8b02 	vpop	{d8}
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	080249d4 	.word	0x080249d4
 800ceec:	08025e24 	.word	0x08025e24
 800cef0:	08024be0 	.word	0x08024be0

0800cef4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800cefc:	2202      	movs	r2, #2
 800cefe:	2101      	movs	r1, #1
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f7fd facf 	bl	800a4a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fbf3 	bl	800d6f2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 800cf0c:	bf00      	nop
 800cf0e:	3708      	adds	r7, #8
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:

    /** \returns the functor representing the nullary operation */
    EIGEN_DEVICE_FUNC
    const NullaryOp& functor() const { return m_functor; }
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	3304      	adds	r3, #4
 800cf20:	4618      	mov	r0, r3
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800cf2c:	b480      	push	{r7}
 800cf2e:	b083      	sub	sp, #12
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	4618      	mov	r0, r3
 800cf38:	370c      	adds	r7, #12
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr

0800cf42 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b084      	sub	sp, #16
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	60f8      	str	r0, [r7, #12]
 800cf4a:	60b9      	str	r1, [r7, #8]
 800cf4c:	607a      	str	r2, [r7, #4]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	68b9      	ldr	r1, [r7, #8]
 800cf54:	4618      	mov	r0, r3
 800cf56:	f000 fbe8 	bl	800d72a <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
    }
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	370c      	adds	r7, #12
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr

0800cf7a <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>:
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b084      	sub	sp, #16
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	60f8      	str	r0, [r7, #12]
 800cf82:	60b9      	str	r1, [r7, #8]
 800cf84:	607a      	str	r2, [r7, #4]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	68b9      	ldr	r1, [r7, #8]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f000 fbf7 	bl	800d780 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	4618      	mov	r0, r3
 800cf96:	3710      	adds	r7, #16
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
    }
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	370c      	adds	r7, #12
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr

0800cfb2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>:
      : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
                    m_blockRows(blockRows), m_blockCols(blockCols)
    {}

    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
    EIGEN_DEVICE_FUNC inline Index cols() const { return m_blockCols.value(); }
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b082      	sub	sp, #8
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	f7f9 fc52 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3708      	adds	r7, #8
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>:
    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	f7f9 fc47 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b082      	sub	sp, #8
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	3304      	adds	r3, #4
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7ff f991 	bl	800c312 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800cff0:	4603      	mov	r3, r0
    }
 800cff2:	4618      	mov	r0, r3
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b082      	sub	sp, #8
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	6039      	str	r1, [r7, #0]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6839      	ldr	r1, [r7, #0]
 800d008:	4618      	mov	r0, r3
 800d00a:	f000 fbeb 	bl	800d7e4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4618      	mov	r0, r3
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4618      	mov	r0, r3
 800d024:	370c      	adds	r7, #12
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr

0800d02e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
 800d02e:	b480      	push	{r7}
 800d030:	b083      	sub	sp, #12
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	4618      	mov	r0, r3
 800d03a:	370c      	adds	r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	4618      	mov	r0, r3
 800d050:	370c      	adds	r7, #12
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr

0800d05a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
 800d05a:	b480      	push	{r7}
 800d05c:	b083      	sub	sp, #12
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4618      	mov	r0, r3
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d07c:	68b9      	ldr	r1, [r7, #8]
 800d07e:	68f8      	ldr	r0, [r7, #12]
 800d080:	f000 fbbf 	bl	800d802 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>
 800d084:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d088:	eeb0 0a67 	vmov.f32	s0, s15
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d092:	b580      	push	{r7, lr}
 800d094:	b082      	sub	sp, #8
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d09a:	2200      	movs	r2, #0
 800d09c:	2102      	movs	r1, #2
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f7fc ff39 	bl	8009f16 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 fbbd 	bl	800d824 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>
  }
 800d0aa:	bf00      	nop
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)

    /** Column or Row constructor
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    BlockImpl_dense(XprType& xpr, Index i)
 800d0b2:	b5b0      	push	{r4, r5, r7, lr}
 800d0b4:	b084      	sub	sp, #16
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	60f8      	str	r0, [r7, #12]
 800d0ba:	60b9      	str	r1, [r7, #8]
 800d0bc:	607a      	str	r2, [r7, #4]
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
             BlockRows==1 ? 1 : xpr.rows(),
             BlockCols==1 ? 1 : xpr.cols()),
        m_xpr(xpr),
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d0be:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fa ff34 	bl	8007f30 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800d0c8:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d0ca:	68b8      	ldr	r0, [r7, #8]
 800d0cc:	f000 fbba 	bl	800d844 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800d0d0:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	fb02 f303 	mul.w	r3, r2, r3
 800d0d8:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d0da:	441d      	add	r5, r3
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7f7 fde2 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	4629      	mov	r1, r5
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f000 fbc2 	bl	800d874 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	68ba      	ldr	r2, [r7, #8]
 800d0f4:	609a      	str	r2, [r3, #8]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	330c      	adds	r3, #12
 800d0fa:	6879      	ldr	r1, [r7, #4]
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f000 fbf7 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3310      	adds	r3, #16
 800d106:	2100      	movs	r1, #0
 800d108:	4618      	mov	r0, r3
 800d10a:	f000 fbf1 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
    {
      init();
 800d10e:	68f8      	ldr	r0, [r7, #12]
 800d110:	f000 fbfd 	bl	800d90e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>
    }
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bdb0      	pop	{r4, r5, r7, pc}

0800d11e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d11e:	b5b0      	push	{r4, r5, r7, lr}
 800d120:	b084      	sub	sp, #16
 800d122:	af00      	add	r7, sp, #0
 800d124:	60f8      	str	r0, [r7, #12]
 800d126:	60b9      	str	r1, [r7, #8]
 800d128:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d12a:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	4618      	mov	r0, r3
 800d130:	f7f9 fe9d 	bl	8006e6e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d134:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d136:	68b8      	ldr	r0, [r7, #8]
 800d138:	f7f9 ff6a 	bl	8007010 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d13c:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	fb02 f303 	mul.w	r3, r2, r3
 800d144:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d146:	441d      	add	r5, r3
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7f7 fe5d 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800d150:	4602      	mov	r2, r0
 800d152:	2301      	movs	r3, #1
 800d154:	4629      	mov	r1, r5
 800d156:	4620      	mov	r0, r4
 800d158:	f000 fc00 	bl	800d95c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	68ba      	ldr	r2, [r7, #8]
 800d160:	609a      	str	r2, [r3, #8]
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	330c      	adds	r3, #12
 800d166:	2100      	movs	r1, #0
 800d168:	4618      	mov	r0, r3
 800d16a:	f000 fbc1 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	3310      	adds	r3, #16
 800d172:	6879      	ldr	r1, [r7, #4]
 800d174:	4618      	mov	r0, r3
 800d176:	f000 fc2f 	bl	800d9d8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d17a:	68f8      	ldr	r0, [r7, #12]
 800d17c:	f000 fc46 	bl	800da0c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	4618      	mov	r0, r3
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bdb0      	pop	{r4, r5, r7, pc}

0800d18a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b082      	sub	sp, #8
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
 800d192:	6039      	str	r1, [r7, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6839      	ldr	r1, [r7, #0]
 800d198:	4618      	mov	r0, r3
 800d19a:	f000 fc47 	bl	800da2c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d1b2:	6839      	ldr	r1, [r7, #0]
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 fc4b 	bl	800da50 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800d1ba:	eef0 7a40 	vmov.f32	s15, s0
 800d1be:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800d1c2:	6839      	ldr	r1, [r7, #0]
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 fc54 	bl	800da72 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800d1ca:	eef0 7a40 	vmov.f32	s15, s0
 800d1ce:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d1d2:	f107 020c 	add.w	r2, r7, #12
 800d1d6:	f107 0308 	add.w	r3, r7, #8
 800d1da:	4619      	mov	r1, r3
 800d1dc:	6838      	ldr	r0, [r7, #0]
 800d1de:	f7fb fefe 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800d1e2:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d1e6:	eeb0 0a67 	vmov.f32	s0, s15
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800d1fa:	6839      	ldr	r1, [r7, #0]
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 fc5c 	bl	800daba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800d202:	bf00      	nop
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800d20a:	b590      	push	{r4, r7, lr}
 800d20c:	b083      	sub	sp, #12
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
 800d212:	6039      	str	r1, [r7, #0]
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 fc7d 	bl	800db14 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 800d21a:	687c      	ldr	r4, [r7, #4]
 800d21c:	6838      	ldr	r0, [r7, #0]
 800d21e:	f000 fc6d 	bl	800dafc <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800d222:	4603      	mov	r3, r0
 800d224:	4619      	mov	r1, r3
 800d226:	4620      	mov	r0, r4
 800d228:	f7fa f9e0 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4618      	mov	r0, r3
 800d230:	370c      	adds	r7, #12
 800d232:	46bd      	mov	sp, r7
 800d234:	bd90      	pop	{r4, r7, pc}

0800d236 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800d236:	b480      	push	{r7}
 800d238:	b083      	sub	sp, #12
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
 800d23e:	6039      	str	r1, [r7, #0]
      : inner;
 800d240:	687b      	ldr	r3, [r7, #4]
  }
 800d242:	4618      	mov	r0, r3
 800d244:	370c      	adds	r7, #12
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr

0800d24e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800d24e:	b480      	push	{r7}
 800d250:	b083      	sub	sp, #12
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	6039      	str	r1, [r7, #0]
      : outer;
 800d258:	683b      	ldr	r3, [r7, #0]
  }
 800d25a:	4618      	mov	r0, r3
 800d25c:	370c      	adds	r7, #12
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr

0800d266 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800d266:	b5b0      	push	{r4, r5, r7, lr}
 800d268:	b086      	sub	sp, #24
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	60f8      	str	r0, [r7, #12]
 800d26e:	60b9      	str	r1, [r7, #8]
 800d270:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	689c      	ldr	r4, [r3, #8]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	68b9      	ldr	r1, [r7, #8]
 800d27e:	4618      	mov	r0, r3
 800d280:	f000 fc53 	bl	800db2a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>
 800d284:	4605      	mov	r5, r0
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	68b9      	ldr	r1, [r7, #8]
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 fc63 	bl	800db5a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>
 800d294:	eef0 7a40 	vmov.f32	s15, s0
 800d298:	edc7 7a05 	vstr	s15, [r7, #20]
 800d29c:	f107 0314 	add.w	r3, r7, #20
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	f7fb f8a9 	bl	80083fc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800d2aa:	bf00      	nop
 800d2ac:	3718      	adds	r7, #24
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bdb0      	pop	{r4, r5, r7, pc}

0800d2b2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b082      	sub	sp, #8
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d2ba:	2202      	movs	r2, #2
 800d2bc:	2100      	movs	r1, #0
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f7ff fadf 	bl	800c882 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 fc7b 	bl	800dbc0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>
  }
 800d2ca:	bf00      	nop
 800d2cc:	3708      	adds	r7, #8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}

0800d2d2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800d2d2:	b480      	push	{r7}
 800d2d4:	b083      	sub	sp, #12
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	370c      	adds	r7, #12
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr

0800d2ea <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800d2ea:	b480      	push	{r7}
 800d2ec:	b083      	sub	sp, #12
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	3304      	adds	r3, #4
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr

0800d302 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800d302:	b580      	push	{r7, lr}
 800d304:	b088      	sub	sp, #32
 800d306:	af00      	add	r7, sp, #0
 800d308:	60f8      	str	r0, [r7, #12]
 800d30a:	60b9      	str	r1, [r7, #8]
 800d30c:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800d30e:	f107 0314 	add.w	r3, r7, #20
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	68b9      	ldr	r1, [r7, #8]
 800d316:	4618      	mov	r0, r3
 800d318:	f000 fc62 	bl	800dbe0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>
 800d31c:	f107 031c 	add.w	r3, r7, #28
 800d320:	4618      	mov	r0, r3
 800d322:	f7f9 fcfc 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d326:	f107 021c 	add.w	r2, r7, #28
 800d32a:	f107 0314 	add.w	r3, r7, #20
 800d32e:	4619      	mov	r1, r3
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f000 fc6c 	bl	800dc0e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800d336:	bf00      	nop
 800d338:	3720      	adds	r7, #32
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
	...

0800d340 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d108      	bne.n	800d364 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2b01      	cmp	r3, #1
 800d356:	d105      	bne.n	800d364 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	db02      	blt.n	800d364 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	da06      	bge.n	800d372 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x32>
 800d364:	4b0c      	ldr	r3, [pc, #48]	; (800d398 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x58>)
 800d366:	4a0d      	ldr	r2, [pc, #52]	; (800d39c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x5c>)
 800d368:	f240 1111 	movw	r1, #273	; 0x111
 800d36c:	480c      	ldr	r0, [pc, #48]	; (800d3a0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x60>)
 800d36e:	f010 fbbd 	bl	801daec <__assert_func>
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	617b      	str	r3, [r7, #20]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	613b      	str	r3, [r7, #16]
  }
 800d37a:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	fb02 f103 	mul.w	r1, r2, r3
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	68ba      	ldr	r2, [r7, #8]
 800d38a:	f000 fc51 	bl	800dc30 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>
    }
 800d38e:	bf00      	nop
 800d390:	3718      	adds	r7, #24
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	080223e4 	.word	0x080223e4
 800d39c:	08025fec 	.word	0x08025fec
 800d3a0:	08022600 	.word	0x08022600

0800d3a4 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>:
  EIGEN_DEVICE_FUNC const XprTypeNestedCleaned& nestedExpression() const { return m_xpr; }
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	370c      	adds	r7, #12
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr

0800d3ba <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>:
    explicit Matrix(const T& x)
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b082      	sub	sp, #8
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
 800d3c2:	6039      	str	r1, [r7, #0]
    {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7f7 fb9a 	bl	8004b00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800d3cc:	f7f7 fba8 	bl	8004b20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6839      	ldr	r1, [r7, #0]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f000 fc38 	bl	800dc4a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>
    }
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3708      	adds	r7, #8
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>:
  static inline void run(const MatrixType& matrix, ResultType& result)
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	ed2d 8b02 	vpush	{d8}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d3f2:	f107 030c 	add.w	r3, r7, #12
 800d3f6:	6879      	ldr	r1, [r7, #4]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fc ff50 	bl	800a29e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    result.coeffRef(0,0) = Scalar(1) / matrixEval.coeff(0,0);
 800d3fe:	f107 030c 	add.w	r3, r7, #12
 800d402:	2200      	movs	r2, #0
 800d404:	2100      	movs	r1, #0
 800d406:	4618      	mov	r0, r3
 800d408:	f000 fc2c 	bl	800dc64 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>
 800d40c:	4603      	mov	r3, r0
 800d40e:	ed93 8a00 	vldr	s16, [r3]
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	2200      	movs	r2, #0
 800d416:	2100      	movs	r1, #0
 800d418:	4618      	mov	r0, r3
 800d41a:	f7f9 f968 	bl	80066ee <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800d41e:	4603      	mov	r3, r0
 800d420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d424:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800d428:	edc3 7a00 	vstr	s15, [r3]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d42c:	f107 030c 	add.w	r3, r7, #12
 800d430:	4618      	mov	r0, r3
 800d432:	f7fb fe1b 	bl	800906c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  }
 800d436:	bf00      	nop
 800d438:	3710      	adds	r7, #16
 800d43a:	46bd      	mov	sp, r7
 800d43c:	ecbd 8b02 	vpop	{d8}
 800d440:	bd80      	pop	{r7, pc}

0800d442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800d442:	b580      	push	{r7, lr}
 800d444:	b082      	sub	sp, #8
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f7f8 fbe9 	bl	8005c22 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d450:	4603      	mov	r3, r0
 800d452:	4618      	mov	r0, r3
 800d454:	f7f8 fc23 	bl	8005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d458:	4603      	mov	r3, r0
 800d45a:	4618      	mov	r0, r3
 800d45c:	3708      	adds	r7, #8
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 800d462:	b590      	push	{r4, r7, lr}
 800d464:	b083      	sub	sp, #12
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f7ff ffe9 	bl	800d442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d470:	4604      	mov	r4, r0
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 f807 	bl	800d486 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d478:	4603      	mov	r3, r0
 800d47a:	fb04 f303 	mul.w	r3, r4, r3
 800d47e:	4618      	mov	r0, r3
 800d480:	370c      	adds	r7, #12
 800d482:	46bd      	mov	sp, r7
 800d484:	bd90      	pop	{r4, r7, pc}

0800d486 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800d486:	b580      	push	{r7, lr}
 800d488:	b082      	sub	sp, #8
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f7f8 fbc7 	bl	8005c22 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d494:	4603      	mov	r3, r0
 800d496:	4618      	mov	r0, r3
 800d498:	f7f8 fc0c 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d49c:	4603      	mov	r3, r0
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3708      	adds	r7, #8
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d4a6:	b5b0      	push	{r4, r5, r7, lr}
 800d4a8:	b084      	sub	sp, #16
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	60f8      	str	r0, [r7, #12]
 800d4ae:	60b9      	str	r1, [r7, #8]
 800d4b0:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d4b2:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7f9 fcd9 	bl	8006e6e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d4bc:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d4be:	68b8      	ldr	r0, [r7, #8]
 800d4c0:	f000 fa35 	bl	800d92e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800d4c4:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	fb02 f303 	mul.w	r3, r2, r3
 800d4cc:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d4ce:	18e9      	adds	r1, r5, r3
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f000 fbe9 	bl	800dcac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	609a      	str	r2, [r3, #8]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	330c      	adds	r3, #12
 800d4e4:	6879      	ldr	r1, [r7, #4]
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f000 fa02 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	3310      	adds	r3, #16
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f000 fa70 	bl	800d9d8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f000 fc15 	bl	800dd28 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>
    }
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	4618      	mov	r0, r3
 800d502:	3710      	adds	r7, #16
 800d504:	46bd      	mov	sp, r7
 800d506:	bdb0      	pop	{r4, r5, r7, pc}

0800d508 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d508:	b5b0      	push	{r4, r5, r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d514:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	4618      	mov	r0, r3
 800d51a:	f7fd fd27 	bl	800af6c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800d51e:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d520:	68b8      	ldr	r0, [r7, #8]
 800d522:	f000 fc11 	bl	800dd48 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 800d526:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	fb02 f303 	mul.w	r3, r2, r3
 800d52e:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d530:	18e9      	adds	r1, r5, r3
 800d532:	2301      	movs	r3, #1
 800d534:	2201      	movs	r2, #1
 800d536:	4620      	mov	r0, r4
 800d538:	f000 fc1e 	bl	800dd78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	68ba      	ldr	r2, [r7, #8]
 800d540:	609a      	str	r2, [r3, #8]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	330c      	adds	r3, #12
 800d546:	6879      	ldr	r1, [r7, #4]
 800d548:	4618      	mov	r0, r3
 800d54a:	f000 fa45 	bl	800d9d8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	330d      	adds	r3, #13
 800d552:	6879      	ldr	r1, [r7, #4]
 800d554:	4618      	mov	r0, r3
 800d556:	f000 fa3f 	bl	800d9d8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	f000 fc4a 	bl	800ddf4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>
    }
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	4618      	mov	r0, r3
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bdb0      	pop	{r4, r5, r7, pc}

0800d56a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b082      	sub	sp, #8
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
 800d572:	6039      	str	r1, [r7, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6839      	ldr	r1, [r7, #0]
 800d578:	4618      	mov	r0, r3
 800d57a:	f000 fc4b 	bl	800de14 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4618      	mov	r0, r3
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d592:	2200      	movs	r2, #0
 800d594:	2100      	movs	r1, #0
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fc4e 	bl	800de38 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800d59c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d5a0:	eeb0 0a67 	vmov.f32	s0, s15
 800d5a4:	3708      	adds	r7, #8
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b086      	sub	sp, #24
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	60f8      	str	r0, [r7, #12]
 800d5b2:	60b9      	str	r1, [r7, #8]
 800d5b4:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	68b9      	ldr	r1, [r7, #8]
 800d5be:	6978      	ldr	r0, [r7, #20]
 800d5c0:	f000 fc4d 	bl	800de5e <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800d5c4:	bf00      	nop
 800d5c6:	3718      	adds	r7, #24
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4618      	mov	r0, r3
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	3304      	adds	r3, #4
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with subtraction
  *
  */
template<typename DstScalar,typename SrcScalar> struct sub_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op)
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	4618      	mov	r0, r3
 800d608:	370c      	adds	r7, #12
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d612:	b580      	push	{r7, lr}
 800d614:	b086      	sub	sp, #24
 800d616:	af00      	add	r7, sp, #0
 800d618:	60f8      	str	r0, [r7, #12]
 800d61a:	60b9      	str	r1, [r7, #8]
 800d61c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	68b9      	ldr	r1, [r7, #8]
 800d626:	6978      	ldr	r0, [r7, #20]
 800d628:	f000 fc44 	bl	800deb4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800d62c:	bf00      	nop
 800d62e:	3718      	adds	r7, #24
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	607a      	str	r2, [r7, #4]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	68b9      	ldr	r1, [r7, #8]
 800d646:	4618      	mov	r0, r3
 800d648:	f000 fc6e 	bl	800df28 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	4618      	mov	r0, r3
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d656:	b480      	push	{r7}
 800d658:	b083      	sub	sp, #12
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
    }
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4618      	mov	r0, r3
 800d662:	370c      	adds	r7, #12
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr

0800d66c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	4618      	mov	r0, r3
 800d678:	f7fd ffc5 	bl	800b606 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800d67c:	4603      	mov	r3, r0
    }
 800d67e:	4618      	mov	r0, r3
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800d686:	b580      	push	{r7, lr}
 800d688:	b082      	sub	sp, #8
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
 800d68e:	6039      	str	r1, [r7, #0]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6839      	ldr	r1, [r7, #0]
 800d694:	4618      	mov	r0, r3
 800d696:	f000 fc7d 	bl	800df94 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4618      	mov	r0, r3
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	370c      	adds	r7, #12
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr

0800d6ba <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
 800d6ba:	b480      	push	{r7}
 800d6bc:	b083      	sub	sp, #12
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d6dc:	68b9      	ldr	r1, [r7, #8]
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f000 fc67 	bl	800dfb2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>
 800d6e4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d6e8:	eeb0 0a67 	vmov.f32	s0, s15
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b082      	sub	sp, #8
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	2102      	movs	r1, #2
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f7fc fed0 	bl	800a4a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 fc78 	bl	800dffa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800d70a:	bf00      	nop
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
 800d712:	b580      	push	{r7, lr}
 800d714:	b082      	sub	sp, #8
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 fc7d 	bl	800e01a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	4618      	mov	r0, r3
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>:
    inline BlockImpl_dense(XprType& xpr, Index i)
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b084      	sub	sp, #16
 800d72e:	af00      	add	r7, sp, #0
 800d730:	60f8      	str	r0, [r7, #12]
 800d732:	60b9      	str	r1, [r7, #8]
 800d734:	607a      	str	r2, [r7, #4]
        m_blockCols(BlockCols==1 ? 1 : xpr.cols())
 800d736:	68f8      	ldr	r0, [r7, #12]
 800d738:	f7ff ffeb 	bl	800d712 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	68b9      	ldr	r1, [r7, #8]
 800d740:	4618      	mov	r0, r3
 800d742:	f7f6 fe7a 	bl	800443a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	3310      	adds	r3, #16
 800d74a:	6879      	ldr	r1, [r7, #4]
 800d74c:	4618      	mov	r0, r3
 800d74e:	f000 f8cf 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	3314      	adds	r3, #20
 800d756:	2100      	movs	r1, #0
 800d758:	4618      	mov	r0, r3
 800d75a:	f000 f93d 	bl	800d9d8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	3315      	adds	r3, #21
 800d762:	2101      	movs	r1, #1
 800d764:	4618      	mov	r0, r3
 800d766:	f7f9 f84f 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	3316      	adds	r3, #22
 800d76e:	2101      	movs	r1, #1
 800d770:	4618      	mov	r0, r3
 800d772:	f7f9 f849 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
    {}
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	4618      	mov	r0, r3
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d780:	b5b0      	push	{r4, r5, r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d78c:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d78e:	68b8      	ldr	r0, [r7, #8]
 800d790:	f000 fc4e 	bl	800e030 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>
 800d794:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d796:	68b8      	ldr	r0, [r7, #8]
 800d798:	f000 fc5e 	bl	800e058 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 800d79c:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	fb02 f303 	mul.w	r3, r2, r3
 800d7a4:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d7a6:	18e9      	adds	r1, r5, r3
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f000 fc87 	bl	800e0c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	3308      	adds	r3, #8
 800d7b6:	68ba      	ldr	r2, [r7, #8]
 800d7b8:	6812      	ldr	r2, [r2, #0]
 800d7ba:	601a      	str	r2, [r3, #0]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	330c      	adds	r3, #12
 800d7c0:	2100      	movs	r1, #0
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 f908 	bl	800d9d8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	3310      	adds	r3, #16
 800d7cc:	6879      	ldr	r1, [r7, #4]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f000 f88e 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f000 fcb1 	bl	800e13c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>
    }
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bdb0      	pop	{r4, r5, r7, pc}

0800d7e4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6839      	ldr	r1, [r7, #0]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f000 fcb2 	bl	800e15c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d802:	b580      	push	{r7, lr}
 800d804:	b082      	sub	sp, #8
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
 800d80a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d80c:	2200      	movs	r2, #0
 800d80e:	2100      	movs	r1, #0
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 fcb5 	bl	800e180 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 800d816:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d81a:	eeb0 0a67 	vmov.f32	s0, s15
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d82c:	2201      	movs	r2, #1
 800d82e:	2102      	movs	r1, #2
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f7fc fb70 	bl	8009f16 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 fcb5 	bl	800e1a6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>
  }
 800d83c:	bf00      	nop
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 800d844:	b480      	push	{r7}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	2301      	movs	r3, #1
 800d84e:	4618      	mov	r0, r3
 800d850:	370c      	adds	r7, #12
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr

0800d85a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b082      	sub	sp, #8
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 fcaf 	bl	800e1c6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4618      	mov	r0, r3
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
	...

0800d874 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>:
      checkSanity<Derived>();
    }

    /** \internal Constructor for dynamically sized matrices */
    EIGEN_DEVICE_FUNC
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]
 800d880:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d882:	68f8      	ldr	r0, [r7, #12]
 800d884:	f7ff ffe9 	bl	800d85a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	68ba      	ldr	r2, [r7, #8]
 800d88c:	601a      	str	r2, [r3, #0]
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	3304      	adds	r3, #4
 800d892:	6879      	ldr	r1, [r7, #4]
 800d894:	4618      	mov	r0, r3
 800d896:	f7f8 ffb7 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	3305      	adds	r3, #5
 800d89e:	6839      	ldr	r1, [r7, #0]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7f8 ff97 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
    {
      eigen_assert( (dataPtr == 0)
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d011      	beq.n	800d8d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	db08      	blt.n	800d8c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d105      	bne.n	800d8c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	db02      	blt.n	800d8c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	2b03      	cmp	r3, #3
 800d8c2:	d005      	beq.n	800d8d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800d8c4:	4b07      	ldr	r3, [pc, #28]	; (800d8e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x70>)
 800d8c6:	4a08      	ldr	r2, [pc, #32]	; (800d8e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x74>)
 800d8c8:	21b0      	movs	r1, #176	; 0xb0
 800d8ca:	4808      	ldr	r0, [pc, #32]	; (800d8ec <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x78>)
 800d8cc:	f010 f90e 	bl	801daec <__assert_func>
              || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
                  && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));
      checkSanity<Derived>();
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f000 fc82 	bl	800e1dc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	08026078 	.word	0x08026078
 800d8e8:	08026124 	.word	0x08026124
 800d8ec:	08026228 	.word	0x08026228

0800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>:

template<typename T> class variable_if_dynamic<T, Dynamic>
{
    T m_value;
  public:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value = 0) EIGEN_NO_THROW : m_value(value) {}
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	683a      	ldr	r2, [r7, #0]
 800d8fe:	601a      	str	r2, [r3, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	4618      	mov	r0, r3
 800d904:	370c      	adds	r7, #12
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr

0800d90e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>:
    }
    #endif

  protected:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void init()
 800d90e:	b580      	push	{r7, lr}
 800d910:	b082      	sub	sp, #8
 800d912:	af00      	add	r7, sp, #0
 800d914:	6078      	str	r0, [r7, #4]
    {
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
                    ? m_xpr.outerStride()
                    : m_xpr.innerStride();
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7ff ff92 	bl	800d844 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800d920:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	615a      	str	r2, [r3, #20]
    }
 800d926:	bf00      	nop
 800d928:	3708      	adds	r7, #8
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>:
 800d92e:	b480      	push	{r7}
 800d930:	b083      	sub	sp, #12
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
 800d936:	2301      	movs	r3, #1
 800d938:	4618      	mov	r0, r3
 800d93a:	370c      	adds	r7, #12
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 fc50 	bl	800e1f2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4618      	mov	r0, r3
 800d956:	3708      	adds	r7, #8
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	60b9      	str	r1, [r7, #8]
 800d966:	607a      	str	r2, [r7, #4]
 800d968:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f7ff ffea 	bl	800d944 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	3304      	adds	r3, #4
 800d97a:	6879      	ldr	r1, [r7, #4]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7f8 ff29 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	3305      	adds	r3, #5
 800d986:	6839      	ldr	r1, [r7, #0]
 800d988:	4618      	mov	r0, r3
 800d98a:	f7f8 ff3d 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d011      	beq.n	800d9b8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	db08      	blt.n	800d9ac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2b03      	cmp	r3, #3
 800d99e:	d105      	bne.n	800d9ac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	db02      	blt.n	800d9ac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d005      	beq.n	800d9b8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800d9ac:	4b07      	ldr	r3, [pc, #28]	; (800d9cc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800d9ae:	4a08      	ldr	r2, [pc, #32]	; (800d9d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800d9b0:	21b0      	movs	r1, #176	; 0xb0
 800d9b2:	4808      	ldr	r0, [pc, #32]	; (800d9d4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800d9b4:	f010 f89a 	bl	801daec <__assert_func>
      checkSanity<Derived>();
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	f000 fc24 	bl	800e208 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	08026078 	.word	0x08026078
 800d9d0:	0802627c 	.word	0x0802627c
 800d9d4:	08026228 	.word	0x08026228

0800d9d8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6039      	str	r1, [r7, #0]
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d005      	beq.n	800d9f4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x1c>
 800d9e8:	4b05      	ldr	r3, [pc, #20]	; (800da00 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x28>)
 800d9ea:	4a06      	ldr	r2, [pc, #24]	; (800da04 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x2c>)
 800d9ec:	2185      	movs	r1, #133	; 0x85
 800d9ee:	4806      	ldr	r0, [pc, #24]	; (800da08 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x30>)
 800d9f0:	f010 f87c 	bl	801daec <__assert_func>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3708      	adds	r7, #8
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	08021e90 	.word	0x08021e90
 800da04:	08026380 	.word	0x08026380
 800da08:	08021f08 	.word	0x08021f08

0800da0c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	4618      	mov	r0, r3
 800da1a:	f7f9 faf9 	bl	8007010 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800da1e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	615a      	str	r2, [r3, #20]
    }
 800da24:	bf00      	nop
 800da26:	3708      	adds	r7, #8
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f000 fbf1 	bl	800e21e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6839      	ldr	r1, [r7, #0]
 800da40:	4618      	mov	r0, r3
 800da42:	f000 fbf7 	bl	800e234 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	4618      	mov	r0, r3
 800da4a:	3708      	adds	r7, #8
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800da5a:	2200      	movs	r2, #0
 800da5c:	2100      	movs	r1, #0
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 fc10 	bl	800e284 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800da64:	eef0 7a40 	vmov.f32	s15, s0
  }
 800da68:	eeb0 0a67 	vmov.f32	s0, s15
 800da6c:	3708      	adds	r7, #8
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800da72:	b580      	push	{r7, lr}
 800da74:	b084      	sub	sp, #16
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
 800da7a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800da7c:	6839      	ldr	r1, [r7, #0]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 fc13 	bl	800e2aa <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 800da84:	eef0 7a40 	vmov.f32	s15, s0
 800da88:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800da8c:	6839      	ldr	r1, [r7, #0]
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 fc1c 	bl	800e2cc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 800da94:	eef0 7a40 	vmov.f32	s15, s0
 800da98:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800da9c:	f107 020c 	add.w	r2, r7, #12
 800daa0:	f107 0308 	add.w	r3, r7, #8
 800daa4:	4619      	mov	r1, r3
 800daa6:	6838      	ldr	r0, [r7, #0]
 800daa8:	f7fb fa99 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800daac:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dab0:	eeb0 0a67 	vmov.f32	s0, s15
 800dab4:	3710      	adds	r7, #16
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800daba:	b5b0      	push	{r4, r5, r7, lr}
 800dabc:	b084      	sub	sp, #16
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
 800dac2:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f7f7 fdcd 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800daca:	4604      	mov	r4, r0
 800dacc:	6838      	ldr	r0, [r7, #0]
 800dace:	f7f7 fdfc 	bl	80056ca <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800dad2:	4605      	mov	r5, r0
 800dad4:	f107 030c 	add.w	r3, r7, #12
 800dad8:	4618      	mov	r0, r3
 800dada:	f7f9 f920 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800dade:	f107 030c 	add.w	r3, r7, #12
 800dae2:	461a      	mov	r2, r3
 800dae4:	4629      	mov	r1, r5
 800dae6:	4620      	mov	r0, r4
 800dae8:	f000 fc01 	bl	800e2ee <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7f7 fdb9 	bl	8005664 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800daf2:	4603      	mov	r3, r0
    }
 800daf4:	4618      	mov	r0, r3
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bdb0      	pop	{r4, r5, r7, pc}

0800dafc <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4618      	mov	r0, r3
 800db0a:	370c      	adds	r7, #12
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr

0800db14 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800db14:	b480      	push	{r7}
 800db16:	b083      	sub	sp, #12
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	4618      	mov	r0, r3
 800db20:	370c      	adds	r7, #12
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr

0800db2a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800db2a:	b590      	push	{r4, r7, lr}
 800db2c:	b085      	sub	sp, #20
 800db2e:	af00      	add	r7, sp, #0
 800db30:	60f8      	str	r0, [r7, #12]
 800db32:	60b9      	str	r1, [r7, #8]
 800db34:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row * m_d.outerStride() + col];
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681c      	ldr	r4, [r3, #0]
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7fb fa08 	bl	8008f52 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800db42:	4602      	mov	r2, r0
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	fb03 f202 	mul.w	r2, r3, r2
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4413      	add	r3, r2
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	4423      	add	r3, r4
  }
 800db52:	4618      	mov	r0, r3
 800db54:	3714      	adds	r7, #20
 800db56:	46bd      	mov	sp, r7
 800db58:	bd90      	pop	{r4, r7, pc}

0800db5a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b0a4      	sub	sp, #144	; 0x90
 800db5e:	af00      	add	r7, sp, #0
 800db60:	60f8      	str	r0, [r7, #12]
 800db62:	60b9      	str	r1, [r7, #8]
 800db64:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800db66:	68f9      	ldr	r1, [r7, #12]
 800db68:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fd f844 	bl	800abfc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800db74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800db78:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800db7c:	4611      	mov	r1, r2
 800db7e:	4618      	mov	r0, r3
 800db80:	f7fd f84f 	bl	800ac22 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800db8a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800db8e:	687a      	ldr	r2, [r7, #4]
 800db90:	4618      	mov	r0, r3
 800db92:	f000 fbbd 	bl	800e310 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>
 800db96:	f107 0314 	add.w	r3, r7, #20
 800db9a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800db9e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800dba2:	4618      	mov	r0, r3
 800dba4:	f000 fbc7 	bl	800e336 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800dba8:	f107 0314 	add.w	r3, r7, #20
 800dbac:	4618      	mov	r0, r3
 800dbae:	f000 fbf0 	bl	800e392 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>
 800dbb2:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dbb6:	eeb0 0a67 	vmov.f32	s0, s15
 800dbba:	3790      	adds	r7, #144	; 0x90
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800dbc8:	2200      	movs	r2, #0
 800dbca:	2101      	movs	r1, #1
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7fe fe58 	bl	800c882 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 fbf8 	bl	800e3c8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>
  }
 800dbd8:	bf00      	nop
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800dbe0:	b590      	push	{r4, r7, lr}
 800dbe2:	b085      	sub	sp, #20
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800dbec:	68b8      	ldr	r0, [r7, #8]
 800dbee:	f7f7 fc70 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f7f7 fed1 	bl	800599c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	4621      	mov	r1, r4
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	f000 fc15 	bl	800e430 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>
}
 800dc06:	68f8      	ldr	r0, [r7, #12]
 800dc08:	3714      	adds	r7, #20
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd90      	pop	{r4, r7, pc}

0800dc0e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b086      	sub	sp, #24
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	60f8      	str	r0, [r7, #12]
 800dc16:	60b9      	str	r1, [r7, #8]
 800dc18:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	68b9      	ldr	r1, [r7, #8]
 800dc22:	6978      	ldr	r0, [r7, #20]
 800dc24:	f000 fc32 	bl	800e48c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800dc28:	bf00      	nop
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800dc30:	b480      	push	{r7}
 800dc32:	b085      	sub	sp, #20
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	60f8      	str	r0, [r7, #12]
 800dc38:	60b9      	str	r1, [r7, #8]
 800dc3a:	607a      	str	r2, [r7, #4]
 800dc3c:	603b      	str	r3, [r7, #0]
 800dc3e:	bf00      	nop
 800dc40:	3714      	adds	r7, #20
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr

0800dc4a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800dc4a:	b580      	push	{r7, lr}
 800dc4c:	b082      	sub	sp, #8
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800dc54:	6839      	ldr	r1, [r7, #0]
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 fc2b 	bl	800e4b2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800dc5c:	bf00      	nop
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800dc64:	b590      	push	{r4, r7, lr}
 800dc66:	b085      	sub	sp, #20
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681c      	ldr	r4, [r3, #0]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7f9 f846 	bl	8006d08 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	fb03 f202 	mul.w	r2, r3, r2
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	4413      	add	r3, r2
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	4423      	add	r3, r4
  }
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3714      	adds	r7, #20
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd90      	pop	{r4, r7, pc}

0800dc94 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 fc29 	bl	800e4f4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	4618      	mov	r0, r3
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	607a      	str	r2, [r7, #4]
 800dcb8:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	f7ff ffea 	bl	800dc94 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	68ba      	ldr	r2, [r7, #8]
 800dcc4:	601a      	str	r2, [r3, #0]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	3304      	adds	r3, #4
 800dcca:	6879      	ldr	r1, [r7, #4]
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7f8 fd9b 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	3305      	adds	r3, #5
 800dcd6:	6839      	ldr	r1, [r7, #0]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7f8 fd95 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d011      	beq.n	800dd08 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	db08      	blt.n	800dcfc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d105      	bne.n	800dcfc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	db02      	blt.n	800dcfc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d005      	beq.n	800dd08 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800dcfc:	4b07      	ldr	r3, [pc, #28]	; (800dd1c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800dcfe:	4a08      	ldr	r2, [pc, #32]	; (800dd20 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800dd00:	21b0      	movs	r1, #176	; 0xb0
 800dd02:	4808      	ldr	r0, [pc, #32]	; (800dd24 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800dd04:	f00f fef2 	bl	801daec <__assert_func>
      checkSanity<Derived>();
 800dd08:	2100      	movs	r1, #0
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f000 fbfd 	bl	800e50a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	4618      	mov	r0, r3
 800dd14:	3710      	adds	r7, #16
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	08026078 	.word	0x08026078
 800dd20:	080263e8 	.word	0x080263e8
 800dd24:	08026228 	.word	0x08026228

0800dd28 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7f9 f96b 	bl	8007010 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800dd3a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	615a      	str	r2, [r3, #20]
    }
 800dd40:	bf00      	nop
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>:
 800dd48:	b480      	push	{r7}
 800dd4a:	b083      	sub	sp, #12
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	2301      	movs	r3, #1
 800dd52:	4618      	mov	r0, r3
 800dd54:	370c      	adds	r7, #12
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr

0800dd5e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
 800dd5e:	b580      	push	{r7, lr}
 800dd60:	b082      	sub	sp, #8
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	6078      	str	r0, [r7, #4]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 fbda 	bl	800e520 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
	...

0800dd78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
 800dd84:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f7ff ffe9 	bl	800dd5e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	68ba      	ldr	r2, [r7, #8]
 800dd90:	601a      	str	r2, [r3, #0]
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	3304      	adds	r3, #4
 800dd96:	6879      	ldr	r1, [r7, #4]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7f8 fd35 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	3305      	adds	r3, #5
 800dda2:	6839      	ldr	r1, [r7, #0]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7f8 fd2f 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d011      	beq.n	800ddd4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	db08      	blt.n	800ddc8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d105      	bne.n	800ddc8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	db02      	blt.n	800ddc8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d005      	beq.n	800ddd4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800ddc8:	4b07      	ldr	r3, [pc, #28]	; (800dde8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800ddca:	4a08      	ldr	r2, [pc, #32]	; (800ddec <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800ddcc:	21b0      	movs	r1, #176	; 0xb0
 800ddce:	4808      	ldr	r0, [pc, #32]	; (800ddf0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800ddd0:	f00f fe8c 	bl	801daec <__assert_func>
      checkSanity<Derived>();
 800ddd4:	2100      	movs	r1, #0
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	f000 fbad 	bl	800e536 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	4618      	mov	r0, r3
 800dde0:	3710      	adds	r7, #16
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
 800dde6:	bf00      	nop
 800dde8:	08026078 	.word	0x08026078
 800ddec:	080264ec 	.word	0x080264ec
 800ddf0:	08026228 	.word	0x08026228

0800ddf4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>:
    void init()
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	689b      	ldr	r3, [r3, #8]
 800de00:	4618      	mov	r0, r3
 800de02:	f7fd fe3d 	bl	800ba80 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 800de06:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	611a      	str	r2, [r3, #16]
    }
 800de0c:	bf00      	nop
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 fb94 	bl	800e54c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6839      	ldr	r1, [r7, #0]
 800de28:	4618      	mov	r0, r3
 800de2a:	f000 fb9a 	bl	800e562 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4618      	mov	r0, r3
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	687a      	ldr	r2, [r7, #4]
 800de48:	68b9      	ldr	r1, [r7, #8]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f000 fbb1 	bl	800e5b2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800de50:	eef0 7a40 	vmov.f32	s15, s0
 800de54:	eeb0 0a67 	vmov.f32	s0, s15
 800de58:	3710      	adds	r7, #16
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800de5e:	b590      	push	{r4, r7, lr}
 800de60:	b087      	sub	sp, #28
 800de62:	af00      	add	r7, sp, #0
 800de64:	60f8      	str	r0, [r7, #12]
 800de66:	60b9      	str	r1, [r7, #8]
 800de68:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800de6a:	68b8      	ldr	r0, [r7, #8]
 800de6c:	f000 fbd1 	bl	800e612 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>
 800de70:	4604      	mov	r4, r0
 800de72:	f107 0310 	add.w	r3, r7, #16
 800de76:	4618      	mov	r0, r3
 800de78:	f7f8 ff51 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800de7c:	f107 0310 	add.w	r3, r7, #16
 800de80:	461a      	mov	r2, r3
 800de82:	4621      	mov	r1, r4
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f000 fbd0 	bl	800e62a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800de8a:	68b8      	ldr	r0, [r7, #8]
 800de8c:	f000 fbde 	bl	800e64c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>
 800de90:	4604      	mov	r4, r0
 800de92:	f107 0314 	add.w	r3, r7, #20
 800de96:	4618      	mov	r0, r3
 800de98:	f7ff fbb0 	bl	800d5fc <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800de9c:	f107 0314 	add.w	r3, r7, #20
 800dea0:	461a      	mov	r2, r3
 800dea2:	4621      	mov	r1, r4
 800dea4:	68f8      	ldr	r0, [r7, #12]
 800dea6:	f000 fbdd 	bl	800e664 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800deaa:	bf00      	nop
 800deac:	371c      	adds	r7, #28
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd90      	pop	{r4, r7, pc}
	...

0800deb4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800deb4:	b590      	push	{r4, r7, lr}
 800deb6:	b085      	sub	sp, #20
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7f6 fefb 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800dec8:	4604      	mov	r4, r0
 800deca:	68b8      	ldr	r0, [r7, #8]
 800decc:	f7f8 fa95 	bl	80063fa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 800ded0:	4603      	mov	r3, r0
 800ded2:	429c      	cmp	r4, r3
 800ded4:	d10a      	bne.n	800deec <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	4618      	mov	r0, r3
 800deda:	f7f6 fee5 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800dede:	4604      	mov	r4, r0
 800dee0:	68b8      	ldr	r0, [r7, #8]
 800dee2:	f7f8 fa98 	bl	8006416 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 800dee6:	4603      	mov	r3, r0
 800dee8:	429c      	cmp	r4, r3
 800deea:	d005      	beq.n	800def8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800deec:	4b0b      	ldr	r3, [pc, #44]	; (800df1c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800deee:	4a0c      	ldr	r2, [pc, #48]	; (800df20 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800def0:	21b0      	movs	r1, #176	; 0xb0
 800def2:	480c      	ldr	r0, [pc, #48]	; (800df24 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800def4:	f00f fdfa 	bl	801daec <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800def8:	68b8      	ldr	r0, [r7, #8]
 800defa:	f000 fbc4 	bl	800e686 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>
 800defe:	4604      	mov	r4, r0
 800df00:	68b8      	ldr	r0, [r7, #8]
 800df02:	f000 fbcc 	bl	800e69e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>
 800df06:	4603      	mov	r3, r0
 800df08:	461a      	mov	r2, r3
 800df0a:	4621      	mov	r1, r4
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	f000 fbd2 	bl	800e6b6 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>
  }
 800df12:	bf00      	nop
 800df14:	3714      	adds	r7, #20
 800df16:	46bd      	mov	sp, r7
 800df18:	bd90      	pop	{r4, r7, pc}
 800df1a:	bf00      	nop
 800df1c:	080226e8 	.word	0x080226e8
 800df20:	080265f0 	.word	0x080265f0
 800df24:	08022be0 	.word	0x08022be0

0800df28 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800df28:	b5b0      	push	{r4, r5, r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800df34:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	4618      	mov	r0, r3
 800df3a:	f7f9 fff9 	bl	8007f30 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800df3e:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800df40:	68b8      	ldr	r0, [r7, #8]
 800df42:	f7fa fa2f 	bl	80083a4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800df46:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	fb02 f303 	mul.w	r3, r2, r3
 800df4e:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800df50:	441d      	add	r5, r3
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	4618      	mov	r0, r3
 800df56:	f7f6 feb2 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800df5a:	4602      	mov	r2, r0
 800df5c:	2301      	movs	r3, #1
 800df5e:	4629      	mov	r1, r5
 800df60:	4620      	mov	r0, r4
 800df62:	f000 fbd3 	bl	800e70c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	68ba      	ldr	r2, [r7, #8]
 800df6a:	609a      	str	r2, [r3, #8]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	330c      	adds	r3, #12
 800df70:	2100      	movs	r1, #0
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff fcbc 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	3310      	adds	r3, #16
 800df7c:	6879      	ldr	r1, [r7, #4]
 800df7e:	4618      	mov	r0, r3
 800df80:	f7ff fcb6 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f000 fbff 	bl	800e788 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	4618      	mov	r0, r3
 800df8e:	3710      	adds	r7, #16
 800df90:	46bd      	mov	sp, r7
 800df92:	bdb0      	pop	{r4, r5, r7, pc}

0800df94 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6839      	ldr	r1, [r7, #0]
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f000 fc00 	bl	800e7a8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3708      	adds	r7, #8
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800dfb2:	b580      	push	{r7, lr}
 800dfb4:	b084      	sub	sp, #16
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
 800dfba:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800dfbc:	6839      	ldr	r1, [r7, #0]
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 fc04 	bl	800e7cc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>
 800dfc4:	eef0 7a40 	vmov.f32	s15, s0
 800dfc8:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800dfcc:	6839      	ldr	r1, [r7, #0]
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 fc0d 	bl	800e7ee <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>
 800dfd4:	eef0 7a40 	vmov.f32	s15, s0
 800dfd8:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800dfdc:	f107 020c 	add.w	r2, r7, #12
 800dfe0:	f107 0308 	add.w	r3, r7, #8
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	6838      	ldr	r0, [r7, #0]
 800dfe8:	f7fa fff9 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800dfec:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dff0:	eeb0 0a67 	vmov.f32	s0, s15
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800dffa:	b580      	push	{r7, lr}
 800dffc:	b082      	sub	sp, #8
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e002:	2201      	movs	r2, #1
 800e004:	2102      	movs	r1, #2
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f7fc fa4c 	bl	800a4a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 fc12 	bl	800e836 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800e012:	bf00      	nop
 800e014:	3708      	adds	r7, #8
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e01a:	b480      	push	{r7}
 800e01c:	b083      	sub	sp, #12
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
    }
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	4618      	mov	r0, r3
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f7f7 f9b5 	bl	80053a8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e03e:	4603      	mov	r3, r0
 800e040:	4618      	mov	r0, r3
 800e042:	f7fc fd77 	bl	800ab34 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e046:	4603      	mov	r3, r0
 800e048:	4618      	mov	r0, r3
 800e04a:	f7f8 ff10 	bl	8006e6e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800e04e:	4603      	mov	r3, r0
 800e050:	4618      	mov	r0, r3
 800e052:	3708      	adds	r7, #8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7f7 f9a1 	bl	80053a8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e066:	4603      	mov	r3, r0
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fc fd63 	bl	800ab34 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e06e:	4603      	mov	r3, r0
 800e070:	4618      	mov	r0, r3
 800e072:	f7ff fc5c 	bl	800d92e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800e076:	4603      	mov	r3, r0
 800e078:	4618      	mov	r0, r3
 800e07a:	3708      	adds	r7, #8
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f7f7 f98d 	bl	80053a8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e08e:	4603      	mov	r3, r0
 800e090:	4618      	mov	r0, r3
 800e092:	f7fc fd4f 	bl	800ab34 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e096:	4603      	mov	r3, r0
 800e098:	4618      	mov	r0, r3
 800e09a:	f7f8 ffb9 	bl	8007010 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3708      	adds	r7, #8
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 fbd0 	bl	800e856 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60f8      	str	r0, [r7, #12]
 800e0c8:	60b9      	str	r1, [r7, #8]
 800e0ca:	607a      	str	r2, [r7, #4]
 800e0cc:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f7ff ffea 	bl	800e0a8 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	68ba      	ldr	r2, [r7, #8]
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	3304      	adds	r3, #4
 800e0de:	6879      	ldr	r1, [r7, #4]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7f8 fb91 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	3305      	adds	r3, #5
 800e0ea:	6839      	ldr	r1, [r7, #0]
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7f8 fb8b 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d011      	beq.n	800e11c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	db08      	blt.n	800e110 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2b01      	cmp	r3, #1
 800e102:	d105      	bne.n	800e110 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	db02      	blt.n	800e110 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d005      	beq.n	800e11c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e110:	4b07      	ldr	r3, [pc, #28]	; (800e130 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800e112:	4a08      	ldr	r2, [pc, #32]	; (800e134 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800e114:	21b0      	movs	r1, #176	; 0xb0
 800e116:	4808      	ldr	r0, [pc, #32]	; (800e138 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800e118:	f00f fce8 	bl	801daec <__assert_func>
      checkSanity<Derived>();
 800e11c:	2100      	movs	r1, #0
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f000 fba4 	bl	800e86c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	08026078 	.word	0x08026078
 800e134:	0802696c 	.word	0x0802696c
 800e138:	08026228 	.word	0x08026228

0800e13c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b082      	sub	sp, #8
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	3308      	adds	r3, #8
 800e148:	4618      	mov	r0, r3
 800e14a:	f7ff ff99 	bl	800e080 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 800e14e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	615a      	str	r2, [r3, #20]
    }
 800e154:	bf00      	nop
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 fb8b 	bl	800e882 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6839      	ldr	r1, [r7, #0]
 800e170:	4618      	mov	r0, r3
 800e172:	f000 fb91 	bl	800e898 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>
  }
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4618      	mov	r0, r3
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	60b9      	str	r1, [r7, #8]
 800e18a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	68b9      	ldr	r1, [r7, #8]
 800e192:	4618      	mov	r0, r3
 800e194:	f000 fba8 	bl	800e8e8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>
 800e198:	eef0 7a40 	vmov.f32	s15, s0
 800e19c:	eeb0 0a67 	vmov.f32	s0, s15
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b082      	sub	sp, #8
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e1ae:	2202      	movs	r2, #2
 800e1b0:	2102      	movs	r1, #2
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7fb feaf 	bl	8009f16 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f000 fbc5 	bl	800e948 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>
  }
 800e1be:	bf00      	nop
 800e1c0:	3708      	adds	r7, #8
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e1c6:	b480      	push	{r7}
 800e1c8:	b083      	sub	sp, #12
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
    }
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	370c      	adds	r7, #12
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr

0800e1dc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
#endif
    }

    template<typename T>
    EIGEN_DEVICE_FUNC
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e1dc:	b480      	push	{r7}
 800e1de:	b083      	sub	sp, #12
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
    {}
 800e1e6:	bf00      	nop
 800e1e8:	370c      	adds	r7, #12
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr

0800e1f2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e1f2:	b480      	push	{r7}
 800e1f4:	b083      	sub	sp, #12
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
    }
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	370c      	adds	r7, #12
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr

0800e208 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e208:	b480      	push	{r7}
 800e20a:	b083      	sub	sp, #12
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
    {}
 800e212:	bf00      	nop
 800e214:	370c      	adds	r7, #12
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr

0800e21e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e21e:	b480      	push	{r7}
 800e220:	b083      	sub	sp, #12
 800e222:	af00      	add	r7, sp, #0
 800e224:	6078      	str	r0, [r7, #4]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	4618      	mov	r0, r3
 800e22a:	370c      	adds	r7, #12
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e234:	b590      	push	{r4, r7, lr}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	6039      	str	r1, [r7, #0]
 800e23e:	687c      	ldr	r4, [r7, #4]
 800e240:	6838      	ldr	r0, [r7, #0]
 800e242:	f000 fb8b 	bl	800e95c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>
 800e246:	4603      	mov	r3, r0
 800e248:	4619      	mov	r1, r3
 800e24a:	4620      	mov	r0, r4
 800e24c:	f7f7 f862 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	1d1c      	adds	r4, r3, #4
 800e254:	6838      	ldr	r0, [r7, #0]
 800e256:	f000 fb8d 	bl	800e974 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>
 800e25a:	4603      	mov	r3, r0
 800e25c:	4619      	mov	r1, r3
 800e25e:	4620      	mov	r0, r4
 800e260:	f000 fb9f 	bl	800e9a2 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f103 040c 	add.w	r4, r3, #12
 800e26a:	6838      	ldr	r0, [r7, #0]
 800e26c:	f000 fb8d 	bl	800e98a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>
 800e270:	4603      	mov	r3, r0
 800e272:	4619      	mov	r1, r3
 800e274:	4620      	mov	r0, r4
 800e276:	f000 fba3 	bl	800e9c0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4618      	mov	r0, r3
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	bd90      	pop	{r4, r7, pc}

0800e284 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	68ba      	ldr	r2, [r7, #8]
 800e294:	6879      	ldr	r1, [r7, #4]
 800e296:	4618      	mov	r0, r3
 800e298:	f000 fba1 	bl	800e9de <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800e29c:	eef0 7a40 	vmov.f32	s15, s0
 800e2a0:	eeb0 0a67 	vmov.f32	s0, s15
 800e2a4:	3710      	adds	r7, #16
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b082      	sub	sp, #8
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
 800e2b2:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	2100      	movs	r1, #0
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f7ff ffe3 	bl	800e284 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e2be:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e2c2:	eeb0 0a67 	vmov.f32	s0, s15
 800e2c6:	3708      	adds	r7, #8
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e2d6:	2202      	movs	r2, #2
 800e2d8:	2100      	movs	r1, #0
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f7ff ffd2 	bl	800e284 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e2e0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e2e4:	eeb0 0a67 	vmov.f32	s0, s15
 800e2e8:	3708      	adds	r7, #8
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b086      	sub	sp, #24
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	60f8      	str	r0, [r7, #12]
 800e2f6:	60b9      	str	r1, [r7, #8]
 800e2f8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	68b9      	ldr	r1, [r7, #8]
 800e302:	6978      	ldr	r0, [r7, #20]
 800e304:	f000 fb9b 	bl	800ea3e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800e308:	bf00      	nop
 800e30a:	3718      	adds	r7, #24
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800e31c:	68b8      	ldr	r0, [r7, #8]
 800e31e:	f7f7 f9df 	bl	80056e0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800e322:	4603      	mov	r3, r0
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	4619      	mov	r1, r3
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f000 fbc3 	bl	800eab4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>
}
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800e336:	b5b0      	push	{r4, r5, r7, lr}
 800e338:	b086      	sub	sp, #24
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	60f8      	str	r0, [r7, #12]
 800e33e:	60b9      	str	r1, [r7, #8]
 800e340:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800e342:	68b8      	ldr	r0, [r7, #8]
 800e344:	f7fd f924 	bl	800b590 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800e348:	4604      	mov	r4, r0
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fbda 	bl	800eb04 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>
 800e350:	4605      	mov	r5, r0
 800e352:	f107 0314 	add.w	r3, r7, #20
 800e356:	4618      	mov	r0, r3
 800e358:	f7f6 ff52 	bl	8005200 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800e35c:	f107 0314 	add.w	r3, r7, #20
 800e360:	462a      	mov	r2, r5
 800e362:	4621      	mov	r1, r4
 800e364:	68f8      	ldr	r0, [r7, #12]
 800e366:	f000 fc07 	bl	800eb78 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	3718      	adds	r7, #24
 800e36e:	46bd      	mov	sp, r7
 800e370:	bdb0      	pop	{r4, r5, r7, pc}

0800e372 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800e372:	b580      	push	{r7, lr}
 800e374:	b082      	sub	sp, #8
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 fc5a 	bl	800ec34 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e380:	4603      	mov	r3, r0
 800e382:	4618      	mov	r0, r3
 800e384:	f000 fc61 	bl	800ec4a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>
 800e388:	4603      	mov	r3, r0
 800e38a:	4618      	mov	r0, r3
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800e392:	b590      	push	{r4, r7, lr}
 800e394:	b085      	sub	sp, #20
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 fc4a 	bl	800ec34 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e3a0:	4604      	mov	r4, r0
 800e3a2:	f107 030c 	add.w	r3, r7, #12
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7f7 fa21 	bl	80057ee <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800e3ac:	f107 030c 	add.w	r3, r7, #12
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f000 fcc6 	bl	800ed44 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800e3b8:	eef0 7a40 	vmov.f32	s15, s0
 800e3bc:	bf00      	nop
}
 800e3be:	eeb0 0a67 	vmov.f32	s0, s15
 800e3c2:	3714      	adds	r7, #20
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd90      	pop	{r4, r7, pc}

0800e3c8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	2101      	movs	r1, #1
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f7fe fa54 	bl	800c882 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 fcf8 	bl	800edd0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>
  }
 800e3e0:	bf00      	nop
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 fcfd 	bl	800edf0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>:
class dense_product_base
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7ff ffed 	bl	800e3e8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	4618      	mov	r0, r3
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f7ff ffed 	bl	800e400 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4618      	mov	r0, r3
 800e42a:	3708      	adds	r7, #8
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800e430:	b590      	push	{r4, r7, lr}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f7ff ffeb 	bl	800e418 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	68ba      	ldr	r2, [r7, #8]
 800e446:	601a      	str	r2, [r3, #0]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	3304      	adds	r3, #4
 800e44c:	687a      	ldr	r2, [r7, #4]
 800e44e:	6812      	ldr	r2, [r2, #0]
 800e450:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	4618      	mov	r0, r3
 800e456:	f7f6 fc27 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e45a:	4604      	mov	r4, r0
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f7f7 facc 	bl	80059fa <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800e462:	4603      	mov	r3, r0
 800e464:	429c      	cmp	r4, r3
 800e466:	d005      	beq.n	800e474 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x44>
 800e468:	4b05      	ldr	r3, [pc, #20]	; (800e480 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x50>)
 800e46a:	4a06      	ldr	r2, [pc, #24]	; (800e484 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x54>)
 800e46c:	2160      	movs	r1, #96	; 0x60
 800e46e:	4806      	ldr	r0, [pc, #24]	; (800e488 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x58>)
 800e470:	f00f fb3c 	bl	801daec <__assert_func>
 800e474:	bf00      	nop
    }
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	4618      	mov	r0, r3
 800e47a:	3714      	adds	r7, #20
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd90      	pop	{r4, r7, pc}
 800e480:	0801fc14 	.word	0x0801fc14
 800e484:	08026a84 	.word	0x08026a84
 800e488:	0801ff64 	.word	0x0801ff64

0800e48c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800e498:	68b9      	ldr	r1, [r7, #8]
 800e49a:	68f8      	ldr	r0, [r7, #12]
 800e49c:	f000 fcb3 	bl	800ee06 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	68b9      	ldr	r1, [r7, #8]
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	f000 fd12 	bl	800eece <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e4aa:	bf00      	nop
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800e4b2:	b5b0      	push	{r4, r5, r7, lr}
 800e4b4:	b084      	sub	sp, #16
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
 800e4ba:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f7fd fab8 	bl	800ba32 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	6838      	ldr	r0, [r7, #0]
 800e4c6:	f7f7 fc41 	bl	8005d4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800e4ca:	4605      	mov	r5, r0
 800e4cc:	f107 030c 	add.w	r3, r7, #12
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7f8 fc24 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800e4d6:	f107 030c 	add.w	r3, r7, #12
 800e4da:	461a      	mov	r2, r3
 800e4dc:	4629      	mov	r1, r5
 800e4de:	4620      	mov	r0, r4
 800e4e0:	f000 fd2d 	bl	800ef3e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7fd faa4 	bl	800ba32 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800e4ea:	4603      	mov	r3, r0
    }
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3710      	adds	r7, #16
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bdb0      	pop	{r4, r5, r7, pc}

0800e4f4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e4f4:	b480      	push	{r7}
 800e4f6:	b083      	sub	sp, #12
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
    }
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	4618      	mov	r0, r3
 800e500:	370c      	adds	r7, #12
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr

0800e50a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e50a:	b480      	push	{r7}
 800e50c:	b083      	sub	sp, #12
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
 800e512:	6039      	str	r1, [r7, #0]
    {}
 800e514:	bf00      	nop
 800e516:	370c      	adds	r7, #12
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr

0800e520 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
    }
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	4618      	mov	r0, r3
 800e52c:	370c      	adds	r7, #12
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr

0800e536 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e536:	b480      	push	{r7}
 800e538:	b083      	sub	sp, #12
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
 800e53e:	6039      	str	r1, [r7, #0]
    {}
 800e540:	bf00      	nop
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr

0800e54c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	4618      	mov	r0, r3
 800e558:	370c      	adds	r7, #12
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr

0800e562 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e562:	b590      	push	{r4, r7, lr}
 800e564:	b083      	sub	sp, #12
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
 800e56a:	6039      	str	r1, [r7, #0]
 800e56c:	687c      	ldr	r4, [r7, #4]
 800e56e:	6838      	ldr	r0, [r7, #0]
 800e570:	f000 fcf6 	bl	800ef60 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>
 800e574:	4603      	mov	r3, r0
 800e576:	4619      	mov	r1, r3
 800e578:	4620      	mov	r0, r4
 800e57a:	f7f6 fecb 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	1d1c      	adds	r4, r3, #4
 800e582:	6838      	ldr	r0, [r7, #0]
 800e584:	f000 fcf8 	bl	800ef78 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>
 800e588:	4603      	mov	r3, r0
 800e58a:	4619      	mov	r1, r3
 800e58c:	4620      	mov	r0, r4
 800e58e:	f000 fd0a 	bl	800efa6 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f103 040c 	add.w	r4, r3, #12
 800e598:	6838      	ldr	r0, [r7, #0]
 800e59a:	f000 fcf8 	bl	800ef8e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	f000 fd0e 	bl	800efc4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	370c      	adds	r7, #12
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd90      	pop	{r4, r7, pc}

0800e5b2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e5b2:	b590      	push	{r4, r7, lr}
 800e5b4:	b087      	sub	sp, #28
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	60f8      	str	r0, [r7, #12]
 800e5ba:	60b9      	str	r1, [r7, #8]
 800e5bc:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f000 fd0e 	bl	800efe2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	3304      	adds	r3, #4
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	68b9      	ldr	r1, [r7, #8]
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f000 fd11 	bl	800eff8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e5d6:	eef0 7a40 	vmov.f32	s15, s0
 800e5da:	edc7 7a04 	vstr	s15, [r7, #16]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	330c      	adds	r3, #12
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	68b9      	ldr	r1, [r7, #8]
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f000 fd19 	bl	800f01e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>
 800e5ec:	eef0 7a40 	vmov.f32	s15, s0
 800e5f0:	edc7 7a05 	vstr	s15, [r7, #20]
 800e5f4:	f107 0214 	add.w	r2, r7, #20
 800e5f8:	f107 0310 	add.w	r3, r7, #16
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	4620      	mov	r0, r4
 800e600:	f000 fd2e 	bl	800f060 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e604:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e608:	eeb0 0a67 	vmov.f32	s0, s15
 800e60c:	371c      	adds	r7, #28
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd90      	pop	{r4, r7, pc}

0800e612 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e612:	b480      	push	{r7}
 800e614:	b083      	sub	sp, #12
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4618      	mov	r0, r3
 800e620:	370c      	adds	r7, #12
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr

0800e62a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e62a:	b580      	push	{r7, lr}
 800e62c:	b086      	sub	sp, #24
 800e62e:	af00      	add	r7, sp, #0
 800e630:	60f8      	str	r0, [r7, #12]
 800e632:	60b9      	str	r1, [r7, #8]
 800e634:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e63a:	687a      	ldr	r2, [r7, #4]
 800e63c:	68b9      	ldr	r1, [r7, #8]
 800e63e:	6978      	ldr	r0, [r7, #20]
 800e640:	f000 fd23 	bl	800f08a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800e644:	bf00      	nop
 800e646:	3718      	adds	r7, #24
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800e64c:	b480      	push	{r7}
 800e64e:	b083      	sub	sp, #12
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	3304      	adds	r3, #4
 800e658:	4618      	mov	r0, r3
 800e65a:	370c      	adds	r7, #12
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr

0800e664 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e664:	b580      	push	{r7, lr}
 800e666:	b086      	sub	sp, #24
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	68b9      	ldr	r1, [r7, #8]
 800e678:	6978      	ldr	r0, [r7, #20]
 800e67a:	f000 fd19 	bl	800f0b0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800e67e:	bf00      	nop
 800e680:	3718      	adds	r7, #24
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800e686:	b480      	push	{r7}
 800e688:	b083      	sub	sp, #12
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4618      	mov	r0, r3
 800e694:	370c      	adds	r7, #12
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr

0800e69e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800e69e:	b480      	push	{r7}
 800e6a0:	b083      	sub	sp, #12
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	685b      	ldr	r3, [r3, #4]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	370c      	adds	r7, #12
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr

0800e6b6 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800e6b6:	b580      	push	{r7, lr}
 800e6b8:	b088      	sub	sp, #32
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	60f8      	str	r0, [r7, #12]
 800e6be:	60b9      	str	r1, [r7, #8]
 800e6c0:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::sub_assign_op<typename Dst::Scalar,Scalar>());
 800e6c2:	f107 0314 	add.w	r3, r7, #20
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	68b9      	ldr	r1, [r7, #8]
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f000 fd2a 	bl	800f124 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 800e6d0:	f107 031c 	add.w	r3, r7, #28
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fe ff91 	bl	800d5fc <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800e6da:	f107 021c 	add.w	r2, r7, #28
 800e6de:	f107 0314 	add.w	r3, r7, #20
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	68f8      	ldr	r0, [r7, #12]
 800e6e6:	f000 fd34 	bl	800f152 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e6ea:	bf00      	nop
 800e6ec:	3720      	adds	r7, #32
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b082      	sub	sp, #8
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 fd3a 	bl	800f174 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	4618      	mov	r0, r3
 800e704:	3708      	adds	r7, #8
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
	...

0800e70c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
 800e718:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e71a:	68f8      	ldr	r0, [r7, #12]
 800e71c:	f7ff ffe9 	bl	800e6f2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	601a      	str	r2, [r3, #0]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	3304      	adds	r3, #4
 800e72a:	6879      	ldr	r1, [r7, #4]
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7f8 f851 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	3305      	adds	r3, #5
 800e736:	6839      	ldr	r1, [r7, #0]
 800e738:	4618      	mov	r0, r3
 800e73a:	f7f8 f865 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d011      	beq.n	800e768 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2b00      	cmp	r3, #0
 800e748:	db08      	blt.n	800e75c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2b03      	cmp	r3, #3
 800e74e:	d105      	bne.n	800e75c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	db02      	blt.n	800e75c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	2b01      	cmp	r3, #1
 800e75a:	d005      	beq.n	800e768 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e75c:	4b07      	ldr	r3, [pc, #28]	; (800e77c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800e75e:	4a08      	ldr	r2, [pc, #32]	; (800e780 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800e760:	21b0      	movs	r1, #176	; 0xb0
 800e762:	4808      	ldr	r0, [pc, #32]	; (800e784 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800e764:	f00f f9c2 	bl	801daec <__assert_func>
      checkSanity<Derived>();
 800e768:	2100      	movs	r1, #0
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f000 fd0d 	bl	800f18a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	4618      	mov	r0, r3
 800e774:	3710      	adds	r7, #16
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	08026078 	.word	0x08026078
 800e780:	08026bd0 	.word	0x08026bd0
 800e784:	08026228 	.word	0x08026228

0800e788 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	689b      	ldr	r3, [r3, #8]
 800e794:	4618      	mov	r0, r3
 800e796:	f7f9 fe05 	bl	80083a4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800e79a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	615a      	str	r2, [r3, #20]
    }
 800e7a0:	bf00      	nop
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fcf4 	bl	800f1a0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6839      	ldr	r1, [r7, #0]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f000 fcfa 	bl	800f1b6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3708      	adds	r7, #8
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	2100      	movs	r1, #0
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 fd13 	bl	800f206 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e7e0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e7e4:	eeb0 0a67 	vmov.f32	s0, s15
 800e7e8:	3708      	adds	r7, #8
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}

0800e7ee <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b084      	sub	sp, #16
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	6078      	str	r0, [r7, #4]
 800e7f6:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e7f8:	6839      	ldr	r1, [r7, #0]
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f000 fd16 	bl	800f22c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>
 800e800:	eef0 7a40 	vmov.f32	s15, s0
 800e804:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800e808:	6839      	ldr	r1, [r7, #0]
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 fd1f 	bl	800f24e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>
 800e810:	eef0 7a40 	vmov.f32	s15, s0
 800e814:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e818:	f107 020c 	add.w	r2, r7, #12
 800e81c:	f107 0308 	add.w	r3, r7, #8
 800e820:	4619      	mov	r1, r3
 800e822:	6838      	ldr	r0, [r7, #0]
 800e824:	f7fa fbdb 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800e828:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e82c:	eeb0 0a67 	vmov.f32	s0, s15
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e836:	b580      	push	{r7, lr}
 800e838:	b082      	sub	sp, #8
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e83e:	2202      	movs	r2, #2
 800e840:	2102      	movs	r1, #2
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7fb fe2e 	bl	800a4a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 fd11 	bl	800f270 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800e84e:	bf00      	nop
 800e850:	3708      	adds	r7, #8
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e856:	b480      	push	{r7}
 800e858:	b083      	sub	sp, #12
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
    }
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	4618      	mov	r0, r3
 800e862:	370c      	adds	r7, #12
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e86c:	b480      	push	{r7}
 800e86e:	b083      	sub	sp, #12
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
    {}
 800e876:	bf00      	nop
 800e878:	370c      	adds	r7, #12
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr

0800e882 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e882:	b480      	push	{r7}
 800e884:	b083      	sub	sp, #12
 800e886:	af00      	add	r7, sp, #0
 800e888:	6078      	str	r0, [r7, #4]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4618      	mov	r0, r3
 800e88e:	370c      	adds	r7, #12
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr

0800e898 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e898:	b590      	push	{r4, r7, lr}
 800e89a:	b083      	sub	sp, #12
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
 800e8a2:	687c      	ldr	r4, [r7, #4]
 800e8a4:	6838      	ldr	r0, [r7, #0]
 800e8a6:	f000 fced 	bl	800f284 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	f7f6 fd30 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	1d1c      	adds	r4, r3, #4
 800e8b8:	6838      	ldr	r0, [r7, #0]
 800e8ba:	f000 fcef 	bl	800f29c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	f000 fd02 	bl	800f2cc <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f103 0420 	add.w	r4, r3, #32
 800e8ce:	6838      	ldr	r0, [r7, #0]
 800e8d0:	f000 fcf0 	bl	800f2b4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	4620      	mov	r0, r4
 800e8da:	f000 fd06 	bl	800f2ea <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd90      	pop	{r4, r7, pc}

0800e8e8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e8e8:	b590      	push	{r4, r7, lr}
 800e8ea:	b087      	sub	sp, #28
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f000 fd06 	bl	800f308 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	3304      	adds	r3, #4
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	68b9      	ldr	r1, [r7, #8]
 800e906:	4618      	mov	r0, r3
 800e908:	f000 fd09 	bl	800f31e <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e90c:	eef0 7a40 	vmov.f32	s15, s0
 800e910:	edc7 7a04 	vstr	s15, [r7, #16]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	3320      	adds	r3, #32
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	68b9      	ldr	r1, [r7, #8]
 800e91c:	4618      	mov	r0, r3
 800e91e:	f000 fd11 	bl	800f344 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 800e922:	eef0 7a40 	vmov.f32	s15, s0
 800e926:	edc7 7a05 	vstr	s15, [r7, #20]
 800e92a:	f107 0214 	add.w	r2, r7, #20
 800e92e:	f107 0310 	add.w	r3, r7, #16
 800e932:	4619      	mov	r1, r3
 800e934:	4620      	mov	r0, r4
 800e936:	f000 fb93 	bl	800f060 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e93a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e93e:	eeb0 0a67 	vmov.f32	s0, s15
 800e942:	371c      	adds	r7, #28
 800e944:	46bd      	mov	sp, r7
 800e946:	bd90      	pop	{r4, r7, pc}

0800e948 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	bf00      	nop
 800e952:	370c      	adds	r7, #12
 800e954:	46bd      	mov	sp, r7
 800e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95a:	4770      	bx	lr

0800e95c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800e95c:	b480      	push	{r7}
 800e95e:	b083      	sub	sp, #12
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	3330      	adds	r3, #48	; 0x30
 800e968:	4618      	mov	r0, r3
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	4618      	mov	r0, r3
 800e980:	370c      	adds	r7, #12
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr

0800e98a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800e98a:	b480      	push	{r7}
 800e98c:	b083      	sub	sp, #12
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	3318      	adds	r3, #24
 800e996:	4618      	mov	r0, r3
 800e998:	370c      	adds	r7, #12
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr

0800e9a2 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b082      	sub	sp, #8
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
 800e9aa:	6039      	str	r1, [r7, #0]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6839      	ldr	r1, [r7, #0]
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f000 fce8 	bl	800f386 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3708      	adds	r7, #8
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>:
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6839      	ldr	r1, [r7, #0]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f000 fce8 	bl	800f3a4 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3708      	adds	r7, #8
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e9de:	b590      	push	{r4, r7, lr}
 800e9e0:	b087      	sub	sp, #28
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	60f8      	str	r0, [r7, #12]
 800e9e6:	60b9      	str	r1, [r7, #8]
 800e9e8:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f000 fce8 	bl	800f3c2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	3304      	adds	r3, #4
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	68b9      	ldr	r1, [r7, #8]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f000 fceb 	bl	800f3d8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800ea02:	eef0 7a40 	vmov.f32	s15, s0
 800ea06:	edc7 7a04 	vstr	s15, [r7, #16]
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	330c      	adds	r3, #12
 800ea0e:	687a      	ldr	r2, [r7, #4]
 800ea10:	68b9      	ldr	r1, [r7, #8]
 800ea12:	4618      	mov	r0, r3
 800ea14:	f000 fcf3 	bl	800f3fe <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>
 800ea18:	eef0 7a40 	vmov.f32	s15, s0
 800ea1c:	edc7 7a05 	vstr	s15, [r7, #20]
 800ea20:	f107 0214 	add.w	r2, r7, #20
 800ea24:	f107 0310 	add.w	r3, r7, #16
 800ea28:	4619      	mov	r1, r3
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f000 fb18 	bl	800f060 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800ea30:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ea34:	eeb0 0a67 	vmov.f32	s0, s15
 800ea38:	371c      	adds	r7, #28
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd90      	pop	{r4, r7, pc}

0800ea3e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800ea3e:	b590      	push	{r4, r7, lr}
 800ea40:	b087      	sub	sp, #28
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	60f8      	str	r0, [r7, #12]
 800ea46:	60b9      	str	r1, [r7, #8]
 800ea48:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800ea4a:	68b8      	ldr	r0, [r7, #8]
 800ea4c:	f7f7 ff9e 	bl	800698c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800ea50:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800ea52:	68b8      	ldr	r0, [r7, #8]
 800ea54:	f7f6 fe73 	bl	800573e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800ea58:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7f6 f92e 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800ea62:	4602      	mov	r2, r0
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d107      	bne.n	800ea7a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x3c>
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7f6 f91b 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ea72:	4602      	mov	r2, r0
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d001      	beq.n	800ea7e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x40>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e000      	b.n	800ea80 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x42>
 800ea7e:	2300      	movs	r3, #0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d005      	beq.n	800ea90 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x52>
      dst.resize(dstRows, dstCols);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	693a      	ldr	r2, [r7, #16]
 800ea88:	6979      	ldr	r1, [r7, #20]
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7f9 f830 	bl	8007af0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800ea90:	68b8      	ldr	r0, [r7, #8]
 800ea92:	f000 fcd5 	bl	800f440 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>
 800ea96:	4604      	mov	r4, r0
 800ea98:	68b8      	ldr	r0, [r7, #8]
 800ea9a:	f000 fcdd 	bl	800f458 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	4621      	mov	r1, r4
 800eaa4:	68f8      	ldr	r0, [r7, #12]
 800eaa6:	f000 fce3 	bl	800f470 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>
  }
 800eaaa:	bf00      	nop
 800eaac:	371c      	adds	r7, #28
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd90      	pop	{r4, r7, pc}
	...

0800eab4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b084      	sub	sp, #16
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	607a      	str	r2, [r7, #4]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	68b9      	ldr	r1, [r7, #8]
 800eac6:	4618      	mov	r0, r3
 800eac8:	f000 fcf0 	bl	800f4ac <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	db06      	blt.n	800eae0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x2c>
 800ead2:	68b8      	ldr	r0, [r7, #8]
 800ead4:	f7f7 ff68 	bl	80069a8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ead8:	4602      	mov	r2, r0
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	4293      	cmp	r3, r2
 800eade:	db05      	blt.n	800eaec <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x38>
 800eae0:	4b05      	ldr	r3, [pc, #20]	; (800eaf8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x44>)
 800eae2:	4a06      	ldr	r2, [pc, #24]	; (800eafc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x48>)
 800eae4:	2178      	movs	r1, #120	; 0x78
 800eae6:	4806      	ldr	r0, [pc, #24]	; (800eb00 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x4c>)
 800eae8:	f00f f800 	bl	801daec <__assert_func>
    }
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3710      	adds	r7, #16
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	080244d8 	.word	0x080244d8
 800eafc:	08026cd4 	.word	0x08026cd4
 800eb00:	0802465c 	.word	0x0802465c

0800eb04 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	370c      	adds	r7, #12
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr

0800eb1a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b082      	sub	sp, #8
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f000 fcd3 	bl	800f4ce <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3708      	adds	r7, #8
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b082      	sub	sp, #8
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f7ff ffed 	bl	800eb1a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	4618      	mov	r0, r3
 800eb44:	3708      	adds	r7, #8
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b082      	sub	sp, #8
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
 800eb52:	f7f7 fe7e 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800eb56:	4603      	mov	r3, r0
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3708      	adds	r7, #8
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	f7f7 fe7b 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3708      	adds	r7, #8
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
	...

0800eb78 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800eb78:	b5b0      	push	{r4, r5, r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
 800eb84:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800eb86:	68f8      	ldr	r0, [r7, #12]
 800eb88:	f7ff ffd3 	bl	800eb32 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>
 800eb8c:	68fa      	ldr	r2, [r7, #12]
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	4614      	mov	r4, r2
 800eb92:	461d      	mov	r5, r3
 800eb94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb98:	e895 0003 	ldmia.w	r5, {r0, r1}
 800eb9c:	e884 0003 	stmia.w	r4, {r0, r1}
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f103 0218 	add.w	r2, r3, #24
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4614      	mov	r4, r2
 800ebaa:	461d      	mov	r5, r3
 800ebac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebb0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ebb4:	e884 0003 	stmia.w	r4, {r0, r1}
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	3330      	adds	r3, #48	; 0x30
 800ebbc:	6839      	ldr	r1, [r7, #0]
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7f6 fba8 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800ebc4:	68b8      	ldr	r0, [r7, #8]
 800ebc6:	f7fc fd11 	bl	800b5ec <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800ebca:	4604      	mov	r4, r0
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7ff ffbb 	bl	800eb4a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	429c      	cmp	r4, r3
 800ebd8:	d10a      	bne.n	800ebf0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 800ebda:	68b8      	ldr	r0, [r7, #8]
 800ebdc:	f7fc fd13 	bl	800b606 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7ff ffbb 	bl	800eb60 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>
 800ebea:	4603      	mov	r3, r0
 800ebec:	429c      	cmp	r4, r3
 800ebee:	d005      	beq.n	800ebfc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 800ebf0:	4b05      	ldr	r3, [pc, #20]	; (800ec08 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 800ebf2:	4a06      	ldr	r2, [pc, #24]	; (800ec0c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 800ebf4:	2174      	movs	r1, #116	; 0x74
 800ebf6:	4806      	ldr	r0, [pc, #24]	; (800ec10 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 800ebf8:	f00e ff78 	bl	801daec <__assert_func>
    }
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3710      	adds	r7, #16
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bdb0      	pop	{r4, r5, r7, pc}
 800ec06:	bf00      	nop
 800ec08:	0801f954 	.word	0x0801f954
 800ec0c:	08026dc4 	.word	0x08026dc4
 800ec10:	0801fbb8 	.word	0x0801fbb8

0800ec14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f000 f809 	bl	800ec34 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800ec22:	4603      	mov	r3, r0
 800ec24:	4618      	mov	r0, r3
 800ec26:	f000 fc5d 	bl	800f4e4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3708      	adds	r7, #8
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	370c      	adds	r7, #12
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr

0800ec4a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b082      	sub	sp, #8
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7fc fcc9 	bl	800b5ec <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800ec5a:	4603      	mov	r3, r0
    }
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3708      	adds	r7, #8
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 fc60 	bl	800f532 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	4618      	mov	r0, r3
 800ec76:	3708      	adds	r7, #8
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7ff ffec 	bl	800ec64 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3708      	adds	r7, #8
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}

0800ec96 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b082      	sub	sp, #8
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7ff ffeb 	bl	800ec7c <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3708      	adds	r7, #8
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7ff ffeb 	bl	800ec96 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3708      	adds	r7, #8
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}

0800ecca <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800ecca:	b580      	push	{r7, lr}
 800eccc:	b082      	sub	sp, #8
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	6078      	str	r0, [r7, #4]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	330c      	adds	r3, #12
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7ff ffea 	bl	800ecb0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	3304      	adds	r3, #4
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fc fd79 	bl	800b7d8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	4618      	mov	r0, r3
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7ff ffe5 	bl	800ecca <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 fc0b 	bl	800f51c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3708      	adds	r7, #8
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7ff ffe8 	bl	800ecf0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	4618      	mov	r0, r3
 800ed24:	3708      	adds	r7, #8
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b082      	sub	sp, #8
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7ff ffeb 	bl	800ed10 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3708      	adds	r7, #8
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800ed44:	b580      	push	{r7, lr}
 800ed46:	ed2d 8b02 	vpush	{d8}
 800ed4a:	b088      	sub	sp, #32
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f7ff fb0d 	bl	800e372 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	dd05      	ble.n	800ed6a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f7ff ff58 	bl	800ec14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>
 800ed64:	4603      	mov	r3, r0
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	dc06      	bgt.n	800ed78 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800ed6a:	4b16      	ldr	r3, [pc, #88]	; (800edc4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800ed6c:	4a16      	ldr	r2, [pc, #88]	; (800edc8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800ed6e:	f240 119b 	movw	r1, #411	; 0x19b
 800ed72:	4816      	ldr	r0, [pc, #88]	; (800edcc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800ed74:	f00e feba 	bl	801daec <__assert_func>
 800ed78:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f7ff ff5a 	bl	800ec34 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800ed80:	4602      	mov	r2, r0
 800ed82:	f107 030c 	add.w	r3, r7, #12
 800ed86:	4611      	mov	r1, r2
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f000 fbb8 	bl	800f4fe <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7ff ff50 	bl	800ec34 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800ed94:	4602      	mov	r2, r0
 800ed96:	f107 030c 	add.w	r3, r7, #12
 800ed9a:	6839      	ldr	r1, [r7, #0]
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f000 fbd3 	bl	800f548 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800eda2:	eeb0 8a40 	vmov.f32	s16, s0
 800eda6:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800eda8:	f107 030c 	add.w	r3, r7, #12
 800edac:	4618      	mov	r0, r3
 800edae:	f7ff ffbc 	bl	800ed2a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800edb2:	eef0 7a48 	vmov.f32	s15, s16
}
 800edb6:	eeb0 0a67 	vmov.f32	s0, s15
 800edba:	3720      	adds	r7, #32
 800edbc:	46bd      	mov	sp, r7
 800edbe:	ecbd 8b02 	vpop	{d8}
 800edc2:	bd80      	pop	{r7, pc}
 800edc4:	080249d4 	.word	0x080249d4
 800edc8:	08027034 	.word	0x08027034
 800edcc:	08024be0 	.word	0x08024be0

0800edd0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800edd8:	2202      	movs	r2, #2
 800edda:	2101      	movs	r1, #1
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f7fd fd50 	bl	800c882 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f000 fbc1 	bl	800f56a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>
  }
 800ede8:	bf00      	nop
 800edea:	3708      	adds	r7, #8
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
    }
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	4618      	mov	r0, r3
 800edfc:	370c      	adds	r7, #12
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr

0800ee06 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800ee06:	b480      	push	{r7}
 800ee08:	b083      	sub	sp, #12
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
 800ee0e:	6039      	str	r1, [r7, #0]
}
 800ee10:	bf00      	nop
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f000 fbd5 	bl	800f5d4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3708      	adds	r7, #8
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7ff ffec 	bl	800ee1c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4618      	mov	r0, r3
 800ee48:	3708      	adds	r7, #8
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b082      	sub	sp, #8
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	6078      	str	r0, [r7, #4]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7ff ffeb 	bl	800ee34 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f000 fbad 	bl	800f5be <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	4618      	mov	r0, r3
 800ee68:	3708      	adds	r7, #8
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b082      	sub	sp, #8
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	6078      	str	r0, [r7, #4]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7ff ffe8 	bl	800ee4e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	4618      	mov	r0, r3
 800ee82:	3708      	adds	r7, #8
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	330c      	adds	r3, #12
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7ff ffea 	bl	800ee6e <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	3308      	adds	r3, #8
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7f8 f995 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f000 fb7f 	bl	800f5a8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	4618      	mov	r0, r3
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7ff ffe2 	bl	800ee88 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4618      	mov	r0, r3
 800eec8:	3708      	adds	r7, #8
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}

0800eece <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800eece:	b580      	push	{r7, lr}
 800eed0:	b090      	sub	sp, #64	; 0x40
 800eed2:	af02      	add	r7, sp, #8
 800eed4:	60f8      	str	r0, [r7, #12]
 800eed6:	60b9      	str	r1, [r7, #8]
 800eed8:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800eeda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eede:	68b9      	ldr	r1, [r7, #8]
 800eee0:	4618      	mov	r0, r3
 800eee2:	f000 fb52 	bl	800f58a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	68b9      	ldr	r1, [r7, #8]
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f000 fb9a 	bl	800f624 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800eef0:	f107 0320 	add.w	r3, r7, #32
 800eef4:	68f9      	ldr	r1, [r7, #12]
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7f7 fc2d 	bl	8006756 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800eefc:	68f8      	ldr	r0, [r7, #12]
 800eefe:	f7f8 fc6b 	bl	80077d8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800ef02:	4603      	mov	r3, r0
 800ef04:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ef08:	f107 0120 	add.w	r1, r7, #32
 800ef0c:	f107 0010 	add.w	r0, r7, #16
 800ef10:	9300      	str	r3, [sp, #0]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f000 fbd0 	bl	800f6b8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800ef18:	f107 0310 	add.w	r3, r7, #16
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f000 fbe5 	bl	800f6ec <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800ef22:	f107 0320 	add.w	r3, r7, #32
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7f6 f8db 	bl	80050e2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800ef2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7ff ffbf 	bl	800eeb4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
}
 800ef36:	bf00      	nop
 800ef38:	3738      	adds	r7, #56	; 0x38
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b086      	sub	sp, #24
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	60f8      	str	r0, [r7, #12]
 800ef46:	60b9      	str	r1, [r7, #8]
 800ef48:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	68b9      	ldr	r1, [r7, #8]
 800ef52:	6978      	ldr	r0, [r7, #20]
 800ef54:	f000 fbd5 	bl	800f702 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>
}
 800ef58:	bf00      	nop
 800ef5a:	3718      	adds	r7, #24
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	332c      	adds	r3, #44	; 0x2c
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	370c      	adds	r7, #12
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	4618      	mov	r0, r3
 800ef84:	370c      	adds	r7, #12
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr

0800ef8e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800ef8e:	b480      	push	{r7}
 800ef90:	b083      	sub	sp, #12
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	3318      	adds	r3, #24
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	370c      	adds	r7, #12
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa4:	4770      	bx	lr

0800efa6 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800efa6:	b580      	push	{r7, lr}
 800efa8:	b082      	sub	sp, #8
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
 800efae:	6039      	str	r1, [r7, #0]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6839      	ldr	r1, [r7, #0]
 800efb4:	4618      	mov	r0, r3
 800efb6:	f000 fbb7 	bl	800f728 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	4618      	mov	r0, r3
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>:
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6839      	ldr	r1, [r7, #0]
 800efd2:	4618      	mov	r0, r3
 800efd4:	f000 fbb7 	bl	800f746 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	4618      	mov	r0, r3
 800efdc:	3708      	adds	r7, #8
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800efe2:	b480      	push	{r7}
 800efe4:	b083      	sub	sp, #12
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	4618      	mov	r0, r3
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	60b9      	str	r1, [r7, #8]
 800f002:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	68ba      	ldr	r2, [r7, #8]
 800f008:	6879      	ldr	r1, [r7, #4]
 800f00a:	4618      	mov	r0, r3
 800f00c:	f000 fbaa 	bl	800f764 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>
 800f010:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f014:	eeb0 0a67 	vmov.f32	s0, s15
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f01e:	b5b0      	push	{r4, r5, r7, lr}
 800f020:	b084      	sub	sp, #16
 800f022:	af00      	add	r7, sp, #0
 800f024:	60f8      	str	r0, [r7, #12]
 800f026:	60b9      	str	r1, [r7, #8]
 800f028:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681c      	ldr	r4, [r3, #0]
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	f000 fbb9 	bl	800f7a6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>
 800f034:	4602      	mov	r2, r0
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	fb03 f502 	mul.w	r5, r3, r2
 800f03c:	68f8      	ldr	r0, [r7, #12]
 800f03e:	f000 fbbd 	bl	800f7bc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>
 800f042:	4602      	mov	r2, r0
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	fb02 f303 	mul.w	r3, r2, r3
 800f04a:	442b      	add	r3, r5
 800f04c:	009b      	lsls	r3, r3, #2
 800f04e:	4423      	add	r3, r4
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	ee07 3a90 	vmov	s15, r3
  }
 800f056:	eeb0 0a67 	vmov.f32	s0, s15
 800f05a:	3710      	adds	r7, #16
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bdb0      	pop	{r4, r5, r7, pc}

0800f060 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800f060:	b480      	push	{r7}
 800f062:	b085      	sub	sp, #20
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	607a      	str	r2, [r7, #4]
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	ed93 7a00 	vldr	s14, [r3]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	edd3 7a00 	vldr	s15, [r3]
 800f078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f07c:	eeb0 0a67 	vmov.f32	s0, s15
 800f080:	3714      	adds	r7, #20
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr

0800f08a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f08a:	b580      	push	{r7, lr}
 800f08c:	b084      	sub	sp, #16
 800f08e:	af00      	add	r7, sp, #0
 800f090:	60f8      	str	r0, [r7, #12]
 800f092:	60b9      	str	r1, [r7, #8]
 800f094:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f096:	68b9      	ldr	r1, [r7, #8]
 800f098:	68f8      	ldr	r0, [r7, #12]
 800f09a:	f000 fb9a 	bl	800f7d2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	68b9      	ldr	r1, [r7, #8]
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f000 fba0 	bl	800f7e8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f0a8:	bf00      	nop
 800f0aa:	3710      	adds	r7, #16
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800f0b0:	b590      	push	{r4, r7, lr}
 800f0b2:	b085      	sub	sp, #20
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7f6 fded 	bl	8005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800f0c4:	4604      	mov	r4, r0
 800f0c6:	68b8      	ldr	r0, [r7, #8]
 800f0c8:	f7f6 ffb0 	bl	800602c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	429c      	cmp	r4, r3
 800f0d0:	d10a      	bne.n	800f0e8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7f6 fded 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800f0da:	4604      	mov	r4, r0
 800f0dc:	68b8      	ldr	r0, [r7, #8]
 800f0de:	f7f6 ffb3 	bl	8006048 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	429c      	cmp	r4, r3
 800f0e6:	d005      	beq.n	800f0f4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800f0e8:	4b0b      	ldr	r3, [pc, #44]	; (800f118 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800f0ea:	4a0c      	ldr	r2, [pc, #48]	; (800f11c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800f0ec:	21b0      	movs	r1, #176	; 0xb0
 800f0ee:	480c      	ldr	r0, [pc, #48]	; (800f120 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800f0f0:	f00e fcfc 	bl	801daec <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800f0f4:	68b8      	ldr	r0, [r7, #8]
 800f0f6:	f000 fbaf 	bl	800f858 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	68b8      	ldr	r0, [r7, #8]
 800f0fe:	f000 fbb7 	bl	800f870 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 800f102:	4603      	mov	r3, r0
 800f104:	461a      	mov	r2, r3
 800f106:	4621      	mov	r1, r4
 800f108:	68f8      	ldr	r0, [r7, #12]
 800f10a:	f000 fbbd 	bl	800f888 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>
  }
 800f10e:	bf00      	nop
 800f110:	3714      	adds	r7, #20
 800f112:	46bd      	mov	sp, r7
 800f114:	bd90      	pop	{r4, r7, pc}
 800f116:	bf00      	nop
 800f118:	080226e8 	.word	0x080226e8
 800f11c:	08027210 	.word	0x08027210
 800f120:	08022be0 	.word	0x08022be0

0800f124 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800f124:	b590      	push	{r4, r7, lr}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800f130:	68b8      	ldr	r0, [r7, #8]
 800f132:	f7f6 f806 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800f136:	4604      	mov	r4, r0
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f7f6 fc9b 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800f13e:	4603      	mov	r3, r0
 800f140:	461a      	mov	r2, r3
 800f142:	4621      	mov	r1, r4
 800f144:	68f8      	ldr	r0, [r7, #12]
 800f146:	f000 fbf3 	bl	800f930 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>
}
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	3714      	adds	r7, #20
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd90      	pop	{r4, r7, pc}

0800f152 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f152:	b580      	push	{r7, lr}
 800f154:	b086      	sub	sp, #24
 800f156:	af00      	add	r7, sp, #0
 800f158:	60f8      	str	r0, [r7, #12]
 800f15a:	60b9      	str	r1, [r7, #8]
 800f15c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	68b9      	ldr	r1, [r7, #8]
 800f166:	6978      	ldr	r0, [r7, #20]
 800f168:	f000 fc10 	bl	800f98c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800f16c:	bf00      	nop
 800f16e:	3718      	adds	r7, #24
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
    }
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	4618      	mov	r0, r3
 800f180:	370c      	adds	r7, #12
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr

0800f18a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800f18a:	b480      	push	{r7}
 800f18c:	b083      	sub	sp, #12
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
 800f192:	6039      	str	r1, [r7, #0]
    {}
 800f194:	bf00      	nop
 800f196:	370c      	adds	r7, #12
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr

0800f1a0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800f1a0:	b480      	push	{r7}
 800f1a2:	b083      	sub	sp, #12
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	370c      	adds	r7, #12
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr

0800f1b6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800f1b6:	b590      	push	{r4, r7, lr}
 800f1b8:	b083      	sub	sp, #12
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
 800f1be:	6039      	str	r1, [r7, #0]
 800f1c0:	687c      	ldr	r4, [r7, #4]
 800f1c2:	6838      	ldr	r0, [r7, #0]
 800f1c4:	f000 fbf5 	bl	800f9b2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	f7f6 f8a1 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	1d1c      	adds	r4, r3, #4
 800f1d6:	6838      	ldr	r0, [r7, #0]
 800f1d8:	f000 fbf7 	bl	800f9ca <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	4619      	mov	r1, r3
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	f7ff fbde 	bl	800e9a2 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f103 040c 	add.w	r4, r3, #12
 800f1ec:	6838      	ldr	r0, [r7, #0]
 800f1ee:	f000 fbf7 	bl	800f9e0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	f000 fbfe 	bl	800f9f8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	4618      	mov	r0, r3
 800f200:	370c      	adds	r7, #12
 800f202:	46bd      	mov	sp, r7
 800f204:	bd90      	pop	{r4, r7, pc}

0800f206 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800f206:	b580      	push	{r7, lr}
 800f208:	b084      	sub	sp, #16
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	60f8      	str	r0, [r7, #12]
 800f20e:	60b9      	str	r1, [r7, #8]
 800f210:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	68ba      	ldr	r2, [r7, #8]
 800f216:	6879      	ldr	r1, [r7, #4]
 800f218:	4618      	mov	r0, r3
 800f21a:	f000 fbfc 	bl	800fa16 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>
 800f21e:	eef0 7a40 	vmov.f32	s15, s0
 800f222:	eeb0 0a67 	vmov.f32	s0, s15
 800f226:	3710      	adds	r7, #16
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f236:	2201      	movs	r2, #1
 800f238:	2100      	movs	r1, #0
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f7ff ffe3 	bl	800f206 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f240:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f244:	eeb0 0a67 	vmov.f32	s0, s15
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f24e:	b580      	push	{r7, lr}
 800f250:	b082      	sub	sp, #8
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
 800f256:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f258:	2202      	movs	r2, #2
 800f25a:	2100      	movs	r1, #0
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7ff ffd2 	bl	800f206 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f262:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f266:	eeb0 0a67 	vmov.f32	s0, s15
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800f270:	b480      	push	{r7}
 800f272:	b083      	sub	sp, #12
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	bf00      	nop
 800f27a:	370c      	adds	r7, #12
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr

0800f284 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f284:	b480      	push	{r7}
 800f286:	b083      	sub	sp, #12
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	3334      	adds	r3, #52	; 0x34
 800f290:	4618      	mov	r0, r3
 800f292:	370c      	adds	r7, #12
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	3304      	adds	r3, #4
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f2b4:	b480      	push	{r7}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	331c      	adds	r3, #28
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr

0800f2cc <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6039      	str	r1, [r7, #0]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6839      	ldr	r1, [r7, #0]
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f000 fbcb 	bl	800fa76 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3708      	adds	r7, #8
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}

0800f2ea <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>:
 800f2ea:	b580      	push	{r7, lr}
 800f2ec:	b082      	sub	sp, #8
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	6078      	str	r0, [r7, #4]
 800f2f2:	6039      	str	r1, [r7, #0]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6839      	ldr	r1, [r7, #0]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f000 fbcb 	bl	800fa94 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4618      	mov	r0, r3
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	4618      	mov	r0, r3
 800f314:	370c      	adds	r7, #12
 800f316:	46bd      	mov	sp, r7
 800f318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31c:	4770      	bx	lr

0800f31e <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f31e:	b580      	push	{r7, lr}
 800f320:	b084      	sub	sp, #16
 800f322:	af00      	add	r7, sp, #0
 800f324:	60f8      	str	r0, [r7, #12]
 800f326:	60b9      	str	r1, [r7, #8]
 800f328:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	68ba      	ldr	r2, [r7, #8]
 800f32e:	6879      	ldr	r1, [r7, #4]
 800f330:	4618      	mov	r0, r3
 800f332:	f000 fbc6 	bl	800fac2 <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>
 800f336:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f33a:	eeb0 0a67 	vmov.f32	s0, s15
 800f33e:	3710      	adds	r7, #16
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f344:	b5b0      	push	{r4, r5, r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681c      	ldr	r4, [r3, #0]
 800f354:	68f8      	ldr	r0, [r7, #12]
 800f356:	f000 fbd4 	bl	800fb02 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 800f35a:	4602      	mov	r2, r0
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	fb03 f502 	mul.w	r5, r3, r2
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f000 fbd8 	bl	800fb18 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 800f368:	4602      	mov	r2, r0
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	fb02 f303 	mul.w	r3, r2, r3
 800f370:	442b      	add	r3, r5
 800f372:	009b      	lsls	r3, r3, #2
 800f374:	4423      	add	r3, r4
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	ee07 3a90 	vmov	s15, r3
  }
 800f37c:	eeb0 0a67 	vmov.f32	s0, s15
 800f380:	3710      	adds	r7, #16
 800f382:	46bd      	mov	sp, r7
 800f384:	bdb0      	pop	{r4, r5, r7, pc}

0800f386 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f386:	b580      	push	{r7, lr}
 800f388:	b082      	sub	sp, #8
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	6078      	str	r0, [r7, #4]
 800f38e:	6039      	str	r1, [r7, #0]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6839      	ldr	r1, [r7, #0]
 800f394:	4618      	mov	r0, r3
 800f396:	f000 fbca 	bl	800fb2e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4618      	mov	r0, r3
 800f39e:	3708      	adds	r7, #8
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6839      	ldr	r1, [r7, #0]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f000 fbd1 	bl	800fb5a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3708      	adds	r7, #8
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f3c2:	b480      	push	{r7}
 800f3c4:	b083      	sub	sp, #12
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	370c      	adds	r7, #12
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr

0800f3d8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	68ba      	ldr	r2, [r7, #8]
 800f3e8:	6879      	ldr	r1, [r7, #4]
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f000 fbc9 	bl	800fb82 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>
 800f3f0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f3f4:	eeb0 0a67 	vmov.f32	s0, s15
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f3fe:	b5b0      	push	{r4, r5, r7, lr}
 800f400:	b084      	sub	sp, #16
 800f402:	af00      	add	r7, sp, #0
 800f404:	60f8      	str	r0, [r7, #12]
 800f406:	60b9      	str	r1, [r7, #8]
 800f408:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681c      	ldr	r4, [r3, #0]
 800f40e:	68f8      	ldr	r0, [r7, #12]
 800f410:	f000 fbd8 	bl	800fbc4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>
 800f414:	4602      	mov	r2, r0
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	fb03 f502 	mul.w	r5, r3, r2
 800f41c:	68f8      	ldr	r0, [r7, #12]
 800f41e:	f000 fbdc 	bl	800fbda <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>
 800f422:	4602      	mov	r2, r0
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	fb02 f303 	mul.w	r3, r2, r3
 800f42a:	442b      	add	r3, r5
 800f42c:	009b      	lsls	r3, r3, #2
 800f42e:	4423      	add	r3, r4
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	ee07 3a90 	vmov	s15, r3
  }
 800f436:	eeb0 0a67 	vmov.f32	s0, s15
 800f43a:	3710      	adds	r7, #16
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bdb0      	pop	{r4, r5, r7, pc}

0800f440 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800f440:	b480      	push	{r7}
 800f442:	b083      	sub	sp, #12
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4618      	mov	r0, r3
 800f44e:	370c      	adds	r7, #12
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr

0800f458 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800f458:	b480      	push	{r7}
 800f45a:	b083      	sub	sp, #12
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	4618      	mov	r0, r3
 800f466:	370c      	adds	r7, #12
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800f470:	b580      	push	{r7, lr}
 800f472:	b088      	sub	sp, #32
 800f474:	af00      	add	r7, sp, #0
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800f47c:	f107 0314 	add.w	r3, r7, #20
 800f480:	687a      	ldr	r2, [r7, #4]
 800f482:	68b9      	ldr	r1, [r7, #8]
 800f484:	4618      	mov	r0, r3
 800f486:	f000 fbb3 	bl	800fbf0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>
 800f48a:	f107 031c 	add.w	r3, r7, #28
 800f48e:	4618      	mov	r0, r3
 800f490:	f7f7 fc45 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800f494:	f107 021c 	add.w	r2, r7, #28
 800f498:	f107 0314 	add.w	r3, r7, #20
 800f49c:	4619      	mov	r1, r3
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f000 fbbd 	bl	800fc1e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f4a4:	bf00      	nop
 800f4a6:	3720      	adds	r7, #32
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b084      	sub	sp, #16
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	60f8      	str	r0, [r7, #12]
 800f4b4:	60b9      	str	r1, [r7, #8]
 800f4b6:	607a      	str	r2, [r7, #4]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	687a      	ldr	r2, [r7, #4]
 800f4bc:	68b9      	ldr	r1, [r7, #8]
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f000 fbbe 	bl	800fc40 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3710      	adds	r7, #16
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}

0800f4ce <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f4ce:	b480      	push	{r7}
 800f4d0:	b083      	sub	sp, #12
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
    }
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	370c      	adds	r7, #12
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr

0800f4e4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fc f889 	bl	800b606 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800f4f4:	4603      	mov	r3, r0
    }
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3708      	adds	r7, #8
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b082      	sub	sp, #8
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
 800f506:	6039      	str	r1, [r7, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6839      	ldr	r1, [r7, #0]
 800f50c:	4618      	mov	r0, r3
 800f50e:	f000 fbcd 	bl	800fcac <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	4618      	mov	r0, r3
 800f516:	3708      	adds	r7, #8
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800f51c:	b480      	push	{r7}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	4618      	mov	r0, r3
 800f528:	370c      	adds	r7, #12
 800f52a:	46bd      	mov	sp, r7
 800f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f530:	4770      	bx	lr

0800f532 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
 800f532:	b480      	push	{r7}
 800f534:	b083      	sub	sp, #12
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	4618      	mov	r0, r3
 800f53e:	370c      	adds	r7, #12
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr

0800f548 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800f548:	b580      	push	{r7, lr}
 800f54a:	b084      	sub	sp, #16
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800f554:	68b9      	ldr	r1, [r7, #8]
 800f556:	68f8      	ldr	r0, [r7, #12]
 800f558:	f000 fbb7 	bl	800fcca <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800f55c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f560:	eeb0 0a67 	vmov.f32	s0, s15
 800f564:	3710      	adds	r7, #16
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}

0800f56a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f56a:	b580      	push	{r7, lr}
 800f56c:	b082      	sub	sp, #8
 800f56e:	af00      	add	r7, sp, #0
 800f570:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800f572:	2200      	movs	r2, #0
 800f574:	2102      	movs	r1, #2
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f7fd f983 	bl	800c882 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f000 fbc8 	bl	800fd12 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>
  }
 800f582:	bf00      	nop
 800f584:	3708      	adds	r7, #8
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}

0800f58a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b082      	sub	sp, #8
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
 800f592:	6039      	str	r1, [r7, #0]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6839      	ldr	r1, [r7, #0]
 800f598:	4618      	mov	r0, r3
 800f59a:	f000 fbca 	bl	800fd32 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3708      	adds	r7, #8
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
 800f5a8:	b480      	push	{r7}
 800f5aa:	b083      	sub	sp, #12
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	370c      	adds	r7, #12
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5bc:	4770      	bx	lr

0800f5be <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 800f5be:	b480      	push	{r7}
 800f5c0:	b083      	sub	sp, #12
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	370c      	adds	r7, #12
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr

0800f5d4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	4618      	mov	r0, r3
 800f5e0:	370c      	adds	r7, #12
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e8:	4770      	bx	lr

0800f5ea <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800f5ea:	b580      	push	{r7, lr}
 800f5ec:	b082      	sub	sp, #8
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	6078      	str	r0, [r7, #4]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7f5 fb61 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	4618      	mov	r0, r3
 800f600:	3708      	adds	r7, #8
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800f606:	b580      	push	{r7, lr}
 800f608:	b082      	sub	sp, #8
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	3304      	adds	r3, #4
 800f612:	4618      	mov	r0, r3
 800f614:	f7f7 fa3b 	bl	8006a8e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800f618:	4603      	mov	r3, r0
 800f61a:	4618      	mov	r0, r3
 800f61c:	3708      	adds	r7, #8
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
	...

0800f624 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800f624:	b580      	push	{r7, lr}
 800f626:	b086      	sub	sp, #24
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800f630:	68b8      	ldr	r0, [r7, #8]
 800f632:	f7ff ffda 	bl	800f5ea <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>
 800f636:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800f638:	68b8      	ldr	r0, [r7, #8]
 800f63a:	f7ff ffe4 	bl	800f606 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>
 800f63e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	4618      	mov	r0, r3
 800f644:	f7f5 fbe1 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f648:	4602      	mov	r2, r0
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d107      	bne.n	800f660 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	4618      	mov	r0, r3
 800f654:	f7f5 fbce 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f658:	4602      	mov	r2, r0
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d001      	beq.n	800f664 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800f660:	2301      	movs	r3, #1
 800f662:	e000      	b.n	800f666 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800f664:	2300      	movs	r3, #0
 800f666:	2b00      	cmp	r3, #0
 800f668:	d005      	beq.n	800f676 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	693a      	ldr	r2, [r7, #16]
 800f66e:	6979      	ldr	r1, [r7, #20]
 800f670:	4618      	mov	r0, r3
 800f672:	f7f8 fad5 	bl	8007c20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	4618      	mov	r0, r3
 800f67a:	f7f5 fbc6 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f67e:	4602      	mov	r2, r0
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	4293      	cmp	r3, r2
 800f684:	d107      	bne.n	800f696 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	4618      	mov	r0, r3
 800f68a:	f7f5 fbb3 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f68e:	4602      	mov	r2, r0
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	4293      	cmp	r3, r2
 800f694:	d006      	beq.n	800f6a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800f696:	4b05      	ldr	r3, [pc, #20]	; (800f6ac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800f698:	4a05      	ldr	r2, [pc, #20]	; (800f6b0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800f69a:	f240 21fd 	movw	r1, #765	; 0x2fd
 800f69e:	4805      	ldr	r0, [pc, #20]	; (800f6b4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800f6a0:	f00e fa24 	bl	801daec <__assert_func>
}
 800f6a4:	bf00      	nop
 800f6a6:	3718      	adds	r7, #24
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	08021fcc 	.word	0x08021fcc
 800f6b0:	0802758c 	.word	0x0802758c
 800f6b4:	080220e0 	.word	0x080220e0

0800f6b8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800f6b8:	b480      	push	{r7}
 800f6ba:	b085      	sub	sp, #20
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	607a      	str	r2, [r7, #4]
 800f6c4:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	68ba      	ldr	r2, [r7, #8]
 800f6ca:	601a      	str	r2, [r3, #0]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	687a      	ldr	r2, [r7, #4]
 800f6d0:	605a      	str	r2, [r3, #4]
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	683a      	ldr	r2, [r7, #0]
 800f6d6:	609a      	str	r2, [r3, #8]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	69ba      	ldr	r2, [r7, #24]
 800f6dc:	60da      	str	r2, [r3, #12]
  }
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3714      	adds	r7, #20
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b082      	sub	sp, #8
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f000 fb53 	bl	800fda0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>
  }
 800f6fa:	bf00      	nop
 800f6fc:	3708      	adds	r7, #8
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}

0800f702 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f702:	b580      	push	{r7, lr}
 800f704:	b084      	sub	sp, #16
 800f706:	af00      	add	r7, sp, #0
 800f708:	60f8      	str	r0, [r7, #12]
 800f70a:	60b9      	str	r1, [r7, #8]
 800f70c:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f70e:	68b9      	ldr	r1, [r7, #8]
 800f710:	68f8      	ldr	r0, [r7, #12]
 800f712:	f000 fb54 	bl	800fdbe <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	68b9      	ldr	r1, [r7, #8]
 800f71a:	68f8      	ldr	r0, [r7, #12]
 800f71c:	f000 fbbe 	bl	800fe9c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f720:	bf00      	nop
 800f722:	3710      	adds	r7, #16
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	6039      	str	r1, [r7, #0]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6839      	ldr	r1, [r7, #0]
 800f736:	4618      	mov	r0, r3
 800f738:	f000 fbe8 	bl	800ff0c <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	4618      	mov	r0, r3
 800f740:	3708      	adds	r7, #8
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}

0800f746 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f746:	b580      	push	{r7, lr}
 800f748:	b082      	sub	sp, #8
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	6078      	str	r0, [r7, #4]
 800f74e:	6039      	str	r1, [r7, #0]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6839      	ldr	r1, [r7, #0]
 800f754:	4618      	mov	r0, r3
 800f756:	f000 fbef 	bl	800ff38 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>
  }
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4618      	mov	r0, r3
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f764:	b5b0      	push	{r4, r5, r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	60f8      	str	r0, [r7, #12]
 800f76c:	60b9      	str	r1, [r7, #8]
 800f76e:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681c      	ldr	r4, [r3, #0]
 800f774:	68f8      	ldr	r0, [r7, #12]
 800f776:	f000 fbf3 	bl	800ff60 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>
 800f77a:	4602      	mov	r2, r0
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	fb03 f502 	mul.w	r5, r3, r2
 800f782:	68f8      	ldr	r0, [r7, #12]
 800f784:	f000 fbf7 	bl	800ff76 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>
 800f788:	4602      	mov	r2, r0
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	fb02 f303 	mul.w	r3, r2, r3
 800f790:	442b      	add	r3, r5
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4423      	add	r3, r4
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	ee07 3a90 	vmov	s15, r3
  }
 800f79c:	eeb0 0a67 	vmov.f32	s0, s15
 800f7a0:	3710      	adds	r7, #16
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bdb0      	pop	{r4, r5, r7, pc}

0800f7a6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f7a6:	b580      	push	{r7, lr}
 800f7a8:	b082      	sub	sp, #8
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f7ae:	f7f7 f858 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f7b2:	4603      	mov	r3, r0
  }
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3708      	adds	r7, #8
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}

0800f7bc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f7c4:	f7f7 f84d 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f7c8:	4603      	mov	r3, r0
  }
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800f7d2:	b480      	push	{r7}
 800f7d4:	b083      	sub	sp, #12
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
 800f7da:	6039      	str	r1, [r7, #0]
}
 800f7dc:	bf00      	nop
 800f7de:	370c      	adds	r7, #12
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b08c      	sub	sp, #48	; 0x30
 800f7ec:	af02      	add	r7, sp, #8
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800f7f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7f8:	68b9      	ldr	r1, [r7, #8]
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fa fd4f 	bl	800a29e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	68b9      	ldr	r1, [r7, #8]
 800f804:	68f8      	ldr	r0, [r7, #12]
 800f806:	f000 fbc1 	bl	800ff8c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800f80a:	f107 0320 	add.w	r3, r7, #32
 800f80e:	68f9      	ldr	r1, [r7, #12]
 800f810:	4618      	mov	r0, r3
 800f812:	f7fa fd44 	bl	800a29e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800f816:	68f8      	ldr	r0, [r7, #12]
 800f818:	f000 fc04 	bl	8010024 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800f81c:	4603      	mov	r3, r0
 800f81e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f822:	f107 0120 	add.w	r1, r7, #32
 800f826:	f107 0010 	add.w	r0, r7, #16
 800f82a:	9300      	str	r3, [sp, #0]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f000 fc04 	bl	801003a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800f832:	f107 0310 	add.w	r3, r7, #16
 800f836:	4618      	mov	r0, r3
 800f838:	f000 fc19 	bl	801006e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 800f83c:	f107 0320 	add.w	r3, r7, #32
 800f840:	4618      	mov	r0, r3
 800f842:	f7f9 fc13 	bl	800906c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800f846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7f9 fc0e 	bl	800906c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
}
 800f850:	bf00      	nop
 800f852:	3728      	adds	r7, #40	; 0x28
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	4618      	mov	r0, r3
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800f870:	b480      	push	{r7}
 800f872:	b083      	sub	sp, #12
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	4618      	mov	r0, r3
 800f87e:	370c      	adds	r7, #12
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr

0800f888 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800f888:	b580      	push	{r7, lr}
 800f88a:	ed2d 8b02 	vpush	{d8}
 800f88e:	b088      	sub	sp, #32
 800f890:	af00      	add	r7, sp, #0
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	60b9      	str	r1, [r7, #8]
 800f896:	607a      	str	r2, [r7, #4]
  { dst.coeffRef(0,0) -= (lhs.transpose().cwiseProduct(rhs)).sum(); }
 800f898:	68b8      	ldr	r0, [r7, #8]
 800f89a:	f000 fbf3 	bl	8010084 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	61fb      	str	r3, [r7, #28]
 800f8a2:	f107 0310 	add.w	r3, r7, #16
 800f8a6:	f107 011c 	add.w	r1, r7, #28
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f000 fbfc 	bl	80100aa <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>
 800f8b2:	f107 0310 	add.w	r3, r7, #16
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f000 fc25 	bl	8010106 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>
 800f8bc:	eeb0 8a40 	vmov.f32	s16, s0
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7f6 ff11 	bl	80066ee <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	edd3 7a00 	vldr	s15, [r3]
 800f8d2:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800f8d6:	edc3 7a00 	vstr	s15, [r3]
 800f8da:	bf00      	nop
 800f8dc:	3720      	adds	r7, #32
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	ecbd 8b02 	vpop	{d8}
 800f8e4:	bd80      	pop	{r7, pc}

0800f8e6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
 800f8e6:	b580      	push	{r7, lr}
 800f8e8:	b082      	sub	sp, #8
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f000 fc24 	bl	801013c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3708      	adds	r7, #8
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}

0800f8fe <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>:
class dense_product_base
 800f8fe:	b580      	push	{r7, lr}
 800f900:	b082      	sub	sp, #8
 800f902:	af00      	add	r7, sp, #0
 800f904:	6078      	str	r0, [r7, #4]
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7ff ffed 	bl	800f8e6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	4618      	mov	r0, r3
 800f910:	3708      	adds	r7, #8
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}

0800f916 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800f916:	b580      	push	{r7, lr}
 800f918:	b082      	sub	sp, #8
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	6078      	str	r0, [r7, #4]
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f7ff ffed 	bl	800f8fe <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4618      	mov	r0, r3
 800f928:	3708      	adds	r7, #8
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
	...

0800f930 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800f930:	b590      	push	{r4, r7, lr}
 800f932:	b085      	sub	sp, #20
 800f934:	af00      	add	r7, sp, #0
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	607a      	str	r2, [r7, #4]
 800f93c:	68f8      	ldr	r0, [r7, #12]
 800f93e:	f7ff ffea 	bl	800f916 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	68ba      	ldr	r2, [r7, #8]
 800f946:	601a      	str	r2, [r3, #0]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	687a      	ldr	r2, [r7, #4]
 800f94c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	4618      	mov	r0, r3
 800f952:	f7f5 fa4f 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f956:	4604      	mov	r4, r0
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7f5 fb71 	bl	8005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800f960:	4603      	mov	r3, r0
 800f962:	429c      	cmp	r4, r3
 800f964:	d005      	beq.n	800f972 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 800f966:	4b06      	ldr	r3, [pc, #24]	; (800f980 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 800f968:	4a06      	ldr	r2, [pc, #24]	; (800f984 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 800f96a:	2160      	movs	r1, #96	; 0x60
 800f96c:	4806      	ldr	r0, [pc, #24]	; (800f988 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 800f96e:	f00e f8bd 	bl	801daec <__assert_func>
 800f972:	bf00      	nop
    }
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	4618      	mov	r0, r3
 800f978:	3714      	adds	r7, #20
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd90      	pop	{r4, r7, pc}
 800f97e:	bf00      	nop
 800f980:	0801fc14 	.word	0x0801fc14
 800f984:	080276b4 	.word	0x080276b4
 800f988:	0801ff64 	.word	0x0801ff64

0800f98c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b084      	sub	sp, #16
 800f990:	af00      	add	r7, sp, #0
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f998:	68b9      	ldr	r1, [r7, #8]
 800f99a:	68f8      	ldr	r0, [r7, #12]
 800f99c:	f000 fbd9 	bl	8010152 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	68b9      	ldr	r1, [r7, #8]
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	f000 fc17 	bl	80101d8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f9aa:	bf00      	nop
 800f9ac:	3710      	adds	r7, #16
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}

0800f9b2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f9b2:	b480      	push	{r7}
 800f9b4:	b083      	sub	sp, #12
 800f9b6:	af00      	add	r7, sp, #0
 800f9b8:	6078      	str	r0, [r7, #4]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	3330      	adds	r3, #48	; 0x30
 800f9be:	4618      	mov	r0, r3
 800f9c0:	370c      	adds	r7, #12
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c8:	4770      	bx	lr

0800f9ca <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f9ca:	b480      	push	{r7}
 800f9cc:	b083      	sub	sp, #12
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	370c      	adds	r7, #12
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr

0800f9e0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f9e0:	b480      	push	{r7}
 800f9e2:	b083      	sub	sp, #12
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	3318      	adds	r3, #24
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	370c      	adds	r7, #12
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b082      	sub	sp, #8
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6839      	ldr	r1, [r7, #0]
 800fa06:	4618      	mov	r0, r3
 800fa08:	f000 fc1e 	bl	8010248 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fa16:	b590      	push	{r4, r7, lr}
 800fa18:	b087      	sub	sp, #28
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	60f8      	str	r0, [r7, #12]
 800fa1e:	60b9      	str	r1, [r7, #8]
 800fa20:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	4618      	mov	r0, r3
 800fa26:	f000 fc1e 	bl	8010266 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 800fa2a:	4604      	mov	r4, r0
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	3304      	adds	r3, #4
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	68b9      	ldr	r1, [r7, #8]
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7ff fccf 	bl	800f3d8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800fa3a:	eef0 7a40 	vmov.f32	s15, s0
 800fa3e:	edc7 7a04 	vstr	s15, [r7, #16]
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	330c      	adds	r3, #12
 800fa46:	687a      	ldr	r2, [r7, #4]
 800fa48:	68b9      	ldr	r1, [r7, #8]
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f000 fc16 	bl	801027c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 800fa50:	eef0 7a40 	vmov.f32	s15, s0
 800fa54:	edc7 7a05 	vstr	s15, [r7, #20]
 800fa58:	f107 0214 	add.w	r2, r7, #20
 800fa5c:	f107 0310 	add.w	r3, r7, #16
 800fa60:	4619      	mov	r1, r3
 800fa62:	4620      	mov	r0, r4
 800fa64:	f7ff fafc 	bl	800f060 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800fa68:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fa6c:	eeb0 0a67 	vmov.f32	s0, s15
 800fa70:	371c      	adds	r7, #28
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd90      	pop	{r4, r7, pc}

0800fa76 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b082      	sub	sp, #8
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
 800fa7e:	6039      	str	r1, [r7, #0]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6839      	ldr	r1, [r7, #0]
 800fa84:	4618      	mov	r0, r3
 800fa86:	f000 fc1a 	bl	80102be <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6839      	ldr	r1, [r7, #0]
 800faa2:	4618      	mov	r0, r3
 800faa4:	f000 fc21 	bl	80102ea <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>
  }
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	4618      	mov	r0, r3
 800faac:	3708      	adds	r7, #8
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}

0800fab2 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>:
    T value() { return T(Value); }
 800fab2:	b480      	push	{r7}
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	2300      	movs	r3, #0
 800fab8:	4618      	mov	r0, r3
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr

0800fac2 <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fac2:	b5b0      	push	{r4, r5, r7, lr}
 800fac4:	b084      	sub	sp, #16
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	60f8      	str	r0, [r7, #12]
 800faca:	60b9      	str	r1, [r7, #8]
 800facc:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(m_startRow.value() + row, m_startCol.value() + col);
 800face:	68fc      	ldr	r4, [r7, #12]
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	3310      	adds	r3, #16
 800fad4:	4618      	mov	r0, r3
 800fad6:	f000 fc1c 	bl	8010312 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 800fada:	4602      	mov	r2, r0
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	18d5      	adds	r5, r2, r3
 800fae0:	f7ff ffe7 	bl	800fab2 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 800fae4:	4602      	mov	r2, r0
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4413      	add	r3, r2
 800faea:	461a      	mov	r2, r3
 800faec:	4629      	mov	r1, r5
 800faee:	4620      	mov	r0, r4
 800faf0:	f000 fc1b 	bl	801032a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>
 800faf4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800faf8:	eeb0 0a67 	vmov.f32	s0, s15
 800fafc:	3710      	adds	r7, #16
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bdb0      	pop	{r4, r5, r7, pc}

0800fb02 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fb02:	b580      	push	{r7, lr}
 800fb04:	b082      	sub	sp, #8
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fb0a:	f7f6 feaa 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fb0e:	4603      	mov	r3, r0
  }
 800fb10:	4618      	mov	r0, r3
 800fb12:	3708      	adds	r7, #8
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fb20:	f7f6 fe97 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800fb24:	4603      	mov	r3, r0
  }
 800fb26:	4618      	mov	r0, r3
 800fb28:	3708      	adds	r7, #8
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800fb2e:	b590      	push	{r4, r7, lr}
 800fb30:	b083      	sub	sp, #12
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
 800fb36:	6039      	str	r1, [r7, #0]
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f000 fc2d 	bl	8010398 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800fb3e:	687c      	ldr	r4, [r7, #4]
 800fb40:	6838      	ldr	r0, [r7, #0]
 800fb42:	f000 fc1e 	bl	8010382 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>
 800fb46:	4603      	mov	r3, r0
 800fb48:	4619      	mov	r1, r3
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	f000 fc2f 	bl	80103ae <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4618      	mov	r0, r3
 800fb54:	370c      	adds	r7, #12
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd90      	pop	{r4, r7, pc}

0800fb5a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
{
  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
  typedef typename XprType::Scalar Scalar;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit block_evaluator(const XprType& block)
 800fb5a:	b580      	push	{r7, lr}
 800fb5c:	b082      	sub	sp, #8
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
 800fb62:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6839      	ldr	r1, [r7, #0]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f000 fc2f 	bl	80103cc <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>
  {
    // TODO: for the 3.3 release, this should be turned to an internal assertion, but let's keep it as is for the beta lifetime
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	4618      	mov	r0, r3
 800fb72:	f000 fc55 	bl	8010420 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 800fb76:	bf00      	nop
  }
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3708      	adds	r7, #8
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}

0800fb82 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fb82:	b5b0      	push	{r4, r5, r7, lr}
 800fb84:	b084      	sub	sp, #16
 800fb86:	af00      	add	r7, sp, #0
 800fb88:	60f8      	str	r0, [r7, #12]
 800fb8a:	60b9      	str	r1, [r7, #8]
 800fb8c:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681c      	ldr	r4, [r3, #0]
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	f000 fc50 	bl	8010438 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	fb03 f502 	mul.w	r5, r3, r2
 800fba0:	68f8      	ldr	r0, [r7, #12]
 800fba2:	f000 fc54 	bl	801044e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>
 800fba6:	4602      	mov	r2, r0
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	fb02 f303 	mul.w	r3, r2, r3
 800fbae:	442b      	add	r3, r5
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	4423      	add	r3, r4
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	ee07 3a90 	vmov	s15, r3
  }
 800fbba:	eeb0 0a67 	vmov.f32	s0, s15
 800fbbe:	3710      	adds	r7, #16
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bdb0      	pop	{r4, r5, r7, pc}

0800fbc4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b082      	sub	sp, #8
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fbcc:	f7f6 fe41 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800fbd0:	4603      	mov	r3, r0
  }
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3708      	adds	r7, #8
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b082      	sub	sp, #8
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fbe2:	f7f6 fe3e 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fbe6:	4603      	mov	r3, r0
  }
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3708      	adds	r7, #8
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}

0800fbf0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800fbf0:	b590      	push	{r4, r7, lr}
 800fbf2:	b085      	sub	sp, #20
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	60f8      	str	r0, [r7, #12]
 800fbf8:	60b9      	str	r1, [r7, #8]
 800fbfa:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800fbfc:	68b8      	ldr	r0, [r7, #8]
 800fbfe:	f7f5 fc68 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800fc02:	4604      	mov	r4, r0
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f7f5 fc64 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	4621      	mov	r1, r4
 800fc10:	68f8      	ldr	r0, [r7, #12]
 800fc12:	f000 fc4b 	bl	80104ac <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>
}
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	3714      	adds	r7, #20
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd90      	pop	{r4, r7, pc}

0800fc1e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800fc1e:	b580      	push	{r7, lr}
 800fc20:	b086      	sub	sp, #24
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	60f8      	str	r0, [r7, #12]
 800fc26:	60b9      	str	r1, [r7, #8]
 800fc28:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	68b9      	ldr	r1, [r7, #8]
 800fc32:	6978      	ldr	r0, [r7, #20]
 800fc34:	f000 fc68 	bl	8010508 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800fc38:	bf00      	nop
 800fc3a:	3718      	adds	r7, #24
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800fc40:	b5b0      	push	{r4, r5, r7, lr}
 800fc42:	b084      	sub	sp, #16
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800fc4c:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800fc4e:	68b8      	ldr	r0, [r7, #8]
 800fc50:	f000 fc6d 	bl	801052e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>
 800fc54:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800fc56:	68b8      	ldr	r0, [r7, #8]
 800fc58:	f000 fc7d 	bl	8010556 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 800fc5c:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	fb02 f303 	mul.w	r3, r2, r3
 800fc64:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800fc66:	441d      	add	r5, r3
 800fc68:	68b8      	ldr	r0, [r7, #8]
 800fc6a:	f7f5 fd76 	bl	800575a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800fc6e:	4602      	mov	r2, r0
 800fc70:	2301      	movs	r3, #1
 800fc72:	4629      	mov	r1, r5
 800fc74:	4620      	mov	r0, r4
 800fc76:	f000 fca3 	bl	80105c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	3308      	adds	r3, #8
 800fc7e:	68ba      	ldr	r2, [r7, #8]
 800fc80:	6812      	ldr	r2, [r2, #0]
 800fc82:	601a      	str	r2, [r3, #0]
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	330c      	adds	r3, #12
 800fc88:	2100      	movs	r1, #0
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7fd fe30 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	3310      	adds	r3, #16
 800fc94:	6879      	ldr	r1, [r7, #4]
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7fd fe2a 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800fc9c:	68f8      	ldr	r0, [r7, #12]
 800fc9e:	f000 fccd 	bl	801063c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>
    }
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	4618      	mov	r0, r3
 800fca6:	3710      	adds	r7, #16
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bdb0      	pop	{r4, r5, r7, pc}

0800fcac <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6839      	ldr	r1, [r7, #0]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f000 fcce 	bl	801065c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3708      	adds	r7, #8
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}

0800fcca <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800fcca:	b580      	push	{r7, lr}
 800fccc:	b084      	sub	sp, #16
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
 800fcd2:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800fcd4:	6839      	ldr	r1, [r7, #0]
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 fcd2 	bl	8010680 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800fcdc:	eef0 7a40 	vmov.f32	s15, s0
 800fce0:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800fce4:	6839      	ldr	r1, [r7, #0]
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 fcdb 	bl	80106a2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800fcec:	eef0 7a40 	vmov.f32	s15, s0
 800fcf0:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800fcf4:	f107 020c 	add.w	r2, r7, #12
 800fcf8:	f107 0308 	add.w	r3, r7, #8
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	6838      	ldr	r0, [r7, #0]
 800fd00:	f7f9 f96d 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800fd04:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fd08:	eeb0 0a67 	vmov.f32	s0, s15
 800fd0c:	3710      	adds	r7, #16
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}

0800fd12 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800fd12:	b580      	push	{r7, lr}
 800fd14:	b082      	sub	sp, #8
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	2102      	movs	r1, #2
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f7fc fdaf 	bl	800c882 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f000 fce0 	bl	80106ea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>
  }
 800fd2a:	bf00      	nop
 800fd2c:	3708      	adds	r7, #8
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}

0800fd32 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800fd32:	b580      	push	{r7, lr}
 800fd34:	b082      	sub	sp, #8
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
 800fd3a:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f000 fcfc 	bl	801073a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800fd42:	6838      	ldr	r0, [r7, #0]
 800fd44:	f000 fce1 	bl	801070a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 800fd48:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 800fd4e:	6838      	ldr	r0, [r7, #0]
 800fd50:	f000 fce7 	bl	8010722 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>
 800fd54:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	3304      	adds	r3, #4
 800fd5a:	6812      	ldr	r2, [r2, #0]
 800fd5c:	601a      	str	r2, [r3, #0]
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800fd68:	4619      	mov	r1, r3
 800fd6a:	4610      	mov	r0, r2
 800fd6c:	f7f7 fc3e 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	4610      	mov	r0, r2
 800fd7e:	f000 fce7 	bl	8010750 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 800fd82:	6838      	ldr	r0, [r7, #0]
 800fd84:	f000 fcc1 	bl	801070a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7f4 ff8c 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800fd90:	4602      	mov	r2, r0
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	611a      	str	r2, [r3, #16]
  }
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3708      	adds	r7, #8
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800fda8:	2100      	movs	r1, #0
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f000 fcdf 	bl	801076e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f000 fcff 	bl	80107b4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>
  }
 800fdb6:	bf00      	nop
 800fdb8:	3708      	adds	r7, #8
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}

0800fdbe <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800fdbe:	b480      	push	{r7}
 800fdc0:	b083      	sub	sp, #12
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
 800fdc6:	6039      	str	r1, [r7, #0]
}
 800fdc8:	bf00      	nop
 800fdca:	370c      	adds	r7, #12
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr

0800fdd4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7f9 f944 	bl	800906c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	4618      	mov	r0, r3
 800fde8:	3708      	adds	r7, #8
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}

0800fdee <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800fdee:	b580      	push	{r7, lr}
 800fdf0:	b082      	sub	sp, #8
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	6078      	str	r0, [r7, #4]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7ff ffeb 	bl	800fdd4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	4618      	mov	r0, r3
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7ff ffeb 	bl	800fdee <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3708      	adds	r7, #8
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}

0800fe22 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 800fe22:	b580      	push	{r7, lr}
 800fe24:	b082      	sub	sp, #8
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7f9 f91d 	bl	800906c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4618      	mov	r0, r3
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}

0800fe3c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	330c      	adds	r3, #12
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7ff ffea 	bl	800fe22 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	3304      	adds	r3, #4
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7ff ffd8 	bl	800fe08 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}

0800fe62 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800fe62:	b580      	push	{r7, lr}
 800fe64:	b082      	sub	sp, #8
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6078      	str	r0, [r7, #4]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7ff ffe5 	bl	800fe3c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f000 fcbc 	bl	80107f0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3708      	adds	r7, #8
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}

0800fe82 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800fe82:	b580      	push	{r7, lr}
 800fe84:	b082      	sub	sp, #8
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	6078      	str	r0, [r7, #4]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7ff ffe8 	bl	800fe62 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	4618      	mov	r0, r3
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}

0800fe9c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b090      	sub	sp, #64	; 0x40
 800fea0:	af02      	add	r7, sp, #8
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800fea8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800feac:	68b9      	ldr	r1, [r7, #8]
 800feae:	4618      	mov	r0, r3
 800feb0:	f000 fc8f 	bl	80107d2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
  resize_if_allowed(dst, src, func);
 800feb4:	687a      	ldr	r2, [r7, #4]
 800feb6:	68b9      	ldr	r1, [r7, #8]
 800feb8:	68f8      	ldr	r0, [r7, #12]
 800feba:	f000 fca5 	bl	8010808 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800febe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fec2:	68f9      	ldr	r1, [r7, #12]
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7fa f9ea 	bl	800a29e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800feca:	68f8      	ldr	r0, [r7, #12]
 800fecc:	f000 f8aa 	bl	8010024 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800fed0:	4603      	mov	r3, r0
 800fed2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fed6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800feda:	f107 0014 	add.w	r0, r7, #20
 800fede:	9300      	str	r3, [sp, #0]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f000 fcdb 	bl	801089c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800fee6:	f107 0314 	add.w	r3, r7, #20
 800feea:	4618      	mov	r0, r3
 800feec:	f000 fcf0 	bl	80108d0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>
  DstEvaluatorType dstEvaluator(dst);
 800fef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7f9 f8b9 	bl	800906c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800fefa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7ff ffbf 	bl	800fe82 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
}
 800ff04:	bf00      	nop
 800ff06:	3738      	adds	r7, #56	; 0x38
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800ff0c:	b590      	push	{r4, r7, lr}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	6039      	str	r1, [r7, #0]
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f000 fcf0 	bl	80108fc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800ff1c:	687c      	ldr	r4, [r7, #4]
 800ff1e:	6838      	ldr	r0, [r7, #0]
 800ff20:	f000 fce1 	bl	80108e6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>
 800ff24:	4603      	mov	r3, r0
 800ff26:	4619      	mov	r1, r3
 800ff28:	4620      	mov	r0, r4
 800ff2a:	f000 fcf2 	bl	8010912 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	4618      	mov	r0, r3
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd90      	pop	{r4, r7, pc}

0800ff38 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6839      	ldr	r1, [r7, #0]
 800ff46:	4618      	mov	r0, r3
 800ff48:	f000 fcf2 	bl	8010930 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f000 fd18 	bl	8010984 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 800ff54:	bf00      	nop
  }
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800ff68:	f7f6 fc73 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800ff6c:	4603      	mov	r3, r0
  }
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3708      	adds	r7, #8
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}

0800ff76 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800ff76:	b580      	push	{r7, lr}
 800ff78:	b082      	sub	sp, #8
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800ff7e:	f7f6 fc70 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ff82:	4603      	mov	r3, r0
  }
 800ff84:	4618      	mov	r0, r3
 800ff86:	3708      	adds	r7, #8
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b086      	sub	sp, #24
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	60b9      	str	r1, [r7, #8]
 800ff96:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7f5 fe7f 	bl	8005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800ffa0:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7f5 fe85 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800ffaa:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7f5 fe75 	bl	8005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	4293      	cmp	r3, r2
 800ffba:	d107      	bne.n	800ffcc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7f5 fe78 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	d001      	beq.n	800ffd0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 800ffcc:	2301      	movs	r3, #1
 800ffce:	e000      	b.n	800ffd2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d005      	beq.n	800ffe2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	693a      	ldr	r2, [r7, #16]
 800ffda:	6979      	ldr	r1, [r7, #20]
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7fd f9af 	bl	800d340 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7f5 fe5a 	bl	8005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800ffea:	4602      	mov	r2, r0
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d107      	bne.n	8010002 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7f5 fe5d 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800fffa:	4602      	mov	r2, r0
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	4293      	cmp	r3, r2
 8010000:	d006      	beq.n	8010010 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8010002:	4b05      	ldr	r3, [pc, #20]	; (8010018 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8010004:	4a05      	ldr	r2, [pc, #20]	; (801001c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8010006:	f240 21fd 	movw	r1, #765	; 0x2fd
 801000a:	4805      	ldr	r0, [pc, #20]	; (8010020 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 801000c:	f00d fd6e 	bl	801daec <__assert_func>
}
 8010010:	bf00      	nop
 8010012:	3718      	adds	r7, #24
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}
 8010018:	08021fcc 	.word	0x08021fcc
 801001c:	080277dc 	.word	0x080277dc
 8010020:	080220e0 	.word	0x080220e0

08010024 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	4618      	mov	r0, r3
 8010030:	370c      	adds	r7, #12
 8010032:	46bd      	mov	sp, r7
 8010034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010038:	4770      	bx	lr

0801003a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 801003a:	b480      	push	{r7}
 801003c:	b085      	sub	sp, #20
 801003e:	af00      	add	r7, sp, #0
 8010040:	60f8      	str	r0, [r7, #12]
 8010042:	60b9      	str	r1, [r7, #8]
 8010044:	607a      	str	r2, [r7, #4]
 8010046:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	68ba      	ldr	r2, [r7, #8]
 801004c:	601a      	str	r2, [r3, #0]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	605a      	str	r2, [r3, #4]
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	683a      	ldr	r2, [r7, #0]
 8010058:	609a      	str	r2, [r3, #8]
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	69ba      	ldr	r2, [r7, #24]
 801005e:	60da      	str	r2, [r3, #12]
  }
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	4618      	mov	r0, r3
 8010064:	3714      	adds	r7, #20
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr

0801006e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801006e:	b580      	push	{r7, lr}
 8010070:	b082      	sub	sp, #8
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f000 fc90 	bl	801099c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>
  }
 801007c:	bf00      	nop
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
  return ConstTransposeReturnType(derived());
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f7f5 fcf1 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8010092:	4602      	mov	r2, r0
 8010094:	f107 030c 	add.w	r3, r7, #12
 8010098:	4611      	mov	r1, r2
 801009a:	4618      	mov	r0, r3
 801009c:	f000 fca5 	bl	80109ea <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>
 80100a0:	68fb      	ldr	r3, [r7, #12]
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3710      	adds	r7, #16
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}

080100aa <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 80100aa:	b5b0      	push	{r4, r5, r7, lr}
 80100ac:	b086      	sub	sp, #24
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	60f8      	str	r0, [r7, #12]
 80100b2:	60b9      	str	r1, [r7, #8]
 80100b4:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 80100b6:	68b8      	ldr	r0, [r7, #8]
 80100b8:	f000 fca7 	bl	8010a0a <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80100bc:	4604      	mov	r4, r0
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f7f5 f83f 	bl	8005142 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80100c4:	4605      	mov	r5, r0
 80100c6:	f107 0314 	add.w	r3, r7, #20
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7f5 f898 	bl	8005200 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80100d0:	f107 0314 	add.w	r3, r7, #20
 80100d4:	462a      	mov	r2, r5
 80100d6:	4621      	mov	r1, r4
 80100d8:	68f8      	ldr	r0, [r7, #12]
 80100da:	f000 fcd5 	bl	8010a88 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>
}
 80100de:	68f8      	ldr	r0, [r7, #12]
 80100e0:	3718      	adds	r7, #24
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bdb0      	pop	{r4, r5, r7, pc}

080100e6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b082      	sub	sp, #8
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f000 fd18 	bl	8010b24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80100f4:	4603      	mov	r3, r0
 80100f6:	4618      	mov	r0, r3
 80100f8:	f000 fd1f 	bl	8010b3a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80100fc:	4603      	mov	r3, r0
 80100fe:	4618      	mov	r0, r3
 8010100:	3708      	adds	r7, #8
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8010106:	b590      	push	{r4, r7, lr}
 8010108:	b085      	sub	sp, #20
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f000 fd08 	bl	8010b24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010114:	4604      	mov	r4, r0
 8010116:	f107 030c 	add.w	r3, r7, #12
 801011a:	4618      	mov	r0, r3
 801011c:	f7f5 fb67 	bl	80057ee <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8010120:	f107 030c 	add.w	r3, r7, #12
 8010124:	4619      	mov	r1, r3
 8010126:	4620      	mov	r0, r4
 8010128:	f000 fd88 	bl	8010c3c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 801012c:	eef0 7a40 	vmov.f32	s15, s0
 8010130:	bf00      	nop
}
 8010132:	eeb0 0a67 	vmov.f32	s0, s15
 8010136:	3714      	adds	r7, #20
 8010138:	46bd      	mov	sp, r7
 801013a:	bd90      	pop	{r4, r7, pc}

0801013c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
    }
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	4618      	mov	r0, r3
 8010148:	370c      	adds	r7, #12
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr

08010152 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8010152:	b580      	push	{r7, lr}
 8010154:	b082      	sub	sp, #8
 8010156:	af00      	add	r7, sp, #0
 8010158:	6078      	str	r0, [r7, #4]
 801015a:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4618      	mov	r0, r3
 8010160:	f7f4 fdad 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010164:	4603      	mov	r3, r0
 8010166:	2b01      	cmp	r3, #1
 8010168:	dd08      	ble.n	801017c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	4618      	mov	r0, r3
 801016e:	f7f4 fd9b 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010172:	4603      	mov	r3, r0
 8010174:	2b01      	cmp	r3, #1
 8010176:	dd01      	ble.n	801017c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 8010178:	2301      	movs	r3, #1
 801017a:	e000      	b.n	801017e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2c>
 801017c:	2300      	movs	r3, #0
 801017e:	2b00      	cmp	r3, #0
 8010180:	d003      	beq.n	801018a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8010182:	6839      	ldr	r1, [r7, #0]
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f000 fd9f 	bl	8010cc8 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>
}
 801018a:	bf00      	nop
 801018c:	3708      	adds	r7, #8
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8010192:	b580      	push	{r7, lr}
 8010194:	b082      	sub	sp, #8
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	330c      	adds	r3, #12
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fe fe48 	bl	800ee34 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	3308      	adds	r3, #8
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7f4 ff9a 	bl	80050e2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f000 fda4 	bl	8010cfc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	4618      	mov	r0, r3
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}

080101be <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80101be:	b580      	push	{r7, lr}
 80101c0:	b082      	sub	sp, #8
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7ff ffe2 	bl	8010192 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	4618      	mov	r0, r3
 80101d2:	3708      	adds	r7, #8
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80101d8:	b580      	push	{r7, lr}
 80101da:	b090      	sub	sp, #64	; 0x40
 80101dc:	af02      	add	r7, sp, #8
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80101e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101e8:	68b9      	ldr	r1, [r7, #8]
 80101ea:	4618      	mov	r0, r3
 80101ec:	f000 fd77 	bl	8010cde <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	68b9      	ldr	r1, [r7, #8]
 80101f4:	68f8      	ldr	r0, [r7, #12]
 80101f6:	f000 fda9 	bl	8010d4c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 80101fa:	f107 0320 	add.w	r3, r7, #32
 80101fe:	68f9      	ldr	r1, [r7, #12]
 8010200:	4618      	mov	r0, r3
 8010202:	f7f7 f9f3 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8010206:	68f8      	ldr	r0, [r7, #12]
 8010208:	f7f7 fa58 	bl	80076bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 801020c:	4603      	mov	r3, r0
 801020e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010212:	f107 0120 	add.w	r1, r7, #32
 8010216:	f107 0010 	add.w	r0, r7, #16
 801021a:	9300      	str	r3, [sp, #0]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f000 fdc3 	bl	8010da8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8010222:	f107 0310 	add.w	r3, r7, #16
 8010226:	4618      	mov	r0, r3
 8010228:	f000 fdd8 	bl	8010ddc <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>
  DstEvaluatorType dstEvaluator(dst);
 801022c:	f107 0320 	add.w	r3, r7, #32
 8010230:	4618      	mov	r0, r3
 8010232:	f7f6 ffcc 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8010236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801023a:	4618      	mov	r0, r3
 801023c:	f7ff ffbf 	bl	80101be <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
}
 8010240:	bf00      	nop
 8010242:	3738      	adds	r7, #56	; 0x38
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6839      	ldr	r1, [r7, #0]
 8010256:	4618      	mov	r0, r3
 8010258:	f000 fdcb 	bl	8010df2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	4618      	mov	r0, r3
 8010260:	3708      	adds	r7, #8
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}

08010266 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8010266:	b480      	push	{r7}
 8010268:	b083      	sub	sp, #12
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4618      	mov	r0, r3
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801027c:	b5b0      	push	{r4, r5, r7, lr}
 801027e:	b084      	sub	sp, #16
 8010280:	af00      	add	r7, sp, #0
 8010282:	60f8      	str	r0, [r7, #12]
 8010284:	60b9      	str	r1, [r7, #8]
 8010286:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681c      	ldr	r4, [r3, #0]
 801028c:	68f8      	ldr	r0, [r7, #12]
 801028e:	f000 fdc4 	bl	8010e1a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8010292:	4602      	mov	r2, r0
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	fb03 f502 	mul.w	r5, r3, r2
 801029a:	68f8      	ldr	r0, [r7, #12]
 801029c:	f000 fdc8 	bl	8010e30 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 80102a0:	4602      	mov	r2, r0
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	fb02 f303 	mul.w	r3, r2, r3
 80102a8:	442b      	add	r3, r5
 80102aa:	009b      	lsls	r3, r3, #2
 80102ac:	4423      	add	r3, r4
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	ee07 3a90 	vmov	s15, r3
  }
 80102b4:	eeb0 0a67 	vmov.f32	s0, s15
 80102b8:	3710      	adds	r7, #16
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bdb0      	pop	{r4, r5, r7, pc}

080102be <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80102be:	b590      	push	{r4, r7, lr}
 80102c0:	b083      	sub	sp, #12
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
 80102c6:	6039      	str	r1, [r7, #0]
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f000 fdc7 	bl	8010e5c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 80102ce:	687c      	ldr	r4, [r7, #4]
 80102d0:	6838      	ldr	r0, [r7, #0]
 80102d2:	f000 fdb8 	bl	8010e46 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>
 80102d6:	4603      	mov	r3, r0
 80102d8:	4619      	mov	r1, r3
 80102da:	4620      	mov	r0, r4
 80102dc:	f000 fdc9 	bl	8010e72 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	4618      	mov	r0, r3
 80102e4:	370c      	adds	r7, #12
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd90      	pop	{r4, r7, pc}

080102ea <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80102ea:	b580      	push	{r7, lr}
 80102ec:	b082      	sub	sp, #8
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
 80102f2:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6839      	ldr	r1, [r7, #0]
 80102f8:	4618      	mov	r0, r3
 80102fa:	f000 fdc9 	bl	8010e90 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	4618      	mov	r0, r3
 8010302:	f000 fdef 	bl	8010ee4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 8010306:	bf00      	nop
  }
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	4618      	mov	r0, r3
 801030c:	3708      	adds	r7, #8
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}

08010312 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T value() const { return m_value; }
 8010312:	b480      	push	{r7}
 8010314:	b083      	sub	sp, #12
 8010316:	af00      	add	r7, sp, #0
 8010318:	6078      	str	r0, [r7, #4]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	4618      	mov	r0, r3
 8010320:	370c      	adds	r7, #12
 8010322:	46bd      	mov	sp, r7
 8010324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010328:	4770      	bx	lr

0801032a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801032a:	b5b0      	push	{r4, r5, r7, lr}
 801032c:	b086      	sub	sp, #24
 801032e:	af00      	add	r7, sp, #0
 8010330:	60f8      	str	r0, [r7, #12]
 8010332:	60b9      	str	r1, [r7, #8]
 8010334:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	4618      	mov	r0, r3
 801033a:	f000 fddf 	bl	8010efc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 801033e:	4604      	mov	r4, r0
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	3304      	adds	r3, #4
 8010344:	687a      	ldr	r2, [r7, #4]
 8010346:	68b9      	ldr	r1, [r7, #8]
 8010348:	4618      	mov	r0, r3
 801034a:	f000 fde2 	bl	8010f12 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 801034e:	4605      	mov	r5, r0
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	3308      	adds	r3, #8
 8010354:	687a      	ldr	r2, [r7, #4]
 8010356:	68b9      	ldr	r1, [r7, #8]
 8010358:	4618      	mov	r0, r3
 801035a:	f000 fdf2 	bl	8010f42 <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>
 801035e:	eef0 7a40 	vmov.f32	s15, s0
 8010362:	edc7 7a05 	vstr	s15, [r7, #20]
 8010366:	f107 0314 	add.w	r3, r7, #20
 801036a:	461a      	mov	r2, r3
 801036c:	4629      	mov	r1, r5
 801036e:	4620      	mov	r0, r4
 8010370:	f7fe fe76 	bl	800f060 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8010374:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010378:	eeb0 0a67 	vmov.f32	s0, s15
 801037c:	3718      	adds	r7, #24
 801037e:	46bd      	mov	sp, r7
 8010380:	bdb0      	pop	{r4, r5, r7, pc}

08010382 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010382:	b480      	push	{r7}
 8010384:	b083      	sub	sp, #12
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	4618      	mov	r0, r3
 801038e:	370c      	adds	r7, #12
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr

08010398 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010398:	b480      	push	{r7}
 801039a:	b083      	sub	sp, #12
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4618      	mov	r0, r3
 80103a4:	370c      	adds	r7, #12
 80103a6:	46bd      	mov	sp, r7
 80103a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ac:	4770      	bx	lr

080103ae <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80103ae:	b580      	push	{r7, lr}
 80103b0:	b082      	sub	sp, #8
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	6078      	str	r0, [r7, #4]
 80103b6:	6039      	str	r1, [r7, #0]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6839      	ldr	r1, [r7, #0]
 80103bc:	4618      	mov	r0, r3
 80103be:	f000 fdd4 	bl	8010f6a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4618      	mov	r0, r3
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80103cc:	b590      	push	{r4, r7, lr}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 fdf2 	bl	8010fc0 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	4618      	mov	r0, r3
 80103e0:	f000 f81e 	bl	8010420 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 80103e4:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	601a      	str	r2, [r3, #0]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	1d1c      	adds	r4, r3, #4
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	4618      	mov	r0, r3
 80103f2:	f000 fdc9 	bl	8010f88 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 80103f6:	4603      	mov	r3, r0
 80103f8:	4619      	mov	r1, r3
 80103fa:	4620      	mov	r0, r4
 80103fc:	f7f6 fa04 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	1d5c      	adds	r4, r3, #5
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	4618      	mov	r0, r3
 8010408:	f000 fdcc 	bl	8010fa4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 801040c:	4603      	mov	r3, r0
 801040e:	4619      	mov	r1, r3
 8010410:	4620      	mov	r0, r4
 8010412:	f7f6 f9df 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	4618      	mov	r0, r3
 801041a:	370c      	adds	r7, #12
 801041c:	46bd      	mov	sp, r7
 801041e:	bd90      	pop	{r4, r7, pc}

08010420 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8010420:	b480      	push	{r7}
 8010422:	b083      	sub	sp, #12
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4618      	mov	r0, r3
 801042e:	370c      	adds	r7, #12
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr

08010438 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010438:	b580      	push	{r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8010440:	f7f6 fa07 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8010444:	4603      	mov	r3, r0
  }
 8010446:	4618      	mov	r0, r3
 8010448:	3708      	adds	r7, #8
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 801044e:	b580      	push	{r7, lr}
 8010450:	b082      	sub	sp, #8
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8010456:	f7f6 fa04 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801045a:	4603      	mov	r3, r0
  }
 801045c:	4618      	mov	r0, r3
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f000 fdb2 	bl	8010fd6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	4618      	mov	r0, r3
 8010476:	3708      	adds	r7, #8
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}

0801047c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>:
class dense_product_base
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f7ff ffed 	bl	8010464 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	4618      	mov	r0, r3
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7ff ffed 	bl	801047c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	4618      	mov	r0, r3
 80104a6:	3708      	adds	r7, #8
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80104ac:	b590      	push	{r4, r7, lr}
 80104ae:	b085      	sub	sp, #20
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	607a      	str	r2, [r7, #4]
 80104b8:	68f8      	ldr	r0, [r7, #12]
 80104ba:	f7ff ffeb 	bl	8010494 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	68ba      	ldr	r2, [r7, #8]
 80104c2:	601a      	str	r2, [r3, #0]
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	687a      	ldr	r2, [r7, #4]
 80104c8:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7f4 fbeb 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80104d2:	4604      	mov	r4, r0
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7f4 fbf1 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80104dc:	4603      	mov	r3, r0
 80104de:	429c      	cmp	r4, r3
 80104e0:	d005      	beq.n	80104ee <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x42>
 80104e2:	4b06      	ldr	r3, [pc, #24]	; (80104fc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x50>)
 80104e4:	4a06      	ldr	r2, [pc, #24]	; (8010500 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x54>)
 80104e6:	2160      	movs	r1, #96	; 0x60
 80104e8:	4806      	ldr	r0, [pc, #24]	; (8010504 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x58>)
 80104ea:	f00d faff 	bl	801daec <__assert_func>
 80104ee:	bf00      	nop
    }
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	4618      	mov	r0, r3
 80104f4:	3714      	adds	r7, #20
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd90      	pop	{r4, r7, pc}
 80104fa:	bf00      	nop
 80104fc:	0801fc14 	.word	0x0801fc14
 8010500:	080278c0 	.word	0x080278c0
 8010504:	0801ff64 	.word	0x0801ff64

08010508 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8010508:	b580      	push	{r7, lr}
 801050a:	b084      	sub	sp, #16
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	60b9      	str	r1, [r7, #8]
 8010512:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8010514:	68b9      	ldr	r1, [r7, #8]
 8010516:	68f8      	ldr	r0, [r7, #12]
 8010518:	f000 fd68 	bl	8010fec <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 801051c:	687a      	ldr	r2, [r7, #4]
 801051e:	68b9      	ldr	r1, [r7, #8]
 8010520:	68f8      	ldr	r0, [r7, #12]
 8010522:	f000 fda6 	bl	8011072 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8010526:	bf00      	nop
 8010528:	3710      	adds	r7, #16
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 801052e:	b580      	push	{r7, lr}
 8010530:	b082      	sub	sp, #8
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7f5 f8d2 	bl	80056e0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 801053c:	4603      	mov	r3, r0
 801053e:	4618      	mov	r0, r3
 8010540:	f7fd fadc 	bl	800dafc <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010544:	4603      	mov	r3, r0
 8010546:	4618      	mov	r0, r3
 8010548:	f7f7 fcf2 	bl	8007f30 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 801054c:	4603      	mov	r3, r0
 801054e:	4618      	mov	r0, r3
 8010550:	3708      	adds	r7, #8
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}

08010556 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 8010556:	b580      	push	{r7, lr}
 8010558:	b082      	sub	sp, #8
 801055a:	af00      	add	r7, sp, #0
 801055c:	6078      	str	r0, [r7, #4]
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7f5 f8be 	bl	80056e0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010564:	4603      	mov	r3, r0
 8010566:	4618      	mov	r0, r3
 8010568:	f7fd fac8 	bl	800dafc <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 801056c:	4603      	mov	r3, r0
 801056e:	4618      	mov	r0, r3
 8010570:	f7fd f968 	bl	800d844 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8010574:	4603      	mov	r3, r0
 8010576:	4618      	mov	r0, r3
 8010578:	3708      	adds	r7, #8
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}

0801057e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 801057e:	b580      	push	{r7, lr}
 8010580:	b082      	sub	sp, #8
 8010582:	af00      	add	r7, sp, #0
 8010584:	6078      	str	r0, [r7, #4]
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f7f5 f8aa 	bl	80056e0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 801058c:	4603      	mov	r3, r0
 801058e:	4618      	mov	r0, r3
 8010590:	f7fd fab4 	bl	800dafc <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010594:	4603      	mov	r3, r0
 8010596:	4618      	mov	r0, r3
 8010598:	f7f7 ff04 	bl	80083a4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 801059c:	4603      	mov	r3, r0
 801059e:	4618      	mov	r0, r3
 80105a0:	3708      	adds	r7, #8
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}

080105a6 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
 80105a6:	b580      	push	{r7, lr}
 80105a8:	b082      	sub	sp, #8
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 fd97 	bl	80110e2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	4618      	mov	r0, r3
 80105b8:	3708      	adds	r7, #8
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
	...

080105c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	60f8      	str	r0, [r7, #12]
 80105c8:	60b9      	str	r1, [r7, #8]
 80105ca:	607a      	str	r2, [r7, #4]
 80105cc:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 80105ce:	68f8      	ldr	r0, [r7, #12]
 80105d0:	f7ff ffe9 	bl	80105a6 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	68ba      	ldr	r2, [r7, #8]
 80105d8:	601a      	str	r2, [r3, #0]
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	3304      	adds	r3, #4
 80105de:	6879      	ldr	r1, [r7, #4]
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7f6 f8f7 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	3305      	adds	r3, #5
 80105ea:	6839      	ldr	r1, [r7, #0]
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7f6 f90b 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d011      	beq.n	801061c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	db08      	blt.n	8010610 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2b03      	cmp	r3, #3
 8010602:	d105      	bne.n	8010610 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	db02      	blt.n	8010610 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	2b01      	cmp	r3, #1
 801060e:	d005      	beq.n	801061c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8010610:	4b07      	ldr	r3, [pc, #28]	; (8010630 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 8010612:	4a08      	ldr	r2, [pc, #32]	; (8010634 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 8010614:	21b0      	movs	r1, #176	; 0xb0
 8010616:	4808      	ldr	r0, [pc, #32]	; (8010638 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 8010618:	f00d fa68 	bl	801daec <__assert_func>
      checkSanity<Derived>();
 801061c:	2100      	movs	r1, #0
 801061e:	68f8      	ldr	r0, [r7, #12]
 8010620:	f000 fd6a 	bl	80110f8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	4618      	mov	r0, r3
 8010628:	3710      	adds	r7, #16
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}
 801062e:	bf00      	nop
 8010630:	08026078 	.word	0x08026078
 8010634:	080279e8 	.word	0x080279e8
 8010638:	08026228 	.word	0x08026228

0801063c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>:
    void init()
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 8010648:	4618      	mov	r0, r3
 801064a:	f7ff ff84 	bl	8010556 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 801064e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	615a      	str	r2, [r3, #20]
    }
 8010654:	bf00      	nop
 8010656:	3708      	adds	r7, #8
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	6039      	str	r1, [r7, #0]
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f000 fd51 	bl	801110e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6839      	ldr	r1, [r7, #0]
 8010670:	4618      	mov	r0, r3
 8010672:	f000 fd57 	bl	8011124 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4618      	mov	r0, r3
 801067a:	3708      	adds	r7, #8
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}

08010680 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801068a:	2200      	movs	r2, #0
 801068c:	2100      	movs	r1, #0
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f000 fd70 	bl	8011174 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8010694:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010698:	eeb0 0a67 	vmov.f32	s0, s15
 801069c:	3708      	adds	r7, #8
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80106a2:	b580      	push	{r7, lr}
 80106a4:	b084      	sub	sp, #16
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
 80106aa:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80106ac:	6839      	ldr	r1, [r7, #0]
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f000 fd73 	bl	801119a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 80106b4:	eef0 7a40 	vmov.f32	s15, s0
 80106b8:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80106bc:	6839      	ldr	r1, [r7, #0]
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f000 fd7c 	bl	80111bc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 80106c4:	eef0 7a40 	vmov.f32	s15, s0
 80106c8:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80106cc:	f107 020c 	add.w	r2, r7, #12
 80106d0:	f107 0308 	add.w	r3, r7, #8
 80106d4:	4619      	mov	r1, r3
 80106d6:	6838      	ldr	r0, [r7, #0]
 80106d8:	f7f8 fc81 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80106dc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80106e0:	eeb0 0a67 	vmov.f32	s0, s15
 80106e4:	3710      	adds	r7, #16
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}

080106ea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80106ea:	b580      	push	{r7, lr}
 80106ec:	b082      	sub	sp, #8
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80106f2:	2202      	movs	r2, #2
 80106f4:	2102      	movs	r1, #2
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f7fc f8c3 	bl	800c882 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f000 fd6e 	bl	80111de <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>
  }
 8010702:	bf00      	nop
 8010704:	3708      	adds	r7, #8
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}

0801070a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 801070a:	b480      	push	{r7}
 801070c:	b083      	sub	sp, #12
 801070e:	af00      	add	r7, sp, #0
 8010710:	6078      	str	r0, [r7, #4]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	4618      	mov	r0, r3
 8010718:	370c      	adds	r7, #12
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr

08010722 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8010722:	b480      	push	{r7}
 8010724:	b083      	sub	sp, #12
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	3304      	adds	r3, #4
 801072e:	4618      	mov	r0, r3
 8010730:	370c      	adds	r7, #12
 8010732:	46bd      	mov	sp, r7
 8010734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010738:	4770      	bx	lr

0801073a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801073a:	b480      	push	{r7}
 801073c:	b083      	sub	sp, #12
 801073e:	af00      	add	r7, sp, #0
 8010740:	6078      	str	r0, [r7, #4]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	4618      	mov	r0, r3
 8010746:	370c      	adds	r7, #12
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr

08010750 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	6039      	str	r1, [r7, #0]
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6839      	ldr	r1, [r7, #0]
 801075e:	4618      	mov	r0, r3
 8010760:	f000 fd47 	bl	80111f2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	4618      	mov	r0, r3
 8010768:	3708      	adds	r7, #8
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 801076e:	b5b0      	push	{r4, r5, r7, lr}
 8010770:	b084      	sub	sp, #16
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
 8010776:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	689c      	ldr	r4, [r3, #8]
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	6839      	ldr	r1, [r7, #0]
 8010782:	4618      	mov	r0, r3
 8010784:	f7f7 fe81 	bl	800848a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8010788:	4605      	mov	r5, r0
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	685b      	ldr	r3, [r3, #4]
 801078e:	6839      	ldr	r1, [r7, #0]
 8010790:	4618      	mov	r0, r3
 8010792:	f000 fd44 	bl	801121e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>
 8010796:	eef0 7a40 	vmov.f32	s15, s0
 801079a:	edc7 7a03 	vstr	s15, [r7, #12]
 801079e:	f107 030c 	add.w	r3, r7, #12
 80107a2:	461a      	mov	r2, r3
 80107a4:	4629      	mov	r1, r5
 80107a6:	4620      	mov	r0, r4
 80107a8:	f7f7 fe28 	bl	80083fc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80107ac:	bf00      	nop
 80107ae:	3710      	adds	r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bdb0      	pop	{r4, r5, r7, pc}

080107b4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80107bc:	2101      	movs	r1, #1
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f7ff ffd5 	bl	801076e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f000 fd63 	bl	8011290 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>
  }
 80107ca:	bf00      	nop
 80107cc:	3708      	adds	r7, #8
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}

080107d2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80107d2:	b580      	push	{r7, lr}
 80107d4:	b082      	sub	sp, #8
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	6078      	str	r0, [r7, #4]
 80107da:	6039      	str	r1, [r7, #0]
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6839      	ldr	r1, [r7, #0]
 80107e0:	4618      	mov	r0, r3
 80107e2:	f000 fd64 	bl	80112ae <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	4618      	mov	r0, r3
 80107ea:	3708      	adds	r7, #8
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80107f0:	b480      	push	{r7}
 80107f2:	b083      	sub	sp, #12
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	4618      	mov	r0, r3
 80107fc:	370c      	adds	r7, #12
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr
	...

08010808 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8010808:	b580      	push	{r7, lr}
 801080a:	b086      	sub	sp, #24
 801080c:	af00      	add	r7, sp, #0
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8010814:	68b8      	ldr	r0, [r7, #8]
 8010816:	f7f5 faa4 	bl	8005d62 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 801081a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 801081c:	68b8      	ldr	r0, [r7, #8]
 801081e:	f7f5 faad 	bl	8005d7c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010822:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	4618      	mov	r0, r3
 8010828:	f7f5 fa39 	bl	8005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 801082c:	4602      	mov	r2, r0
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	4293      	cmp	r3, r2
 8010832:	d107      	bne.n	8010844 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	4618      	mov	r0, r3
 8010838:	f7f5 fa3c 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 801083c:	4602      	mov	r2, r0
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	4293      	cmp	r3, r2
 8010842:	d001      	beq.n	8010848 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8010844:	2301      	movs	r3, #1
 8010846:	e000      	b.n	801084a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8010848:	2300      	movs	r3, #0
 801084a:	2b00      	cmp	r3, #0
 801084c:	d005      	beq.n	801085a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	693a      	ldr	r2, [r7, #16]
 8010852:	6979      	ldr	r1, [r7, #20]
 8010854:	4618      	mov	r0, r3
 8010856:	f7fc fd73 	bl	800d340 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	4618      	mov	r0, r3
 801085e:	f7f5 fa1e 	bl	8005c9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010862:	4602      	mov	r2, r0
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	4293      	cmp	r3, r2
 8010868:	d107      	bne.n	801087a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	4618      	mov	r0, r3
 801086e:	f7f5 fa21 	bl	8005cb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010872:	4602      	mov	r2, r0
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	4293      	cmp	r3, r2
 8010878:	d006      	beq.n	8010888 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 801087a:	4b05      	ldr	r3, [pc, #20]	; (8010890 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 801087c:	4a05      	ldr	r2, [pc, #20]	; (8010894 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 801087e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8010882:	4805      	ldr	r0, [pc, #20]	; (8010898 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8010884:	f00d f932 	bl	801daec <__assert_func>
}
 8010888:	bf00      	nop
 801088a:	3718      	adds	r7, #24
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}
 8010890:	08021fcc 	.word	0x08021fcc
 8010894:	08027b00 	.word	0x08027b00
 8010898:	080220e0 	.word	0x080220e0

0801089c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 801089c:	b480      	push	{r7}
 801089e:	b085      	sub	sp, #20
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	60f8      	str	r0, [r7, #12]
 80108a4:	60b9      	str	r1, [r7, #8]
 80108a6:	607a      	str	r2, [r7, #4]
 80108a8:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	68ba      	ldr	r2, [r7, #8]
 80108ae:	601a      	str	r2, [r3, #0]
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	687a      	ldr	r2, [r7, #4]
 80108b4:	605a      	str	r2, [r3, #4]
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	683a      	ldr	r2, [r7, #0]
 80108ba:	609a      	str	r2, [r3, #8]
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	69ba      	ldr	r2, [r7, #24]
 80108c0:	60da      	str	r2, [r3, #12]
  }
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	4618      	mov	r0, r3
 80108c6:	3714      	adds	r7, #20
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f000 fcfa 	bl	80112d2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>
  }
 80108de:	bf00      	nop
 80108e0:	3708      	adds	r7, #8
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}

080108e6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 80108e6:	b480      	push	{r7}
 80108e8:	b083      	sub	sp, #12
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	6078      	str	r0, [r7, #4]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	4618      	mov	r0, r3
 80108f2:	370c      	adds	r7, #12
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr

080108fc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80108fc:	b480      	push	{r7}
 80108fe:	b083      	sub	sp, #12
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	4618      	mov	r0, r3
 8010908:	370c      	adds	r7, #12
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr

08010912 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010912:	b580      	push	{r7, lr}
 8010914:	b082      	sub	sp, #8
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
 801091a:	6039      	str	r1, [r7, #0]
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6839      	ldr	r1, [r7, #0]
 8010920:	4618      	mov	r0, r3
 8010922:	f000 fce5 	bl	80112f0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	4618      	mov	r0, r3
 801092a:	3708      	adds	r7, #8
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8010930:	b590      	push	{r4, r7, lr}
 8010932:	b083      	sub	sp, #12
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f000 fd03 	bl	8011346 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	4618      	mov	r0, r3
 8010944:	f000 f81e 	bl	8010984 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 8010948:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	601a      	str	r2, [r3, #0]
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	1d1c      	adds	r4, r3, #4
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	4618      	mov	r0, r3
 8010956:	f000 fcda 	bl	801130e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>
 801095a:	4603      	mov	r3, r0
 801095c:	4619      	mov	r1, r3
 801095e:	4620      	mov	r0, r4
 8010960:	f7f5 ff52 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	1d5c      	adds	r4, r3, #5
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	4618      	mov	r0, r3
 801096c:	f000 fcdd 	bl	801132a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>
 8010970:	4603      	mov	r3, r0
 8010972:	4619      	mov	r1, r3
 8010974:	4620      	mov	r0, r4
 8010976:	f7f5 ff47 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	4618      	mov	r0, r3
 801097e:	370c      	adds	r7, #12
 8010980:	46bd      	mov	sp, r7
 8010982:	bd90      	pop	{r4, r7, pc}

08010984 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	4618      	mov	r0, r3
 8010992:	370c      	adds	r7, #12
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr

0801099c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80109a4:	2100      	movs	r1, #0
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f000 fcd8 	bl	801135c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f000 fcf3 	bl	8011398 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>
  }
 80109b2:	bf00      	nop
 80109b4:	3708      	adds	r7, #8
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}

080109ba <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 80109ba:	b580      	push	{r7, lr}
 80109bc:	b082      	sub	sp, #8
 80109be:	af00      	add	r7, sp, #0
 80109c0:	6078      	str	r0, [r7, #4]
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 fcf2 	bl	80113ac <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	4618      	mov	r0, r3
 80109cc:	3708      	adds	r7, #8
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}

080109d2 <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 80109d2:	b580      	push	{r7, lr}
 80109d4:	b082      	sub	sp, #8
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f7ff ffed 	bl	80109ba <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	4618      	mov	r0, r3
 80109e4:	3708      	adds	r7, #8
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}

080109ea <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 80109ea:	b580      	push	{r7, lr}
 80109ec:	b082      	sub	sp, #8
 80109ee:	af00      	add	r7, sp, #0
 80109f0:	6078      	str	r0, [r7, #4]
 80109f2:	6039      	str	r1, [r7, #0]
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f7ff ffec 	bl	80109d2 <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	683a      	ldr	r2, [r7, #0]
 80109fe:	601a      	str	r2, [r3, #0]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	4618      	mov	r0, r3
 8010a04:	3708      	adds	r7, #8
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}

08010a0a <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8010a0a:	b480      	push	{r7}
 8010a0c:	b083      	sub	sp, #12
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	4618      	mov	r0, r3
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr

08010a20 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f000 fcca 	bl	80113c2 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	4618      	mov	r0, r3
 8010a32:	3708      	adds	r7, #8
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b082      	sub	sp, #8
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f7ff ffed 	bl	8010a20 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3708      	adds	r7, #8
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}

08010a50 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7f4 fae5 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010a62:	4603      	mov	r3, r0
 8010a64:	4618      	mov	r0, r3
 8010a66:	3708      	adds	r7, #8
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7f4 fae2 	bl	8005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	4618      	mov	r0, r3
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8010a88:	b590      	push	{r4, r7, lr}
 8010a8a:	b085      	sub	sp, #20
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	60b9      	str	r1, [r7, #8]
 8010a92:	607a      	str	r2, [r7, #4]
 8010a94:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8010a96:	68f8      	ldr	r0, [r7, #12]
 8010a98:	f7ff ffce 	bl	8010a38 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	68ba      	ldr	r2, [r7, #8]
 8010aa0:	6812      	ldr	r2, [r2, #0]
 8010aa2:	601a      	str	r2, [r3, #0]
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	605a      	str	r2, [r3, #4]
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	3308      	adds	r3, #8
 8010aae:	6839      	ldr	r1, [r7, #0]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7f4 fc2f 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8010ab6:	68b8      	ldr	r0, [r7, #8]
 8010ab8:	f7ff ffca 	bl	8010a50 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010abc:	4604      	mov	r4, r0
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7f4 f9a2 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	429c      	cmp	r4, r3
 8010aca:	d10a      	bne.n	8010ae2 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x5a>
 8010acc:	68b8      	ldr	r0, [r7, #8]
 8010ace:	f7ff ffcd 	bl	8010a6c <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010ad2:	4604      	mov	r4, r0
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7f4 f98c 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010adc:	4603      	mov	r3, r0
 8010ade:	429c      	cmp	r4, r3
 8010ae0:	d005      	beq.n	8010aee <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x66>
 8010ae2:	4b05      	ldr	r3, [pc, #20]	; (8010af8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x70>)
 8010ae4:	4a05      	ldr	r2, [pc, #20]	; (8010afc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x74>)
 8010ae6:	2174      	movs	r1, #116	; 0x74
 8010ae8:	4805      	ldr	r0, [pc, #20]	; (8010b00 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x78>)
 8010aea:	f00c ffff 	bl	801daec <__assert_func>
    }
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	4618      	mov	r0, r3
 8010af2:	3714      	adds	r7, #20
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd90      	pop	{r4, r7, pc}
 8010af8:	0801f954 	.word	0x0801f954
 8010afc:	08027cc4 	.word	0x08027cc4
 8010b00:	0801fbb8 	.word	0x0801fbb8

08010b04 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	6878      	ldr	r0, [r7, #4]
 8010b0e:	f000 f809 	bl	8010b24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010b12:	4603      	mov	r3, r0
 8010b14:	4618      	mov	r0, r3
 8010b16:	f000 fc5f 	bl	80113d8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8010b24:	b480      	push	{r7}
 8010b26:	b083      	sub	sp, #12
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	370c      	adds	r7, #12
 8010b32:	46bd      	mov	sp, r7
 8010b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b38:	4770      	bx	lr

08010b3a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8010b3a:	b580      	push	{r7, lr}
 8010b3c:	b082      	sub	sp, #8
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7ff ff83 	bl	8010a50 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010b4a:	4603      	mov	r3, r0
    }
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3708      	adds	r7, #8
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}

08010b54 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<const T>
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7fe f968 	bl	800ee34 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	4618      	mov	r0, r3
 8010b68:	3708      	adds	r7, #8
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}

08010b6e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8010b6e:	b580      	push	{r7, lr}
 8010b70:	b082      	sub	sp, #8
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7ff ffeb 	bl	8010b54 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 fc51 	bl	8011426 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	4618      	mov	r0, r3
 8010b88:	3708      	adds	r7, #8
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}

08010b8e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b082      	sub	sp, #8
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7ff ffe8 	bl	8010b6e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3708      	adds	r7, #8
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<const T>
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b082      	sub	sp, #8
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f7ff ffeb 	bl	8010b8e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3708      	adds	r7, #8
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}

08010bc2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 8010bc2:	b580      	push	{r7, lr}
 8010bc4:	b082      	sub	sp, #8
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	3308      	adds	r3, #8
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7f8 f824 	bl	8008c1c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	3304      	adds	r3, #4
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7ff ffe5 	bl	8010ba8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	4618      	mov	r0, r3
 8010be2:	3708      	adds	r7, #8
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7ff ffe5 	bl	8010bc2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f000 fc09 	bl	8011410 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	4618      	mov	r0, r3
 8010c02:	3708      	adds	r7, #8
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7ff ffe8 	bl	8010be8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3708      	adds	r7, #8
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}

08010c22 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8010c22:	b580      	push	{r7, lr}
 8010c24:	b082      	sub	sp, #8
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7ff ffeb 	bl	8010c08 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	4618      	mov	r0, r3
 8010c36:	3708      	adds	r7, #8
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	ed2d 8b02 	vpush	{d8}
 8010c42:	b086      	sub	sp, #24
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f7ff fa4b 	bl	80100e6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>
 8010c50:	4603      	mov	r3, r0
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	dd05      	ble.n	8010c62 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f7ff ff54 	bl	8010b04 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	dc06      	bgt.n	8010c70 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8010c62:	4b16      	ldr	r3, [pc, #88]	; (8010cbc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8010c64:	4a16      	ldr	r2, [pc, #88]	; (8010cc0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8010c66:	f240 119b 	movw	r1, #411	; 0x19b
 8010c6a:	4816      	ldr	r0, [pc, #88]	; (8010cc4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8010c6c:	f00c ff3e 	bl	801daec <__assert_func>
 8010c70:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f7ff ff56 	bl	8010b24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010c78:	4602      	mov	r2, r0
 8010c7a:	f107 030c 	add.w	r3, r7, #12
 8010c7e:	4611      	mov	r1, r2
 8010c80:	4618      	mov	r0, r3
 8010c82:	f000 fbb6 	bl	80113f2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f7ff ff4c 	bl	8010b24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	f107 030c 	add.w	r3, r7, #12
 8010c92:	6839      	ldr	r1, [r7, #0]
 8010c94:	4618      	mov	r0, r3
 8010c96:	f000 fbd1 	bl	801143c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>
 8010c9a:	eeb0 8a40 	vmov.f32	s16, s0
 8010c9e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8010ca0:	f107 030c 	add.w	r3, r7, #12
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7ff ffbc 	bl	8010c22 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8010caa:	eef0 7a48 	vmov.f32	s15, s16
}
 8010cae:	eeb0 0a67 	vmov.f32	s0, s15
 8010cb2:	3718      	adds	r7, #24
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	ecbd 8b02 	vpop	{d8}
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	080249d4 	.word	0x080249d4
 8010cc0:	08027e8c 	.word	0x08027e8c
 8010cc4:	08024be0 	.word	0x08024be0

08010cc8 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>:
    static void run(const Derived&, const OtherDerived&)
 8010cc8:	b480      	push	{r7}
 8010cca:	b083      	sub	sp, #12
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	6039      	str	r1, [r7, #0]
    }
 8010cd2:	bf00      	nop
 8010cd4:	370c      	adds	r7, #12
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cdc:	4770      	bx	lr

08010cde <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010cde:	b580      	push	{r7, lr}
 8010ce0:	b082      	sub	sp, #8
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	6078      	str	r0, [r7, #4]
 8010ce6:	6039      	str	r1, [r7, #0]
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6839      	ldr	r1, [r7, #0]
 8010cec:	4618      	mov	r0, r3
 8010cee:	f000 fbb6 	bl	801145e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3708      	adds	r7, #8
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}

08010cfc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010cfc:	b480      	push	{r7}
 8010cfe:	b083      	sub	sp, #12
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	4618      	mov	r0, r3
 8010d08:	370c      	adds	r7, #12
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d10:	4770      	bx	lr

08010d12 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8010d12:	b580      	push	{r7, lr}
 8010d14:	b082      	sub	sp, #8
 8010d16:	af00      	add	r7, sp, #0
 8010d18:	6078      	str	r0, [r7, #4]
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7f4 f873 	bl	8004e0a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8010d24:	4603      	mov	r3, r0
 8010d26:	4618      	mov	r0, r3
 8010d28:	3708      	adds	r7, #8
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b082      	sub	sp, #8
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	6078      	str	r0, [r7, #4]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	685b      	ldr	r3, [r3, #4]
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7f4 f976 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010d40:	4603      	mov	r3, r0
 8010d42:	4618      	mov	r0, r3
 8010d44:	3708      	adds	r7, #8
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
	...

08010d4c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 8010d4c:	b590      	push	{r4, r7, lr}
 8010d4e:	b085      	sub	sp, #20
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	60f8      	str	r0, [r7, #12]
 8010d54:	60b9      	str	r1, [r7, #8]
 8010d56:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f7f3 ffaf 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010d60:	4604      	mov	r4, r0
 8010d62:	68b8      	ldr	r0, [r7, #8]
 8010d64:	f7ff ffd5 	bl	8010d12 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	429c      	cmp	r4, r3
 8010d6c:	d10a      	bne.n	8010d84 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7f3 ff99 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010d76:	4604      	mov	r4, r0
 8010d78:	68b8      	ldr	r0, [r7, #8]
 8010d7a:	f7ff ffd8 	bl	8010d2e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	429c      	cmp	r4, r3
 8010d82:	d006      	beq.n	8010d92 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 8010d84:	4b05      	ldr	r3, [pc, #20]	; (8010d9c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 8010d86:	4a06      	ldr	r2, [pc, #24]	; (8010da0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 8010d88:	f240 21f2 	movw	r1, #754	; 0x2f2
 8010d8c:	4805      	ldr	r0, [pc, #20]	; (8010da4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 8010d8e:	f00c fead 	bl	801daec <__assert_func>
}
 8010d92:	bf00      	nop
 8010d94:	3714      	adds	r7, #20
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd90      	pop	{r4, r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	080226e8 	.word	0x080226e8
 8010da0:	08028010 	.word	0x08028010
 8010da4:	080220e0 	.word	0x080220e0

08010da8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010da8:	b480      	push	{r7}
 8010daa:	b085      	sub	sp, #20
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	60b9      	str	r1, [r7, #8]
 8010db2:	607a      	str	r2, [r7, #4]
 8010db4:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	68ba      	ldr	r2, [r7, #8]
 8010dba:	601a      	str	r2, [r3, #0]
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	687a      	ldr	r2, [r7, #4]
 8010dc0:	605a      	str	r2, [r3, #4]
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	683a      	ldr	r2, [r7, #0]
 8010dc6:	609a      	str	r2, [r3, #8]
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	69ba      	ldr	r2, [r7, #24]
 8010dcc:	60da      	str	r2, [r3, #12]
  }
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3714      	adds	r7, #20
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr

08010ddc <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f000 fb6f 	bl	80114c8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>
  }
 8010dea:	bf00      	nop
 8010dec:	3708      	adds	r7, #8
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}

08010df2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8010df2:	b580      	push	{r7, lr}
 8010df4:	b082      	sub	sp, #8
 8010df6:	af00      	add	r7, sp, #0
 8010df8:	6078      	str	r0, [r7, #4]
 8010dfa:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6839      	ldr	r1, [r7, #0]
 8010e00:	4618      	mov	r0, r3
 8010e02:	f000 fb71 	bl	80114e8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f000 fb97 	bl	801153c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 8010e0e:	bf00      	nop
  }
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	4618      	mov	r0, r3
 8010e14:	3708      	adds	r7, #8
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}

08010e1a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010e1a:	b580      	push	{r7, lr}
 8010e1c:	b082      	sub	sp, #8
 8010e1e:	af00      	add	r7, sp, #0
 8010e20:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8010e22:	f7f5 fd16 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8010e26:	4603      	mov	r3, r0
  }
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3708      	adds	r7, #8
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8010e38:	f7f5 fd13 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8010e3c:	4603      	mov	r3, r0
  }
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3708      	adds	r7, #8
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}

08010e46 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010e46:	b480      	push	{r7}
 8010e48:	b083      	sub	sp, #12
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	6078      	str	r0, [r7, #4]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	4618      	mov	r0, r3
 8010e52:	370c      	adds	r7, #12
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	4618      	mov	r0, r3
 8010e68:	370c      	adds	r7, #12
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr

08010e72 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010e72:	b580      	push	{r7, lr}
 8010e74:	b082      	sub	sp, #8
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	6078      	str	r0, [r7, #4]
 8010e7a:	6039      	str	r1, [r7, #0]
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6839      	ldr	r1, [r7, #0]
 8010e80:	4618      	mov	r0, r3
 8010e82:	f000 fb67 	bl	8011554 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3708      	adds	r7, #8
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8010e90:	b590      	push	{r4, r7, lr}
 8010e92:	b083      	sub	sp, #12
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f000 fb85 	bl	80115aa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f000 f81e 	bl	8010ee4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 8010ea8:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	601a      	str	r2, [r3, #0]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	1d1c      	adds	r4, r3, #4
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f000 fb5c 	bl	8011572 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	f7f5 fca2 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	1d5c      	adds	r4, r3, #5
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f000 fb5f 	bl	801158e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	f7f5 fc7d 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4618      	mov	r0, r3
 8010ede:	370c      	adds	r7, #12
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd90      	pop	{r4, r7, pc}

08010ee4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>:
 8010ee4:	b480      	push	{r7}
 8010ee6:	b083      	sub	sp, #12
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	370c      	adds	r7, #12
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efa:	4770      	bx	lr

08010efc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	4618      	mov	r0, r3
 8010f08:	370c      	adds	r7, #12
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f10:	4770      	bx	lr

08010f12 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010f12:	b590      	push	{r4, r7, lr}
 8010f14:	b085      	sub	sp, #20
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	60f8      	str	r0, [r7, #12]
 8010f1a:	60b9      	str	r1, [r7, #8]
 8010f1c:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	681c      	ldr	r4, [r3, #0]
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7f5 feef 	bl	8006d08 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	fb03 f202 	mul.w	r2, r3, r2
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	4413      	add	r3, r2
 8010f36:	009b      	lsls	r3, r3, #2
 8010f38:	4423      	add	r3, r4
  }
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3714      	adds	r7, #20
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd90      	pop	{r4, r7, pc}

08010f42 <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>:
  CoeffReturnType coeff(IndexType row, IndexType col) const
 8010f42:	b580      	push	{r7, lr}
 8010f44:	b084      	sub	sp, #16
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	60f8      	str	r0, [r7, #12]
 8010f4a:	60b9      	str	r1, [r7, #8]
 8010f4c:	607a      	str	r2, [r7, #4]
    return m_wrapper(m_functor, row, col);
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	1d18      	adds	r0, r3, #4
 8010f52:	68f9      	ldr	r1, [r7, #12]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	68ba      	ldr	r2, [r7, #8]
 8010f58:	f000 fb32 	bl	80115c0 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>
 8010f5c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010f60:	eeb0 0a67 	vmov.f32	s0, s15
 8010f64:	3710      	adds	r7, #16
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}

08010f6a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8010f6a:	b580      	push	{r7, lr}
 8010f6c:	b082      	sub	sp, #8
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	6078      	str	r0, [r7, #4]
 8010f72:	6039      	str	r1, [r7, #0]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6839      	ldr	r1, [r7, #0]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f000 fb32 	bl	80115e2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>
  }
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	4618      	mov	r0, r3
 8010f82:	3708      	adds	r7, #8
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}

08010f88 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	689b      	ldr	r3, [r3, #8]
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7fc fcca 	bl	800d92e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 8010f9a:	4603      	mov	r3, r0
    }
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	3708      	adds	r7, #8
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	689b      	ldr	r3, [r3, #8]
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7f6 f82d 	bl	8007010 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 8010fb6:	4603      	mov	r3, r0
    }
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3708      	adds	r7, #8
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}

08010fc0 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010fc0:	b480      	push	{r7}
 8010fc2:	b083      	sub	sp, #12
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	4618      	mov	r0, r3
 8010fcc:	370c      	adds	r7, #12
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr

08010fd6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8010fd6:	b480      	push	{r7}
 8010fd8:	b083      	sub	sp, #12
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
    }
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	370c      	adds	r7, #12
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr

08010fec <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b082      	sub	sp, #8
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7f3 fe60 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010ffe:	4603      	mov	r3, r0
 8011000:	2b01      	cmp	r3, #1
 8011002:	dd08      	ble.n	8011016 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	4618      	mov	r0, r3
 8011008:	f7f3 fe4e 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 801100c:	4603      	mov	r3, r0
 801100e:	2b01      	cmp	r3, #1
 8011010:	dd01      	ble.n	8011016 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 8011012:	2301      	movs	r3, #1
 8011014:	e000      	b.n	8011018 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2c>
 8011016:	2300      	movs	r3, #0
 8011018:	2b00      	cmp	r3, #0
 801101a:	d003      	beq.n	8011024 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 801101c:	6839      	ldr	r1, [r7, #0]
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f000 faf3 	bl	801160a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>
}
 8011024:	bf00      	nop
 8011026:	3708      	adds	r7, #8
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	330c      	adds	r3, #12
 8011038:	4618      	mov	r0, r3
 801103a:	f7f6 f8c8 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	3308      	adds	r3, #8
 8011042:	4618      	mov	r0, r3
 8011044:	f7f6 f8c3 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f000 faf8 	bl	801163e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	4618      	mov	r0, r3
 8011052:	3708      	adds	r7, #8
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	4618      	mov	r0, r3
 8011064:	f7ff ffe2 	bl	801102c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	4618      	mov	r0, r3
 801106c:	3708      	adds	r7, #8
 801106e:	46bd      	mov	sp, r7
 8011070:	bd80      	pop	{r7, pc}

08011072 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8011072:	b580      	push	{r7, lr}
 8011074:	b090      	sub	sp, #64	; 0x40
 8011076:	af02      	add	r7, sp, #8
 8011078:	60f8      	str	r0, [r7, #12]
 801107a:	60b9      	str	r1, [r7, #8]
 801107c:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 801107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011082:	68b9      	ldr	r1, [r7, #8]
 8011084:	4618      	mov	r0, r3
 8011086:	f000 facb 	bl	8011620 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>
  resize_if_allowed(dst, src, func);
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	68b9      	ldr	r1, [r7, #8]
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f000 fafc 	bl	801168c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8011094:	f107 0320 	add.w	r3, r7, #32
 8011098:	68f9      	ldr	r1, [r7, #12]
 801109a:	4618      	mov	r0, r3
 801109c:	f7f6 faa6 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80110a0:	68f8      	ldr	r0, [r7, #12]
 80110a2:	f7f6 fb0b 	bl	80076bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80110a6:	4603      	mov	r3, r0
 80110a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80110ac:	f107 0120 	add.w	r1, r7, #32
 80110b0:	f107 0010 	add.w	r0, r7, #16
 80110b4:	9300      	str	r3, [sp, #0]
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f000 fb32 	bl	8011720 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80110bc:	f107 0310 	add.w	r3, r7, #16
 80110c0:	4618      	mov	r0, r3
 80110c2:	f000 fb47 	bl	8011754 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>
  DstEvaluatorType dstEvaluator(dst);
 80110c6:	f107 0320 	add.w	r3, r7, #32
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7f6 f87f 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80110d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7ff ffbf 	bl	8011058 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
}
 80110da:	bf00      	nop
 80110dc:	3738      	adds	r7, #56	; 0x38
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}

080110e2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80110e2:	b480      	push	{r7}
 80110e4:	b083      	sub	sp, #12
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	6078      	str	r0, [r7, #4]
    }
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	4618      	mov	r0, r3
 80110ee:	370c      	adds	r7, #12
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr

080110f8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 80110f8:	b480      	push	{r7}
 80110fa:	b083      	sub	sp, #12
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	6039      	str	r1, [r7, #0]
    {}
 8011102:	bf00      	nop
 8011104:	370c      	adds	r7, #12
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr

0801110e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 801110e:	b480      	push	{r7}
 8011110:	b083      	sub	sp, #12
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	4618      	mov	r0, r3
 801111a:	370c      	adds	r7, #12
 801111c:	46bd      	mov	sp, r7
 801111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011122:	4770      	bx	lr

08011124 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8011124:	b590      	push	{r4, r7, lr}
 8011126:	b083      	sub	sp, #12
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	6039      	str	r1, [r7, #0]
 801112e:	687c      	ldr	r4, [r7, #4]
 8011130:	6838      	ldr	r0, [r7, #0]
 8011132:	f000 fb1a 	bl	801176a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>
 8011136:	4603      	mov	r3, r0
 8011138:	4619      	mov	r1, r3
 801113a:	4620      	mov	r0, r4
 801113c:	f7f4 f8ea 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	1d1c      	adds	r4, r3, #4
 8011144:	6838      	ldr	r0, [r7, #0]
 8011146:	f000 fb1c 	bl	8011782 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>
 801114a:	4603      	mov	r3, r0
 801114c:	4619      	mov	r1, r3
 801114e:	4620      	mov	r0, r4
 8011150:	f7fd fc27 	bl	800e9a2 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f103 040c 	add.w	r4, r3, #12
 801115a:	6838      	ldr	r0, [r7, #0]
 801115c:	f000 fb1c 	bl	8011798 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>
 8011160:	4603      	mov	r3, r0
 8011162:	4619      	mov	r1, r3
 8011164:	4620      	mov	r0, r4
 8011166:	f000 fb23 	bl	80117b0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	4618      	mov	r0, r3
 801116e:	370c      	adds	r7, #12
 8011170:	46bd      	mov	sp, r7
 8011172:	bd90      	pop	{r4, r7, pc}

08011174 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8011174:	b580      	push	{r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	60b9      	str	r1, [r7, #8]
 801117e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	68ba      	ldr	r2, [r7, #8]
 8011184:	6879      	ldr	r1, [r7, #4]
 8011186:	4618      	mov	r0, r3
 8011188:	f000 fb21 	bl	80117ce <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 801118c:	eef0 7a40 	vmov.f32	s15, s0
 8011190:	eeb0 0a67 	vmov.f32	s0, s15
 8011194:	3710      	adds	r7, #16
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}

0801119a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801119a:	b580      	push	{r7, lr}
 801119c:	b082      	sub	sp, #8
 801119e:	af00      	add	r7, sp, #0
 80111a0:	6078      	str	r0, [r7, #4]
 80111a2:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80111a4:	2201      	movs	r2, #1
 80111a6:	2100      	movs	r1, #0
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f7ff ffe3 	bl	8011174 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 80111ae:	eef0 7a40 	vmov.f32	s15, s0
  }
 80111b2:	eeb0 0a67 	vmov.f32	s0, s15
 80111b6:	3708      	adds	r7, #8
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}

080111bc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80111bc:	b580      	push	{r7, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80111c6:	2202      	movs	r2, #2
 80111c8:	2100      	movs	r1, #0
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f7ff ffd2 	bl	8011174 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 80111d0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80111d4:	eeb0 0a67 	vmov.f32	s0, s15
 80111d8:	3708      	adds	r7, #8
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}

080111de <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80111de:	b480      	push	{r7}
 80111e0:	b083      	sub	sp, #12
 80111e2:	af00      	add	r7, sp, #0
 80111e4:	6078      	str	r0, [r7, #4]
 80111e6:	bf00      	nop
 80111e8:	370c      	adds	r7, #12
 80111ea:	46bd      	mov	sp, r7
 80111ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f0:	4770      	bx	lr

080111f2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80111f2:	b590      	push	{r4, r7, lr}
 80111f4:	b083      	sub	sp, #12
 80111f6:	af00      	add	r7, sp, #0
 80111f8:	6078      	str	r0, [r7, #4]
 80111fa:	6039      	str	r1, [r7, #0]
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f000 fb22 	bl	8011846 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8011202:	687c      	ldr	r4, [r7, #4]
 8011204:	6838      	ldr	r0, [r7, #0]
 8011206:	f000 fb12 	bl	801182e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 801120a:	4603      	mov	r3, r0
 801120c:	4619      	mov	r1, r3
 801120e:	4620      	mov	r0, r4
 8011210:	f000 fb24 	bl	801185c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	4618      	mov	r0, r3
 8011218:	370c      	adds	r7, #12
 801121a:	46bd      	mov	sp, r7
 801121c:	bd90      	pop	{r4, r7, pc}

0801121e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 801121e:	b580      	push	{r7, lr}
 8011220:	b0a4      	sub	sp, #144	; 0x90
 8011222:	af00      	add	r7, sp, #0
 8011224:	6078      	str	r0, [r7, #4]
 8011226:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 801122e:	2300      	movs	r3, #0
 8011230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6819      	ldr	r1, [r3, #0]
 8011238:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801123c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011240:	4618      	mov	r0, r3
 8011242:	f7f9 fcdb 	bl	800abfc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 8011246:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801124a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801124e:	4611      	mov	r1, r2
 8011250:	4618      	mov	r0, r3
 8011252:	f7f9 fce6 	bl	800ac22 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	1d19      	adds	r1, r3, #4
 801125a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801125e:	2200      	movs	r2, #0
 8011260:	4618      	mov	r0, r3
 8011262:	f000 fb0b 	bl	801187c <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>
 8011266:	f107 030c 	add.w	r3, r7, #12
 801126a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801126e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8011272:	4618      	mov	r0, r3
 8011274:	f000 fb15 	bl	80118a2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>
 8011278:	f107 030c 	add.w	r3, r7, #12
 801127c:	4618      	mov	r0, r3
 801127e:	f000 fb3e 	bl	80118fe <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>
 8011282:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011286:	eeb0 0a67 	vmov.f32	s0, s15
 801128a:	3790      	adds	r7, #144	; 0x90
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8011298:	2102      	movs	r1, #2
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f7ff fa67 	bl	801076e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f000 fb47 	bl	8011934 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>
  }
 80112a6:	bf00      	nop
 80112a8:	3708      	adds	r7, #8
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}

080112ae <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80112ae:	b580      	push	{r7, lr}
 80112b0:	b082      	sub	sp, #8
 80112b2:	af00      	add	r7, sp, #0
 80112b4:	6078      	str	r0, [r7, #4]
 80112b6:	6039      	str	r1, [r7, #0]
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f000 fb45 	bl	8011948 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6839      	ldr	r1, [r7, #0]
 80112c2:	4618      	mov	r0, r3
 80112c4:	f000 fb4b 	bl	801195e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	4618      	mov	r0, r3
 80112cc:	3708      	adds	r7, #8
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}

080112d2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80112d2:	b580      	push	{r7, lr}
 80112d4:	b082      	sub	sp, #8
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80112da:	2100      	movs	r1, #0
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f000 fb66 	bl	80119ae <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f000 fb86 	bl	80119f4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>
  }
 80112e8:	bf00      	nop
 80112ea:	3708      	adds	r7, #8
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	6039      	str	r1, [r7, #0]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6839      	ldr	r1, [r7, #0]
 80112fe:	4618      	mov	r0, r3
 8011300:	f000 fb82 	bl	8011a08 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	4618      	mov	r0, r3
 8011308:	3708      	adds	r7, #8
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801130e:	b580      	push	{r7, lr}
 8011310:	b082      	sub	sp, #8
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	689b      	ldr	r3, [r3, #8]
 801131a:	4618      	mov	r0, r3
 801131c:	f7fc fd14 	bl	800dd48 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 8011320:	4603      	mov	r3, r0
    }
 8011322:	4618      	mov	r0, r3
 8011324:	3708      	adds	r7, #8
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}

0801132a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801132a:	b580      	push	{r7, lr}
 801132c:	b082      	sub	sp, #8
 801132e:	af00      	add	r7, sp, #0
 8011330:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	689b      	ldr	r3, [r3, #8]
 8011336:	4618      	mov	r0, r3
 8011338:	f7fa fba2 	bl	800ba80 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 801133c:	4603      	mov	r3, r0
    }
 801133e:	4618      	mov	r0, r3
 8011340:	3708      	adds	r7, #8
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}

08011346 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011346:	b480      	push	{r7}
 8011348:	b083      	sub	sp, #12
 801134a:	af00      	add	r7, sp, #0
 801134c:	6078      	str	r0, [r7, #4]
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4618      	mov	r0, r3
 8011352:	370c      	adds	r7, #12
 8011354:	46bd      	mov	sp, r7
 8011356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135a:	4770      	bx	lr

0801135c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 801135c:	b5b0      	push	{r4, r5, r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	689c      	ldr	r4, [r3, #8]
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	6839      	ldr	r1, [r7, #0]
 8011370:	4618      	mov	r0, r3
 8011372:	f000 fb5d 	bl	8011a30 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8011376:	4605      	mov	r5, r0
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	685b      	ldr	r3, [r3, #4]
 801137c:	6839      	ldr	r1, [r7, #0]
 801137e:	4618      	mov	r0, r3
 8011380:	f000 fb66 	bl	8011a50 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8011384:	4603      	mov	r3, r0
 8011386:	461a      	mov	r2, r3
 8011388:	4629      	mov	r1, r5
 801138a:	4620      	mov	r0, r4
 801138c:	f7f7 f836 	bl	80083fc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8011390:	bf00      	nop
 8011392:	3708      	adds	r7, #8
 8011394:	46bd      	mov	sp, r7
 8011396:	bdb0      	pop	{r4, r5, r7, pc}

08011398 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011398:	b480      	push	{r7}
 801139a:	b083      	sub	sp, #12
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	bf00      	nop
 80113a2:	370c      	adds	r7, #12
 80113a4:	46bd      	mov	sp, r7
 80113a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113aa:	4770      	bx	lr

080113ac <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80113ac:	b480      	push	{r7}
 80113ae:	b083      	sub	sp, #12
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
    }
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	4618      	mov	r0, r3
 80113b8:	370c      	adds	r7, #12
 80113ba:	46bd      	mov	sp, r7
 80113bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c0:	4770      	bx	lr

080113c2 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80113c2:	b480      	push	{r7}
 80113c4:	b083      	sub	sp, #12
 80113c6:	af00      	add	r7, sp, #0
 80113c8:	6078      	str	r0, [r7, #4]
    }
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	4618      	mov	r0, r3
 80113ce:	370c      	adds	r7, #12
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr

080113d8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7ff fb42 	bl	8010a6c <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80113e8:	4603      	mov	r3, r0
    }
 80113ea:	4618      	mov	r0, r3
 80113ec:	3708      	adds	r7, #8
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}

080113f2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 80113f2:	b580      	push	{r7, lr}
 80113f4:	b082      	sub	sp, #8
 80113f6:	af00      	add	r7, sp, #0
 80113f8:	6078      	str	r0, [r7, #4]
 80113fa:	6039      	str	r1, [r7, #0]
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6839      	ldr	r1, [r7, #0]
 8011400:	4618      	mov	r0, r3
 8011402:	f000 fb35 	bl	8011a70 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	4618      	mov	r0, r3
 801140a:	3708      	adds	r7, #8
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8011410:	b480      	push	{r7}
 8011412:	b083      	sub	sp, #12
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	4618      	mov	r0, r3
 801141c:	370c      	adds	r7, #12
 801141e:	46bd      	mov	sp, r7
 8011420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011424:	4770      	bx	lr

08011426 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 8011426:	b480      	push	{r7}
 8011428:	b083      	sub	sp, #12
 801142a:	af00      	add	r7, sp, #0
 801142c:	6078      	str	r0, [r7, #4]
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	4618      	mov	r0, r3
 8011432:	370c      	adds	r7, #12
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	4770      	bx	lr

0801143c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 801143c:	b580      	push	{r7, lr}
 801143e:	b084      	sub	sp, #16
 8011440:	af00      	add	r7, sp, #0
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	60b9      	str	r1, [r7, #8]
 8011446:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8011448:	68b9      	ldr	r1, [r7, #8]
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	f000 fb1f 	bl	8011a8e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>
 8011450:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011454:	eeb0 0a67 	vmov.f32	s0, s15
 8011458:	3710      	adds	r7, #16
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}

0801145e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 801145e:	b580      	push	{r7, lr}
 8011460:	b082      	sub	sp, #8
 8011462:	af00      	add	r7, sp, #0
 8011464:	6078      	str	r0, [r7, #4]
 8011466:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f000 fb4c 	bl	8011b06 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 801146e:	6838      	ldr	r0, [r7, #0]
 8011470:	f000 fb31 	bl	8011ad6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8011474:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 801147a:	6838      	ldr	r0, [r7, #0]
 801147c:	f000 fb37 	bl	8011aee <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>
 8011480:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	605a      	str	r2, [r3, #4]
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8011490:	4619      	mov	r1, r3
 8011492:	4610      	mov	r0, r2
 8011494:	f7f5 f95f 	bl	8006756 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 80114a2:	4619      	mov	r1, r3
 80114a4:	4610      	mov	r0, r2
 80114a6:	f000 f9d9 	bl	801185c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 80114aa:	6838      	ldr	r0, [r7, #0]
 80114ac:	f000 fb13 	bl	8011ad6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 80114b0:	4603      	mov	r3, r0
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7f3 fc9e 	bl	8004df4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80114b8:	4602      	mov	r2, r0
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	611a      	str	r2, [r3, #16]
  }
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	4618      	mov	r0, r3
 80114c2:	3708      	adds	r7, #8
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80114d0:	2200      	movs	r2, #0
 80114d2:	2100      	movs	r1, #0
 80114d4:	6878      	ldr	r0, [r7, #4]
 80114d6:	f000 fb21 	bl	8011b1c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f000 fb37 	bl	8011b4e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>
  }
 80114e0:	bf00      	nop
 80114e2:	3708      	adds	r7, #8
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}

080114e8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80114e8:	b590      	push	{r4, r7, lr}
 80114ea:	b083      	sub	sp, #12
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
 80114f0:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f000 fb57 	bl	8011ba6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	4618      	mov	r0, r3
 80114fc:	f000 f81e 	bl	801153c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 8011500:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	601a      	str	r2, [r3, #0]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	1d1c      	adds	r4, r3, #4
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	4618      	mov	r0, r3
 801150e:	f000 fb2e 	bl	8011b6e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 8011512:	4603      	mov	r3, r0
 8011514:	4619      	mov	r1, r3
 8011516:	4620      	mov	r0, r4
 8011518:	f7f5 f976 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	1d5c      	adds	r4, r3, #5
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	4618      	mov	r0, r3
 8011524:	f000 fb31 	bl	8011b8a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8011528:	4603      	mov	r3, r0
 801152a:	4619      	mov	r1, r3
 801152c:	4620      	mov	r0, r4
 801152e:	f7f5 f951 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	4618      	mov	r0, r3
 8011536:	370c      	adds	r7, #12
 8011538:	46bd      	mov	sp, r7
 801153a:	bd90      	pop	{r4, r7, pc}

0801153c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 801153c:	b480      	push	{r7}
 801153e:	b083      	sub	sp, #12
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	4618      	mov	r0, r3
 801154a:	370c      	adds	r7, #12
 801154c:	46bd      	mov	sp, r7
 801154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011552:	4770      	bx	lr

08011554 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011554:	b580      	push	{r7, lr}
 8011556:	b082      	sub	sp, #8
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	6039      	str	r1, [r7, #0]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6839      	ldr	r1, [r7, #0]
 8011562:	4618      	mov	r0, r3
 8011564:	f000 fb2a 	bl	8011bbc <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>
  }
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	4618      	mov	r0, r3
 801156c:	3708      	adds	r7, #8
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011572:	b580      	push	{r7, lr}
 8011574:	b082      	sub	sp, #8
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	3308      	adds	r3, #8
 801157e:	4618      	mov	r0, r3
 8011580:	f7fc fd6a 	bl	800e058 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 8011584:	4603      	mov	r3, r0
    }
 8011586:	4618      	mov	r0, r3
 8011588:	3708      	adds	r7, #8
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}

0801158e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801158e:	b580      	push	{r7, lr}
 8011590:	b082      	sub	sp, #8
 8011592:	af00      	add	r7, sp, #0
 8011594:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	3308      	adds	r3, #8
 801159a:	4618      	mov	r0, r3
 801159c:	f7fc fd70 	bl	800e080 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 80115a0:	4603      	mov	r3, r0
    }
 80115a2:	4618      	mov	r0, r3
 80115a4:	3708      	adds	r7, #8
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}

080115aa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80115aa:	b480      	push	{r7}
 80115ac:	b083      	sub	sp, #12
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	6078      	str	r0, [r7, #4]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	4618      	mov	r0, r3
 80115b6:	370c      	adds	r7, #12
 80115b8:	46bd      	mov	sp, r7
 80115ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115be:	4770      	bx	lr

080115c0 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexType=0) const { return op(); }
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b084      	sub	sp, #16
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	60f8      	str	r0, [r7, #12]
 80115c8:	60b9      	str	r1, [r7, #8]
 80115ca:	607a      	str	r2, [r7, #4]
 80115cc:	603b      	str	r3, [r7, #0]
 80115ce:	68b8      	ldr	r0, [r7, #8]
 80115d0:	f000 fb03 	bl	8011bda <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>
 80115d4:	eef0 7a40 	vmov.f32	s15, s0
 80115d8:	eeb0 0a67 	vmov.f32	s0, s15
 80115dc:	3710      	adds	r7, #16
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}

080115e2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80115e2:	b580      	push	{r7, lr}
 80115e4:	b082      	sub	sp, #8
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	6078      	str	r0, [r7, #4]
 80115ea:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	6839      	ldr	r1, [r7, #0]
 80115f0:	4618      	mov	r0, r3
 80115f2:	f000 fb01 	bl	8011bf8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	4618      	mov	r0, r3
 80115fa:	f000 fb27 	bl	8011c4c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 80115fe:	bf00      	nop
  }
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	4618      	mov	r0, r3
 8011604:	3708      	adds	r7, #8
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}

0801160a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>:
    static void run(const Derived&, const OtherDerived&)
 801160a:	b480      	push	{r7}
 801160c:	b083      	sub	sp, #12
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
 8011612:	6039      	str	r1, [r7, #0]
    }
 8011614:	bf00      	nop
 8011616:	370c      	adds	r7, #12
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr

08011620 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011620:	b580      	push	{r7, lr}
 8011622:	b082      	sub	sp, #8
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6839      	ldr	r1, [r7, #0]
 801162e:	4618      	mov	r0, r3
 8011630:	f000 fb18 	bl	8011c64 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	4618      	mov	r0, r3
 8011638:	3708      	adds	r7, #8
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}

0801163e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 801163e:	b480      	push	{r7}
 8011640:	b083      	sub	sp, #12
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	4618      	mov	r0, r3
 801164a:	370c      	adds	r7, #12
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr

08011654 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8011654:	b580      	push	{r7, lr}
 8011656:	b082      	sub	sp, #8
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	4618      	mov	r0, r3
 8011662:	f7f3 fb2c 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011666:	4603      	mov	r3, r0
 8011668:	4618      	mov	r0, r3
 801166a:	3708      	adds	r7, #8
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	4618      	mov	r0, r3
 801167e:	f7f3 fb13 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011682:	4603      	mov	r3, r0
 8011684:	4618      	mov	r0, r3
 8011686:	3708      	adds	r7, #8
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}

0801168c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 801168c:	b580      	push	{r7, lr}
 801168e:	b086      	sub	sp, #24
 8011690:	af00      	add	r7, sp, #0
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	60b9      	str	r1, [r7, #8]
 8011696:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8011698:	68b8      	ldr	r0, [r7, #8]
 801169a:	f7ff ffdb 	bl	8011654 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>
 801169e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80116a0:	68b8      	ldr	r0, [r7, #8]
 80116a2:	f7ff ffe5 	bl	8011670 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>
 80116a6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7f3 fb07 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80116b0:	4602      	mov	r2, r0
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	4293      	cmp	r3, r2
 80116b6:	d107      	bne.n	80116c8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7f3 faf4 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80116c0:	4602      	mov	r2, r0
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	4293      	cmp	r3, r2
 80116c6:	d001      	beq.n	80116cc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80116c8:	2301      	movs	r3, #1
 80116ca:	e000      	b.n	80116ce <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80116cc:	2300      	movs	r3, #0
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d005      	beq.n	80116de <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	693a      	ldr	r2, [r7, #16]
 80116d6:	6979      	ldr	r1, [r7, #20]
 80116d8:	4618      	mov	r0, r3
 80116da:	f7f6 fa09 	bl	8007af0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7f3 faec 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80116e6:	4602      	mov	r2, r0
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	4293      	cmp	r3, r2
 80116ec:	d107      	bne.n	80116fe <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7f3 fad9 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80116f6:	4602      	mov	r2, r0
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	4293      	cmp	r3, r2
 80116fc:	d006      	beq.n	801170c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80116fe:	4b05      	ldr	r3, [pc, #20]	; (8011714 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8011700:	4a05      	ldr	r2, [pc, #20]	; (8011718 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8011702:	f240 21fd 	movw	r1, #765	; 0x2fd
 8011706:	4805      	ldr	r0, [pc, #20]	; (801171c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8011708:	f00c f9f0 	bl	801daec <__assert_func>
}
 801170c:	bf00      	nop
 801170e:	3718      	adds	r7, #24
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	08021fcc 	.word	0x08021fcc
 8011718:	08028128 	.word	0x08028128
 801171c:	080220e0 	.word	0x080220e0

08011720 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8011720:	b480      	push	{r7}
 8011722:	b085      	sub	sp, #20
 8011724:	af00      	add	r7, sp, #0
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	607a      	str	r2, [r7, #4]
 801172c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	68ba      	ldr	r2, [r7, #8]
 8011732:	601a      	str	r2, [r3, #0]
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	687a      	ldr	r2, [r7, #4]
 8011738:	605a      	str	r2, [r3, #4]
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	683a      	ldr	r2, [r7, #0]
 801173e:	609a      	str	r2, [r3, #8]
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	69ba      	ldr	r2, [r7, #24]
 8011744:	60da      	str	r2, [r3, #12]
  }
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	4618      	mov	r0, r3
 801174a:	3714      	adds	r7, #20
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr

08011754 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	f000 fab6 	bl	8011cce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>
  }
 8011762:	bf00      	nop
 8011764:	3708      	adds	r7, #8
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}

0801176a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 801176a:	b480      	push	{r7}
 801176c:	b083      	sub	sp, #12
 801176e:	af00      	add	r7, sp, #0
 8011770:	6078      	str	r0, [r7, #4]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	3330      	adds	r3, #48	; 0x30
 8011776:	4618      	mov	r0, r3
 8011778:	370c      	adds	r7, #12
 801177a:	46bd      	mov	sp, r7
 801177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011780:	4770      	bx	lr

08011782 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8011782:	b480      	push	{r7}
 8011784:	b083      	sub	sp, #12
 8011786:	af00      	add	r7, sp, #0
 8011788:	6078      	str	r0, [r7, #4]
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	4618      	mov	r0, r3
 801178e:	370c      	adds	r7, #12
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr

08011798 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8011798:	b480      	push	{r7}
 801179a:	b083      	sub	sp, #12
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	3318      	adds	r3, #24
 80117a4:	4618      	mov	r0, r3
 80117a6:	370c      	adds	r7, #12
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr

080117b0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
 80117b8:	6039      	str	r1, [r7, #0]
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6839      	ldr	r1, [r7, #0]
 80117be:	4618      	mov	r0, r3
 80117c0:	f000 fa95 	bl	8011cee <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	4618      	mov	r0, r3
 80117c8:	3708      	adds	r7, #8
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}

080117ce <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80117ce:	b590      	push	{r4, r7, lr}
 80117d0:	b087      	sub	sp, #28
 80117d2:	af00      	add	r7, sp, #0
 80117d4:	60f8      	str	r0, [r7, #12]
 80117d6:	60b9      	str	r1, [r7, #8]
 80117d8:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	4618      	mov	r0, r3
 80117de:	f000 fa95 	bl	8011d0c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 80117e2:	4604      	mov	r4, r0
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	3304      	adds	r3, #4
 80117e8:	687a      	ldr	r2, [r7, #4]
 80117ea:	68b9      	ldr	r1, [r7, #8]
 80117ec:	4618      	mov	r0, r3
 80117ee:	f7fd fdf3 	bl	800f3d8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 80117f2:	eef0 7a40 	vmov.f32	s15, s0
 80117f6:	edc7 7a04 	vstr	s15, [r7, #16]
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	330c      	adds	r3, #12
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	68b9      	ldr	r1, [r7, #8]
 8011802:	4618      	mov	r0, r3
 8011804:	f000 fa8d 	bl	8011d22 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8011808:	eef0 7a40 	vmov.f32	s15, s0
 801180c:	edc7 7a05 	vstr	s15, [r7, #20]
 8011810:	f107 0214 	add.w	r2, r7, #20
 8011814:	f107 0310 	add.w	r3, r7, #16
 8011818:	4619      	mov	r1, r3
 801181a:	4620      	mov	r0, r4
 801181c:	f7fd fc20 	bl	800f060 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8011820:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011824:	eeb0 0a67 	vmov.f32	s0, s15
 8011828:	371c      	adds	r7, #28
 801182a:	46bd      	mov	sp, r7
 801182c:	bd90      	pop	{r4, r7, pc}

0801182e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 801182e:	b480      	push	{r7}
 8011830:	b083      	sub	sp, #12
 8011832:	af00      	add	r7, sp, #0
 8011834:	6078      	str	r0, [r7, #4]
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4618      	mov	r0, r3
 801183c:	370c      	adds	r7, #12
 801183e:	46bd      	mov	sp, r7
 8011840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011844:	4770      	bx	lr

08011846 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011846:	b480      	push	{r7}
 8011848:	b083      	sub	sp, #12
 801184a:	af00      	add	r7, sp, #0
 801184c:	6078      	str	r0, [r7, #4]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	4618      	mov	r0, r3
 8011852:	370c      	adds	r7, #12
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr

0801185c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 801185c:	b580      	push	{r7, lr}
 801185e:	b082      	sub	sp, #8
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	683a      	ldr	r2, [r7, #0]
 801186a:	4611      	mov	r1, r2
 801186c:	4618      	mov	r0, r3
 801186e:	f000 fa79 	bl	8011d64 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
  { }
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	4618      	mov	r0, r3
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 801187c:	b580      	push	{r7, lr}
 801187e:	b084      	sub	sp, #16
 8011880:	af00      	add	r7, sp, #0
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	60b9      	str	r1, [r7, #8]
 8011886:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8011888:	68b8      	ldr	r0, [r7, #8]
 801188a:	f7f4 f887 	bl	800599c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 801188e:	4603      	mov	r3, r0
 8011890:	687a      	ldr	r2, [r7, #4]
 8011892:	4619      	mov	r1, r3
 8011894:	68f8      	ldr	r0, [r7, #12]
 8011896:	f000 fa7d 	bl	8011d94 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>
}
 801189a:	68f8      	ldr	r0, [r7, #12]
 801189c:	3710      	adds	r7, #16
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}

080118a2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 80118a2:	b5b0      	push	{r4, r5, r7, lr}
 80118a4:	b086      	sub	sp, #24
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	60f8      	str	r0, [r7, #12]
 80118aa:	60b9      	str	r1, [r7, #8]
 80118ac:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 80118ae:	68b8      	ldr	r0, [r7, #8]
 80118b0:	f7f9 fe6e 	bl	800b590 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 80118b4:	4604      	mov	r4, r0
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f000 fa94 	bl	8011de4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>
 80118bc:	4605      	mov	r5, r0
 80118be:	f107 0314 	add.w	r3, r7, #20
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7f3 fc9c 	bl	8005200 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80118c8:	f107 0314 	add.w	r3, r7, #20
 80118cc:	462a      	mov	r2, r5
 80118ce:	4621      	mov	r1, r4
 80118d0:	68f8      	ldr	r0, [r7, #12]
 80118d2:	f000 fac1 	bl	8011e58 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>
}
 80118d6:	68f8      	ldr	r0, [r7, #12]
 80118d8:	3718      	adds	r7, #24
 80118da:	46bd      	mov	sp, r7
 80118dc:	bdb0      	pop	{r4, r5, r7, pc}

080118de <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80118de:	b580      	push	{r7, lr}
 80118e0:	b082      	sub	sp, #8
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	6078      	str	r0, [r7, #4]
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f000 fb14 	bl	8011f14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 80118ec:	4603      	mov	r3, r0
 80118ee:	4618      	mov	r0, r3
 80118f0:	f000 fb1b 	bl	8011f2a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>
 80118f4:	4603      	mov	r3, r0
 80118f6:	4618      	mov	r0, r3
 80118f8:	3708      	adds	r7, #8
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}

080118fe <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 80118fe:	b590      	push	{r4, r7, lr}
 8011900:	b085      	sub	sp, #20
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f000 fb04 	bl	8011f14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 801190c:	4604      	mov	r4, r0
 801190e:	f107 030c 	add.w	r3, r7, #12
 8011912:	4618      	mov	r0, r3
 8011914:	f7f3 ff6b 	bl	80057ee <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8011918:	f107 030c 	add.w	r3, r7, #12
 801191c:	4619      	mov	r1, r3
 801191e:	4620      	mov	r0, r4
 8011920:	f000 fb80 	bl	8012024 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8011924:	eef0 7a40 	vmov.f32	s15, s0
 8011928:	bf00      	nop
}
 801192a:	eeb0 0a67 	vmov.f32	s0, s15
 801192e:	3714      	adds	r7, #20
 8011930:	46bd      	mov	sp, r7
 8011932:	bd90      	pop	{r4, r7, pc}

08011934 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011934:	b480      	push	{r7}
 8011936:	b083      	sub	sp, #12
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	bf00      	nop
 801193e:	370c      	adds	r7, #12
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011948:	b480      	push	{r7}
 801194a:	b083      	sub	sp, #12
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	4618      	mov	r0, r3
 8011954:	370c      	adds	r7, #12
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr

0801195e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 801195e:	b590      	push	{r4, r7, lr}
 8011960:	b083      	sub	sp, #12
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
 8011966:	6039      	str	r1, [r7, #0]
 8011968:	687c      	ldr	r4, [r7, #4]
 801196a:	6838      	ldr	r0, [r7, #0]
 801196c:	f000 fba0 	bl	80120b0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>
 8011970:	4603      	mov	r3, r0
 8011972:	4619      	mov	r1, r3
 8011974:	4620      	mov	r0, r4
 8011976:	f7f3 ffb9 	bl	80058ec <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	1d1c      	adds	r4, r3, #4
 801197e:	6838      	ldr	r0, [r7, #0]
 8011980:	f000 fba2 	bl	80120c8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>
 8011984:	4603      	mov	r3, r0
 8011986:	4619      	mov	r1, r3
 8011988:	4620      	mov	r0, r4
 801198a:	f000 fbb4 	bl	80120f6 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f103 040c 	add.w	r4, r3, #12
 8011994:	6838      	ldr	r0, [r7, #0]
 8011996:	f000 fba2 	bl	80120de <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>
 801199a:	4603      	mov	r3, r0
 801199c:	4619      	mov	r1, r3
 801199e:	4620      	mov	r0, r4
 80119a0:	f000 fbb8 	bl	8012114 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	4618      	mov	r0, r3
 80119a8:	370c      	adds	r7, #12
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd90      	pop	{r4, r7, pc}

080119ae <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 80119ae:	b5b0      	push	{r4, r5, r7, lr}
 80119b0:	b084      	sub	sp, #16
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
 80119b6:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	689c      	ldr	r4, [r3, #8]
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	6839      	ldr	r1, [r7, #0]
 80119c2:	4618      	mov	r0, r3
 80119c4:	f000 f834 	bl	8011a30 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 80119c8:	4605      	mov	r5, r0
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	6839      	ldr	r1, [r7, #0]
 80119d0:	4618      	mov	r0, r3
 80119d2:	f000 fbae 	bl	8012132 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>
 80119d6:	eef0 7a40 	vmov.f32	s15, s0
 80119da:	edc7 7a03 	vstr	s15, [r7, #12]
 80119de:	f107 030c 	add.w	r3, r7, #12
 80119e2:	461a      	mov	r2, r3
 80119e4:	4629      	mov	r1, r5
 80119e6:	4620      	mov	r0, r4
 80119e8:	f7f6 fd08 	bl	80083fc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80119ec:	bf00      	nop
 80119ee:	3710      	adds	r7, #16
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bdb0      	pop	{r4, r5, r7, pc}

080119f4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80119f4:	b480      	push	{r7}
 80119f6:	b083      	sub	sp, #12
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	bf00      	nop
 80119fe:	370c      	adds	r7, #12
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6839      	ldr	r1, [r7, #0]
 8011a16:	4618      	mov	r0, r3
 8011a18:	f000 fbaf 	bl	801217a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f000 fbd5 	bl	80121ce <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8011a24:	bf00      	nop
  }
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3708      	adds	r7, #8
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8011a30:	b480      	push	{r7}
 8011a32:	b083      	sub	sp, #12
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681a      	ldr	r2, [r3, #0]
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	009b      	lsls	r3, r3, #2
 8011a42:	4413      	add	r3, r2
  }
 8011a44:	4618      	mov	r0, r3
 8011a46:	370c      	adds	r7, #12
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr

08011a50 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8011a50:	b480      	push	{r7}
 8011a52:	b083      	sub	sp, #12
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681a      	ldr	r2, [r3, #0]
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	009b      	lsls	r3, r3, #2
 8011a62:	4413      	add	r3, r2
  }
 8011a64:	4618      	mov	r0, r3
 8011a66:	370c      	adds	r7, #12
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6e:	4770      	bx	lr

08011a70 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b082      	sub	sp, #8
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	6039      	str	r1, [r7, #0]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6839      	ldr	r1, [r7, #0]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f000 fbb1 	bl	80121e6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	4618      	mov	r0, r3
 8011a88:	3708      	adds	r7, #8
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}

08011a8e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8011a8e:	b580      	push	{r7, lr}
 8011a90:	b084      	sub	sp, #16
 8011a92:	af00      	add	r7, sp, #0
 8011a94:	6078      	str	r0, [r7, #4]
 8011a96:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011a98:	6839      	ldr	r1, [r7, #0]
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f000 fbb5 	bl	801220a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>
 8011aa0:	eef0 7a40 	vmov.f32	s15, s0
 8011aa4:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8011aa8:	6839      	ldr	r1, [r7, #0]
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f000 fbbe 	bl	801222c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>
 8011ab0:	eef0 7a40 	vmov.f32	s15, s0
 8011ab4:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011ab8:	f107 020c 	add.w	r2, r7, #12
 8011abc:	f107 0308 	add.w	r3, r7, #8
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	6838      	ldr	r0, [r7, #0]
 8011ac4:	f7f7 fa8b 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8011ac8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011acc:	eeb0 0a67 	vmov.f32	s0, s15
 8011ad0:	3710      	adds	r7, #16
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}

08011ad6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8011ad6:	b480      	push	{r7}
 8011ad8:	b083      	sub	sp, #12
 8011ada:	af00      	add	r7, sp, #0
 8011adc:	6078      	str	r0, [r7, #4]
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	370c      	adds	r7, #12
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aec:	4770      	bx	lr

08011aee <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8011aee:	b480      	push	{r7}
 8011af0:	b083      	sub	sp, #12
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	4618      	mov	r0, r3
 8011afc:	370c      	adds	r7, #12
 8011afe:	46bd      	mov	sp, r7
 8011b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b04:	4770      	bx	lr

08011b06 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011b06:	b480      	push	{r7}
 8011b08:	b083      	sub	sp, #12
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	4618      	mov	r0, r3
 8011b12:	370c      	adds	r7, #12
 8011b14:	46bd      	mov	sp, r7
 8011b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1a:	4770      	bx	lr

08011b1c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b086      	sub	sp, #24
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	60f8      	str	r0, [r7, #12]
 8011b24:	60b9      	str	r1, [r7, #8]
 8011b26:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8011b28:	6879      	ldr	r1, [r7, #4]
 8011b2a:	68b8      	ldr	r0, [r7, #8]
 8011b2c:	f000 fba2 	bl	8012274 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8011b30:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8011b32:	6879      	ldr	r1, [r7, #4]
 8011b34:	68b8      	ldr	r0, [r7, #8]
 8011b36:	f000 fba9 	bl	801228c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8011b3a:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8011b3c:	693a      	ldr	r2, [r7, #16]
 8011b3e:	6979      	ldr	r1, [r7, #20]
 8011b40:	68f8      	ldr	r0, [r7, #12]
 8011b42:	f000 fbaf 	bl	80122a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>
  }
 8011b46:	bf00      	nop
 8011b48:	3718      	adds	r7, #24
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}

08011b4e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011b4e:	b580      	push	{r7, lr}
 8011b50:	b082      	sub	sp, #8
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011b56:	2201      	movs	r2, #1
 8011b58:	2100      	movs	r1, #0
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f7ff ffde 	bl	8011b1c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f000 fbc5 	bl	80122f0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>
  }
 8011b66:	bf00      	nop
 8011b68:	3708      	adds	r7, #8
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}

08011b6e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011b6e:	b580      	push	{r7, lr}
 8011b70:	b082      	sub	sp, #8
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	689b      	ldr	r3, [r3, #8]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f7fb fe62 	bl	800d844 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8011b80:	4603      	mov	r3, r0
    }
 8011b82:	4618      	mov	r0, r3
 8011b84:	3708      	adds	r7, #8
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}

08011b8a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011b8a:	b580      	push	{r7, lr}
 8011b8c:	b082      	sub	sp, #8
 8011b8e:	af00      	add	r7, sp, #0
 8011b90:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	689b      	ldr	r3, [r3, #8]
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7f6 fc04 	bl	80083a4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8011b9c:	4603      	mov	r3, r0
    }
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3708      	adds	r7, #8
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}

08011ba6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 8011ba6:	b480      	push	{r7}
 8011ba8:	b083      	sub	sp, #12
 8011baa:	af00      	add	r7, sp, #0
 8011bac:	6078      	str	r0, [r7, #4]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	370c      	adds	r7, #12
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr

08011bbc <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b082      	sub	sp, #8
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	6039      	str	r1, [r7, #0]
    : unary_evaluator<XprType>(block)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6839      	ldr	r1, [r7, #0]
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f000 fbb9 	bl	8012342 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>
  {}
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3708      	adds	r7, #8
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}

08011bda <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() () const { return m_other; }
 8011bda:	b480      	push	{r7}
 8011bdc:	b083      	sub	sp, #12
 8011bde:	af00      	add	r7, sp, #0
 8011be0:	6078      	str	r0, [r7, #4]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	ee07 3a90 	vmov	s15, r3
 8011bea:	eeb0 0a67 	vmov.f32	s0, s15
 8011bee:	370c      	adds	r7, #12
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf6:	4770      	bx	lr

08011bf8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8011bf8:	b590      	push	{r4, r7, lr}
 8011bfa:	b083      	sub	sp, #12
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f000 fc05 	bl	8012412 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f000 f81e 	bl	8011c4c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 8011c10:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	601a      	str	r2, [r3, #0]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	1d1c      	adds	r4, r3, #4
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f000 fbdc 	bl	80123da <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>
 8011c22:	4603      	mov	r3, r0
 8011c24:	4619      	mov	r1, r3
 8011c26:	4620      	mov	r0, r4
 8011c28:	f7f4 fdd4 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	1d5c      	adds	r4, r3, #5
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	4618      	mov	r0, r3
 8011c34:	f000 fbdf 	bl	80123f6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	f7f4 fde3 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	4618      	mov	r0, r3
 8011c46:	370c      	adds	r7, #12
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd90      	pop	{r4, r7, pc}

08011c4c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>:
 8011c4c:	b480      	push	{r7}
 8011c4e:	b083      	sub	sp, #12
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	370c      	adds	r7, #12
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr

08011c64 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>:
  explicit product_evaluator(const XprType& xpr)
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b082      	sub	sp, #8
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f000 fbf2 	bl	8012458 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8011c74:	6838      	ldr	r0, [r7, #0]
 8011c76:	f000 fbd7 	bl	8012428 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 8011c7a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8011c80:	6838      	ldr	r0, [r7, #0]
 8011c82:	f000 fbdd 	bl	8012440 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>
 8011c86:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	605a      	str	r2, [r3, #4]
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8011c96:	4619      	mov	r1, r3
 8011c98:	4610      	mov	r0, r2
 8011c9a:	f7f5 fca7 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8011ca8:	4619      	mov	r1, r3
 8011caa:	4610      	mov	r0, r2
 8011cac:	f7f5 fc9e 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8011cb0:	6838      	ldr	r0, [r7, #0]
 8011cb2:	f000 fbb9 	bl	8012428 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f7f2 fff5 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	611a      	str	r2, [r3, #16]
  }
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3708      	adds	r7, #8
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}

08011cce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011cce:	b580      	push	{r7, lr}
 8011cd0:	b082      	sub	sp, #8
 8011cd2:	af00      	add	r7, sp, #0
 8011cd4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	2100      	movs	r1, #0
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f000 fbc7 	bl	801246e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f000 fbdd 	bl	80124a0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>
  }
 8011ce6:	bf00      	nop
 8011ce8:	3708      	adds	r7, #8
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}

08011cee <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011cee:	b580      	push	{r7, lr}
 8011cf0:	b082      	sub	sp, #8
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	6078      	str	r0, [r7, #4]
 8011cf6:	6039      	str	r1, [r7, #0]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6839      	ldr	r1, [r7, #0]
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f000 fbdf 	bl	80124c0 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>
  }
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	4618      	mov	r0, r3
 8011d06:	3708      	adds	r7, #8
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}

08011d0c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8011d0c:	b480      	push	{r7}
 8011d0e:	b083      	sub	sp, #12
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	4618      	mov	r0, r3
 8011d18:	370c      	adds	r7, #12
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d20:	4770      	bx	lr

08011d22 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8011d22:	b5b0      	push	{r4, r5, r7, lr}
 8011d24:	b084      	sub	sp, #16
 8011d26:	af00      	add	r7, sp, #0
 8011d28:	60f8      	str	r0, [r7, #12]
 8011d2a:	60b9      	str	r1, [r7, #8]
 8011d2c:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681c      	ldr	r4, [r3, #0]
 8011d32:	68f8      	ldr	r0, [r7, #12]
 8011d34:	f000 fbd8 	bl	80124e8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8011d38:	4602      	mov	r2, r0
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	fb03 f502 	mul.w	r5, r3, r2
 8011d40:	68f8      	ldr	r0, [r7, #12]
 8011d42:	f000 fbdc 	bl	80124fe <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8011d46:	4602      	mov	r2, r0
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	fb02 f303 	mul.w	r3, r2, r3
 8011d4e:	442b      	add	r3, r5
 8011d50:	009b      	lsls	r3, r3, #2
 8011d52:	4423      	add	r3, r4
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	ee07 3a90 	vmov	s15, r3
  }
 8011d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8011d5e:	3710      	adds	r7, #16
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bdb0      	pop	{r4, r5, r7, pc}

08011d64 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8011d64:	b590      	push	{r4, r7, lr}
 8011d66:	b083      	sub	sp, #12
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f000 fbdd 	bl	801252e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8011d74:	687c      	ldr	r4, [r7, #4]
 8011d76:	6838      	ldr	r0, [r7, #0]
 8011d78:	f000 fbcc 	bl	8012514 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	2200      	movs	r2, #0
 8011d80:	4619      	mov	r1, r3
 8011d82:	4620      	mov	r0, r4
 8011d84:	f7f5 f88b 	bl	8006e9e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	370c      	adds	r7, #12
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd90      	pop	{r4, r7, pc}
	...

08011d94 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b084      	sub	sp, #16
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	60f8      	str	r0, [r7, #12]
 8011d9c:	60b9      	str	r1, [r7, #8]
 8011d9e:	607a      	str	r2, [r7, #4]
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	687a      	ldr	r2, [r7, #4]
 8011da4:	68b9      	ldr	r1, [r7, #8]
 8011da6:	4618      	mov	r0, r3
 8011da8:	f000 fbcc 	bl	8012544 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	db06      	blt.n	8011dc0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x2c>
 8011db2:	68b8      	ldr	r0, [r7, #8]
 8011db4:	f7f4 fe6b 	bl	8006a8e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8011db8:	4602      	mov	r2, r0
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	4293      	cmp	r3, r2
 8011dbe:	db05      	blt.n	8011dcc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x38>
 8011dc0:	4b05      	ldr	r3, [pc, #20]	; (8011dd8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x44>)
 8011dc2:	4a06      	ldr	r2, [pc, #24]	; (8011ddc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x48>)
 8011dc4:	2178      	movs	r1, #120	; 0x78
 8011dc6:	4806      	ldr	r0, [pc, #24]	; (8011de0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x4c>)
 8011dc8:	f00b fe90 	bl	801daec <__assert_func>
    }
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3710      	adds	r7, #16
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}
 8011dd6:	bf00      	nop
 8011dd8:	080244d8 	.word	0x080244d8
 8011ddc:	0802823c 	.word	0x0802823c
 8011de0:	0802465c 	.word	0x0802465c

08011de4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8011de4:	b480      	push	{r7}
 8011de6:	b083      	sub	sp, #12
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	4618      	mov	r0, r3
 8011df0:	370c      	adds	r7, #12
 8011df2:	46bd      	mov	sp, r7
 8011df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df8:	4770      	bx	lr

08011dfa <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
 8011dfa:	b580      	push	{r7, lr}
 8011dfc:	b082      	sub	sp, #8
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	6078      	str	r0, [r7, #4]
 8011e02:	6878      	ldr	r0, [r7, #4]
 8011e04:	f000 fbaf 	bl	8012566 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3708      	adds	r7, #8
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}

08011e12 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8011e12:	b580      	push	{r7, lr}
 8011e14:	b082      	sub	sp, #8
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f7ff ffed 	bl	8011dfa <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	4618      	mov	r0, r3
 8011e24:	3708      	adds	r7, #8
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}

08011e2a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8011e2a:	b580      	push	{r7, lr}
 8011e2c:	b082      	sub	sp, #8
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	6078      	str	r0, [r7, #4]
 8011e32:	f7f4 fd0e 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8011e36:	4603      	mov	r3, r0
 8011e38:	4618      	mov	r0, r3
 8011e3a:	3708      	adds	r7, #8
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}

08011e40 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	f7f4 fd0b 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3708      	adds	r7, #8
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}
	...

08011e58 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8011e58:	b5b0      	push	{r4, r5, r7, lr}
 8011e5a:	b084      	sub	sp, #16
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	60f8      	str	r0, [r7, #12]
 8011e60:	60b9      	str	r1, [r7, #8]
 8011e62:	607a      	str	r2, [r7, #4]
 8011e64:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8011e66:	68f8      	ldr	r0, [r7, #12]
 8011e68:	f7ff ffd3 	bl	8011e12 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8011e6c:	68fa      	ldr	r2, [r7, #12]
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	4614      	mov	r4, r2
 8011e72:	461d      	mov	r5, r3
 8011e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011e7c:	e884 0003 	stmia.w	r4, {r0, r1}
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	f103 0218 	add.w	r2, r3, #24
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	4614      	mov	r4, r2
 8011e8a:	461d      	mov	r5, r3
 8011e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011e94:	e884 0003 	stmia.w	r4, {r0, r1}
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	3330      	adds	r3, #48	; 0x30
 8011e9c:	6839      	ldr	r1, [r7, #0]
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7f3 fa38 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8011ea4:	68b8      	ldr	r0, [r7, #8]
 8011ea6:	f7f9 fba1 	bl	800b5ec <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8011eaa:	4604      	mov	r4, r0
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7ff ffbb 	bl	8011e2a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	429c      	cmp	r4, r3
 8011eb8:	d10a      	bne.n	8011ed0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x78>
 8011eba:	68b8      	ldr	r0, [r7, #8]
 8011ebc:	f7f9 fba3 	bl	800b606 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8011ec0:	4604      	mov	r4, r0
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f7ff ffbb 	bl	8011e40 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	429c      	cmp	r4, r3
 8011ece:	d005      	beq.n	8011edc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x84>
 8011ed0:	4b05      	ldr	r3, [pc, #20]	; (8011ee8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x90>)
 8011ed2:	4a06      	ldr	r2, [pc, #24]	; (8011eec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x94>)
 8011ed4:	2174      	movs	r1, #116	; 0x74
 8011ed6:	4806      	ldr	r0, [pc, #24]	; (8011ef0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x98>)
 8011ed8:	f00b fe08 	bl	801daec <__assert_func>
    }
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3710      	adds	r7, #16
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	0801f954 	.word	0x0801f954
 8011eec:	0802832c 	.word	0x0802832c
 8011ef0:	0801fbb8 	.word	0x0801fbb8

08011ef4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f000 f809 	bl	8011f14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011f02:	4603      	mov	r3, r0
 8011f04:	4618      	mov	r0, r3
 8011f06:	f000 fb39 	bl	801257c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3708      	adds	r7, #8
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8011f14:	b480      	push	{r7}
 8011f16:	b083      	sub	sp, #12
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	4618      	mov	r0, r3
 8011f20:	370c      	adds	r7, #12
 8011f22:	46bd      	mov	sp, r7
 8011f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f28:	4770      	bx	lr

08011f2a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8011f2a:	b580      	push	{r7, lr}
 8011f2c:	b082      	sub	sp, #8
 8011f2e:	af00      	add	r7, sp, #0
 8011f30:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7f9 fb59 	bl	800b5ec <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8011f3a:	4603      	mov	r3, r0
    }
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3708      	adds	r7, #8
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}

08011f44 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b082      	sub	sp, #8
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f000 fb3c 	bl	80125ca <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	4618      	mov	r0, r3
 8011f56:	3708      	adds	r7, #8
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}

08011f5c <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7ff ffec 	bl	8011f44 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3708      	adds	r7, #8
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}

08011f76 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8011f76:	b580      	push	{r7, lr}
 8011f78:	b082      	sub	sp, #8
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7ff ffeb 	bl	8011f5c <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3708      	adds	r7, #8
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}

08011f90 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b082      	sub	sp, #8
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7ff ffeb 	bl	8011f76 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3708      	adds	r7, #8
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}

08011faa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>:
  struct Data
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b082      	sub	sp, #8
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	330c      	adds	r3, #12
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7ff ffea 	bl	8011f90 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	3304      	adds	r3, #4
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7f9 fc09 	bl	800b7d8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3708      	adds	r7, #8
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}

08011fd0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b082      	sub	sp, #8
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f7ff ffe5 	bl	8011faa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f000 fae7 	bl	80125b4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3708      	adds	r7, #8
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}

08011ff0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b082      	sub	sp, #8
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7ff ffe8 	bl	8011fd0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	4618      	mov	r0, r3
 8012004:	3708      	adds	r7, #8
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}

0801200a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 801200a:	b580      	push	{r7, lr}
 801200c:	b082      	sub	sp, #8
 801200e:	af00      	add	r7, sp, #0
 8012010:	6078      	str	r0, [r7, #4]
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	4618      	mov	r0, r3
 8012016:	f7ff ffeb 	bl	8011ff0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	4618      	mov	r0, r3
 801201e:	3708      	adds	r7, #8
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}

08012024 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8012024:	b580      	push	{r7, lr}
 8012026:	ed2d 8b02 	vpush	{d8}
 801202a:	b088      	sub	sp, #32
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f7ff fc53 	bl	80118de <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>
 8012038:	4603      	mov	r3, r0
 801203a:	2b00      	cmp	r3, #0
 801203c:	dd05      	ble.n	801204a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f7ff ff58 	bl	8011ef4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>
 8012044:	4603      	mov	r3, r0
 8012046:	2b00      	cmp	r3, #0
 8012048:	dc06      	bgt.n	8012058 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 801204a:	4b16      	ldr	r3, [pc, #88]	; (80120a4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 801204c:	4a16      	ldr	r2, [pc, #88]	; (80120a8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 801204e:	f240 119b 	movw	r1, #411	; 0x19b
 8012052:	4816      	ldr	r0, [pc, #88]	; (80120ac <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8012054:	f00b fd4a 	bl	801daec <__assert_func>
 8012058:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801205a:	6878      	ldr	r0, [r7, #4]
 801205c:	f7ff ff5a 	bl	8011f14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8012060:	4602      	mov	r2, r0
 8012062:	f107 030c 	add.w	r3, r7, #12
 8012066:	4611      	mov	r1, r2
 8012068:	4618      	mov	r0, r3
 801206a:	f000 fa94 	bl	8012596 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f7ff ff50 	bl	8011f14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8012074:	4602      	mov	r2, r0
 8012076:	f107 030c 	add.w	r3, r7, #12
 801207a:	6839      	ldr	r1, [r7, #0]
 801207c:	4618      	mov	r0, r3
 801207e:	f000 faaf 	bl	80125e0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>
 8012082:	eeb0 8a40 	vmov.f32	s16, s0
 8012086:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8012088:	f107 030c 	add.w	r3, r7, #12
 801208c:	4618      	mov	r0, r3
 801208e:	f7ff ffbc 	bl	801200a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8012092:	eef0 7a48 	vmov.f32	s15, s16
}
 8012096:	eeb0 0a67 	vmov.f32	s0, s15
 801209a:	3720      	adds	r7, #32
 801209c:	46bd      	mov	sp, r7
 801209e:	ecbd 8b02 	vpop	{d8}
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	080249d4 	.word	0x080249d4
 80120a8:	0802859c 	.word	0x0802859c
 80120ac:	08024be0 	.word	0x08024be0

080120b0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80120b0:	b480      	push	{r7}
 80120b2:	b083      	sub	sp, #12
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	3310      	adds	r3, #16
 80120bc:	4618      	mov	r0, r3
 80120be:	370c      	adds	r7, #12
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr

080120c8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80120c8:	b480      	push	{r7}
 80120ca:	b083      	sub	sp, #12
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	4618      	mov	r0, r3
 80120d4:	370c      	adds	r7, #12
 80120d6:	46bd      	mov	sp, r7
 80120d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120dc:	4770      	bx	lr

080120de <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80120de:	b480      	push	{r7}
 80120e0:	b083      	sub	sp, #12
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	6078      	str	r0, [r7, #4]
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	68db      	ldr	r3, [r3, #12]
 80120ea:	4618      	mov	r0, r3
 80120ec:	370c      	adds	r7, #12
 80120ee:	46bd      	mov	sp, r7
 80120f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f4:	4770      	bx	lr

080120f6 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80120f6:	b580      	push	{r7, lr}
 80120f8:	b082      	sub	sp, #8
 80120fa:	af00      	add	r7, sp, #0
 80120fc:	6078      	str	r0, [r7, #4]
 80120fe:	6039      	str	r1, [r7, #0]
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6839      	ldr	r1, [r7, #0]
 8012104:	4618      	mov	r0, r3
 8012106:	f000 fa7c 	bl	8012602 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	4618      	mov	r0, r3
 801210e:	3708      	adds	r7, #8
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}

08012114 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>:
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	6839      	ldr	r1, [r7, #0]
 8012122:	4618      	mov	r0, r3
 8012124:	f7f8 f8bb 	bl	800a29e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	4618      	mov	r0, r3
 801212c:	3708      	adds	r7, #8
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}

08012132 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8012132:	b5b0      	push	{r4, r5, r7, lr}
 8012134:	b082      	sub	sp, #8
 8012136:	af00      	add	r7, sp, #0
 8012138:	6078      	str	r0, [r7, #4]
 801213a:	6039      	str	r1, [r7, #0]
    return m_d.func()(m_d.lhsImpl.coeff(index), m_d.rhsImpl.coeff(index));
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	4618      	mov	r0, r3
 8012140:	f000 fa6e 	bl	8012620 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 8012144:	4604      	mov	r4, r0
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	3304      	adds	r3, #4
 801214a:	6839      	ldr	r1, [r7, #0]
 801214c:	4618      	mov	r0, r3
 801214e:	f7ff fc7f 	bl	8011a50 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8012152:	4605      	mov	r5, r0
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	330c      	adds	r3, #12
 8012158:	6839      	ldr	r1, [r7, #0]
 801215a:	4618      	mov	r0, r3
 801215c:	f7ff fc78 	bl	8011a50 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8012160:	4603      	mov	r3, r0
 8012162:	461a      	mov	r2, r3
 8012164:	4629      	mov	r1, r5
 8012166:	4620      	mov	r0, r4
 8012168:	f7f6 ff39 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 801216c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012170:	eeb0 0a67 	vmov.f32	s0, s15
 8012174:	3708      	adds	r7, #8
 8012176:	46bd      	mov	sp, r7
 8012178:	bdb0      	pop	{r4, r5, r7, pc}

0801217a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 801217a:	b590      	push	{r4, r7, lr}
 801217c:	b083      	sub	sp, #12
 801217e:	af00      	add	r7, sp, #0
 8012180:	6078      	str	r0, [r7, #4]
 8012182:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f000 fa72 	bl	801266e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	4618      	mov	r0, r3
 801218e:	f000 f81e 	bl	80121ce <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8012192:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	601a      	str	r2, [r3, #0]
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	1d1c      	adds	r4, r3, #4
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	4618      	mov	r0, r3
 80121a0:	f000 fa49 	bl	8012636 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 80121a4:	4603      	mov	r3, r0
 80121a6:	4619      	mov	r1, r3
 80121a8:	4620      	mov	r0, r4
 80121aa:	f7f4 fb2d 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	1d5c      	adds	r4, r3, #5
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	4618      	mov	r0, r3
 80121b6:	f000 fa4c 	bl	8012652 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 80121ba:	4603      	mov	r3, r0
 80121bc:	4619      	mov	r1, r3
 80121be:	4620      	mov	r0, r4
 80121c0:	f7f4 fb08 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	4618      	mov	r0, r3
 80121c8:	370c      	adds	r7, #12
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd90      	pop	{r4, r7, pc}

080121ce <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80121ce:	b480      	push	{r7}
 80121d0:	b083      	sub	sp, #12
 80121d2:	af00      	add	r7, sp, #0
 80121d4:	6078      	str	r0, [r7, #4]
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	4618      	mov	r0, r3
 80121dc:	370c      	adds	r7, #12
 80121de:	46bd      	mov	sp, r7
 80121e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e4:	4770      	bx	lr

080121e6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80121e6:	b580      	push	{r7, lr}
 80121e8:	b082      	sub	sp, #8
 80121ea:	af00      	add	r7, sp, #0
 80121ec:	6078      	str	r0, [r7, #4]
 80121ee:	6039      	str	r1, [r7, #0]
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f000 fa47 	bl	8012684 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6839      	ldr	r1, [r7, #0]
 80121fa:	4618      	mov	r0, r3
 80121fc:	f000 fa4d 	bl	801269a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	4618      	mov	r0, r3
 8012204:	3708      	adds	r7, #8
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}

0801220a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801220a:	b580      	push	{r7, lr}
 801220c:	b082      	sub	sp, #8
 801220e:	af00      	add	r7, sp, #0
 8012210:	6078      	str	r0, [r7, #4]
 8012212:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012214:	2200      	movs	r2, #0
 8012216:	2100      	movs	r1, #0
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 fa66 	bl	80126ea <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 801221e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012222:	eeb0 0a67 	vmov.f32	s0, s15
 8012226:	3708      	adds	r7, #8
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}

0801222c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801222c:	b580      	push	{r7, lr}
 801222e:	b084      	sub	sp, #16
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012236:	6839      	ldr	r1, [r7, #0]
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f000 fa69 	bl	8012710 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>
 801223e:	eef0 7a40 	vmov.f32	s15, s0
 8012242:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012246:	6839      	ldr	r1, [r7, #0]
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f000 fa72 	bl	8012732 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>
 801224e:	eef0 7a40 	vmov.f32	s15, s0
 8012252:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012256:	f107 020c 	add.w	r2, r7, #12
 801225a:	f107 0308 	add.w	r3, r7, #8
 801225e:	4619      	mov	r1, r3
 8012260:	6838      	ldr	r0, [r7, #0]
 8012262:	f7f6 febc 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012266:	eef0 7a40 	vmov.f32	s15, s0
  }
 801226a:	eeb0 0a67 	vmov.f32	s0, s15
 801226e:	3710      	adds	r7, #16
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8012274:	b480      	push	{r7}
 8012276:	b083      	sub	sp, #12
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
      : inner;
 801227e:	683b      	ldr	r3, [r7, #0]
  }
 8012280:	4618      	mov	r0, r3
 8012282:	370c      	adds	r7, #12
 8012284:	46bd      	mov	sp, r7
 8012286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228a:	4770      	bx	lr

0801228c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 801228c:	b480      	push	{r7}
 801228e:	b083      	sub	sp, #12
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]
      : outer;
 8012296:	687b      	ldr	r3, [r7, #4]
  }
 8012298:	4618      	mov	r0, r3
 801229a:	370c      	adds	r7, #12
 801229c:	46bd      	mov	sp, r7
 801229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a2:	4770      	bx	lr

080122a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 80122a4:	b5b0      	push	{r4, r5, r7, lr}
 80122a6:	b086      	sub	sp, #24
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	60f8      	str	r0, [r7, #12]
 80122ac:	60b9      	str	r1, [r7, #8]
 80122ae:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	689c      	ldr	r4, [r3, #8]
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	687a      	ldr	r2, [r7, #4]
 80122ba:	68b9      	ldr	r1, [r7, #8]
 80122bc:	4618      	mov	r0, r3
 80122be:	f7f6 fb2d 	bl	800891c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 80122c2:	4605      	mov	r5, r0
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	687a      	ldr	r2, [r7, #4]
 80122ca:	68b9      	ldr	r1, [r7, #8]
 80122cc:	4618      	mov	r0, r3
 80122ce:	f000 fa41 	bl	8012754 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>
 80122d2:	eef0 7a40 	vmov.f32	s15, s0
 80122d6:	edc7 7a05 	vstr	s15, [r7, #20]
 80122da:	f107 0314 	add.w	r3, r7, #20
 80122de:	461a      	mov	r2, r3
 80122e0:	4629      	mov	r1, r5
 80122e2:	4620      	mov	r0, r4
 80122e4:	f000 fa69 	bl	80127ba <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>
  }
 80122e8:	bf00      	nop
 80122ea:	3718      	adds	r7, #24
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bdb0      	pop	{r4, r5, r7, pc}

080122f0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80122f8:	2202      	movs	r2, #2
 80122fa:	2100      	movs	r1, #0
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f7ff fc0d 	bl	8011b1c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f000 fa70 	bl	80127e8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>
  }
 8012308:	bf00      	nop
 801230a:	3708      	adds	r7, #8
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>:
    StorageIndex startRow() const EIGEN_NOEXCEPT
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
      return m_startRow.value();
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	3310      	adds	r3, #16
 801231c:	4618      	mov	r0, r3
 801231e:	f7fd fff8 	bl	8010312 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 8012322:	4603      	mov	r3, r0
    }
 8012324:	4618      	mov	r0, r3
 8012326:	3708      	adds	r7, #8
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>:
    StorageIndex startCol() const EIGEN_NOEXCEPT
 801232c:	b580      	push	{r7, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
      return m_startCol.value();
 8012334:	f7fd fbbd 	bl	800fab2 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 8012338:	4603      	mov	r3, r0
    }
 801233a:	4618      	mov	r0, r3
 801233c:	3708      	adds	r7, #8
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}

08012342 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>:
  explicit unary_evaluator(const XprType& block)
 8012342:	b5b0      	push	{r4, r5, r7, lr}
 8012344:	b082      	sub	sp, #8
 8012346:	af00      	add	r7, sp, #0
 8012348:	6078      	str	r0, [r7, #4]
 801234a:	6039      	str	r1, [r7, #0]
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f000 fa66 	bl	801281e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 8012352:	687c      	ldr	r4, [r7, #4]
    : m_argImpl(block.nestedExpression()),
 8012354:	683b      	ldr	r3, [r7, #0]
 8012356:	4618      	mov	r0, r3
 8012358:	f000 fa56 	bl	8012808 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 801235c:	4603      	mov	r3, r0
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 801235e:	4619      	mov	r1, r3
 8012360:	4620      	mov	r0, r4
 8012362:	f000 fa67 	bl	8012834 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f103 0410 	add.w	r4, r3, #16
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	4618      	mov	r0, r3
 8012370:	f7ff ffce 	bl	8012310 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8012374:	4603      	mov	r3, r0
 8012376:	4619      	mov	r1, r3
 8012378:	4620      	mov	r0, r4
 801237a:	f7fb fab9 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	f103 0414 	add.w	r4, r3, #20
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	4618      	mov	r0, r3
 8012388:	f7ff ffd0 	bl	801232c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 801238c:	4603      	mov	r3, r0
 801238e:	4619      	mov	r1, r3
 8012390:	4620      	mov	r0, r4
 8012392:	f7fb fb21 	bl	800d9d8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f103 0518 	add.w	r5, r3, #24
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	4618      	mov	r0, r3
 80123a0:	f7ff ffc4 	bl	801232c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 80123a4:	4604      	mov	r4, r0
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	4618      	mov	r0, r3
 80123aa:	f000 fa2d 	bl	8012808 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 80123ae:	4603      	mov	r3, r0
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7f5 fd6c 	bl	8007e8e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 80123b6:	4603      	mov	r3, r0
 80123b8:	fb03 f404 	mul.w	r4, r3, r4
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	4618      	mov	r0, r3
 80123c0:	f7ff ffa6 	bl	8012310 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 80123c4:	4603      	mov	r3, r0
 80123c6:	4423      	add	r3, r4
 80123c8:	4619      	mov	r1, r3
 80123ca:	4628      	mov	r0, r5
 80123cc:	f7fb fa90 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
  { }
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	4618      	mov	r0, r3
 80123d4:	3708      	adds	r7, #8
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bdb0      	pop	{r4, r5, r7, pc}

080123da <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80123da:	b580      	push	{r7, lr}
 80123dc:	b082      	sub	sp, #8
 80123de:	af00      	add	r7, sp, #0
 80123e0:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	689b      	ldr	r3, [r3, #8]
             ? m_xpr.innerStride()
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7f5 ffdc 	bl	80083a4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 80123ec:	4603      	mov	r3, r0
    }
 80123ee:	4618      	mov	r0, r3
 80123f0:	3708      	adds	r7, #8
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}

080123f6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80123f6:	b580      	push	{r7, lr}
 80123f8:	b082      	sub	sp, #8
 80123fa:	af00      	add	r7, sp, #0
 80123fc:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 8012402:	4618      	mov	r0, r3
 8012404:	f7fb fa1e 	bl	800d844 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8012408:	4603      	mov	r3, r0
    }
 801240a:	4618      	mov	r0, r3
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}

08012412 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012412:	b480      	push	{r7}
 8012414:	b083      	sub	sp, #12
 8012416:	af00      	add	r7, sp, #0
 8012418:	6078      	str	r0, [r7, #4]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	4618      	mov	r0, r3
 801241e:	370c      	adds	r7, #12
 8012420:	46bd      	mov	sp, r7
 8012422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012426:	4770      	bx	lr

08012428 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8012428:	b480      	push	{r7}
 801242a:	b083      	sub	sp, #12
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	4618      	mov	r0, r3
 8012436:	370c      	adds	r7, #12
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr

08012440 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8012440:	b480      	push	{r7}
 8012442:	b083      	sub	sp, #12
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	685b      	ldr	r3, [r3, #4]
 801244c:	4618      	mov	r0, r3
 801244e:	370c      	adds	r7, #12
 8012450:	46bd      	mov	sp, r7
 8012452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012456:	4770      	bx	lr

08012458 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>:
 8012458:	b480      	push	{r7}
 801245a:	b083      	sub	sp, #12
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	4618      	mov	r0, r3
 8012464:	370c      	adds	r7, #12
 8012466:	46bd      	mov	sp, r7
 8012468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246c:	4770      	bx	lr

0801246e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 801246e:	b580      	push	{r7, lr}
 8012470:	b086      	sub	sp, #24
 8012472:	af00      	add	r7, sp, #0
 8012474:	60f8      	str	r0, [r7, #12]
 8012476:	60b9      	str	r1, [r7, #8]
 8012478:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 801247a:	6879      	ldr	r1, [r7, #4]
 801247c:	68b8      	ldr	r0, [r7, #8]
 801247e:	f000 f9e8 	bl	8012852 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8012482:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8012484:	6879      	ldr	r1, [r7, #4]
 8012486:	68b8      	ldr	r0, [r7, #8]
 8012488:	f000 f9ef 	bl	801286a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 801248c:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 801248e:	693a      	ldr	r2, [r7, #16]
 8012490:	6979      	ldr	r1, [r7, #20]
 8012492:	68f8      	ldr	r0, [r7, #12]
 8012494:	f000 f9f5 	bl	8012882 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8012498:	bf00      	nop
 801249a:	3718      	adds	r7, #24
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}

080124a0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80124a8:	2201      	movs	r2, #1
 80124aa:	2100      	movs	r1, #0
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f7ff ffde 	bl	801246e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f000 fa0b 	bl	80128ce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>
  }
 80124b8:	bf00      	nop
 80124ba:	3708      	adds	r7, #8
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}

080124c0 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b082      	sub	sp, #8
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
 80124c8:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6839      	ldr	r1, [r7, #0]
 80124ce:	4618      	mov	r0, r3
 80124d0:	f000 fa0d 	bl	80128ee <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	4618      	mov	r0, r3
 80124d8:	f000 fa33 	bl	8012942 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 80124dc:	bf00      	nop
  }
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	4618      	mov	r0, r3
 80124e2:	3708      	adds	r7, #8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80124f0:	f7f4 f9b7 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80124f4:	4603      	mov	r3, r0
  }
 80124f6:	4618      	mov	r0, r3
 80124f8:	3708      	adds	r7, #8
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80124fe:	b580      	push	{r7, lr}
 8012500:	b082      	sub	sp, #8
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8012506:	f7f4 f9a4 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801250a:	4603      	mov	r3, r0
  }
 801250c:	4618      	mov	r0, r3
 801250e:	3708      	adds	r7, #8
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	4618      	mov	r0, r3
 8012520:	f000 fa1b 	bl	801295a <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 8012524:	4603      	mov	r3, r0
 8012526:	4618      	mov	r0, r3
 8012528:	3708      	adds	r7, #8
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}

0801252e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801252e:	b480      	push	{r7}
 8012530:	b083      	sub	sp, #12
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	4618      	mov	r0, r3
 801253a:	370c      	adds	r7, #12
 801253c:	46bd      	mov	sp, r7
 801253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012542:	4770      	bx	lr

08012544 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8012544:	b580      	push	{r7, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	af00      	add	r7, sp, #0
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	60b9      	str	r1, [r7, #8]
 801254e:	607a      	str	r2, [r7, #4]
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	687a      	ldr	r2, [r7, #4]
 8012554:	68b9      	ldr	r1, [r7, #8]
 8012556:	4618      	mov	r0, r3
 8012558:	f000 fa16 	bl	8012988 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	4618      	mov	r0, r3
 8012560:	3710      	adds	r7, #16
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}

08012566 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8012566:	b480      	push	{r7}
 8012568:	b083      	sub	sp, #12
 801256a:	af00      	add	r7, sp, #0
 801256c:	6078      	str	r0, [r7, #4]
    }
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	4618      	mov	r0, r3
 8012572:	370c      	adds	r7, #12
 8012574:	46bd      	mov	sp, r7
 8012576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257a:	4770      	bx	lr

0801257c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 801257c:	b580      	push	{r7, lr}
 801257e:	b082      	sub	sp, #8
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	4618      	mov	r0, r3
 8012588:	f7f9 f83d 	bl	800b606 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 801258c:	4603      	mov	r3, r0
    }
 801258e:	4618      	mov	r0, r3
 8012590:	3708      	adds	r7, #8
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}

08012596 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8012596:	b580      	push	{r7, lr}
 8012598:	b082      	sub	sp, #8
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
 801259e:	6039      	str	r1, [r7, #0]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6839      	ldr	r1, [r7, #0]
 80125a4:	4618      	mov	r0, r3
 80125a6:	f000 fa25 	bl	80129f4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	4618      	mov	r0, r3
 80125ae:	3708      	adds	r7, #8
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}

080125b4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80125b4:	b480      	push	{r7}
 80125b6:	b083      	sub	sp, #12
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4618      	mov	r0, r3
 80125c0:	370c      	adds	r7, #12
 80125c2:	46bd      	mov	sp, r7
 80125c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c8:	4770      	bx	lr

080125ca <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
 80125ca:	b480      	push	{r7}
 80125cc:	b083      	sub	sp, #12
 80125ce:	af00      	add	r7, sp, #0
 80125d0:	6078      	str	r0, [r7, #4]
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	4618      	mov	r0, r3
 80125d6:	370c      	adds	r7, #12
 80125d8:	46bd      	mov	sp, r7
 80125da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125de:	4770      	bx	lr

080125e0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b084      	sub	sp, #16
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80125ec:	68b9      	ldr	r1, [r7, #8]
 80125ee:	68f8      	ldr	r0, [r7, #12]
 80125f0:	f000 fa0f 	bl	8012a12 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>
 80125f4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80125f8:	eeb0 0a67 	vmov.f32	s0, s15
 80125fc:	3710      	adds	r7, #16
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}

08012602 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8012602:	b580      	push	{r7, lr}
 8012604:	b082      	sub	sp, #8
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
 801260a:	6039      	str	r1, [r7, #0]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	6839      	ldr	r1, [r7, #0]
 8012610:	4618      	mov	r0, r3
 8012612:	f000 fa22 	bl	8012a5a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	4618      	mov	r0, r3
 801261a:	3708      	adds	r7, #8
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}

08012620 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8012620:	b480      	push	{r7}
 8012622:	b083      	sub	sp, #12
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	4618      	mov	r0, r3
 801262c:	370c      	adds	r7, #12
 801262e:	46bd      	mov	sp, r7
 8012630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012634:	4770      	bx	lr

08012636 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8012636:	b580      	push	{r7, lr}
 8012638:	b082      	sub	sp, #8
 801263a:	af00      	add	r7, sp, #0
 801263c:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	689b      	ldr	r3, [r3, #8]
 8012642:	4618      	mov	r0, r3
 8012644:	f7fb f973 	bl	800d92e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 8012648:	4603      	mov	r3, r0
    }
 801264a:	4618      	mov	r0, r3
 801264c:	3708      	adds	r7, #8
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}

08012652 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8012652:	b580      	push	{r7, lr}
 8012654:	b082      	sub	sp, #8
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	689b      	ldr	r3, [r3, #8]
 801265e:	4618      	mov	r0, r3
 8012660:	f7f4 fcd6 	bl	8007010 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 8012664:	4603      	mov	r3, r0
    }
 8012666:	4618      	mov	r0, r3
 8012668:	3708      	adds	r7, #8
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}

0801266e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801266e:	b480      	push	{r7}
 8012670:	b083      	sub	sp, #12
 8012672:	af00      	add	r7, sp, #0
 8012674:	6078      	str	r0, [r7, #4]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	4618      	mov	r0, r3
 801267a:	370c      	adds	r7, #12
 801267c:	46bd      	mov	sp, r7
 801267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012682:	4770      	bx	lr

08012684 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8012684:	b480      	push	{r7}
 8012686:	b083      	sub	sp, #12
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	4618      	mov	r0, r3
 8012690:	370c      	adds	r7, #12
 8012692:	46bd      	mov	sp, r7
 8012694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012698:	4770      	bx	lr

0801269a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 801269a:	b590      	push	{r4, r7, lr}
 801269c:	b083      	sub	sp, #12
 801269e:	af00      	add	r7, sp, #0
 80126a0:	6078      	str	r0, [r7, #4]
 80126a2:	6039      	str	r1, [r7, #0]
 80126a4:	687c      	ldr	r4, [r7, #4]
 80126a6:	6838      	ldr	r0, [r7, #0]
 80126a8:	f000 fa14 	bl	8012ad4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 80126ac:	4603      	mov	r3, r0
 80126ae:	4619      	mov	r1, r3
 80126b0:	4620      	mov	r0, r4
 80126b2:	f7f2 fe2f 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	1d1c      	adds	r4, r3, #4
 80126ba:	6838      	ldr	r0, [r7, #0]
 80126bc:	f000 fa16 	bl	8012aec <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>
 80126c0:	4603      	mov	r3, r0
 80126c2:	4619      	mov	r1, r3
 80126c4:	4620      	mov	r0, r4
 80126c6:	f000 fa28 	bl	8012b1a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f103 0408 	add.w	r4, r3, #8
 80126d0:	6838      	ldr	r0, [r7, #0]
 80126d2:	f000 fa16 	bl	8012b02 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>
 80126d6:	4603      	mov	r3, r0
 80126d8:	4619      	mov	r1, r3
 80126da:	4620      	mov	r0, r4
 80126dc:	f7f8 fdd9 	bl	800b292 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	4618      	mov	r0, r3
 80126e4:	370c      	adds	r7, #12
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd90      	pop	{r4, r7, pc}

080126ea <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 80126ea:	b580      	push	{r7, lr}
 80126ec:	b084      	sub	sp, #16
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	60f8      	str	r0, [r7, #12]
 80126f2:	60b9      	str	r1, [r7, #8]
 80126f4:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	68ba      	ldr	r2, [r7, #8]
 80126fa:	6879      	ldr	r1, [r7, #4]
 80126fc:	4618      	mov	r0, r3
 80126fe:	f000 fa1b 	bl	8012b38 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>
 8012702:	eef0 7a40 	vmov.f32	s15, s0
 8012706:	eeb0 0a67 	vmov.f32	s0, s15
 801270a:	3710      	adds	r7, #16
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}

08012710 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801271a:	2201      	movs	r2, #1
 801271c:	2100      	movs	r1, #0
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f7ff ffe3 	bl	80126ea <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8012724:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012728:	eeb0 0a67 	vmov.f32	s0, s15
 801272c:	3708      	adds	r7, #8
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}

08012732 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012732:	b580      	push	{r7, lr}
 8012734:	b082      	sub	sp, #8
 8012736:	af00      	add	r7, sp, #0
 8012738:	6078      	str	r0, [r7, #4]
 801273a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801273c:	2202      	movs	r2, #2
 801273e:	2100      	movs	r1, #0
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f7ff ffd2 	bl	80126ea <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8012746:	eef0 7a40 	vmov.f32	s15, s0
  }
 801274a:	eeb0 0a67 	vmov.f32	s0, s15
 801274e:	3708      	adds	r7, #8
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}

08012754 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 8012754:	b580      	push	{r7, lr}
 8012756:	b0a4      	sub	sp, #144	; 0x90
 8012758:	af00      	add	r7, sp, #0
 801275a:	60f8      	str	r0, [r7, #12]
 801275c:	60b9      	str	r1, [r7, #8]
 801275e:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	6819      	ldr	r1, [r3, #0]
 8012764:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012768:	68ba      	ldr	r2, [r7, #8]
 801276a:	4618      	mov	r0, r3
 801276c:	f7f8 fc16 	bl	800af9c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 8012770:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012774:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012778:	4611      	mov	r1, r2
 801277a:	4618      	mov	r0, r3
 801277c:	f7f8 fc21 	bl	800afc2 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	6859      	ldr	r1, [r3, #4]
 8012784:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012788:	687a      	ldr	r2, [r7, #4]
 801278a:	4618      	mov	r0, r3
 801278c:	f000 f9ff 	bl	8012b8e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>
 8012790:	f107 0314 	add.w	r3, r7, #20
 8012794:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012798:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801279c:	4618      	mov	r0, r3
 801279e:	f000 fa09 	bl	8012bb4 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 80127a2:	f107 0314 	add.w	r3, r7, #20
 80127a6:	4618      	mov	r0, r3
 80127a8:	f000 fa32 	bl	8012c10 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>
 80127ac:	eef0 7a40 	vmov.f32	s15, s0
  }
 80127b0:	eeb0 0a67 	vmov.f32	s0, s15
 80127b4:	3790      	adds	r7, #144	; 0x90
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}

080127ba <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 80127ba:	b480      	push	{r7}
 80127bc:	b085      	sub	sp, #20
 80127be:	af00      	add	r7, sp, #0
 80127c0:	60f8      	str	r0, [r7, #12]
 80127c2:	60b9      	str	r1, [r7, #8]
 80127c4:	607a      	str	r2, [r7, #4]
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	ed93 7a00 	vldr	s14, [r3]
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	edd3 7a00 	vldr	s15, [r3]
 80127d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	edc3 7a00 	vstr	s15, [r3]
 80127dc:	bf00      	nop
 80127de:	3714      	adds	r7, #20
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr

080127e8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80127f0:	2200      	movs	r2, #0
 80127f2:	2101      	movs	r1, #1
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f7ff f991 	bl	8011b1c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f000 fa23 	bl	8012c46 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>
  }
 8012800:	bf00      	nop
 8012802:	3708      	adds	r7, #8
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}

08012808 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>:
    const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
      return m_xpr;
 8012810:	687b      	ldr	r3, [r7, #4]
    }
 8012812:	4618      	mov	r0, r3
 8012814:	370c      	adds	r7, #12
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr

0801281e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801281e:	b480      	push	{r7}
 8012820:	b083      	sub	sp, #12
 8012822:	af00      	add	r7, sp, #0
 8012824:	6078      	str	r0, [r7, #4]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	4618      	mov	r0, r3
 801282a:	370c      	adds	r7, #12
 801282c:	46bd      	mov	sp, r7
 801282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012832:	4770      	bx	lr

08012834 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012834:	b580      	push	{r7, lr}
 8012836:	b082      	sub	sp, #8
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	6039      	str	r1, [r7, #0]
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6839      	ldr	r1, [r7, #0]
 8012842:	4618      	mov	r0, r3
 8012844:	f7f7 fb49 	bl	8009eda <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	4618      	mov	r0, r3
 801284c:	3708      	adds	r7, #8
 801284e:	46bd      	mov	sp, r7
 8012850:	bd80      	pop	{r7, pc}

08012852 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8012852:	b480      	push	{r7}
 8012854:	b083      	sub	sp, #12
 8012856:	af00      	add	r7, sp, #0
 8012858:	6078      	str	r0, [r7, #4]
 801285a:	6039      	str	r1, [r7, #0]
      : inner;
 801285c:	683b      	ldr	r3, [r7, #0]
  }
 801285e:	4618      	mov	r0, r3
 8012860:	370c      	adds	r7, #12
 8012862:	46bd      	mov	sp, r7
 8012864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012868:	4770      	bx	lr

0801286a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 801286a:	b480      	push	{r7}
 801286c:	b083      	sub	sp, #12
 801286e:	af00      	add	r7, sp, #0
 8012870:	6078      	str	r0, [r7, #4]
 8012872:	6039      	str	r1, [r7, #0]
      : outer;
 8012874:	687b      	ldr	r3, [r7, #4]
  }
 8012876:	4618      	mov	r0, r3
 8012878:	370c      	adds	r7, #12
 801287a:	46bd      	mov	sp, r7
 801287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012880:	4770      	bx	lr

08012882 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8012882:	b5b0      	push	{r4, r5, r7, lr}
 8012884:	b086      	sub	sp, #24
 8012886:	af00      	add	r7, sp, #0
 8012888:	60f8      	str	r0, [r7, #12]
 801288a:	60b9      	str	r1, [r7, #8]
 801288c:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	689c      	ldr	r4, [r3, #8]
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	687a      	ldr	r2, [r7, #4]
 8012898:	68b9      	ldr	r1, [r7, #8]
 801289a:	4618      	mov	r0, r3
 801289c:	f7f6 f83e 	bl	800891c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 80128a0:	4605      	mov	r5, r0
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	685b      	ldr	r3, [r3, #4]
 80128a6:	687a      	ldr	r2, [r7, #4]
 80128a8:	68b9      	ldr	r1, [r7, #8]
 80128aa:	4618      	mov	r0, r3
 80128ac:	f000 f9db 	bl	8012c66 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>
 80128b0:	eef0 7a40 	vmov.f32	s15, s0
 80128b4:	edc7 7a05 	vstr	s15, [r7, #20]
 80128b8:	f107 0314 	add.w	r3, r7, #20
 80128bc:	461a      	mov	r2, r3
 80128be:	4629      	mov	r1, r5
 80128c0:	4620      	mov	r0, r4
 80128c2:	f7f5 fd9b 	bl	80083fc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80128c6:	bf00      	nop
 80128c8:	3718      	adds	r7, #24
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bdb0      	pop	{r4, r5, r7, pc}

080128ce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80128ce:	b580      	push	{r7, lr}
 80128d0:	b082      	sub	sp, #8
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80128d6:	2202      	movs	r2, #2
 80128d8:	2100      	movs	r1, #0
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	f7ff fdc7 	bl	801246e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f000 f9f3 	bl	8012ccc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>
  }
 80128e6:	bf00      	nop
 80128e8:	3708      	adds	r7, #8
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}

080128ee <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 80128ee:	b590      	push	{r4, r7, lr}
 80128f0:	b083      	sub	sp, #12
 80128f2:	af00      	add	r7, sp, #0
 80128f4:	6078      	str	r0, [r7, #4]
 80128f6:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f000 fa13 	bl	8012d24 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	4618      	mov	r0, r3
 8012902:	f000 f81e 	bl	8012942 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 8012906:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	601a      	str	r2, [r3, #0]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	1d1c      	adds	r4, r3, #4
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	4618      	mov	r0, r3
 8012914:	f000 f9ea 	bl	8012cec <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>
 8012918:	4603      	mov	r3, r0
 801291a:	4619      	mov	r1, r3
 801291c:	4620      	mov	r0, r4
 801291e:	f7f3 ff59 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	1d5c      	adds	r4, r3, #5
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	4618      	mov	r0, r3
 801292a:	f000 f9ed 	bl	8012d08 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>
 801292e:	4603      	mov	r3, r0
 8012930:	4619      	mov	r1, r3
 8012932:	4620      	mov	r0, r4
 8012934:	f7f3 ff68 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	4618      	mov	r0, r3
 801293c:	370c      	adds	r7, #12
 801293e:	46bd      	mov	sp, r7
 8012940:	bd90      	pop	{r4, r7, pc}

08012942 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>:
 8012942:	b480      	push	{r7}
 8012944:	b083      	sub	sp, #12
 8012946:	af00      	add	r7, sp, #0
 8012948:	6078      	str	r0, [r7, #4]
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	4618      	mov	r0, r3
 8012950:	370c      	adds	r7, #12
 8012952:	46bd      	mov	sp, r7
 8012954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012958:	4770      	bx	lr

0801295a <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 801295a:	b480      	push	{r7}
 801295c:	b083      	sub	sp, #12
 801295e:	af00      	add	r7, sp, #0
 8012960:	6078      	str	r0, [r7, #4]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	4618      	mov	r0, r3
 8012966:	370c      	adds	r7, #12
 8012968:	46bd      	mov	sp, r7
 801296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296e:	4770      	bx	lr

08012970 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8012970:	b580      	push	{r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f000 f9de 	bl	8012d3a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>
 801297e:	4603      	mov	r3, r0
 8012980:	4618      	mov	r0, r3
 8012982:	3708      	adds	r7, #8
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}

08012988 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8012988:	b5b0      	push	{r4, r5, r7, lr}
 801298a:	b084      	sub	sp, #16
 801298c:	af00      	add	r7, sp, #0
 801298e:	60f8      	str	r0, [r7, #12]
 8012990:	60b9      	str	r1, [r7, #8]
 8012992:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012994:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012996:	68b8      	ldr	r0, [r7, #8]
 8012998:	f000 f9db 	bl	8012d52 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>
 801299c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 801299e:	68b8      	ldr	r0, [r7, #8]
 80129a0:	f000 f9ff 	bl	8012da2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 80129a4:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	fb02 f303 	mul.w	r3, r2, r3
 80129ac:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80129ae:	441d      	add	r5, r3
 80129b0:	68b8      	ldr	r0, [r7, #8]
 80129b2:	f7f3 f822 	bl	80059fa <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80129b6:	4602      	mov	r2, r0
 80129b8:	2301      	movs	r3, #1
 80129ba:	4629      	mov	r1, r5
 80129bc:	4620      	mov	r0, r4
 80129be:	f000 fa11 	bl	8012de4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	3308      	adds	r3, #8
 80129c6:	68ba      	ldr	r2, [r7, #8]
 80129c8:	6812      	ldr	r2, [r2, #0]
 80129ca:	601a      	str	r2, [r3, #0]
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	330c      	adds	r3, #12
 80129d0:	2100      	movs	r1, #0
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7fa ff8c 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	3310      	adds	r3, #16
 80129dc:	6879      	ldr	r1, [r7, #4]
 80129de:	4618      	mov	r0, r3
 80129e0:	f7fa fffa 	bl	800d9d8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 80129e4:	68f8      	ldr	r0, [r7, #12]
 80129e6:	f000 fa3b 	bl	8012e60 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>
    }
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	4618      	mov	r0, r3
 80129ee:	3710      	adds	r7, #16
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bdb0      	pop	{r4, r5, r7, pc}

080129f4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	6039      	str	r1, [r7, #0]
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	6839      	ldr	r1, [r7, #0]
 8012a02:	4618      	mov	r0, r3
 8012a04:	f000 fa3c 	bl	8012e80 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3708      	adds	r7, #8
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}

08012a12 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012a12:	b580      	push	{r7, lr}
 8012a14:	b084      	sub	sp, #16
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
 8012a1a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012a1c:	6839      	ldr	r1, [r7, #0]
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f000 fa40 	bl	8012ea4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>
 8012a24:	eef0 7a40 	vmov.f32	s15, s0
 8012a28:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012a2c:	6839      	ldr	r1, [r7, #0]
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f000 fa49 	bl	8012ec6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>
 8012a34:	eef0 7a40 	vmov.f32	s15, s0
 8012a38:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012a3c:	f107 020c 	add.w	r2, r7, #12
 8012a40:	f107 0308 	add.w	r3, r7, #8
 8012a44:	4619      	mov	r1, r3
 8012a46:	6838      	ldr	r0, [r7, #0]
 8012a48:	f7f6 fac9 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012a4c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012a50:	eeb0 0a67 	vmov.f32	s0, s15
 8012a54:	3710      	adds	r7, #16
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}

08012a5a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>:
  explicit product_evaluator(const XprType& xpr)
 8012a5a:	b5b0      	push	{r4, r5, r7, lr}
 8012a5c:	b084      	sub	sp, #16
 8012a5e:	af00      	add	r7, sp, #0
 8012a60:	6078      	str	r0, [r7, #4]
 8012a62:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	4618      	mov	r0, r3
 8012a68:	f000 fa51 	bl	8012f0e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	1d1c      	adds	r4, r3, #4
 8012a70:	6838      	ldr	r0, [r7, #0]
 8012a72:	f7f3 f8f9 	bl	8005c68 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8012a76:	4603      	mov	r3, r0
 8012a78:	60bb      	str	r3, [r7, #8]
 8012a7a:	6838      	ldr	r0, [r7, #0]
 8012a7c:	f7f3 f901 	bl	8005c82 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8012a80:	4603      	mov	r3, r0
 8012a82:	60fb      	str	r3, [r7, #12]
 8012a84:	f107 020c 	add.w	r2, r7, #12
 8012a88:	f107 0308 	add.w	r3, r7, #8
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	4620      	mov	r0, r4
 8012a90:	f000 fa4a 	bl	8012f28 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	4619      	mov	r1, r3
 8012a98:	2004      	movs	r0, #4
 8012a9a:	f7ee fa4f 	bl	8000f3c <_ZnwjPv>
 8012a9e:	4602      	mov	r2, r0
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	3304      	adds	r3, #4
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	4610      	mov	r0, r2
 8012aa8:	f7f7 fbf9 	bl	800a29e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	1d1c      	adds	r4, r3, #4
 8012ab0:	6838      	ldr	r0, [r7, #0]
 8012ab2:	f000 fa52 	bl	8012f5a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 8012ab6:	4605      	mov	r5, r0
 8012ab8:	6838      	ldr	r0, [r7, #0]
 8012aba:	f000 fa59 	bl	8012f70 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	4629      	mov	r1, r5
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	f000 fa5f 	bl	8012f88 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>
  }
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	4618      	mov	r0, r3
 8012ace:	3710      	adds	r7, #16
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bdb0      	pop	{r4, r5, r7, pc}

08012ad4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8012ad4:	b480      	push	{r7}
 8012ad6:	b083      	sub	sp, #12
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	3308      	adds	r3, #8
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	370c      	adds	r7, #12
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aea:	4770      	bx	lr

08012aec <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8012aec:	b480      	push	{r7}
 8012aee:	b083      	sub	sp, #12
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	4618      	mov	r0, r3
 8012af8:	370c      	adds	r7, #12
 8012afa:	46bd      	mov	sp, r7
 8012afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b00:	4770      	bx	lr

08012b02 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8012b02:	b480      	push	{r7}
 8012b04:	b083      	sub	sp, #12
 8012b06:	af00      	add	r7, sp, #0
 8012b08:	6078      	str	r0, [r7, #4]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	4618      	mov	r0, r3
 8012b10:	370c      	adds	r7, #12
 8012b12:	46bd      	mov	sp, r7
 8012b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b18:	4770      	bx	lr

08012b1a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012b1a:	b580      	push	{r7, lr}
 8012b1c:	b082      	sub	sp, #8
 8012b1e:	af00      	add	r7, sp, #0
 8012b20:	6078      	str	r0, [r7, #4]
 8012b22:	6039      	str	r1, [r7, #0]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6839      	ldr	r1, [r7, #0]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f000 fa55 	bl	8012fd8 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	4618      	mov	r0, r3
 8012b32:	3708      	adds	r7, #8
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8012b38:	b590      	push	{r4, r7, lr}
 8012b3a:	b087      	sub	sp, #28
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	60f8      	str	r0, [r7, #12]
 8012b40:	60b9      	str	r1, [r7, #8]
 8012b42:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	4618      	mov	r0, r3
 8012b48:	f000 fa55 	bl	8012ff6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 8012b4c:	4604      	mov	r4, r0
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	3304      	adds	r3, #4
 8012b52:	687a      	ldr	r2, [r7, #4]
 8012b54:	68b9      	ldr	r1, [r7, #8]
 8012b56:	4618      	mov	r0, r3
 8012b58:	f000 fa58 	bl	801300c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 8012b5c:	eef0 7a40 	vmov.f32	s15, s0
 8012b60:	edc7 7a05 	vstr	s15, [r7, #20]
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	3308      	adds	r3, #8
 8012b68:	687a      	ldr	r2, [r7, #4]
 8012b6a:	68b9      	ldr	r1, [r7, #8]
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f7fe f9d0 	bl	8010f12 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 8012b72:	4602      	mov	r2, r0
 8012b74:	f107 0314 	add.w	r3, r7, #20
 8012b78:	4619      	mov	r1, r3
 8012b7a:	4620      	mov	r0, r4
 8012b7c:	f7fc fa70 	bl	800f060 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8012b80:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012b84:	eeb0 0a67 	vmov.f32	s0, s15
 8012b88:	371c      	adds	r7, #28
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd90      	pop	{r4, r7, pc}

08012b8e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 8012b8e:	b580      	push	{r7, lr}
 8012b90:	b084      	sub	sp, #16
 8012b92:	af00      	add	r7, sp, #0
 8012b94:	60f8      	str	r0, [r7, #12]
 8012b96:	60b9      	str	r1, [r7, #8]
 8012b98:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8012b9a:	68b8      	ldr	r0, [r7, #8]
 8012b9c:	f7f2 ff6a 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	687a      	ldr	r2, [r7, #4]
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	68f8      	ldr	r0, [r7, #12]
 8012ba8:	f000 fa46 	bl	8013038 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>
}
 8012bac:	68f8      	ldr	r0, [r7, #12]
 8012bae:	3710      	adds	r7, #16
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}

08012bb4 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8012bb4:	b5b0      	push	{r4, r5, r7, lr}
 8012bb6:	b086      	sub	sp, #24
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	60f8      	str	r0, [r7, #12]
 8012bbc:	60b9      	str	r1, [r7, #8]
 8012bbe:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8012bc0:	68b8      	ldr	r0, [r7, #8]
 8012bc2:	f7f8 ffff 	bl	800bbc4 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f000 fa5d 	bl	8013088 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>
 8012bce:	4605      	mov	r5, r0
 8012bd0:	f107 0314 	add.w	r3, r7, #20
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7f2 fb13 	bl	8005200 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8012bda:	f107 0314 	add.w	r3, r7, #20
 8012bde:	462a      	mov	r2, r5
 8012be0:	4621      	mov	r1, r4
 8012be2:	68f8      	ldr	r0, [r7, #12]
 8012be4:	f000 fa8a 	bl	80130fc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 8012be8:	68f8      	ldr	r0, [r7, #12]
 8012bea:	3718      	adds	r7, #24
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bdb0      	pop	{r4, r5, r7, pc}

08012bf0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b082      	sub	sp, #8
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f000 fadd 	bl	80131b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	4618      	mov	r0, r3
 8012c02:	f000 fae4 	bl	80131ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>
 8012c06:	4603      	mov	r3, r0
 8012c08:	4618      	mov	r0, r3
 8012c0a:	3708      	adds	r7, #8
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}

08012c10 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8012c10:	b590      	push	{r4, r7, lr}
 8012c12:	b085      	sub	sp, #20
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f000 facd 	bl	80131b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012c1e:	4604      	mov	r4, r0
 8012c20:	f107 030c 	add.w	r3, r7, #12
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7f2 fde2 	bl	80057ee <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8012c2a:	f107 030c 	add.w	r3, r7, #12
 8012c2e:	4619      	mov	r1, r3
 8012c30:	4620      	mov	r0, r4
 8012c32:	f000 fb49 	bl	80132c8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8012c36:	eef0 7a40 	vmov.f32	s15, s0
 8012c3a:	bf00      	nop
}
 8012c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8012c40:	3714      	adds	r7, #20
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd90      	pop	{r4, r7, pc}

08012c46 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012c46:	b580      	push	{r7, lr}
 8012c48:	b082      	sub	sp, #8
 8012c4a:	af00      	add	r7, sp, #0
 8012c4c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012c4e:	2201      	movs	r2, #1
 8012c50:	2101      	movs	r1, #1
 8012c52:	6878      	ldr	r0, [r7, #4]
 8012c54:	f7fe ff62 	bl	8011b1c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f000 fb7b 	bl	8013354 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>
  }
 8012c5e:	bf00      	nop
 8012c60:	3708      	adds	r7, #8
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}

08012c66 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 8012c66:	b580      	push	{r7, lr}
 8012c68:	b0a4      	sub	sp, #144	; 0x90
 8012c6a:	af00      	add	r7, sp, #0
 8012c6c:	60f8      	str	r0, [r7, #12]
 8012c6e:	60b9      	str	r1, [r7, #8]
 8012c70:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	6819      	ldr	r1, [r3, #0]
 8012c76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012c7a:	68ba      	ldr	r2, [r7, #8]
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7f7 ffbd 	bl	800abfc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 8012c82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c86:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012c8a:	4611      	mov	r1, r2
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7f7 ffc8 	bl	800ac22 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	6859      	ldr	r1, [r3, #4]
 8012c96:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012c9a:	687a      	ldr	r2, [r7, #4]
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f7f9 f9f4 	bl	800c08a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 8012ca2:	f107 0314 	add.w	r3, r7, #20
 8012ca6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012caa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f7f9 f9fe 	bl	800c0b0 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8012cb4:	f107 0314 	add.w	r3, r7, #20
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7f9 fa27 	bl	800c10c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 8012cbe:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8012cc6:	3790      	adds	r7, #144	; 0x90
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}

08012ccc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b082      	sub	sp, #8
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	2101      	movs	r1, #1
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f7ff fbc8 	bl	801246e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f000 fb48 	bl	8013374 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>
  }
 8012ce4:	bf00      	nop
 8012ce6:	3708      	adds	r7, #8
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}

08012cec <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	3308      	adds	r3, #8
             ? m_xpr.innerStride()
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f7fd fc40 	bl	801057e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>
 8012cfe:	4603      	mov	r3, r0
    }
 8012d00:	4618      	mov	r0, r3
 8012d02:	3708      	adds	r7, #8
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}

08012d08 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b082      	sub	sp, #8
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7fd fc1e 	bl	8010556 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8012d1a:	4603      	mov	r3, r0
    }
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3708      	adds	r7, #8
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}

08012d24 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012d24:	b480      	push	{r7}
 8012d26:	b083      	sub	sp, #12
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	4618      	mov	r0, r3
 8012d30:	370c      	adds	r7, #12
 8012d32:	46bd      	mov	sp, r7
 8012d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d38:	4770      	bx	lr

08012d3a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 8012d3a:	b580      	push	{r7, lr}
 8012d3c:	b082      	sub	sp, #8
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f000 fb36 	bl	80133b4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>
 8012d48:	4603      	mov	r3, r0
    }
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3708      	adds	r7, #8
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}

08012d52 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 8012d52:	b580      	push	{r7, lr}
 8012d54:	b082      	sub	sp, #8
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	6078      	str	r0, [r7, #4]
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f7f2 fe1e 	bl	800599c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012d60:	4603      	mov	r3, r0
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7fe fd63 	bl	801182e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7ff fbd2 	bl	8012514 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8012d70:	4603      	mov	r3, r0
 8012d72:	4618      	mov	r0, r3
 8012d74:	3708      	adds	r7, #8
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}

08012d7a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 8012d7a:	b580      	push	{r7, lr}
 8012d7c:	b082      	sub	sp, #8
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	6078      	str	r0, [r7, #4]
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f7f2 fe0a 	bl	800599c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f7fe fd4f 	bl	801182e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012d90:	4603      	mov	r3, r0
 8012d92:	4618      	mov	r0, r3
 8012d94:	f000 fb30 	bl	80133f8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3708      	adds	r7, #8
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}

08012da2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 8012da2:	b580      	push	{r7, lr}
 8012da4:	b082      	sub	sp, #8
 8012da6:	af00      	add	r7, sp, #0
 8012da8:	6078      	str	r0, [r7, #4]
 8012daa:	6878      	ldr	r0, [r7, #4]
 8012dac:	f7f2 fdf6 	bl	800599c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012db0:	4603      	mov	r3, r0
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7fe fd3b 	bl	801182e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012db8:	4603      	mov	r3, r0
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7ff fdd8 	bl	8012970 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	3708      	adds	r7, #8
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bd80      	pop	{r7, pc}

08012dca <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
 8012dca:	b580      	push	{r7, lr}
 8012dcc:	b082      	sub	sp, #8
 8012dce:	af00      	add	r7, sp, #0
 8012dd0:	6078      	str	r0, [r7, #4]
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f000 fb1b 	bl	801340e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	4618      	mov	r0, r3
 8012ddc:	3708      	adds	r7, #8
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}
	...

08012de4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b084      	sub	sp, #16
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	60f8      	str	r0, [r7, #12]
 8012dec:	60b9      	str	r1, [r7, #8]
 8012dee:	607a      	str	r2, [r7, #4]
 8012df0:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8012df2:	68f8      	ldr	r0, [r7, #12]
 8012df4:	f7ff ffe9 	bl	8012dca <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	68ba      	ldr	r2, [r7, #8]
 8012dfc:	601a      	str	r2, [r3, #0]
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	3304      	adds	r3, #4
 8012e02:	6879      	ldr	r1, [r7, #4]
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7f3 fce5 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	3305      	adds	r3, #5
 8012e0e:	6839      	ldr	r1, [r7, #0]
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7f3 fcf9 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d011      	beq.n	8012e40 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	db08      	blt.n	8012e34 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	2b03      	cmp	r3, #3
 8012e26:	d105      	bne.n	8012e34 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	db02      	blt.n	8012e34 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	2b01      	cmp	r3, #1
 8012e32:	d005      	beq.n	8012e40 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 8012e34:	4b07      	ldr	r3, [pc, #28]	; (8012e54 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 8012e36:	4a08      	ldr	r2, [pc, #32]	; (8012e58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 8012e38:	21b0      	movs	r1, #176	; 0xb0
 8012e3a:	4808      	ldr	r0, [pc, #32]	; (8012e5c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 8012e3c:	f00a fe56 	bl	801daec <__assert_func>
      checkSanity<Derived>();
 8012e40:	2100      	movs	r1, #0
 8012e42:	68f8      	ldr	r0, [r7, #12]
 8012e44:	f000 faee 	bl	8013424 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3710      	adds	r7, #16
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}
 8012e52:	bf00      	nop
 8012e54:	08026078 	.word	0x08026078
 8012e58:	08028774 	.word	0x08028774
 8012e5c:	08026228 	.word	0x08026228

08012e60 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	3308      	adds	r3, #8
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7ff ff98 	bl	8012da2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8012e72:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	615a      	str	r2, [r3, #20]
    }
 8012e78:	bf00      	nop
 8012e7a:	3708      	adds	r7, #8
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}

08012e80 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b082      	sub	sp, #8
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
 8012e88:	6039      	str	r1, [r7, #0]
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	f000 fad5 	bl	801343a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	6839      	ldr	r1, [r7, #0]
 8012e94:	4618      	mov	r0, r3
 8012e96:	f000 fadb 	bl	8013450 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>
  }
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3708      	adds	r7, #8
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
 8012eac:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012eae:	2200      	movs	r2, #0
 8012eb0:	2100      	movs	r1, #0
 8012eb2:	6878      	ldr	r0, [r7, #4]
 8012eb4:	f000 faf4 	bl	80134a0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8012eb8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8012ec0:	3708      	adds	r7, #8
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}

08012ec6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012ec6:	b580      	push	{r7, lr}
 8012ec8:	b084      	sub	sp, #16
 8012eca:	af00      	add	r7, sp, #0
 8012ecc:	6078      	str	r0, [r7, #4]
 8012ece:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012ed0:	6839      	ldr	r1, [r7, #0]
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	f000 faf7 	bl	80134c6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>
 8012ed8:	eef0 7a40 	vmov.f32	s15, s0
 8012edc:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012ee0:	6839      	ldr	r1, [r7, #0]
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f000 fb00 	bl	80134e8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>
 8012ee8:	eef0 7a40 	vmov.f32	s15, s0
 8012eec:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012ef0:	f107 020c 	add.w	r2, r7, #12
 8012ef4:	f107 0308 	add.w	r3, r7, #8
 8012ef8:	4619      	mov	r1, r3
 8012efa:	6838      	ldr	r0, [r7, #0]
 8012efc:	f7f6 f86f 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012f00:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012f04:	eeb0 0a67 	vmov.f32	s0, s15
 8012f08:	3710      	adds	r7, #16
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}

08012f0e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  evaluator() {}
 8012f0e:	b580      	push	{r7, lr}
 8012f10:	b082      	sub	sp, #8
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	6078      	str	r0, [r7, #4]
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f000 faf6 	bl	801350a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	4618      	mov	r0, r3
 8012f22:	3708      	adds	r7, #8
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}

08012f28 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b084      	sub	sp, #16
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	60f8      	str	r0, [r7, #12]
 8012f30:	60b9      	str	r1, [r7, #8]
 8012f32:	607a      	str	r2, [r7, #4]
    {
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7f1 fde2 	bl	8004b00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 8012f3c:	f7f1 fdf0 	bl	8004b20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8012f40:	68f8      	ldr	r0, [r7, #12]
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	6819      	ldr	r1, [r3, #0]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681a      	ldr	r2, [r3, #0]
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	f000 faef 	bl	801352e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	4618      	mov	r0, r3
 8012f54:	3710      	adds	r7, #16
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}

08012f5a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8012f5a:	b480      	push	{r7}
 8012f5c:	b083      	sub	sp, #12
 8012f5e:	af00      	add	r7, sp, #0
 8012f60:	6078      	str	r0, [r7, #4]
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	4618      	mov	r0, r3
 8012f66:	370c      	adds	r7, #12
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6e:	4770      	bx	lr

08012f70 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8012f70:	b480      	push	{r7}
 8012f72:	b083      	sub	sp, #12
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	3308      	adds	r3, #8
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	370c      	adds	r7, #12
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr

08012f88 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8012f88:	b590      	push	{r4, r7, lr}
 8012f8a:	b08b      	sub	sp, #44	; 0x2c
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	60f8      	str	r0, [r7, #12]
 8012f90:	60b9      	str	r1, [r7, #8]
 8012f92:	607a      	str	r2, [r7, #4]
    dst.coeffRef(0,0) = (lhs.transpose().cwiseProduct(rhs)).sum();
 8012f94:	f107 0320 	add.w	r3, r7, #32
 8012f98:	68b9      	ldr	r1, [r7, #8]
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f000 fadb 	bl	8013556 <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>
 8012fa0:	f107 0310 	add.w	r3, r7, #16
 8012fa4:	f107 0120 	add.w	r1, r7, #32
 8012fa8:	687a      	ldr	r2, [r7, #4]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f000 fae4 	bl	8013578 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	2100      	movs	r1, #0
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7f3 fb99 	bl	80066ee <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8012fbc:	4604      	mov	r4, r0
 8012fbe:	f107 0310 	add.w	r3, r7, #16
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f000 fb06 	bl	80135d4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>
 8012fc8:	eef0 7a40 	vmov.f32	s15, s0
 8012fcc:	edc4 7a00 	vstr	s15, [r4]
  }
 8012fd0:	bf00      	nop
 8012fd2:	372c      	adds	r7, #44	; 0x2c
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd90      	pop	{r4, r7, pc}

08012fd8 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b082      	sub	sp, #8
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	6039      	str	r1, [r7, #0]
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	6839      	ldr	r1, [r7, #0]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f000 fb0f 	bl	801360a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3708      	adds	r7, #8
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}

08012ff6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8012ff6:	b480      	push	{r7}
 8012ff8:	b083      	sub	sp, #12
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	4618      	mov	r0, r3
 8013002:	370c      	adds	r7, #12
 8013004:	46bd      	mov	sp, r7
 8013006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300a:	4770      	bx	lr

0801300c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801300c:	b580      	push	{r7, lr}
 801300e:	b084      	sub	sp, #16
 8013010:	af00      	add	r7, sp, #0
 8013012:	60f8      	str	r0, [r7, #12]
 8013014:	60b9      	str	r1, [r7, #8]
 8013016:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	68ba      	ldr	r2, [r7, #8]
 801301c:	6879      	ldr	r1, [r7, #4]
 801301e:	4618      	mov	r0, r3
 8013020:	f000 fb09 	bl	8013636 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8013024:	4603      	mov	r3, r0
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	ee07 3a90 	vmov	s15, r3
  }
 801302c:	eeb0 0a67 	vmov.f32	s0, s15
 8013030:	3710      	adds	r7, #16
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}
	...

08013038 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8013038:	b580      	push	{r7, lr}
 801303a:	b084      	sub	sp, #16
 801303c:	af00      	add	r7, sp, #0
 801303e:	60f8      	str	r0, [r7, #12]
 8013040:	60b9      	str	r1, [r7, #8]
 8013042:	607a      	str	r2, [r7, #4]
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	687a      	ldr	r2, [r7, #4]
 8013048:	68b9      	ldr	r1, [r7, #8]
 801304a:	4618      	mov	r0, r3
 801304c:	f000 fb0b 	bl	8013666 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	db07      	blt.n	8013066 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	4618      	mov	r0, r3
 801305a:	f7f1 ffe7 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801305e:	4602      	mov	r2, r0
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	4293      	cmp	r3, r2
 8013064:	db05      	blt.n	8013072 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 8013066:	4b05      	ldr	r3, [pc, #20]	; (801307c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x44>)
 8013068:	4a05      	ldr	r2, [pc, #20]	; (8013080 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 801306a:	2178      	movs	r1, #120	; 0x78
 801306c:	4805      	ldr	r0, [pc, #20]	; (8013084 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 801306e:	f00a fd3d 	bl	801daec <__assert_func>
    }
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	4618      	mov	r0, r3
 8013076:	3710      	adds	r7, #16
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}
 801307c:	080244d8 	.word	0x080244d8
 8013080:	08028888 	.word	0x08028888
 8013084:	0802465c 	.word	0x0802465c

08013088 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013088:	b480      	push	{r7}
 801308a:	b083      	sub	sp, #12
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	4618      	mov	r0, r3
 8013094:	370c      	adds	r7, #12
 8013096:	46bd      	mov	sp, r7
 8013098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309c:	4770      	bx	lr

0801309e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
 801309e:	b580      	push	{r7, lr}
 80130a0:	b082      	sub	sp, #8
 80130a2:	af00      	add	r7, sp, #0
 80130a4:	6078      	str	r0, [r7, #4]
 80130a6:	6878      	ldr	r0, [r7, #4]
 80130a8:	f000 faee 	bl	8013688 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	4618      	mov	r0, r3
 80130b0:	3708      	adds	r7, #8
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}

080130b6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80130b6:	b580      	push	{r7, lr}
 80130b8:	b082      	sub	sp, #8
 80130ba:	af00      	add	r7, sp, #0
 80130bc:	6078      	str	r0, [r7, #4]
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f7ff ffed 	bl	801309e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	4618      	mov	r0, r3
 80130c8:	3708      	adds	r7, #8
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}

080130ce <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 80130ce:	b580      	push	{r7, lr}
 80130d0:	b082      	sub	sp, #8
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	6078      	str	r0, [r7, #4]
 80130d6:	f7f3 fbc4 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80130da:	4603      	mov	r3, r0
 80130dc:	4618      	mov	r0, r3
 80130de:	3708      	adds	r7, #8
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}

080130e4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	f7f3 fbb9 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80130f0:	4603      	mov	r3, r0
 80130f2:	4618      	mov	r0, r3
 80130f4:	3708      	adds	r7, #8
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}
	...

080130fc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80130fc:	b5b0      	push	{r4, r5, r7, lr}
 80130fe:	b084      	sub	sp, #16
 8013100:	af00      	add	r7, sp, #0
 8013102:	60f8      	str	r0, [r7, #12]
 8013104:	60b9      	str	r1, [r7, #8]
 8013106:	607a      	str	r2, [r7, #4]
 8013108:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 801310a:	68f8      	ldr	r0, [r7, #12]
 801310c:	f7ff ffd3 	bl	80130b6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 8013110:	68fa      	ldr	r2, [r7, #12]
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	4614      	mov	r4, r2
 8013116:	461d      	mov	r5, r3
 8013118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801311a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801311c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013120:	e884 0003 	stmia.w	r4, {r0, r1}
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	f103 0218 	add.w	r2, r3, #24
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	4614      	mov	r4, r2
 801312e:	461d      	mov	r5, r3
 8013130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013134:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013138:	e884 0003 	stmia.w	r4, {r0, r1}
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	3330      	adds	r3, #48	; 0x30
 8013140:	6839      	ldr	r1, [r7, #0]
 8013142:	4618      	mov	r0, r3
 8013144:	f7f2 f8e6 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8013148:	68b8      	ldr	r0, [r7, #8]
 801314a:	f7f8 fd69 	bl	800bc20 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 801314e:	4604      	mov	r4, r0
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	4618      	mov	r0, r3
 8013154:	f7ff ffbb 	bl	80130ce <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>
 8013158:	4603      	mov	r3, r0
 801315a:	429c      	cmp	r4, r3
 801315c:	d10a      	bne.n	8013174 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 801315e:	68b8      	ldr	r0, [r7, #8]
 8013160:	f7f8 fd6b 	bl	800bc3a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 8013164:	4604      	mov	r4, r0
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	4618      	mov	r0, r3
 801316a:	f7ff ffbb 	bl	80130e4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>
 801316e:	4603      	mov	r3, r0
 8013170:	429c      	cmp	r4, r3
 8013172:	d005      	beq.n	8013180 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 8013174:	4b05      	ldr	r3, [pc, #20]	; (801318c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 8013176:	4a06      	ldr	r2, [pc, #24]	; (8013190 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 8013178:	2174      	movs	r1, #116	; 0x74
 801317a:	4806      	ldr	r0, [pc, #24]	; (8013194 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 801317c:	f00a fcb6 	bl	801daec <__assert_func>
    }
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	4618      	mov	r0, r3
 8013184:	3710      	adds	r7, #16
 8013186:	46bd      	mov	sp, r7
 8013188:	bdb0      	pop	{r4, r5, r7, pc}
 801318a:	bf00      	nop
 801318c:	0801f954 	.word	0x0801f954
 8013190:	08028964 	.word	0x08028964
 8013194:	0801fbb8 	.word	0x0801fbb8

08013198 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8013198:	b580      	push	{r7, lr}
 801319a:	b082      	sub	sp, #8
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f000 f809 	bl	80131b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 80131a6:	4603      	mov	r3, r0
 80131a8:	4618      	mov	r0, r3
 80131aa:	f000 fa78 	bl	801369e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>
 80131ae:	4603      	mov	r3, r0
 80131b0:	4618      	mov	r0, r3
 80131b2:	3708      	adds	r7, #8
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80131b8:	b480      	push	{r7}
 80131ba:	b083      	sub	sp, #12
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	4618      	mov	r0, r3
 80131c4:	370c      	adds	r7, #12
 80131c6:	46bd      	mov	sp, r7
 80131c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131cc:	4770      	bx	lr

080131ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80131ce:	b580      	push	{r7, lr}
 80131d0:	b082      	sub	sp, #8
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	4618      	mov	r0, r3
 80131da:	f7f8 fd21 	bl	800bc20 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 80131de:	4603      	mov	r3, r0
    }
 80131e0:	4618      	mov	r0, r3
 80131e2:	3708      	adds	r7, #8
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}

080131e8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f000 fa7b 	bl	80136ec <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	4618      	mov	r0, r3
 80131fa:	3708      	adds	r7, #8
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}

08013200 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8013200:	b580      	push	{r7, lr}
 8013202:	b082      	sub	sp, #8
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	4618      	mov	r0, r3
 801320c:	f7ff ffec 	bl	80131e8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	4618      	mov	r0, r3
 8013214:	3708      	adds	r7, #8
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}

0801321a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 801321a:	b580      	push	{r7, lr}
 801321c:	b082      	sub	sp, #8
 801321e:	af00      	add	r7, sp, #0
 8013220:	6078      	str	r0, [r7, #4]
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	4618      	mov	r0, r3
 8013226:	f7ff ffeb 	bl	8013200 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	4618      	mov	r0, r3
 801322e:	3708      	adds	r7, #8
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	4618      	mov	r0, r3
 8013240:	f7ff ffeb 	bl	801321a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	4618      	mov	r0, r3
 8013248:	3708      	adds	r7, #8
 801324a:	46bd      	mov	sp, r7
 801324c:	bd80      	pop	{r7, pc}

0801324e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 801324e:	b580      	push	{r7, lr}
 8013250:	b082      	sub	sp, #8
 8013252:	af00      	add	r7, sp, #0
 8013254:	6078      	str	r0, [r7, #4]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	330c      	adds	r3, #12
 801325a:	4618      	mov	r0, r3
 801325c:	f7ff ffea 	bl	8013234 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	3304      	adds	r3, #4
 8013264:	4618      	mov	r0, r3
 8013266:	f7f8 fdcf 	bl	800be08 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	4618      	mov	r0, r3
 801326e:	3708      	adds	r7, #8
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}

08013274 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8013274:	b580      	push	{r7, lr}
 8013276:	b082      	sub	sp, #8
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	4618      	mov	r0, r3
 8013280:	f7ff ffe5 	bl	801324e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 8013284:	6878      	ldr	r0, [r7, #4]
 8013286:	f000 fa26 	bl	80136d6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	4618      	mov	r0, r3
 801328e:	3708      	adds	r7, #8
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}

08013294 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8013294:	b580      	push	{r7, lr}
 8013296:	b082      	sub	sp, #8
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	4618      	mov	r0, r3
 80132a0:	f7ff ffe8 	bl	8013274 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	4618      	mov	r0, r3
 80132a8:	3708      	adds	r7, #8
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}

080132ae <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 80132ae:	b580      	push	{r7, lr}
 80132b0:	b082      	sub	sp, #8
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	6078      	str	r0, [r7, #4]
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7ff ffeb 	bl	8013294 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	4618      	mov	r0, r3
 80132c2:	3708      	adds	r7, #8
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}

080132c8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 80132c8:	b580      	push	{r7, lr}
 80132ca:	ed2d 8b02 	vpush	{d8}
 80132ce:	b088      	sub	sp, #32
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
 80132d4:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f7ff fc8a 	bl	8012bf0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>
 80132dc:	4603      	mov	r3, r0
 80132de:	2b00      	cmp	r3, #0
 80132e0:	dd05      	ble.n	80132ee <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 80132e2:	6878      	ldr	r0, [r7, #4]
 80132e4:	f7ff ff58 	bl	8013198 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>
 80132e8:	4603      	mov	r3, r0
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	dc06      	bgt.n	80132fc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80132ee:	4b16      	ldr	r3, [pc, #88]	; (8013348 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 80132f0:	4a16      	ldr	r2, [pc, #88]	; (801334c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 80132f2:	f240 119b 	movw	r1, #411	; 0x19b
 80132f6:	4816      	ldr	r0, [pc, #88]	; (8013350 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80132f8:	f00a fbf8 	bl	801daec <__assert_func>
 80132fc:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f7ff ff5a 	bl	80131b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8013304:	4602      	mov	r2, r0
 8013306:	f107 030c 	add.w	r3, r7, #12
 801330a:	4611      	mov	r1, r2
 801330c:	4618      	mov	r0, r3
 801330e:	f000 f9d3 	bl	80136b8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f7ff ff50 	bl	80131b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8013318:	4602      	mov	r2, r0
 801331a:	f107 030c 	add.w	r3, r7, #12
 801331e:	6839      	ldr	r1, [r7, #0]
 8013320:	4618      	mov	r0, r3
 8013322:	f000 f9ee 	bl	8013702 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 8013326:	eeb0 8a40 	vmov.f32	s16, s0
 801332a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801332c:	f107 030c 	add.w	r3, r7, #12
 8013330:	4618      	mov	r0, r3
 8013332:	f7ff ffbc 	bl	80132ae <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013336:	eef0 7a48 	vmov.f32	s15, s16
}
 801333a:	eeb0 0a67 	vmov.f32	s0, s15
 801333e:	3720      	adds	r7, #32
 8013340:	46bd      	mov	sp, r7
 8013342:	ecbd 8b02 	vpop	{d8}
 8013346:	bd80      	pop	{r7, pc}
 8013348:	080249d4 	.word	0x080249d4
 801334c:	08028bb0 	.word	0x08028bb0
 8013350:	08024be0 	.word	0x08024be0

08013354 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801335c:	2202      	movs	r2, #2
 801335e:	2101      	movs	r1, #1
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f7fe fbdb 	bl	8011b1c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f000 f9dc 	bl	8013724 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>
  }
 801336c:	bf00      	nop
 801336e:	3708      	adds	r7, #8
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}

08013374 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013374:	b580      	push	{r7, lr}
 8013376:	b082      	sub	sp, #8
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801337c:	2201      	movs	r2, #1
 801337e:	2101      	movs	r1, #1
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f7ff f874 	bl	801246e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f000 f9dc 	bl	8013744 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>
  }
 801338c:	bf00      	nop
 801338e:	3708      	adds	r7, #8
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}

08013394 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8013394:	b580      	push	{r7, lr}
 8013396:	b082      	sub	sp, #8
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
 801339c:	6878      	ldr	r0, [r7, #4]
 801339e:	f7f2 fb69 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80133a2:	4603      	mov	r3, r0
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7f1 fe4c 	bl	8005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80133aa:	4603      	mov	r3, r0
 80133ac:	4618      	mov	r0, r3
 80133ae:	3708      	adds	r7, #8
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}

080133b4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 80133b4:	b590      	push	{r4, r7, lr}
 80133b6:	b083      	sub	sp, #12
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f7ff ffe9 	bl	8013394 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80133c2:	4604      	mov	r4, r0
 80133c4:	6878      	ldr	r0, [r7, #4]
 80133c6:	f000 f807 	bl	80133d8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80133ca:	4603      	mov	r3, r0
 80133cc:	fb04 f303 	mul.w	r3, r4, r3
 80133d0:	4618      	mov	r0, r3
 80133d2:	370c      	adds	r7, #12
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd90      	pop	{r4, r7, pc}

080133d8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80133d8:	b580      	push	{r7, lr}
 80133da:	b082      	sub	sp, #8
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f7f2 fb47 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80133e6:	4603      	mov	r3, r0
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7f1 fe1f 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80133ee:	4603      	mov	r3, r0
 80133f0:	4618      	mov	r0, r3
 80133f2:	3708      	adds	r7, #8
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}

080133f8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 80133f8:	b480      	push	{r7}
 80133fa:	b083      	sub	sp, #12
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	2301      	movs	r3, #1
 8013402:	4618      	mov	r0, r3
 8013404:	370c      	adds	r7, #12
 8013406:	46bd      	mov	sp, r7
 8013408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340c:	4770      	bx	lr

0801340e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801340e:	b480      	push	{r7}
 8013410:	b083      	sub	sp, #12
 8013412:	af00      	add	r7, sp, #0
 8013414:	6078      	str	r0, [r7, #4]
    }
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	4618      	mov	r0, r3
 801341a:	370c      	adds	r7, #12
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr

08013424 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8013424:	b480      	push	{r7}
 8013426:	b083      	sub	sp, #12
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	6039      	str	r1, [r7, #0]
    {}
 801342e:	bf00      	nop
 8013430:	370c      	adds	r7, #12
 8013432:	46bd      	mov	sp, r7
 8013434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013438:	4770      	bx	lr

0801343a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801343a:	b480      	push	{r7}
 801343c:	b083      	sub	sp, #12
 801343e:	af00      	add	r7, sp, #0
 8013440:	6078      	str	r0, [r7, #4]
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	4618      	mov	r0, r3
 8013446:	370c      	adds	r7, #12
 8013448:	46bd      	mov	sp, r7
 801344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344e:	4770      	bx	lr

08013450 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8013450:	b590      	push	{r4, r7, lr}
 8013452:	b083      	sub	sp, #12
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
 8013458:	6039      	str	r1, [r7, #0]
 801345a:	687c      	ldr	r4, [r7, #4]
 801345c:	6838      	ldr	r0, [r7, #0]
 801345e:	f000 f981 	bl	8013764 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>
 8013462:	4603      	mov	r3, r0
 8013464:	4619      	mov	r1, r3
 8013466:	4620      	mov	r0, r4
 8013468:	f7f1 ff54 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	1d1c      	adds	r4, r3, #4
 8013470:	6838      	ldr	r0, [r7, #0]
 8013472:	f000 f983 	bl	801377c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>
 8013476:	4603      	mov	r3, r0
 8013478:	4619      	mov	r1, r3
 801347a:	4620      	mov	r0, r4
 801347c:	f7fb fa91 	bl	800e9a2 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f103 040c 	add.w	r4, r3, #12
 8013486:	6838      	ldr	r0, [r7, #0]
 8013488:	f000 f983 	bl	8013792 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>
 801348c:	4603      	mov	r3, r0
 801348e:	4619      	mov	r1, r3
 8013490:	4620      	mov	r0, r4
 8013492:	f000 f98a 	bl	80137aa <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	4618      	mov	r0, r3
 801349a:	370c      	adds	r7, #12
 801349c:	46bd      	mov	sp, r7
 801349e:	bd90      	pop	{r4, r7, pc}

080134a0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b084      	sub	sp, #16
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	60f8      	str	r0, [r7, #12]
 80134a8:	60b9      	str	r1, [r7, #8]
 80134aa:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	68ba      	ldr	r2, [r7, #8]
 80134b0:	6879      	ldr	r1, [r7, #4]
 80134b2:	4618      	mov	r0, r3
 80134b4:	f000 f988 	bl	80137c8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>
 80134b8:	eef0 7a40 	vmov.f32	s15, s0
 80134bc:	eeb0 0a67 	vmov.f32	s0, s15
 80134c0:	3710      	adds	r7, #16
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}

080134c6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80134c6:	b580      	push	{r7, lr}
 80134c8:	b082      	sub	sp, #8
 80134ca:	af00      	add	r7, sp, #0
 80134cc:	6078      	str	r0, [r7, #4]
 80134ce:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80134d0:	2201      	movs	r2, #1
 80134d2:	2100      	movs	r1, #0
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f7ff ffe3 	bl	80134a0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80134da:	eef0 7a40 	vmov.f32	s15, s0
  }
 80134de:	eeb0 0a67 	vmov.f32	s0, s15
 80134e2:	3708      	adds	r7, #8
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}

080134e8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b082      	sub	sp, #8
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80134f2:	2202      	movs	r2, #2
 80134f4:	2100      	movs	r1, #0
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	f7ff ffd2 	bl	80134a0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80134fc:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013500:	eeb0 0a67 	vmov.f32	s0, s15
 8013504:	3708      	adds	r7, #8
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}

0801350a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  evaluator()
 801350a:	b580      	push	{r7, lr}
 801350c:	b082      	sub	sp, #8
 801350e:	af00      	add	r7, sp, #0
 8013510:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8013512:	6878      	ldr	r0, [r7, #4]
 8013514:	f7f7 fd37 	bl	800af86 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	2200      	movs	r2, #0
 801351c:	2100      	movs	r1, #0
 801351e:	4618      	mov	r0, r3
 8013520:	f7f3 fcbd 	bl	8006e9e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	4618      	mov	r0, r3
 8013528:	3708      	adds	r7, #8
 801352a:	46bd      	mov	sp, r7
 801352c:	bd80      	pop	{r7, pc}

0801352e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 801352e:	b580      	push	{r7, lr}
 8013530:	b086      	sub	sp, #24
 8013532:	af00      	add	r7, sp, #0
 8013534:	60f8      	str	r0, [r7, #12]
 8013536:	60b9      	str	r1, [r7, #8]
 8013538:	607a      	str	r2, [r7, #4]
 801353a:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 801353c:	2301      	movs	r3, #1
 801353e:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8013540:	2301      	movs	r3, #1
 8013542:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8013544:	687a      	ldr	r2, [r7, #4]
 8013546:	68b9      	ldr	r1, [r7, #8]
 8013548:	68f8      	ldr	r0, [r7, #12]
 801354a:	f7f9 fef9 	bl	800d340 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    }
 801354e:	bf00      	nop
 8013550:	3718      	adds	r7, #24
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}

08013556 <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8013556:	b580      	push	{r7, lr}
 8013558:	b082      	sub	sp, #8
 801355a:	af00      	add	r7, sp, #0
 801355c:	6078      	str	r0, [r7, #4]
 801355e:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8013560:	6838      	ldr	r0, [r7, #0]
 8013562:	f7f2 fae5 	bl	8005b30 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8013566:	4603      	mov	r3, r0
 8013568:	4619      	mov	r1, r3
 801356a:	6878      	ldr	r0, [r7, #4]
 801356c:	f000 f974 	bl	8013858 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>
}
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	3708      	adds	r7, #8
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}

08013578 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8013578:	b5b0      	push	{r4, r5, r7, lr}
 801357a:	b086      	sub	sp, #24
 801357c:	af00      	add	r7, sp, #0
 801357e:	60f8      	str	r0, [r7, #12]
 8013580:	60b9      	str	r1, [r7, #8]
 8013582:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8013584:	68b8      	ldr	r0, [r7, #8]
 8013586:	f000 f97a 	bl	801387e <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>
 801358a:	4604      	mov	r4, r0
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f7f2 fa05 	bl	800599c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8013592:	4605      	mov	r5, r0
 8013594:	f107 0314 	add.w	r3, r7, #20
 8013598:	4618      	mov	r0, r3
 801359a:	f7f1 fe31 	bl	8005200 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 801359e:	f107 0314 	add.w	r3, r7, #20
 80135a2:	462a      	mov	r2, r5
 80135a4:	4621      	mov	r1, r4
 80135a6:	68f8      	ldr	r0, [r7, #12]
 80135a8:	f000 f9a6 	bl	80138f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>
}
 80135ac:	68f8      	ldr	r0, [r7, #12]
 80135ae:	3718      	adds	r7, #24
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bdb0      	pop	{r4, r5, r7, pc}

080135b4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b082      	sub	sp, #8
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
 80135bc:	6878      	ldr	r0, [r7, #4]
 80135be:	f000 f9eb 	bl	8013998 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 80135c2:	4603      	mov	r3, r0
 80135c4:	4618      	mov	r0, r3
 80135c6:	f000 f9f2 	bl	80139ae <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>
 80135ca:	4603      	mov	r3, r0
 80135cc:	4618      	mov	r0, r3
 80135ce:	3708      	adds	r7, #8
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}

080135d4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>:
DenseBase<Derived>::sum() const
 80135d4:	b590      	push	{r4, r7, lr}
 80135d6:	b085      	sub	sp, #20
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	f000 f9db 	bl	8013998 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 80135e2:	4604      	mov	r4, r0
 80135e4:	f107 030c 	add.w	r3, r7, #12
 80135e8:	4618      	mov	r0, r3
 80135ea:	f7f2 f900 	bl	80057ee <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80135ee:	f107 030c 	add.w	r3, r7, #12
 80135f2:	4619      	mov	r1, r3
 80135f4:	4620      	mov	r0, r4
 80135f6:	f000 fa83 	bl	8013b00 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 80135fa:	eef0 7a40 	vmov.f32	s15, s0
 80135fe:	bf00      	nop
}
 8013600:	eeb0 0a67 	vmov.f32	s0, s15
 8013604:	3714      	adds	r7, #20
 8013606:	46bd      	mov	sp, r7
 8013608:	bd90      	pop	{r4, r7, pc}

0801360a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 801360a:	b590      	push	{r4, r7, lr}
 801360c:	b083      	sub	sp, #12
 801360e:	af00      	add	r7, sp, #0
 8013610:	6078      	str	r0, [r7, #4]
 8013612:	6039      	str	r1, [r7, #0]
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f000 fac5 	bl	8013ba4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 801361a:	687c      	ldr	r4, [r7, #4]
 801361c:	6838      	ldr	r0, [r7, #0]
 801361e:	f000 fab5 	bl	8013b8c <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8013622:	4603      	mov	r3, r0
 8013624:	4619      	mov	r1, r3
 8013626:	4620      	mov	r0, r4
 8013628:	f000 fac7 	bl	8013bba <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	4618      	mov	r0, r3
 8013630:	370c      	adds	r7, #12
 8013632:	46bd      	mov	sp, r7
 8013634:	bd90      	pop	{r4, r7, pc}

08013636 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013636:	b590      	push	{r4, r7, lr}
 8013638:	b085      	sub	sp, #20
 801363a:	af00      	add	r7, sp, #0
 801363c:	60f8      	str	r0, [r7, #12]
 801363e:	60b9      	str	r1, [r7, #8]
 8013640:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	681c      	ldr	r4, [r3, #0]
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	4618      	mov	r0, r3
 801364a:	f7f3 fb5d 	bl	8006d08 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 801364e:	4602      	mov	r2, r0
 8013650:	68bb      	ldr	r3, [r7, #8]
 8013652:	fb03 f202 	mul.w	r2, r3, r2
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	4413      	add	r3, r2
 801365a:	009b      	lsls	r3, r3, #2
 801365c:	4423      	add	r3, r4
  }
 801365e:	4618      	mov	r0, r3
 8013660:	3714      	adds	r7, #20
 8013662:	46bd      	mov	sp, r7
 8013664:	bd90      	pop	{r4, r7, pc}

08013666 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8013666:	b580      	push	{r7, lr}
 8013668:	b084      	sub	sp, #16
 801366a:	af00      	add	r7, sp, #0
 801366c:	60f8      	str	r0, [r7, #12]
 801366e:	60b9      	str	r1, [r7, #8]
 8013670:	607a      	str	r2, [r7, #4]
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	687a      	ldr	r2, [r7, #4]
 8013676:	68b9      	ldr	r1, [r7, #8]
 8013678:	4618      	mov	r0, r3
 801367a:	f000 faad 	bl	8013bd8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	4618      	mov	r0, r3
 8013682:	3710      	adds	r7, #16
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}

08013688 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013688:	b480      	push	{r7}
 801368a:	b083      	sub	sp, #12
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
    }
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	4618      	mov	r0, r3
 8013694:	370c      	adds	r7, #12
 8013696:	46bd      	mov	sp, r7
 8013698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369c:	4770      	bx	lr

0801369e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 801369e:	b580      	push	{r7, lr}
 80136a0:	b082      	sub	sp, #8
 80136a2:	af00      	add	r7, sp, #0
 80136a4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7f8 fac6 	bl	800bc3a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 80136ae:	4603      	mov	r3, r0
    }
 80136b0:	4618      	mov	r0, r3
 80136b2:	3708      	adds	r7, #8
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}

080136b8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b082      	sub	sp, #8
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	6039      	str	r1, [r7, #0]
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6839      	ldr	r1, [r7, #0]
 80136c6:	4618      	mov	r0, r3
 80136c8:	f000 fab7 	bl	8013c3a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	4618      	mov	r0, r3
 80136d0:	3708      	adds	r7, #8
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}

080136d6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80136d6:	b480      	push	{r7}
 80136d8:	b083      	sub	sp, #12
 80136da:	af00      	add	r7, sp, #0
 80136dc:	6078      	str	r0, [r7, #4]
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	4618      	mov	r0, r3
 80136e2:	370c      	adds	r7, #12
 80136e4:	46bd      	mov	sp, r7
 80136e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ea:	4770      	bx	lr

080136ec <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
 80136ec:	b480      	push	{r7}
 80136ee:	b083      	sub	sp, #12
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	4618      	mov	r0, r3
 80136f8:	370c      	adds	r7, #12
 80136fa:	46bd      	mov	sp, r7
 80136fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013700:	4770      	bx	lr

08013702 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8013702:	b580      	push	{r7, lr}
 8013704:	b084      	sub	sp, #16
 8013706:	af00      	add	r7, sp, #0
 8013708:	60f8      	str	r0, [r7, #12]
 801370a:	60b9      	str	r1, [r7, #8]
 801370c:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 801370e:	68b9      	ldr	r1, [r7, #8]
 8013710:	68f8      	ldr	r0, [r7, #12]
 8013712:	f000 faa1 	bl	8013c58 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8013716:	eef0 7a40 	vmov.f32	s15, s0
  }
 801371a:	eeb0 0a67 	vmov.f32	s0, s15
 801371e:	3710      	adds	r7, #16
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}

08013724 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013724:	b580      	push	{r7, lr}
 8013726:	b082      	sub	sp, #8
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801372c:	2200      	movs	r2, #0
 801372e:	2102      	movs	r1, #2
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f7fe f9f3 	bl	8011b1c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	f000 fa9f 	bl	8013c7a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>
  }
 801373c:	bf00      	nop
 801373e:	3708      	adds	r7, #8
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}

08013744 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013744:	b580      	push	{r7, lr}
 8013746:	b082      	sub	sp, #8
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801374c:	2202      	movs	r2, #2
 801374e:	2101      	movs	r1, #1
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f7fe fe8c 	bl	801246e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f000 fa9f 	bl	8013c9a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>
  }
 801375c:	bf00      	nop
 801375e:	3708      	adds	r7, #8
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}

08013764 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8013764:	b480      	push	{r7}
 8013766:	b083      	sub	sp, #12
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	3330      	adds	r3, #48	; 0x30
 8013770:	4618      	mov	r0, r3
 8013772:	370c      	adds	r7, #12
 8013774:	46bd      	mov	sp, r7
 8013776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377a:	4770      	bx	lr

0801377c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 801377c:	b480      	push	{r7}
 801377e:	b083      	sub	sp, #12
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	4618      	mov	r0, r3
 8013788:	370c      	adds	r7, #12
 801378a:	46bd      	mov	sp, r7
 801378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013790:	4770      	bx	lr

08013792 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8013792:	b480      	push	{r7}
 8013794:	b083      	sub	sp, #12
 8013796:	af00      	add	r7, sp, #0
 8013798:	6078      	str	r0, [r7, #4]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	3318      	adds	r3, #24
 801379e:	4618      	mov	r0, r3
 80137a0:	370c      	adds	r7, #12
 80137a2:	46bd      	mov	sp, r7
 80137a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a8:	4770      	bx	lr

080137aa <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80137aa:	b580      	push	{r7, lr}
 80137ac:	b082      	sub	sp, #8
 80137ae:	af00      	add	r7, sp, #0
 80137b0:	6078      	str	r0, [r7, #4]
 80137b2:	6039      	str	r1, [r7, #0]
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	6839      	ldr	r1, [r7, #0]
 80137b8:	4618      	mov	r0, r3
 80137ba:	f000 fa7e 	bl	8013cba <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	4618      	mov	r0, r3
 80137c2:	3708      	adds	r7, #8
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}

080137c8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80137c8:	b590      	push	{r4, r7, lr}
 80137ca:	b087      	sub	sp, #28
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	60f8      	str	r0, [r7, #12]
 80137d0:	60b9      	str	r1, [r7, #8]
 80137d2:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	4618      	mov	r0, r3
 80137d8:	f000 fa7e 	bl	8013cd8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>
 80137dc:	4604      	mov	r4, r0
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	3304      	adds	r3, #4
 80137e2:	687a      	ldr	r2, [r7, #4]
 80137e4:	68b9      	ldr	r1, [r7, #8]
 80137e6:	4618      	mov	r0, r3
 80137e8:	f7fb fdf6 	bl	800f3d8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 80137ec:	eef0 7a40 	vmov.f32	s15, s0
 80137f0:	edc7 7a04 	vstr	s15, [r7, #16]
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	330c      	adds	r3, #12
 80137f8:	687a      	ldr	r2, [r7, #4]
 80137fa:	68b9      	ldr	r1, [r7, #8]
 80137fc:	4618      	mov	r0, r3
 80137fe:	f000 fa76 	bl	8013cee <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8013802:	eef0 7a40 	vmov.f32	s15, s0
 8013806:	edc7 7a05 	vstr	s15, [r7, #20]
 801380a:	f107 0214 	add.w	r2, r7, #20
 801380e:	f107 0310 	add.w	r3, r7, #16
 8013812:	4619      	mov	r1, r3
 8013814:	4620      	mov	r0, r4
 8013816:	f7fb fc23 	bl	800f060 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 801381a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801381e:	eeb0 0a67 	vmov.f32	s0, s15
 8013822:	371c      	adds	r7, #28
 8013824:	46bd      	mov	sp, r7
 8013826:	bd90      	pop	{r4, r7, pc}

08013828 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	f000 fa7d 	bl	8013d30 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	4618      	mov	r0, r3
 801383a:	3708      	adds	r7, #8
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}

08013840 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8013840:	b580      	push	{r7, lr}
 8013842:	b082      	sub	sp, #8
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	f7ff ffed 	bl	8013828 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	4618      	mov	r0, r3
 8013852:	3708      	adds	r7, #8
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}

08013858 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	6039      	str	r1, [r7, #0]
 8013862:	6878      	ldr	r0, [r7, #4]
 8013864:	f7ff ffec 	bl	8013840 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	683a      	ldr	r2, [r7, #0]
 801386c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013870:	e883 0003 	stmia.w	r3, {r0, r1}
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	4618      	mov	r0, r3
 8013878:	3708      	adds	r7, #8
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}

0801387e <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801387e:	b480      	push	{r7}
 8013880:	b083      	sub	sp, #12
 8013882:	af00      	add	r7, sp, #0
 8013884:	6078      	str	r0, [r7, #4]
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	4618      	mov	r0, r3
 801388a:	370c      	adds	r7, #12
 801388c:	46bd      	mov	sp, r7
 801388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013892:	4770      	bx	lr

08013894 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 8013894:	b580      	push	{r7, lr}
 8013896:	b082      	sub	sp, #8
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f000 fa52 	bl	8013d46 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	4618      	mov	r0, r3
 80138a6:	3708      	adds	r7, #8
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}

080138ac <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b082      	sub	sp, #8
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f7ff ffed 	bl	8013894 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	4618      	mov	r0, r3
 80138be:	3708      	adds	r7, #8
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}

080138c4 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7f2 f95d 	bl	8005b8e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 80138d4:	4603      	mov	r3, r0
 80138d6:	4618      	mov	r0, r3
 80138d8:	3708      	adds	r7, #8
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}

080138de <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 80138de:	b580      	push	{r7, lr}
 80138e0:	b082      	sub	sp, #8
 80138e2:	af00      	add	r7, sp, #0
 80138e4:	6078      	str	r0, [r7, #4]
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7f3 f8c2 	bl	8006a72 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 80138ee:	4603      	mov	r3, r0
 80138f0:	4618      	mov	r0, r3
 80138f2:	3708      	adds	r7, #8
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}

080138f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80138f8:	b590      	push	{r4, r7, lr}
 80138fa:	b085      	sub	sp, #20
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	60f8      	str	r0, [r7, #12]
 8013900:	60b9      	str	r1, [r7, #8]
 8013902:	607a      	str	r2, [r7, #4]
 8013904:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8013906:	68f8      	ldr	r0, [r7, #12]
 8013908:	f7ff ffd0 	bl	80138ac <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	68ba      	ldr	r2, [r7, #8]
 8013910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013914:	e883 0003 	stmia.w	r3, {r0, r1}
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	3308      	adds	r3, #8
 801391c:	687a      	ldr	r2, [r7, #4]
 801391e:	6812      	ldr	r2, [r2, #0]
 8013920:	601a      	str	r2, [r3, #0]
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	330c      	adds	r3, #12
 8013926:	6839      	ldr	r1, [r7, #0]
 8013928:	4618      	mov	r0, r3
 801392a:	f7f1 fcf3 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 801392e:	68b8      	ldr	r0, [r7, #8]
 8013930:	f7ff ffc8 	bl	80138c4 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8013934:	4604      	mov	r4, r0
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f7f2 f85f 	bl	80059fa <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801393c:	4603      	mov	r3, r0
 801393e:	429c      	cmp	r4, r3
 8013940:	d109      	bne.n	8013956 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x5e>
 8013942:	68b8      	ldr	r0, [r7, #8]
 8013944:	f7ff ffcb 	bl	80138de <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8013948:	4604      	mov	r4, r0
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f7f3 f89f 	bl	8006a8e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013950:	4603      	mov	r3, r0
 8013952:	429c      	cmp	r4, r3
 8013954:	d005      	beq.n	8013962 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x6a>
 8013956:	4b05      	ldr	r3, [pc, #20]	; (801396c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x74>)
 8013958:	4a05      	ldr	r2, [pc, #20]	; (8013970 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x78>)
 801395a:	2174      	movs	r1, #116	; 0x74
 801395c:	4805      	ldr	r0, [pc, #20]	; (8013974 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x7c>)
 801395e:	f00a f8c5 	bl	801daec <__assert_func>
    }
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	4618      	mov	r0, r3
 8013966:	3714      	adds	r7, #20
 8013968:	46bd      	mov	sp, r7
 801396a:	bd90      	pop	{r4, r7, pc}
 801396c:	0801f954 	.word	0x0801f954
 8013970:	08028d78 	.word	0x08028d78
 8013974:	0801fbb8 	.word	0x0801fbb8

08013978 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8013978:	b580      	push	{r7, lr}
 801397a:	b082      	sub	sp, #8
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	f000 f809 	bl	8013998 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013986:	4603      	mov	r3, r0
 8013988:	4618      	mov	r0, r3
 801398a:	f000 f9e7 	bl	8013d5c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>
 801398e:	4603      	mov	r3, r0
 8013990:	4618      	mov	r0, r3
 8013992:	3708      	adds	r7, #8
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}

08013998 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013998:	b480      	push	{r7}
 801399a:	b083      	sub	sp, #12
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	4618      	mov	r0, r3
 80139a4:	370c      	adds	r7, #12
 80139a6:	46bd      	mov	sp, r7
 80139a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ac:	4770      	bx	lr

080139ae <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80139ae:	b580      	push	{r7, lr}
 80139b0:	b082      	sub	sp, #8
 80139b2:	af00      	add	r7, sp, #0
 80139b4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7ff ff83 	bl	80138c4 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 80139be:	4603      	mov	r3, r0
    }
 80139c0:	4618      	mov	r0, r3
 80139c2:	3708      	adds	r7, #8
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}

080139c8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b082      	sub	sp, #8
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7fb fa2e 	bl	800ee34 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	4618      	mov	r0, r3
 80139dc:	3708      	adds	r7, #8
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd80      	pop	{r7, pc}

080139e2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80139e2:	b580      	push	{r7, lr}
 80139e4:	b082      	sub	sp, #8
 80139e6:	af00      	add	r7, sp, #0
 80139e8:	6078      	str	r0, [r7, #4]
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7ff ffeb 	bl	80139c8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	4618      	mov	r0, r3
 80139f6:	3708      	adds	r7, #8
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}

080139fc <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<const T>
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b082      	sub	sp, #8
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7ff ffeb 	bl	80139e2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	4618      	mov	r0, r3
 8013a10:	3708      	adds	r7, #8
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bd80      	pop	{r7, pc}

08013a16 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8013a16:	b580      	push	{r7, lr}
 8013a18:	b082      	sub	sp, #8
 8013a1a:	af00      	add	r7, sp, #0
 8013a1c:	6078      	str	r0, [r7, #4]
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7ff ffeb 	bl	80139fc <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8013a26:	6878      	ldr	r0, [r7, #4]
 8013a28:	f000 f9bf 	bl	8013daa <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	4618      	mov	r0, r3
 8013a30:	3708      	adds	r7, #8
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}

08013a36 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8013a36:	b580      	push	{r7, lr}
 8013a38:	b082      	sub	sp, #8
 8013a3a:	af00      	add	r7, sp, #0
 8013a3c:	6078      	str	r0, [r7, #4]
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7ff ffe8 	bl	8013a16 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	4618      	mov	r0, r3
 8013a4a:	3708      	adds	r7, #8
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}

08013a50 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator<const T>
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7ff ffeb 	bl	8013a36 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	4618      	mov	r0, r3
 8013a64:	3708      	adds	r7, #8
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}

08013a6a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 8013a6a:	b580      	push	{r7, lr}
 8013a6c:	b082      	sub	sp, #8
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	6078      	str	r0, [r7, #4]
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7fb f9fa 	bl	800ee6e <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	3708      	adds	r7, #8
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}

08013a84 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b082      	sub	sp, #8
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	3314      	adds	r3, #20
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7ff ffea 	bl	8013a6a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	3304      	adds	r3, #4
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7ff ffd8 	bl	8013a50 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3708      	adds	r7, #8
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bd80      	pop	{r7, pc}

08013aaa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8013aaa:	b580      	push	{r7, lr}
 8013aac:	b082      	sub	sp, #8
 8013aae:	af00      	add	r7, sp, #0
 8013ab0:	6078      	str	r0, [r7, #4]
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7ff ffe5 	bl	8013a84 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f000 f96a 	bl	8013d94 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3708      	adds	r7, #8
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}

08013aca <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8013aca:	b580      	push	{r7, lr}
 8013acc:	b082      	sub	sp, #8
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	6078      	str	r0, [r7, #4]
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7ff ffe8 	bl	8013aaa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	4618      	mov	r0, r3
 8013ade:	3708      	adds	r7, #8
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}

08013ae4 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b082      	sub	sp, #8
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7ff ffeb 	bl	8013aca <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	4618      	mov	r0, r3
 8013af8:	3708      	adds	r7, #8
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}
	...

08013b00 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8013b00:	b580      	push	{r7, lr}
 8013b02:	ed2d 8b02 	vpush	{d8}
 8013b06:	b088      	sub	sp, #32
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
 8013b0c:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8013b0e:	6878      	ldr	r0, [r7, #4]
 8013b10:	f7ff fd50 	bl	80135b4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>
 8013b14:	4603      	mov	r3, r0
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	dd05      	ble.n	8013b26 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f7ff ff2c 	bl	8013978 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>
 8013b20:	4603      	mov	r3, r0
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	dc06      	bgt.n	8013b34 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8013b26:	4b16      	ldr	r3, [pc, #88]	; (8013b80 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8013b28:	4a16      	ldr	r2, [pc, #88]	; (8013b84 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8013b2a:	f240 119b 	movw	r1, #411	; 0x19b
 8013b2e:	4816      	ldr	r0, [pc, #88]	; (8013b88 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8013b30:	f009 ffdc 	bl	801daec <__assert_func>
 8013b34:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f7ff ff2e 	bl	8013998 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013b3c:	4602      	mov	r2, r0
 8013b3e:	f107 0308 	add.w	r3, r7, #8
 8013b42:	4611      	mov	r1, r2
 8013b44:	4618      	mov	r0, r3
 8013b46:	f000 f916 	bl	8013d76 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	f7ff ff24 	bl	8013998 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013b50:	4602      	mov	r2, r0
 8013b52:	f107 0308 	add.w	r3, r7, #8
 8013b56:	6839      	ldr	r1, [r7, #0]
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f000 f931 	bl	8013dc0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 8013b5e:	eeb0 8a40 	vmov.f32	s16, s0
 8013b62:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013b64:	f107 0308 	add.w	r3, r7, #8
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7ff ffbb 	bl	8013ae4 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013b6e:	eef0 7a48 	vmov.f32	s15, s16
}
 8013b72:	eeb0 0a67 	vmov.f32	s0, s15
 8013b76:	3720      	adds	r7, #32
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	ecbd 8b02 	vpop	{d8}
 8013b7e:	bd80      	pop	{r7, pc}
 8013b80:	080249d4 	.word	0x080249d4
 8013b84:	08028fc4 	.word	0x08028fc4
 8013b88:	08024be0 	.word	0x08024be0

08013b8c <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8013b8c:	b480      	push	{r7}
 8013b8e:	b083      	sub	sp, #12
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	4618      	mov	r0, r3
 8013b9a:	370c      	adds	r7, #12
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba2:	4770      	bx	lr

08013ba4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013ba4:	b480      	push	{r7}
 8013ba6:	b083      	sub	sp, #12
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	4618      	mov	r0, r3
 8013bb0:	370c      	adds	r7, #12
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb8:	4770      	bx	lr

08013bba <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013bba:	b580      	push	{r7, lr}
 8013bbc:	b082      	sub	sp, #8
 8013bbe:	af00      	add	r7, sp, #0
 8013bc0:	6078      	str	r0, [r7, #4]
 8013bc2:	6039      	str	r1, [r7, #0]
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	6839      	ldr	r1, [r7, #0]
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7fd fe47 	bl	801185c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3708      	adds	r7, #8
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}

08013bd8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8013bd8:	b5b0      	push	{r4, r5, r7, lr}
 8013bda:	b084      	sub	sp, #16
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	60f8      	str	r0, [r7, #12]
 8013be0:	60b9      	str	r1, [r7, #8]
 8013be2:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8013be4:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7fe fc93 	bl	8012514 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8013bee:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8013bf0:	68b8      	ldr	r0, [r7, #8]
 8013bf2:	f7ff fc01 	bl	80133f8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8013bf6:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	fb02 f303 	mul.w	r3, r2, r3
 8013bfe:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8013c00:	18e9      	adds	r1, r5, r3
 8013c02:	2301      	movs	r3, #1
 8013c04:	2201      	movs	r2, #1
 8013c06:	4620      	mov	r0, r4
 8013c08:	f000 f8f8 	bl	8013dfc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	68ba      	ldr	r2, [r7, #8]
 8013c10:	609a      	str	r2, [r3, #8]
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	330c      	adds	r3, #12
 8013c16:	2100      	movs	r1, #0
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f7f9 fedd 	bl	800d9d8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	3310      	adds	r3, #16
 8013c22:	6879      	ldr	r1, [r7, #4]
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7f9 fe63 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8013c2a:	68f8      	ldr	r0, [r7, #12]
 8013c2c:	f000 f924 	bl	8013e78 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>
    }
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	4618      	mov	r0, r3
 8013c34:	3710      	adds	r7, #16
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bdb0      	pop	{r4, r5, r7, pc}

08013c3a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8013c3a:	b580      	push	{r7, lr}
 8013c3c:	b082      	sub	sp, #8
 8013c3e:	af00      	add	r7, sp, #0
 8013c40:	6078      	str	r0, [r7, #4]
 8013c42:	6039      	str	r1, [r7, #0]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	6839      	ldr	r1, [r7, #0]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f000 f925 	bl	8013e98 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	4618      	mov	r0, r3
 8013c52:	3708      	adds	r7, #8
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}

08013c58 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b082      	sub	sp, #8
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
 8013c60:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013c62:	2200      	movs	r2, #0
 8013c64:	2100      	movs	r1, #0
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f000 f928 	bl	8013ebc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8013c6c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013c70:	eeb0 0a67 	vmov.f32	s0, s15
 8013c74:	3708      	adds	r7, #8
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}

08013c7a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013c7a:	b580      	push	{r7, lr}
 8013c7c:	b082      	sub	sp, #8
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013c82:	2201      	movs	r2, #1
 8013c84:	2102      	movs	r1, #2
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f7fd ff48 	bl	8011b1c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	f000 f928 	bl	8013ee2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>
  }
 8013c92:	bf00      	nop
 8013c94:	3708      	adds	r7, #8
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}

08013c9a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013c9a:	b580      	push	{r7, lr}
 8013c9c:	b082      	sub	sp, #8
 8013c9e:	af00      	add	r7, sp, #0
 8013ca0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	2102      	movs	r1, #2
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f7fe fbe1 	bl	801246e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f000 f928 	bl	8013f02 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>
  }
 8013cb2:	bf00      	nop
 8013cb4:	3708      	adds	r7, #8
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}

08013cba <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8013cba:	b580      	push	{r7, lr}
 8013cbc:	b082      	sub	sp, #8
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	6078      	str	r0, [r7, #4]
 8013cc2:	6039      	str	r1, [r7, #0]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6839      	ldr	r1, [r7, #0]
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f000 f92a 	bl	8013f22 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>
  }
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	3708      	adds	r7, #8
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bd80      	pop	{r7, pc}

08013cd8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8013cd8:	b480      	push	{r7}
 8013cda:	b083      	sub	sp, #12
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	370c      	adds	r7, #12
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cec:	4770      	bx	lr

08013cee <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013cee:	b5b0      	push	{r4, r5, r7, lr}
 8013cf0:	b084      	sub	sp, #16
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	60f8      	str	r0, [r7, #12]
 8013cf6:	60b9      	str	r1, [r7, #8]
 8013cf8:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	681c      	ldr	r4, [r3, #0]
 8013cfe:	68f8      	ldr	r0, [r7, #12]
 8013d00:	f000 f923 	bl	8013f4a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8013d04:	4602      	mov	r2, r0
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	fb03 f502 	mul.w	r5, r3, r2
 8013d0c:	68f8      	ldr	r0, [r7, #12]
 8013d0e:	f000 f927 	bl	8013f60 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8013d12:	4602      	mov	r2, r0
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	fb02 f303 	mul.w	r3, r2, r3
 8013d1a:	442b      	add	r3, r5
 8013d1c:	009b      	lsls	r3, r3, #2
 8013d1e:	4423      	add	r3, r4
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	ee07 3a90 	vmov	s15, r3
  }
 8013d26:	eeb0 0a67 	vmov.f32	s0, s15
 8013d2a:	3710      	adds	r7, #16
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bdb0      	pop	{r4, r5, r7, pc}

08013d30 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013d30:	b480      	push	{r7}
 8013d32:	b083      	sub	sp, #12
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
    }
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	370c      	adds	r7, #12
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d44:	4770      	bx	lr

08013d46 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013d46:	b480      	push	{r7}
 8013d48:	b083      	sub	sp, #12
 8013d4a:	af00      	add	r7, sp, #0
 8013d4c:	6078      	str	r0, [r7, #4]
    }
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	4618      	mov	r0, r3
 8013d52:	370c      	adds	r7, #12
 8013d54:	46bd      	mov	sp, r7
 8013d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5a:	4770      	bx	lr

08013d5c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b082      	sub	sp, #8
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7ff fdb9 	bl	80138de <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8013d6c:	4603      	mov	r3, r0
    }
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3708      	adds	r7, #8
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}

08013d76 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8013d76:	b580      	push	{r7, lr}
 8013d78:	b082      	sub	sp, #8
 8013d7a:	af00      	add	r7, sp, #0
 8013d7c:	6078      	str	r0, [r7, #4]
 8013d7e:	6039      	str	r1, [r7, #0]
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6839      	ldr	r1, [r7, #0]
 8013d84:	4618      	mov	r0, r3
 8013d86:	f000 f8f6 	bl	8013f76 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3708      	adds	r7, #8
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}

08013d94 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8013d94:	b480      	push	{r7}
 8013d96:	b083      	sub	sp, #12
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	4618      	mov	r0, r3
 8013da0:	370c      	adds	r7, #12
 8013da2:	46bd      	mov	sp, r7
 8013da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da8:	4770      	bx	lr

08013daa <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
 8013daa:	b480      	push	{r7}
 8013dac:	b083      	sub	sp, #12
 8013dae:	af00      	add	r7, sp, #0
 8013db0:	6078      	str	r0, [r7, #4]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	4618      	mov	r0, r3
 8013db6:	370c      	adds	r7, #12
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr

08013dc0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b084      	sub	sp, #16
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	60f8      	str	r0, [r7, #12]
 8013dc8:	60b9      	str	r1, [r7, #8]
 8013dca:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8013dcc:	68b9      	ldr	r1, [r7, #8]
 8013dce:	68f8      	ldr	r0, [r7, #12]
 8013dd0:	f000 f8e0 	bl	8013f94 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>
 8013dd4:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8013ddc:	3710      	adds	r7, #16
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd80      	pop	{r7, pc}

08013de2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
 8013de2:	b580      	push	{r7, lr}
 8013de4:	b082      	sub	sp, #8
 8013de6:	af00      	add	r7, sp, #0
 8013de8:	6078      	str	r0, [r7, #4]
 8013dea:	6878      	ldr	r0, [r7, #4]
 8013dec:	f000 f8f6 	bl	8013fdc <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	4618      	mov	r0, r3
 8013df4:	3708      	adds	r7, #8
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}
	...

08013dfc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b084      	sub	sp, #16
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	60f8      	str	r0, [r7, #12]
 8013e04:	60b9      	str	r1, [r7, #8]
 8013e06:	607a      	str	r2, [r7, #4]
 8013e08:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8013e0a:	68f8      	ldr	r0, [r7, #12]
 8013e0c:	f7ff ffe9 	bl	8013de2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	68ba      	ldr	r2, [r7, #8]
 8013e14:	601a      	str	r2, [r3, #0]
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	3304      	adds	r3, #4
 8013e1a:	6879      	ldr	r1, [r7, #4]
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f7f2 fcf3 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	3305      	adds	r3, #5
 8013e26:	6839      	ldr	r1, [r7, #0]
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f7f2 fced 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8013e2e:	68bb      	ldr	r3, [r7, #8]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d011      	beq.n	8013e58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	db08      	blt.n	8013e4c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2b01      	cmp	r3, #1
 8013e3e:	d105      	bne.n	8013e4c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	db02      	blt.n	8013e4c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	2b01      	cmp	r3, #1
 8013e4a:	d005      	beq.n	8013e58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8013e4c:	4b07      	ldr	r3, [pc, #28]	; (8013e6c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 8013e4e:	4a08      	ldr	r2, [pc, #32]	; (8013e70 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 8013e50:	21b0      	movs	r1, #176	; 0xb0
 8013e52:	4808      	ldr	r0, [pc, #32]	; (8013e74 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 8013e54:	f009 fe4a 	bl	801daec <__assert_func>
      checkSanity<Derived>();
 8013e58:	2100      	movs	r1, #0
 8013e5a:	68f8      	ldr	r0, [r7, #12]
 8013e5c:	f000 f8c9 	bl	8013ff2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	4618      	mov	r0, r3
 8013e64:	3710      	adds	r7, #16
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}
 8013e6a:	bf00      	nop
 8013e6c:	08026078 	.word	0x08026078
 8013e70:	0802918c 	.word	0x0802918c
 8013e74:	08026228 	.word	0x08026228

08013e78 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b082      	sub	sp, #8
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	689b      	ldr	r3, [r3, #8]
 8013e84:	4618      	mov	r0, r3
 8013e86:	f7fe fd73 	bl	8012970 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8013e8a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	615a      	str	r2, [r3, #20]
    }
 8013e90:	bf00      	nop
 8013e92:	3708      	adds	r7, #8
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}

08013e98 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
 8013ea0:	6039      	str	r1, [r7, #0]
 8013ea2:	6878      	ldr	r0, [r7, #4]
 8013ea4:	f000 f8b0 	bl	8014008 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	6839      	ldr	r1, [r7, #0]
 8013eac:	4618      	mov	r0, r3
 8013eae:	f000 f8b6 	bl	801401e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	3708      	adds	r7, #8
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}

08013ebc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b084      	sub	sp, #16
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	60f8      	str	r0, [r7, #12]
 8013ec4:	60b9      	str	r1, [r7, #8]
 8013ec6:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	687a      	ldr	r2, [r7, #4]
 8013ecc:	68b9      	ldr	r1, [r7, #8]
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f000 f8cd 	bl	801406e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8013ed4:	eef0 7a40 	vmov.f32	s15, s0
 8013ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8013edc:	3710      	adds	r7, #16
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}

08013ee2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013ee2:	b580      	push	{r7, lr}
 8013ee4:	b082      	sub	sp, #8
 8013ee6:	af00      	add	r7, sp, #0
 8013ee8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013eea:	2202      	movs	r2, #2
 8013eec:	2102      	movs	r1, #2
 8013eee:	6878      	ldr	r0, [r7, #4]
 8013ef0:	f7fd fe14 	bl	8011b1c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013ef4:	6878      	ldr	r0, [r7, #4]
 8013ef6:	f000 f8ea 	bl	80140ce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>
  }
 8013efa:	bf00      	nop
 8013efc:	3708      	adds	r7, #8
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}

08013f02 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013f02:	b580      	push	{r7, lr}
 8013f04:	b082      	sub	sp, #8
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013f0a:	2201      	movs	r2, #1
 8013f0c:	2102      	movs	r1, #2
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f7fe faad 	bl	801246e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f000 f8e4 	bl	80140e2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>
  }
 8013f1a:	bf00      	nop
 8013f1c:	3708      	adds	r7, #8
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}

08013f22 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8013f22:	b580      	push	{r7, lr}
 8013f24:	b082      	sub	sp, #8
 8013f26:	af00      	add	r7, sp, #0
 8013f28:	6078      	str	r0, [r7, #4]
 8013f2a:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6839      	ldr	r1, [r7, #0]
 8013f30:	4618      	mov	r0, r3
 8013f32:	f000 f8e6 	bl	8014102 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f000 f90c 	bl	8014156 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 8013f3e:	bf00      	nop
  }
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	4618      	mov	r0, r3
 8013f44:	3708      	adds	r7, #8
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}

08013f4a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8013f4a:	b580      	push	{r7, lr}
 8013f4c:	b082      	sub	sp, #8
 8013f4e:	af00      	add	r7, sp, #0
 8013f50:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8013f52:	f7f2 fc7e 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8013f56:	4603      	mov	r3, r0
  }
 8013f58:	4618      	mov	r0, r3
 8013f5a:	3708      	adds	r7, #8
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}

08013f60 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b082      	sub	sp, #8
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8013f68:	f7f2 fc7b 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8013f6c:	4603      	mov	r3, r0
  }
 8013f6e:	4618      	mov	r0, r3
 8013f70:	3708      	adds	r7, #8
 8013f72:	46bd      	mov	sp, r7
 8013f74:	bd80      	pop	{r7, pc}

08013f76 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8013f76:	b580      	push	{r7, lr}
 8013f78:	b082      	sub	sp, #8
 8013f7a:	af00      	add	r7, sp, #0
 8013f7c:	6078      	str	r0, [r7, #4]
 8013f7e:	6039      	str	r1, [r7, #0]
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6839      	ldr	r1, [r7, #0]
 8013f84:	4618      	mov	r0, r3
 8013f86:	f000 f8f2 	bl	801416e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	3708      	adds	r7, #8
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd80      	pop	{r7, pc}

08013f94 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b084      	sub	sp, #16
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013f9e:	6839      	ldr	r1, [r7, #0]
 8013fa0:	6878      	ldr	r0, [r7, #4]
 8013fa2:	f000 f8f6 	bl	8014192 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>
 8013fa6:	eef0 7a40 	vmov.f32	s15, s0
 8013faa:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8013fae:	6839      	ldr	r1, [r7, #0]
 8013fb0:	6878      	ldr	r0, [r7, #4]
 8013fb2:	f000 f8ff 	bl	80141b4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>
 8013fb6:	eef0 7a40 	vmov.f32	s15, s0
 8013fba:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013fbe:	f107 020c 	add.w	r2, r7, #12
 8013fc2:	f107 0308 	add.w	r3, r7, #8
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	6838      	ldr	r0, [r7, #0]
 8013fca:	f7f5 f808 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8013fce:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8013fd6:	3710      	adds	r7, #16
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}

08013fdc <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013fdc:	b480      	push	{r7}
 8013fde:	b083      	sub	sp, #12
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
    }
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	370c      	adds	r7, #12
 8013fea:	46bd      	mov	sp, r7
 8013fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff0:	4770      	bx	lr

08013ff2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8013ff2:	b480      	push	{r7}
 8013ff4:	b083      	sub	sp, #12
 8013ff6:	af00      	add	r7, sp, #0
 8013ff8:	6078      	str	r0, [r7, #4]
 8013ffa:	6039      	str	r1, [r7, #0]
    {}
 8013ffc:	bf00      	nop
 8013ffe:	370c      	adds	r7, #12
 8014000:	46bd      	mov	sp, r7
 8014002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014006:	4770      	bx	lr

08014008 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014008:	b480      	push	{r7}
 801400a:	b083      	sub	sp, #12
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	4618      	mov	r0, r3
 8014014:	370c      	adds	r7, #12
 8014016:	46bd      	mov	sp, r7
 8014018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401c:	4770      	bx	lr

0801401e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 801401e:	b590      	push	{r4, r7, lr}
 8014020:	b083      	sub	sp, #12
 8014022:	af00      	add	r7, sp, #0
 8014024:	6078      	str	r0, [r7, #4]
 8014026:	6039      	str	r1, [r7, #0]
 8014028:	687c      	ldr	r4, [r7, #4]
 801402a:	6838      	ldr	r0, [r7, #0]
 801402c:	f000 f8e6 	bl	80141fc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>
 8014030:	4603      	mov	r3, r0
 8014032:	4619      	mov	r1, r3
 8014034:	4620      	mov	r0, r4
 8014036:	f7f1 f96d 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	1d1c      	adds	r4, r3, #4
 801403e:	6838      	ldr	r0, [r7, #0]
 8014040:	f000 f8e8 	bl	8014214 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>
 8014044:	4603      	mov	r3, r0
 8014046:	4619      	mov	r1, r3
 8014048:	4620      	mov	r0, r4
 801404a:	f7fa ffac 	bl	800efa6 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f103 040c 	add.w	r4, r3, #12
 8014054:	6838      	ldr	r0, [r7, #0]
 8014056:	f000 f8e8 	bl	801422a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>
 801405a:	4603      	mov	r3, r0
 801405c:	4619      	mov	r1, r3
 801405e:	4620      	mov	r0, r4
 8014060:	f000 f8ef 	bl	8014242 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	4618      	mov	r0, r3
 8014068:	370c      	adds	r7, #12
 801406a:	46bd      	mov	sp, r7
 801406c:	bd90      	pop	{r4, r7, pc}

0801406e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801406e:	b590      	push	{r4, r7, lr}
 8014070:	b087      	sub	sp, #28
 8014072:	af00      	add	r7, sp, #0
 8014074:	60f8      	str	r0, [r7, #12]
 8014076:	60b9      	str	r1, [r7, #8]
 8014078:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	4618      	mov	r0, r3
 801407e:	f000 f8ef 	bl	8014260 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8014082:	4604      	mov	r4, r0
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	3304      	adds	r3, #4
 8014088:	687a      	ldr	r2, [r7, #4]
 801408a:	68b9      	ldr	r1, [r7, #8]
 801408c:	4618      	mov	r0, r3
 801408e:	f7fa ffb3 	bl	800eff8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8014092:	eef0 7a40 	vmov.f32	s15, s0
 8014096:	edc7 7a04 	vstr	s15, [r7, #16]
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	330c      	adds	r3, #12
 801409e:	687a      	ldr	r2, [r7, #4]
 80140a0:	68b9      	ldr	r1, [r7, #8]
 80140a2:	4618      	mov	r0, r3
 80140a4:	f000 f8e7 	bl	8014276 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 80140a8:	eef0 7a40 	vmov.f32	s15, s0
 80140ac:	edc7 7a05 	vstr	s15, [r7, #20]
 80140b0:	f107 0214 	add.w	r2, r7, #20
 80140b4:	f107 0310 	add.w	r3, r7, #16
 80140b8:	4619      	mov	r1, r3
 80140ba:	4620      	mov	r0, r4
 80140bc:	f7fa ffd0 	bl	800f060 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80140c0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80140c4:	eeb0 0a67 	vmov.f32	s0, s15
 80140c8:	371c      	adds	r7, #28
 80140ca:	46bd      	mov	sp, r7
 80140cc:	bd90      	pop	{r4, r7, pc}

080140ce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80140ce:	b480      	push	{r7}
 80140d0:	b083      	sub	sp, #12
 80140d2:	af00      	add	r7, sp, #0
 80140d4:	6078      	str	r0, [r7, #4]
 80140d6:	bf00      	nop
 80140d8:	370c      	adds	r7, #12
 80140da:	46bd      	mov	sp, r7
 80140dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e0:	4770      	bx	lr

080140e2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80140e2:	b580      	push	{r7, lr}
 80140e4:	b082      	sub	sp, #8
 80140e6:	af00      	add	r7, sp, #0
 80140e8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80140ea:	2202      	movs	r2, #2
 80140ec:	2102      	movs	r1, #2
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f7fe f9bd 	bl	801246e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f000 f8df 	bl	80142b8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>
  }
 80140fa:	bf00      	nop
 80140fc:	3708      	adds	r7, #8
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}

08014102 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8014102:	b590      	push	{r4, r7, lr}
 8014104:	b083      	sub	sp, #12
 8014106:	af00      	add	r7, sp, #0
 8014108:	6078      	str	r0, [r7, #4]
 801410a:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f000 f8f9 	bl	8014304 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	4618      	mov	r0, r3
 8014116:	f000 f81e 	bl	8014156 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 801411a:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	601a      	str	r2, [r3, #0]
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	1d1c      	adds	r4, r3, #4
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	4618      	mov	r0, r3
 8014128:	f000 f8d0 	bl	80142cc <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>
 801412c:	4603      	mov	r3, r0
 801412e:	4619      	mov	r1, r3
 8014130:	4620      	mov	r0, r4
 8014132:	f7f2 fb69 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	1d5c      	adds	r4, r3, #5
 801413a:	683b      	ldr	r3, [r7, #0]
 801413c:	4618      	mov	r0, r3
 801413e:	f000 f8d3 	bl	80142e8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8014142:	4603      	mov	r3, r0
 8014144:	4619      	mov	r1, r3
 8014146:	4620      	mov	r0, r4
 8014148:	f7f2 fb44 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	4618      	mov	r0, r3
 8014150:	370c      	adds	r7, #12
 8014152:	46bd      	mov	sp, r7
 8014154:	bd90      	pop	{r4, r7, pc}

08014156 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8014156:	b480      	push	{r7}
 8014158:	b083      	sub	sp, #12
 801415a:	af00      	add	r7, sp, #0
 801415c:	6078      	str	r0, [r7, #4]
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	4618      	mov	r0, r3
 8014164:	370c      	adds	r7, #12
 8014166:	46bd      	mov	sp, r7
 8014168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801416c:	4770      	bx	lr

0801416e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801416e:	b580      	push	{r7, lr}
 8014170:	b082      	sub	sp, #8
 8014172:	af00      	add	r7, sp, #0
 8014174:	6078      	str	r0, [r7, #4]
 8014176:	6039      	str	r1, [r7, #0]
 8014178:	6878      	ldr	r0, [r7, #4]
 801417a:	f000 f8ce 	bl	801431a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	6839      	ldr	r1, [r7, #0]
 8014182:	4618      	mov	r0, r3
 8014184:	f000 f8d4 	bl	8014330 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	4618      	mov	r0, r3
 801418c:	3708      	adds	r7, #8
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}

08014192 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8014192:	b580      	push	{r7, lr}
 8014194:	b082      	sub	sp, #8
 8014196:	af00      	add	r7, sp, #0
 8014198:	6078      	str	r0, [r7, #4]
 801419a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801419c:	2200      	movs	r2, #0
 801419e:	2100      	movs	r1, #0
 80141a0:	6878      	ldr	r0, [r7, #4]
 80141a2:	f000 f8ed 	bl	8014380 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 80141a6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80141aa:	eeb0 0a67 	vmov.f32	s0, s15
 80141ae:	3708      	adds	r7, #8
 80141b0:	46bd      	mov	sp, r7
 80141b2:	bd80      	pop	{r7, pc}

080141b4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b084      	sub	sp, #16
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
 80141bc:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80141be:	6839      	ldr	r1, [r7, #0]
 80141c0:	6878      	ldr	r0, [r7, #4]
 80141c2:	f000 f8f0 	bl	80143a6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>
 80141c6:	eef0 7a40 	vmov.f32	s15, s0
 80141ca:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80141ce:	6839      	ldr	r1, [r7, #0]
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	f000 f8f9 	bl	80143c8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>
 80141d6:	eef0 7a40 	vmov.f32	s15, s0
 80141da:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80141de:	f107 020c 	add.w	r2, r7, #12
 80141e2:	f107 0308 	add.w	r3, r7, #8
 80141e6:	4619      	mov	r1, r3
 80141e8:	6838      	ldr	r0, [r7, #0]
 80141ea:	f7f4 fef8 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80141ee:	eef0 7a40 	vmov.f32	s15, s0
  }
 80141f2:	eeb0 0a67 	vmov.f32	s0, s15
 80141f6:	3710      	adds	r7, #16
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}

080141fc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80141fc:	b480      	push	{r7}
 80141fe:	b083      	sub	sp, #12
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	3330      	adds	r3, #48	; 0x30
 8014208:	4618      	mov	r0, r3
 801420a:	370c      	adds	r7, #12
 801420c:	46bd      	mov	sp, r7
 801420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014212:	4770      	bx	lr

08014214 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8014214:	b480      	push	{r7}
 8014216:	b083      	sub	sp, #12
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	4618      	mov	r0, r3
 8014220:	370c      	adds	r7, #12
 8014222:	46bd      	mov	sp, r7
 8014224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014228:	4770      	bx	lr

0801422a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 801422a:	b480      	push	{r7}
 801422c:	b083      	sub	sp, #12
 801422e:	af00      	add	r7, sp, #0
 8014230:	6078      	str	r0, [r7, #4]
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	3318      	adds	r3, #24
 8014236:	4618      	mov	r0, r3
 8014238:	370c      	adds	r7, #12
 801423a:	46bd      	mov	sp, r7
 801423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014240:	4770      	bx	lr

08014242 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8014242:	b580      	push	{r7, lr}
 8014244:	b082      	sub	sp, #8
 8014246:	af00      	add	r7, sp, #0
 8014248:	6078      	str	r0, [r7, #4]
 801424a:	6039      	str	r1, [r7, #0]
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6839      	ldr	r1, [r7, #0]
 8014250:	4618      	mov	r0, r3
 8014252:	f000 f8ca 	bl	80143ea <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	4618      	mov	r0, r3
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8014260:	b480      	push	{r7}
 8014262:	b083      	sub	sp, #12
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	4618      	mov	r0, r3
 801426c:	370c      	adds	r7, #12
 801426e:	46bd      	mov	sp, r7
 8014270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014274:	4770      	bx	lr

08014276 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014276:	b5b0      	push	{r4, r5, r7, lr}
 8014278:	b084      	sub	sp, #16
 801427a:	af00      	add	r7, sp, #0
 801427c:	60f8      	str	r0, [r7, #12]
 801427e:	60b9      	str	r1, [r7, #8]
 8014280:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	681c      	ldr	r4, [r3, #0]
 8014286:	68f8      	ldr	r0, [r7, #12]
 8014288:	f000 f8be 	bl	8014408 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 801428c:	4602      	mov	r2, r0
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	fb03 f502 	mul.w	r5, r3, r2
 8014294:	68f8      	ldr	r0, [r7, #12]
 8014296:	f000 f8c2 	bl	801441e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 801429a:	4602      	mov	r2, r0
 801429c:	68bb      	ldr	r3, [r7, #8]
 801429e:	fb02 f303 	mul.w	r3, r2, r3
 80142a2:	442b      	add	r3, r5
 80142a4:	009b      	lsls	r3, r3, #2
 80142a6:	4423      	add	r3, r4
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	ee07 3a90 	vmov	s15, r3
  }
 80142ae:	eeb0 0a67 	vmov.f32	s0, s15
 80142b2:	3710      	adds	r7, #16
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bdb0      	pop	{r4, r5, r7, pc}

080142b8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80142b8:	b480      	push	{r7}
 80142ba:	b083      	sub	sp, #12
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
 80142c0:	bf00      	nop
 80142c2:	370c      	adds	r7, #12
 80142c4:	46bd      	mov	sp, r7
 80142c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ca:	4770      	bx	lr

080142cc <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b082      	sub	sp, #8
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	3308      	adds	r3, #8
 80142d8:	4618      	mov	r0, r3
 80142da:	f7fe fd4e 	bl	8012d7a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>
 80142de:	4603      	mov	r3, r0
    }
 80142e0:	4618      	mov	r0, r3
 80142e2:	3708      	adds	r7, #8
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}

080142e8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b082      	sub	sp, #8
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	3308      	adds	r3, #8
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7fe fd54 	bl	8012da2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 80142fa:	4603      	mov	r3, r0
    }
 80142fc:	4618      	mov	r0, r3
 80142fe:	3708      	adds	r7, #8
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}

08014304 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014304:	b480      	push	{r7}
 8014306:	b083      	sub	sp, #12
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	4618      	mov	r0, r3
 8014310:	370c      	adds	r7, #12
 8014312:	46bd      	mov	sp, r7
 8014314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014318:	4770      	bx	lr

0801431a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 801431a:	b480      	push	{r7}
 801431c:	b083      	sub	sp, #12
 801431e:	af00      	add	r7, sp, #0
 8014320:	6078      	str	r0, [r7, #4]
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	4618      	mov	r0, r3
 8014326:	370c      	adds	r7, #12
 8014328:	46bd      	mov	sp, r7
 801432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432e:	4770      	bx	lr

08014330 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8014330:	b590      	push	{r4, r7, lr}
 8014332:	b083      	sub	sp, #12
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
 8014338:	6039      	str	r1, [r7, #0]
 801433a:	687c      	ldr	r4, [r7, #4]
 801433c:	6838      	ldr	r0, [r7, #0]
 801433e:	f000 f879 	bl	8014434 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>
 8014342:	4603      	mov	r3, r0
 8014344:	4619      	mov	r1, r3
 8014346:	4620      	mov	r0, r4
 8014348:	f7f0 ffe4 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	1d1c      	adds	r4, r3, #4
 8014350:	6838      	ldr	r0, [r7, #0]
 8014352:	f000 f87b 	bl	801444c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>
 8014356:	4603      	mov	r3, r0
 8014358:	4619      	mov	r1, r3
 801435a:	4620      	mov	r0, r4
 801435c:	f000 f88d 	bl	801447a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f103 0414 	add.w	r4, r3, #20
 8014366:	6838      	ldr	r0, [r7, #0]
 8014368:	f000 f87b 	bl	8014462 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>
 801436c:	4603      	mov	r3, r0
 801436e:	4619      	mov	r1, r3
 8014370:	4620      	mov	r0, r4
 8014372:	f000 f891 	bl	8014498 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	4618      	mov	r0, r3
 801437a:	370c      	adds	r7, #12
 801437c:	46bd      	mov	sp, r7
 801437e:	bd90      	pop	{r4, r7, pc}

08014380 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8014380:	b580      	push	{r7, lr}
 8014382:	b084      	sub	sp, #16
 8014384:	af00      	add	r7, sp, #0
 8014386:	60f8      	str	r0, [r7, #12]
 8014388:	60b9      	str	r1, [r7, #8]
 801438a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	68ba      	ldr	r2, [r7, #8]
 8014390:	6879      	ldr	r1, [r7, #4]
 8014392:	4618      	mov	r0, r3
 8014394:	f000 f88f 	bl	80144b6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>
 8014398:	eef0 7a40 	vmov.f32	s15, s0
 801439c:	eeb0 0a67 	vmov.f32	s0, s15
 80143a0:	3710      	adds	r7, #16
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}

080143a6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80143a6:	b580      	push	{r7, lr}
 80143a8:	b082      	sub	sp, #8
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	6078      	str	r0, [r7, #4]
 80143ae:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80143b0:	2201      	movs	r2, #1
 80143b2:	2100      	movs	r1, #0
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f7ff ffe3 	bl	8014380 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 80143ba:	eef0 7a40 	vmov.f32	s15, s0
  }
 80143be:	eeb0 0a67 	vmov.f32	s0, s15
 80143c2:	3708      	adds	r7, #8
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}

080143c8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b082      	sub	sp, #8
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
 80143d0:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80143d2:	2202      	movs	r2, #2
 80143d4:	2100      	movs	r1, #0
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	f7ff ffd2 	bl	8014380 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 80143dc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80143e0:	eeb0 0a67 	vmov.f32	s0, s15
 80143e4:	3708      	adds	r7, #8
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd80      	pop	{r7, pc}

080143ea <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80143ea:	b580      	push	{r7, lr}
 80143ec:	b082      	sub	sp, #8
 80143ee:	af00      	add	r7, sp, #0
 80143f0:	6078      	str	r0, [r7, #4]
 80143f2:	6039      	str	r1, [r7, #0]
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	6839      	ldr	r1, [r7, #0]
 80143f8:	4618      	mov	r0, r3
 80143fa:	f000 f887 	bl	801450c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	4618      	mov	r0, r3
 8014402:	3708      	adds	r7, #8
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}

08014408 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8014408:	b580      	push	{r7, lr}
 801440a:	b082      	sub	sp, #8
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8014410:	f7f2 fa27 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8014414:	4603      	mov	r3, r0
  }
 8014416:	4618      	mov	r0, r3
 8014418:	3708      	adds	r7, #8
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}

0801441e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 801441e:	b580      	push	{r7, lr}
 8014420:	b082      	sub	sp, #8
 8014422:	af00      	add	r7, sp, #0
 8014424:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8014426:	f7f2 fa14 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801442a:	4603      	mov	r3, r0
  }
 801442c:	4618      	mov	r0, r3
 801442e:	3708      	adds	r7, #8
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}

08014434 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8014434:	b480      	push	{r7}
 8014436:	b083      	sub	sp, #12
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	330c      	adds	r3, #12
 8014440:	4618      	mov	r0, r3
 8014442:	370c      	adds	r7, #12
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr

0801444c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 801444c:	b480      	push	{r7}
 801444e:	b083      	sub	sp, #12
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	4618      	mov	r0, r3
 8014458:	370c      	adds	r7, #12
 801445a:	46bd      	mov	sp, r7
 801445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014460:	4770      	bx	lr

08014462 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8014462:	b480      	push	{r7}
 8014464:	b083      	sub	sp, #12
 8014466:	af00      	add	r7, sp, #0
 8014468:	6078      	str	r0, [r7, #4]
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	3308      	adds	r3, #8
 801446e:	4618      	mov	r0, r3
 8014470:	370c      	adds	r7, #12
 8014472:	46bd      	mov	sp, r7
 8014474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014478:	4770      	bx	lr

0801447a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801447a:	b580      	push	{r7, lr}
 801447c:	b082      	sub	sp, #8
 801447e:	af00      	add	r7, sp, #0
 8014480:	6078      	str	r0, [r7, #4]
 8014482:	6039      	str	r1, [r7, #0]
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	6839      	ldr	r1, [r7, #0]
 8014488:	4618      	mov	r0, r3
 801448a:	f000 f853 	bl	8014534 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	4618      	mov	r0, r3
 8014492:	3708      	adds	r7, #8
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}

08014498 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>:
 8014498:	b580      	push	{r7, lr}
 801449a:	b082      	sub	sp, #8
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	6039      	str	r1, [r7, #0]
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	6839      	ldr	r1, [r7, #0]
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7fc f952 	bl	8010750 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	4618      	mov	r0, r3
 80144b0:	3708      	adds	r7, #8
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}

080144b6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80144b6:	b590      	push	{r4, r7, lr}
 80144b8:	b087      	sub	sp, #28
 80144ba:	af00      	add	r7, sp, #0
 80144bc:	60f8      	str	r0, [r7, #12]
 80144be:	60b9      	str	r1, [r7, #8]
 80144c0:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	4618      	mov	r0, r3
 80144c6:	f000 f844 	bl	8014552 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 80144ca:	4604      	mov	r4, r0
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	3304      	adds	r3, #4
 80144d0:	687a      	ldr	r2, [r7, #4]
 80144d2:	68b9      	ldr	r1, [r7, #8]
 80144d4:	4618      	mov	r0, r3
 80144d6:	f000 f847 	bl	8014568 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>
 80144da:	eef0 7a40 	vmov.f32	s15, s0
 80144de:	edc7 7a05 	vstr	s15, [r7, #20]
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	3314      	adds	r3, #20
 80144e6:	687a      	ldr	r2, [r7, #4]
 80144e8:	68b9      	ldr	r1, [r7, #8]
 80144ea:	4618      	mov	r0, r3
 80144ec:	f000 f851 	bl	8014592 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 80144f0:	4602      	mov	r2, r0
 80144f2:	f107 0314 	add.w	r3, r7, #20
 80144f6:	4619      	mov	r1, r3
 80144f8:	4620      	mov	r0, r4
 80144fa:	f7fa fdb1 	bl	800f060 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80144fe:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014502:	eeb0 0a67 	vmov.f32	s0, s15
 8014506:	371c      	adds	r7, #28
 8014508:	46bd      	mov	sp, r7
 801450a:	bd90      	pop	{r4, r7, pc}

0801450c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 801450c:	b580      	push	{r7, lr}
 801450e:	b082      	sub	sp, #8
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
 8014514:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	6839      	ldr	r1, [r7, #0]
 801451a:	4618      	mov	r0, r3
 801451c:	f000 f84a 	bl	80145b4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8014520:	683b      	ldr	r3, [r7, #0]
 8014522:	4618      	mov	r0, r3
 8014524:	f000 f870 	bl	8014608 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8014528:	bf00      	nop
  }
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	4618      	mov	r0, r3
 801452e:	3708      	adds	r7, #8
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}

08014534 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8014534:	b580      	push	{r7, lr}
 8014536:	b082      	sub	sp, #8
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
 801453c:	6039      	str	r1, [r7, #0]
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	6839      	ldr	r1, [r7, #0]
 8014542:	4618      	mov	r0, r3
 8014544:	f000 f86c 	bl	8014620 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	4618      	mov	r0, r3
 801454c:	3708      	adds	r7, #8
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}

08014552 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8014552:	b480      	push	{r7}
 8014554:	b083      	sub	sp, #12
 8014556:	af00      	add	r7, sp, #0
 8014558:	6078      	str	r0, [r7, #4]
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	4618      	mov	r0, r3
 801455e:	370c      	adds	r7, #12
 8014560:	46bd      	mov	sp, r7
 8014562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014566:	4770      	bx	lr

08014568 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014568:	b580      	push	{r7, lr}
 801456a:	b084      	sub	sp, #16
 801456c:	af00      	add	r7, sp, #0
 801456e:	60f8      	str	r0, [r7, #12]
 8014570:	60b9      	str	r1, [r7, #8]
 8014572:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	68ba      	ldr	r2, [r7, #8]
 8014578:	6879      	ldr	r1, [r7, #4]
 801457a:	4618      	mov	r0, r3
 801457c:	f7ff f85b 	bl	8013636 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8014580:	4603      	mov	r3, r0
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	ee07 3a90 	vmov	s15, r3
  }
 8014588:	eeb0 0a67 	vmov.f32	s0, s15
 801458c:	3710      	adds	r7, #16
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}

08014592 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014592:	b580      	push	{r7, lr}
 8014594:	b084      	sub	sp, #16
 8014596:	af00      	add	r7, sp, #0
 8014598:	60f8      	str	r0, [r7, #12]
 801459a:	60b9      	str	r1, [r7, #8]
 801459c:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	68ba      	ldr	r2, [r7, #8]
 80145a2:	6879      	ldr	r1, [r7, #4]
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7ff f846 	bl	8013636 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 80145aa:	4603      	mov	r3, r0
  }
 80145ac:	4618      	mov	r0, r3
 80145ae:	3710      	adds	r7, #16
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80145b4:	b590      	push	{r4, r7, lr}
 80145b6:	b083      	sub	sp, #12
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
 80145bc:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f000 f860 	bl	8014684 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80145c4:	683b      	ldr	r3, [r7, #0]
 80145c6:	4618      	mov	r0, r3
 80145c8:	f000 f81e 	bl	8014608 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 80145cc:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	601a      	str	r2, [r3, #0]
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	1d1c      	adds	r4, r3, #4
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	4618      	mov	r0, r3
 80145da:	f000 f837 	bl	801464c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 80145de:	4603      	mov	r3, r0
 80145e0:	4619      	mov	r1, r3
 80145e2:	4620      	mov	r0, r4
 80145e4:	f7f2 f910 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	1d5c      	adds	r4, r3, #5
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	4618      	mov	r0, r3
 80145f0:	f000 f83a 	bl	8014668 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 80145f4:	4603      	mov	r3, r0
 80145f6:	4619      	mov	r1, r3
 80145f8:	4620      	mov	r0, r4
 80145fa:	f7f2 f8eb 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	4618      	mov	r0, r3
 8014602:	370c      	adds	r7, #12
 8014604:	46bd      	mov	sp, r7
 8014606:	bd90      	pop	{r4, r7, pc}

08014608 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>:
 8014608:	b480      	push	{r7}
 801460a:	b083      	sub	sp, #12
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	4618      	mov	r0, r3
 8014616:	370c      	adds	r7, #12
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr

08014620 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8014620:	b590      	push	{r4, r7, lr}
 8014622:	b083      	sub	sp, #12
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
 8014628:	6039      	str	r1, [r7, #0]
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f000 f840 	bl	80146b0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8014630:	687c      	ldr	r4, [r7, #4]
 8014632:	6838      	ldr	r0, [r7, #0]
 8014634:	f000 f831 	bl	801469a <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>
 8014638:	4603      	mov	r3, r0
 801463a:	4619      	mov	r1, r3
 801463c:	4620      	mov	r0, r4
 801463e:	f000 f842 	bl	80146c6 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	4618      	mov	r0, r3
 8014646:	370c      	adds	r7, #12
 8014648:	46bd      	mov	sp, r7
 801464a:	bd90      	pop	{r4, r7, pc}

0801464c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	689b      	ldr	r3, [r3, #8]
 8014658:	4618      	mov	r0, r3
 801465a:	f7fe fecd 	bl	80133f8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 801465e:	4603      	mov	r3, r0
    }
 8014660:	4618      	mov	r0, r3
 8014662:	3708      	adds	r7, #8
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}

08014668 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8014668:	b580      	push	{r7, lr}
 801466a:	b082      	sub	sp, #8
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	689b      	ldr	r3, [r3, #8]
 8014674:	4618      	mov	r0, r3
 8014676:	f7fe f97b 	bl	8012970 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 801467a:	4603      	mov	r3, r0
    }
 801467c:	4618      	mov	r0, r3
 801467e:	3708      	adds	r7, #8
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}

08014684 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014684:	b480      	push	{r7}
 8014686:	b083      	sub	sp, #12
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	4618      	mov	r0, r3
 8014690:	370c      	adds	r7, #12
 8014692:	46bd      	mov	sp, r7
 8014694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014698:	4770      	bx	lr

0801469a <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>:
 801469a:	b480      	push	{r7}
 801469c:	b083      	sub	sp, #12
 801469e:	af00      	add	r7, sp, #0
 80146a0:	6078      	str	r0, [r7, #4]
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	4618      	mov	r0, r3
 80146a6:	370c      	adds	r7, #12
 80146a8:	46bd      	mov	sp, r7
 80146aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ae:	4770      	bx	lr

080146b0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 80146b0:	b480      	push	{r7}
 80146b2:	b083      	sub	sp, #12
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	4618      	mov	r0, r3
 80146bc:	370c      	adds	r7, #12
 80146be:	46bd      	mov	sp, r7
 80146c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c4:	4770      	bx	lr

080146c6 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80146c6:	b580      	push	{r7, lr}
 80146c8:	b082      	sub	sp, #8
 80146ca:	af00      	add	r7, sp, #0
 80146cc:	6078      	str	r0, [r7, #4]
 80146ce:	6039      	str	r1, [r7, #0]
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	6839      	ldr	r1, [r7, #0]
 80146d4:	4618      	mov	r0, r3
 80146d6:	f000 f805 	bl	80146e4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	4618      	mov	r0, r3
 80146de:	3708      	adds	r7, #8
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}

080146e4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b082      	sub	sp, #8
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
 80146ec:	6039      	str	r1, [r7, #0]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	6839      	ldr	r1, [r7, #0]
 80146f2:	4618      	mov	r0, r3
 80146f4:	f000 f805 	bl	8014702 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	4618      	mov	r0, r3
 80146fc:	3708      	adds	r7, #8
 80146fe:	46bd      	mov	sp, r7
 8014700:	bd80      	pop	{r7, pc}

08014702 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8014702:	b5b0      	push	{r4, r5, r7, lr}
 8014704:	b084      	sub	sp, #16
 8014706:	af00      	add	r7, sp, #0
 8014708:	6078      	str	r0, [r7, #4]
 801470a:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	4618      	mov	r0, r3
 8014710:	f000 f834 	bl	801477c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	1d1c      	adds	r4, r3, #4
 8014718:	6838      	ldr	r0, [r7, #0]
 801471a:	f7f2 f9aa 	bl	8006a72 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 801471e:	4603      	mov	r3, r0
 8014720:	60bb      	str	r3, [r7, #8]
 8014722:	6838      	ldr	r0, [r7, #0]
 8014724:	f7f1 fa33 	bl	8005b8e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8014728:	4603      	mov	r3, r0
 801472a:	60fb      	str	r3, [r7, #12]
 801472c:	f107 020c 	add.w	r2, r7, #12
 8014730:	f107 0308 	add.w	r3, r7, #8
 8014734:	4619      	mov	r1, r3
 8014736:	4620      	mov	r0, r4
 8014738:	f000 f82d 	bl	8014796 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	4619      	mov	r1, r3
 8014740:	2004      	movs	r0, #4
 8014742:	f7ec fbfb 	bl	8000f3c <_ZnwjPv>
 8014746:	4602      	mov	r2, r0
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	3304      	adds	r3, #4
 801474c:	4619      	mov	r1, r3
 801474e:	4610      	mov	r0, r2
 8014750:	f7fd f884 	bl	801185c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	1d1c      	adds	r4, r3, #4
 8014758:	6838      	ldr	r0, [r7, #0]
 801475a:	f000 f835 	bl	80147c8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>
 801475e:	4605      	mov	r5, r0
 8014760:	6838      	ldr	r0, [r7, #0]
 8014762:	f000 f83d 	bl	80147e0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>
 8014766:	4603      	mov	r3, r0
 8014768:	461a      	mov	r2, r3
 801476a:	4629      	mov	r1, r5
 801476c:	4620      	mov	r0, r4
 801476e:	f000 f843 	bl	80147f8 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>
  }
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	4618      	mov	r0, r3
 8014776:	3710      	adds	r7, #16
 8014778:	46bd      	mov	sp, r7
 801477a:	bdb0      	pop	{r4, r5, r7, pc}

0801477c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  evaluator() {}
 801477c:	b580      	push	{r7, lr}
 801477e:	b082      	sub	sp, #8
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	4618      	mov	r0, r3
 8014788:	f000 f854 	bl	8014834 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	4618      	mov	r0, r3
 8014790:	3708      	adds	r7, #8
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}

08014796 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8014796:	b580      	push	{r7, lr}
 8014798:	b084      	sub	sp, #16
 801479a:	af00      	add	r7, sp, #0
 801479c:	60f8      	str	r0, [r7, #12]
 801479e:	60b9      	str	r1, [r7, #8]
 80147a0:	607a      	str	r2, [r7, #4]
    {
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7f0 f9f1 	bl	8004b8c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 80147aa:	f7f0 f9ff 	bl	8004bac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 80147ae:	68f8      	ldr	r0, [r7, #12]
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	6819      	ldr	r1, [r3, #0]
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	681a      	ldr	r2, [r3, #0]
 80147b8:	2300      	movs	r3, #0
 80147ba:	f000 f84d 	bl	8014858 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	4618      	mov	r0, r3
 80147c2:	3710      	adds	r7, #16
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80147c8:	b480      	push	{r7}
 80147ca:	b083      	sub	sp, #12
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	4618      	mov	r0, r3
 80147d6:	370c      	adds	r7, #12
 80147d8:	46bd      	mov	sp, r7
 80147da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147de:	4770      	bx	lr

080147e0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80147e0:	b480      	push	{r7}
 80147e2:	b083      	sub	sp, #12
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	685b      	ldr	r3, [r3, #4]
 80147ec:	4618      	mov	r0, r3
 80147ee:	370c      	adds	r7, #12
 80147f0:	46bd      	mov	sp, r7
 80147f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f6:	4770      	bx	lr

080147f8 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b088      	sub	sp, #32
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	60f8      	str	r0, [r7, #12]
 8014800:	60b9      	str	r1, [r7, #8]
 8014802:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8014804:	f107 0314 	add.w	r3, r7, #20
 8014808:	687a      	ldr	r2, [r7, #4]
 801480a:	68b9      	ldr	r1, [r7, #8]
 801480c:	4618      	mov	r0, r3
 801480e:	f000 f837 	bl	8014880 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8014812:	f107 031c 	add.w	r3, r7, #28
 8014816:	4618      	mov	r0, r3
 8014818:	f7f2 fa81 	bl	8006d1e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 801481c:	f107 021c 	add.w	r2, r7, #28
 8014820:	f107 0314 	add.w	r3, r7, #20
 8014824:	4619      	mov	r1, r3
 8014826:	68f8      	ldr	r0, [r7, #12]
 8014828:	f000 f841 	bl	80148ae <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 801482c:	bf00      	nop
 801482e:	3720      	adds	r7, #32
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}

08014834 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  evaluator()
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f7fd fe76 	bl	801252e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	2200      	movs	r2, #0
 8014846:	2100      	movs	r1, #0
 8014848:	4618      	mov	r0, r3
 801484a:	f7f2 fb28 	bl	8006e9e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	4618      	mov	r0, r3
 8014852:	3708      	adds	r7, #8
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}

08014858 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8014858:	b580      	push	{r7, lr}
 801485a:	b086      	sub	sp, #24
 801485c:	af00      	add	r7, sp, #0
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	60b9      	str	r1, [r7, #8]
 8014862:	607a      	str	r2, [r7, #4]
 8014864:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8014866:	2301      	movs	r3, #1
 8014868:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 801486a:	2301      	movs	r3, #1
 801486c:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 801486e:	687a      	ldr	r2, [r7, #4]
 8014870:	68b9      	ldr	r1, [r7, #8]
 8014872:	68f8      	ldr	r0, [r7, #12]
 8014874:	f000 f82c 	bl	80148d0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
    }
 8014878:	bf00      	nop
 801487a:	3718      	adds	r7, #24
 801487c:	46bd      	mov	sp, r7
 801487e:	bd80      	pop	{r7, pc}

08014880 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8014880:	b590      	push	{r4, r7, lr}
 8014882:	b085      	sub	sp, #20
 8014884:	af00      	add	r7, sp, #0
 8014886:	60f8      	str	r0, [r7, #12]
 8014888:	60b9      	str	r1, [r7, #8]
 801488a:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 801488c:	68b8      	ldr	r0, [r7, #8]
 801488e:	f7f1 f8f1 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8014892:	4604      	mov	r4, r0
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f7f0 fe1c 	bl	80054d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 801489a:	4603      	mov	r3, r0
 801489c:	461a      	mov	r2, r3
 801489e:	4621      	mov	r1, r4
 80148a0:	68f8      	ldr	r0, [r7, #12]
 80148a2:	f000 f86b 	bl	801497c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>
}
 80148a6:	68f8      	ldr	r0, [r7, #12]
 80148a8:	3714      	adds	r7, #20
 80148aa:	46bd      	mov	sp, r7
 80148ac:	bd90      	pop	{r4, r7, pc}

080148ae <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80148ae:	b580      	push	{r7, lr}
 80148b0:	b086      	sub	sp, #24
 80148b2:	af00      	add	r7, sp, #0
 80148b4:	60f8      	str	r0, [r7, #12]
 80148b6:	60b9      	str	r1, [r7, #8]
 80148b8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80148be:	687a      	ldr	r2, [r7, #4]
 80148c0:	68b9      	ldr	r1, [r7, #8]
 80148c2:	6978      	ldr	r0, [r7, #20]
 80148c4:	f000 f888 	bl	80149d8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 80148c8:	bf00      	nop
 80148ca:	3718      	adds	r7, #24
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}

080148d0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b086      	sub	sp, #24
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	60f8      	str	r0, [r7, #12]
 80148d8:	60b9      	str	r1, [r7, #8]
 80148da:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	2b01      	cmp	r3, #1
 80148e0:	d108      	bne.n	80148f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	2b03      	cmp	r3, #3
 80148e6:	d105      	bne.n	80148f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 80148e8:	68bb      	ldr	r3, [r7, #8]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	db02      	blt.n	80148f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	da06      	bge.n	8014902 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x32>
 80148f4:	4b0c      	ldr	r3, [pc, #48]	; (8014928 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x58>)
 80148f6:	4a0d      	ldr	r2, [pc, #52]	; (801492c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x5c>)
 80148f8:	f240 1111 	movw	r1, #273	; 0x111
 80148fc:	480c      	ldr	r0, [pc, #48]	; (8014930 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x60>)
 80148fe:	f009 f8f5 	bl	801daec <__assert_func>
 8014902:	68bb      	ldr	r3, [r7, #8]
 8014904:	617b      	str	r3, [r7, #20]
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	613b      	str	r3, [r7, #16]
  }
 801490a:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 801490c:	68f8      	ldr	r0, [r7, #12]
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	687a      	ldr	r2, [r7, #4]
 8014912:	fb02 f103 	mul.w	r1, r2, r3
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	68ba      	ldr	r2, [r7, #8]
 801491a:	f000 f870 	bl	80149fe <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>
    }
 801491e:	bf00      	nop
 8014920:	3718      	adds	r7, #24
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}
 8014926:	bf00      	nop
 8014928:	080223e4 	.word	0x080223e4
 801492c:	08029290 	.word	0x08029290
 8014930:	08022600 	.word	0x08022600

08014934 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
 8014934:	b580      	push	{r7, lr}
 8014936:	b082      	sub	sp, #8
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f000 f86b 	bl	8014a18 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	4618      	mov	r0, r3
 8014946:	3708      	adds	r7, #8
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}

0801494c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>:
class dense_product_base
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6878      	ldr	r0, [r7, #4]
 8014956:	f7ff ffed 	bl	8014934 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	4618      	mov	r0, r3
 801495e:	3708      	adds	r7, #8
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}

08014964 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8014964:	b580      	push	{r7, lr}
 8014966:	b082      	sub	sp, #8
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f7ff ffed 	bl	801494c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	4618      	mov	r0, r3
 8014976:	3708      	adds	r7, #8
 8014978:	46bd      	mov	sp, r7
 801497a:	bd80      	pop	{r7, pc}

0801497c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 801497c:	b590      	push	{r4, r7, lr}
 801497e:	b085      	sub	sp, #20
 8014980:	af00      	add	r7, sp, #0
 8014982:	60f8      	str	r0, [r7, #12]
 8014984:	60b9      	str	r1, [r7, #8]
 8014986:	607a      	str	r2, [r7, #4]
 8014988:	68f8      	ldr	r0, [r7, #12]
 801498a:	f7ff ffeb 	bl	8014964 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	68ba      	ldr	r2, [r7, #8]
 8014992:	601a      	str	r2, [r3, #0]
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	687a      	ldr	r2, [r7, #4]
 8014998:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 801499a:	68bb      	ldr	r3, [r7, #8]
 801499c:	4618      	mov	r0, r3
 801499e:	f7f0 fb45 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80149a2:	4604      	mov	r4, r0
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7f0 f989 	bl	8004cbe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80149ac:	4603      	mov	r3, r0
 80149ae:	429c      	cmp	r4, r3
 80149b0:	d005      	beq.n	80149be <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 80149b2:	4b06      	ldr	r3, [pc, #24]	; (80149cc <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 80149b4:	4a06      	ldr	r2, [pc, #24]	; (80149d0 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 80149b6:	2160      	movs	r1, #96	; 0x60
 80149b8:	4806      	ldr	r0, [pc, #24]	; (80149d4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 80149ba:	f009 f897 	bl	801daec <__assert_func>
 80149be:	bf00      	nop
    }
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	4618      	mov	r0, r3
 80149c4:	3714      	adds	r7, #20
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd90      	pop	{r4, r7, pc}
 80149ca:	bf00      	nop
 80149cc:	0801fc14 	.word	0x0801fc14
 80149d0:	0802931c 	.word	0x0802931c
 80149d4:	0801ff64 	.word	0x0801ff64

080149d8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80149d8:	b580      	push	{r7, lr}
 80149da:	b084      	sub	sp, #16
 80149dc:	af00      	add	r7, sp, #0
 80149de:	60f8      	str	r0, [r7, #12]
 80149e0:	60b9      	str	r1, [r7, #8]
 80149e2:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80149e4:	68b9      	ldr	r1, [r7, #8]
 80149e6:	68f8      	ldr	r0, [r7, #12]
 80149e8:	f000 f821 	bl	8014a2e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80149ec:	687a      	ldr	r2, [r7, #4]
 80149ee:	68b9      	ldr	r1, [r7, #8]
 80149f0:	68f8      	ldr	r0, [r7, #12]
 80149f2:	f000 f84a 	bl	8014a8a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80149f6:	bf00      	nop
 80149f8:	3710      	adds	r7, #16
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bd80      	pop	{r7, pc}

080149fe <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 80149fe:	b480      	push	{r7}
 8014a00:	b085      	sub	sp, #20
 8014a02:	af00      	add	r7, sp, #0
 8014a04:	60f8      	str	r0, [r7, #12]
 8014a06:	60b9      	str	r1, [r7, #8]
 8014a08:	607a      	str	r2, [r7, #4]
 8014a0a:	603b      	str	r3, [r7, #0]
 8014a0c:	bf00      	nop
 8014a0e:	3714      	adds	r7, #20
 8014a10:	46bd      	mov	sp, r7
 8014a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a16:	4770      	bx	lr

08014a18 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014a18:	b480      	push	{r7}
 8014a1a:	b083      	sub	sp, #12
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
    }
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	4618      	mov	r0, r3
 8014a24:	370c      	adds	r7, #12
 8014a26:	46bd      	mov	sp, r7
 8014a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2c:	4770      	bx	lr

08014a2e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8014a2e:	b480      	push	{r7}
 8014a30:	b083      	sub	sp, #12
 8014a32:	af00      	add	r7, sp, #0
 8014a34:	6078      	str	r0, [r7, #4]
 8014a36:	6039      	str	r1, [r7, #0]
}
 8014a38:	bf00      	nop
 8014a3a:	370c      	adds	r7, #12
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a42:	4770      	bx	lr

08014a44 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b082      	sub	sp, #8
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	330c      	adds	r3, #12
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7f2 fbbc 	bl	80071ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	3308      	adds	r3, #8
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f7fa f9ea 	bl	800ee34 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f000 f859 	bl	8014b18 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	4618      	mov	r0, r3
 8014a6a:	3708      	adds	r7, #8
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}

08014a70 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b082      	sub	sp, #8
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f7ff ffe2 	bl	8014a44 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	4618      	mov	r0, r3
 8014a84:	3708      	adds	r7, #8
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}

08014a8a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8014a8a:	b580      	push	{r7, lr}
 8014a8c:	b090      	sub	sp, #64	; 0x40
 8014a8e:	af02      	add	r7, sp, #8
 8014a90:	60f8      	str	r0, [r7, #12]
 8014a92:	60b9      	str	r1, [r7, #8]
 8014a94:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8014a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014a9a:	68b9      	ldr	r1, [r7, #8]
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f000 f82c 	bl	8014afa <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8014aa2:	687a      	ldr	r2, [r7, #4]
 8014aa4:	68b9      	ldr	r1, [r7, #8]
 8014aa6:	68f8      	ldr	r0, [r7, #12]
 8014aa8:	f000 f85e 	bl	8014b68 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8014aac:	f107 0320 	add.w	r3, r7, #32
 8014ab0:	68f9      	ldr	r1, [r7, #12]
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7fc fed2 	bl	801185c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8014ab8:	68f8      	ldr	r0, [r7, #12]
 8014aba:	f000 f89f 	bl	8014bfc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014ac4:	f107 0120 	add.w	r1, r7, #32
 8014ac8:	f107 0010 	add.w	r0, r7, #16
 8014acc:	9300      	str	r3, [sp, #0]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	f000 f89f 	bl	8014c12 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8014ad4:	f107 0310 	add.w	r3, r7, #16
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f000 f8b4 	bl	8014c46 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8014ade:	f107 0320 	add.w	r3, r7, #32
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7fa f9a6 	bl	800ee34 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8014ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7ff ffbf 	bl	8014a70 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
}
 8014af2:	bf00      	nop
 8014af4:	3738      	adds	r7, #56	; 0x38
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bd80      	pop	{r7, pc}

08014afa <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014afa:	b580      	push	{r7, lr}
 8014afc:	b082      	sub	sp, #8
 8014afe:	af00      	add	r7, sp, #0
 8014b00:	6078      	str	r0, [r7, #4]
 8014b02:	6039      	str	r1, [r7, #0]
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	6839      	ldr	r1, [r7, #0]
 8014b08:	4618      	mov	r0, r3
 8014b0a:	f000 f8a7 	bl	8014c5c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	4618      	mov	r0, r3
 8014b12:	3708      	adds	r7, #8
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}

08014b18 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8014b18:	b480      	push	{r7}
 8014b1a:	b083      	sub	sp, #12
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	4618      	mov	r0, r3
 8014b24:	370c      	adds	r7, #12
 8014b26:	46bd      	mov	sp, r7
 8014b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2c:	4770      	bx	lr

08014b2e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8014b2e:	b580      	push	{r7, lr}
 8014b30:	b082      	sub	sp, #8
 8014b32:	af00      	add	r7, sp, #0
 8014b34:	6078      	str	r0, [r7, #4]
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7f0 fa81 	bl	8005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014b40:	4603      	mov	r3, r0
 8014b42:	4618      	mov	r0, r3
 8014b44:	3708      	adds	r7, #8
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}

08014b4a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8014b4a:	b580      	push	{r7, lr}
 8014b4c:	b082      	sub	sp, #8
 8014b4e:	af00      	add	r7, sp, #0
 8014b50:	6078      	str	r0, [r7, #4]
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	685b      	ldr	r3, [r3, #4]
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7f0 f8a6 	bl	8004ca8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	4618      	mov	r0, r3
 8014b60:	3708      	adds	r7, #8
 8014b62:	46bd      	mov	sp, r7
 8014b64:	bd80      	pop	{r7, pc}
	...

08014b68 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b086      	sub	sp, #24
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	60f8      	str	r0, [r7, #12]
 8014b70:	60b9      	str	r1, [r7, #8]
 8014b72:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8014b74:	68b8      	ldr	r0, [r7, #8]
 8014b76:	f7ff ffda 	bl	8014b2e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>
 8014b7a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8014b7c:	68b8      	ldr	r0, [r7, #8]
 8014b7e:	f7ff ffe4 	bl	8014b4a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>
 8014b82:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	4618      	mov	r0, r3
 8014b88:	f7f0 fa5b 	bl	8005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014b8c:	4602      	mov	r2, r0
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	4293      	cmp	r3, r2
 8014b92:	d107      	bne.n	8014ba4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	4618      	mov	r0, r3
 8014b98:	f7f0 fa48 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014b9c:	4602      	mov	r2, r0
 8014b9e:	693b      	ldr	r3, [r7, #16]
 8014ba0:	4293      	cmp	r3, r2
 8014ba2:	d001      	beq.n	8014ba8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8014ba4:	2301      	movs	r3, #1
 8014ba6:	e000      	b.n	8014baa <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8014ba8:	2300      	movs	r3, #0
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d005      	beq.n	8014bba <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	693a      	ldr	r2, [r7, #16]
 8014bb2:	6979      	ldr	r1, [r7, #20]
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7ff fe8b 	bl	80148d0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f7f0 fa40 	bl	8005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014bc2:	4602      	mov	r2, r0
 8014bc4:	697b      	ldr	r3, [r7, #20]
 8014bc6:	4293      	cmp	r3, r2
 8014bc8:	d107      	bne.n	8014bda <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7f0 fa2d 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014bd2:	4602      	mov	r2, r0
 8014bd4:	693b      	ldr	r3, [r7, #16]
 8014bd6:	4293      	cmp	r3, r2
 8014bd8:	d006      	beq.n	8014be8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8014bda:	4b05      	ldr	r3, [pc, #20]	; (8014bf0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8014bdc:	4a05      	ldr	r2, [pc, #20]	; (8014bf4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8014bde:	f240 21fd 	movw	r1, #765	; 0x2fd
 8014be2:	4805      	ldr	r0, [pc, #20]	; (8014bf8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8014be4:	f008 ff82 	bl	801daec <__assert_func>
}
 8014be8:	bf00      	nop
 8014bea:	3718      	adds	r7, #24
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bd80      	pop	{r7, pc}
 8014bf0:	08021fcc 	.word	0x08021fcc
 8014bf4:	08029444 	.word	0x08029444
 8014bf8:	080220e0 	.word	0x080220e0

08014bfc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8014bfc:	b480      	push	{r7}
 8014bfe:	b083      	sub	sp, #12
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	4618      	mov	r0, r3
 8014c08:	370c      	adds	r7, #12
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c10:	4770      	bx	lr

08014c12 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8014c12:	b480      	push	{r7}
 8014c14:	b085      	sub	sp, #20
 8014c16:	af00      	add	r7, sp, #0
 8014c18:	60f8      	str	r0, [r7, #12]
 8014c1a:	60b9      	str	r1, [r7, #8]
 8014c1c:	607a      	str	r2, [r7, #4]
 8014c1e:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	68ba      	ldr	r2, [r7, #8]
 8014c24:	601a      	str	r2, [r3, #0]
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	687a      	ldr	r2, [r7, #4]
 8014c2a:	605a      	str	r2, [r3, #4]
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	683a      	ldr	r2, [r7, #0]
 8014c30:	609a      	str	r2, [r3, #8]
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	69ba      	ldr	r2, [r7, #24]
 8014c36:	60da      	str	r2, [r3, #12]
  }
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	3714      	adds	r7, #20
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c44:	4770      	bx	lr

08014c46 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014c46:	b580      	push	{r7, lr}
 8014c48:	b082      	sub	sp, #8
 8014c4a:	af00      	add	r7, sp, #0
 8014c4c:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f000 f839 	bl	8014cc6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 8014c54:	bf00      	nop
 8014c56:	3708      	adds	r7, #8
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}

08014c5c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b082      	sub	sp, #8
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
 8014c64:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	f000 f854 	bl	8014d14 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8014c6c:	6838      	ldr	r0, [r7, #0]
 8014c6e:	f000 f839 	bl	8014ce4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 8014c72:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8014c78:	6838      	ldr	r0, [r7, #0]
 8014c7a:	f000 f83f 	bl	8014cfc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>
 8014c7e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	605a      	str	r2, [r3, #4]
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8014c8e:	4619      	mov	r1, r3
 8014c90:	4610      	mov	r0, r2
 8014c92:	f7fc fde3 	bl	801185c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8014ca0:	4619      	mov	r1, r3
 8014ca2:	4610      	mov	r0, r2
 8014ca4:	f7f2 fca2 	bl	80075ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8014ca8:	6838      	ldr	r0, [r7, #0]
 8014caa:	f000 f81b 	bl	8014ce4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7f0 f9bb 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014cb6:	4602      	mov	r2, r0
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	611a      	str	r2, [r3, #16]
  }
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	3708      	adds	r7, #8
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	bd80      	pop	{r7, pc}

08014cc6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014cc6:	b580      	push	{r7, lr}
 8014cc8:	b082      	sub	sp, #8
 8014cca:	af00      	add	r7, sp, #0
 8014ccc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014cce:	2100      	movs	r1, #0
 8014cd0:	6878      	ldr	r0, [r7, #4]
 8014cd2:	f000 f82a 	bl	8014d2a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014cd6:	6878      	ldr	r0, [r7, #4]
 8014cd8:	f000 f84a 	bl	8014d70 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8014cdc:	bf00      	nop
 8014cde:	3708      	adds	r7, #8
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}

08014ce4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8014ce4:	b480      	push	{r7}
 8014ce6:	b083      	sub	sp, #12
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	370c      	adds	r7, #12
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfa:	4770      	bx	lr

08014cfc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8014cfc:	b480      	push	{r7}
 8014cfe:	b083      	sub	sp, #12
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	685b      	ldr	r3, [r3, #4]
 8014d08:	4618      	mov	r0, r3
 8014d0a:	370c      	adds	r7, #12
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d12:	4770      	bx	lr

08014d14 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014d14:	b480      	push	{r7}
 8014d16:	b083      	sub	sp, #12
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	4618      	mov	r0, r3
 8014d20:	370c      	adds	r7, #12
 8014d22:	46bd      	mov	sp, r7
 8014d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d28:	4770      	bx	lr

08014d2a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8014d2a:	b5b0      	push	{r4, r5, r7, lr}
 8014d2c:	b084      	sub	sp, #16
 8014d2e:	af00      	add	r7, sp, #0
 8014d30:	6078      	str	r0, [r7, #4]
 8014d32:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	689c      	ldr	r4, [r3, #8]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	6839      	ldr	r1, [r7, #0]
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f000 f825 	bl	8014d8e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>
 8014d44:	4605      	mov	r5, r0
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	685b      	ldr	r3, [r3, #4]
 8014d4a:	6839      	ldr	r1, [r7, #0]
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f000 f82e 	bl	8014dae <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 8014d52:	eef0 7a40 	vmov.f32	s15, s0
 8014d56:	edc7 7a03 	vstr	s15, [r7, #12]
 8014d5a:	f107 030c 	add.w	r3, r7, #12
 8014d5e:	461a      	mov	r2, r3
 8014d60:	4629      	mov	r1, r5
 8014d62:	4620      	mov	r0, r4
 8014d64:	f7f3 fb4a 	bl	80083fc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8014d68:	bf00      	nop
 8014d6a:	3710      	adds	r7, #16
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bdb0      	pop	{r4, r5, r7, pc}

08014d70 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b082      	sub	sp, #8
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014d78:	2101      	movs	r1, #1
 8014d7a:	6878      	ldr	r0, [r7, #4]
 8014d7c:	f7ff ffd5 	bl	8014d2a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f000 f84d 	bl	8014e20 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 8014d86:	bf00      	nop
 8014d88:	3708      	adds	r7, #8
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}

08014d8e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8014d8e:	b480      	push	{r7}
 8014d90:	b083      	sub	sp, #12
 8014d92:	af00      	add	r7, sp, #0
 8014d94:	6078      	str	r0, [r7, #4]
 8014d96:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	681a      	ldr	r2, [r3, #0]
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	009b      	lsls	r3, r3, #2
 8014da0:	4413      	add	r3, r2
  }
 8014da2:	4618      	mov	r0, r3
 8014da4:	370c      	adds	r7, #12
 8014da6:	46bd      	mov	sp, r7
 8014da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dac:	4770      	bx	lr

08014dae <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 8014dae:	b580      	push	{r7, lr}
 8014db0:	b0a4      	sub	sp, #144	; 0x90
 8014db2:	af00      	add	r7, sp, #0
 8014db4:	6078      	str	r0, [r7, #4]
 8014db6:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8014db8:	2300      	movs	r3, #0
 8014dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	6819      	ldr	r1, [r3, #0]
 8014dc8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014dcc:	2200      	movs	r2, #0
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f000 f835 	bl	8014e3e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>
 8014dd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014dd8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014ddc:	4611      	mov	r1, r2
 8014dde:	4618      	mov	r0, r3
 8014de0:	f000 f840 	bl	8014e64 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	6859      	ldr	r1, [r3, #4]
 8014de8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014dec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014df0:	4618      	mov	r0, r3
 8014df2:	f7f7 f94a 	bl	800c08a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 8014df6:	f107 030c 	add.w	r3, r7, #12
 8014dfa:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8014dfe:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8014e02:	4618      	mov	r0, r3
 8014e04:	f000 f83f 	bl	8014e86 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8014e08:	f107 030c 	add.w	r3, r7, #12
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f000 f868 	bl	8014ee2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>
 8014e12:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014e16:	eeb0 0a67 	vmov.f32	s0, s15
 8014e1a:	3790      	adds	r7, #144	; 0x90
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bd80      	pop	{r7, pc}

08014e20 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b082      	sub	sp, #8
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014e28:	2102      	movs	r1, #2
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f7ff ff7d 	bl	8014d2a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	f000 f871 	bl	8014f18 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 8014e36:	bf00      	nop
 8014e38:	3708      	adds	r7, #8
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}

08014e3e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>:
ConstRowXpr row(Index i) const
 8014e3e:	b580      	push	{r7, lr}
 8014e40:	b084      	sub	sp, #16
 8014e42:	af00      	add	r7, sp, #0
 8014e44:	60f8      	str	r0, [r7, #12]
 8014e46:	60b9      	str	r1, [r7, #8]
 8014e48:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 8014e4a:	68b8      	ldr	r0, [r7, #8]
 8014e4c:	f7f0 fe12 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8014e50:	4603      	mov	r3, r0
 8014e52:	687a      	ldr	r2, [r7, #4]
 8014e54:	4619      	mov	r1, r3
 8014e56:	68f8      	ldr	r0, [r7, #12]
 8014e58:	f000 f868 	bl	8014f2c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>
}
 8014e5c:	68f8      	ldr	r0, [r7, #12]
 8014e5e:	3710      	adds	r7, #16
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}

08014e64 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b082      	sub	sp, #8
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
 8014e6c:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8014e6e:	6838      	ldr	r0, [r7, #0]
 8014e70:	f000 f886 	bl	8014f80 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>
 8014e74:	4603      	mov	r3, r0
 8014e76:	4619      	mov	r1, r3
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	f000 f8a4 	bl	8014fc6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>
}
 8014e7e:	6878      	ldr	r0, [r7, #4]
 8014e80:	3708      	adds	r7, #8
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}

08014e86 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8014e86:	b5b0      	push	{r4, r5, r7, lr}
 8014e88:	b086      	sub	sp, #24
 8014e8a:	af00      	add	r7, sp, #0
 8014e8c:	60f8      	str	r0, [r7, #12]
 8014e8e:	60b9      	str	r1, [r7, #8]
 8014e90:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8014e92:	68b8      	ldr	r0, [r7, #8]
 8014e94:	f000 f8ae 	bl	8014ff4 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>
 8014e98:	4604      	mov	r4, r0
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f7f7 fec4 	bl	800cc28 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 8014ea0:	4605      	mov	r5, r0
 8014ea2:	f107 0314 	add.w	r3, r7, #20
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	f7f0 f9aa 	bl	8005200 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8014eac:	f107 0314 	add.w	r3, r7, #20
 8014eb0:	462a      	mov	r2, r5
 8014eb2:	4621      	mov	r1, r4
 8014eb4:	68f8      	ldr	r0, [r7, #12]
 8014eb6:	f000 f8db 	bl	8015070 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 8014eba:	68f8      	ldr	r0, [r7, #12]
 8014ebc:	3718      	adds	r7, #24
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bdb0      	pop	{r4, r5, r7, pc}

08014ec2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8014ec2:	b580      	push	{r7, lr}
 8014ec4:	b082      	sub	sp, #8
 8014ec6:	af00      	add	r7, sp, #0
 8014ec8:	6078      	str	r0, [r7, #4]
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	f000 f92e 	bl	801512c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	f000 f935 	bl	8015142 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	4618      	mov	r0, r3
 8014edc:	3708      	adds	r7, #8
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}

08014ee2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8014ee2:	b590      	push	{r4, r7, lr}
 8014ee4:	b085      	sub	sp, #20
 8014ee6:	af00      	add	r7, sp, #0
 8014ee8:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8014eea:	6878      	ldr	r0, [r7, #4]
 8014eec:	f000 f91e 	bl	801512c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014ef0:	4604      	mov	r4, r0
 8014ef2:	f107 030c 	add.w	r3, r7, #12
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f7f0 fc79 	bl	80057ee <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8014efc:	f107 030c 	add.w	r3, r7, #12
 8014f00:	4619      	mov	r1, r3
 8014f02:	4620      	mov	r0, r4
 8014f04:	f000 f9c4 	bl	8015290 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8014f08:	eef0 7a40 	vmov.f32	s15, s0
 8014f0c:	bf00      	nop
}
 8014f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8014f12:	3714      	adds	r7, #20
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd90      	pop	{r4, r7, pc}

08014f18 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8014f18:	b480      	push	{r7}
 8014f1a:	b083      	sub	sp, #12
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	bf00      	nop
 8014f22:	370c      	adds	r7, #12
 8014f24:	46bd      	mov	sp, r7
 8014f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2a:	4770      	bx	lr

08014f2c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b084      	sub	sp, #16
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	60f8      	str	r0, [r7, #12]
 8014f34:	60b9      	str	r1, [r7, #8]
 8014f36:	607a      	str	r2, [r7, #4]
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	687a      	ldr	r2, [r7, #4]
 8014f3c:	68b9      	ldr	r1, [r7, #8]
 8014f3e:	4618      	mov	r0, r3
 8014f40:	f000 f9ec 	bl	801531c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	db07      	blt.n	8014f5a <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x2e>
 8014f4a:	68bb      	ldr	r3, [r7, #8]
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7f0 f878 	bl	8005042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014f52:	4602      	mov	r2, r0
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	4293      	cmp	r3, r2
 8014f58:	db05      	blt.n	8014f66 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x3a>
 8014f5a:	4b06      	ldr	r3, [pc, #24]	; (8014f74 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x48>)
 8014f5c:	4a06      	ldr	r2, [pc, #24]	; (8014f78 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x4c>)
 8014f5e:	2178      	movs	r1, #120	; 0x78
 8014f60:	4806      	ldr	r0, [pc, #24]	; (8014f7c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x50>)
 8014f62:	f008 fdc3 	bl	801daec <__assert_func>
 8014f66:	bf00      	nop
    }
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	3710      	adds	r7, #16
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}
 8014f72:	bf00      	nop
 8014f74:	080244d8 	.word	0x080244d8
 8014f78:	08029558 	.word	0x08029558
 8014f7c:	0802465c 	.word	0x0802465c

08014f80 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8014f80:	b480      	push	{r7}
 8014f82:	b083      	sub	sp, #12
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	370c      	adds	r7, #12
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f94:	4770      	bx	lr

08014f96 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
 8014f96:	b580      	push	{r7, lr}
 8014f98:	b082      	sub	sp, #8
 8014f9a:	af00      	add	r7, sp, #0
 8014f9c:	6078      	str	r0, [r7, #4]
 8014f9e:	6878      	ldr	r0, [r7, #4]
 8014fa0:	f000 f9cd 	bl	801533e <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3708      	adds	r7, #8
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}

08014fae <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8014fae:	b580      	push	{r7, lr}
 8014fb0:	b082      	sub	sp, #8
 8014fb2:	af00      	add	r7, sp, #0
 8014fb4:	6078      	str	r0, [r7, #4]
 8014fb6:	6878      	ldr	r0, [r7, #4]
 8014fb8:	f7ff ffed 	bl	8014f96 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3708      	adds	r7, #8
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}

08014fc6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8014fc6:	b5b0      	push	{r4, r5, r7, lr}
 8014fc8:	b082      	sub	sp, #8
 8014fca:	af00      	add	r7, sp, #0
 8014fcc:	6078      	str	r0, [r7, #4]
 8014fce:	6039      	str	r1, [r7, #0]
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f7ff ffec 	bl	8014fae <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>
 8014fd6:	687a      	ldr	r2, [r7, #4]
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	4614      	mov	r4, r2
 8014fdc:	461d      	mov	r5, r3
 8014fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fe2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014fe6:	e884 0003 	stmia.w	r4, {r0, r1}
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	4618      	mov	r0, r3
 8014fee:	3708      	adds	r7, #8
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bdb0      	pop	{r4, r5, r7, pc}

08014ff4 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>:
 8014ff4:	b480      	push	{r7}
 8014ff6:	b083      	sub	sp, #12
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	4618      	mov	r0, r3
 8015000:	370c      	adds	r7, #12
 8015002:	46bd      	mov	sp, r7
 8015004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015008:	4770      	bx	lr

0801500a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
 801500a:	b580      	push	{r7, lr}
 801500c:	b082      	sub	sp, #8
 801500e:	af00      	add	r7, sp, #0
 8015010:	6078      	str	r0, [r7, #4]
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f000 f99e 	bl	8015354 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	4618      	mov	r0, r3
 801501c:	3708      	adds	r7, #8
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}

08015022 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8015022:	b580      	push	{r7, lr}
 8015024:	b082      	sub	sp, #8
 8015026:	af00      	add	r7, sp, #0
 8015028:	6078      	str	r0, [r7, #4]
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	f7ff ffed 	bl	801500a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	4618      	mov	r0, r3
 8015034:	3708      	adds	r7, #8
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}

0801503a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 801503a:	b580      	push	{r7, lr}
 801503c:	b082      	sub	sp, #8
 801503e:	af00      	add	r7, sp, #0
 8015040:	6078      	str	r0, [r7, #4]
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	4618      	mov	r0, r3
 8015046:	f000 f990 	bl	801536a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>
 801504a:	4603      	mov	r3, r0
 801504c:	4618      	mov	r0, r3
 801504e:	3708      	adds	r7, #8
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8015054:	b580      	push	{r7, lr}
 8015056:	b082      	sub	sp, #8
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	4618      	mov	r0, r3
 8015060:	f000 f98e 	bl	8015380 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>
 8015064:	4603      	mov	r3, r0
 8015066:	4618      	mov	r0, r3
 8015068:	3708      	adds	r7, #8
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}
	...

08015070 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8015070:	b5b0      	push	{r4, r5, r7, lr}
 8015072:	b084      	sub	sp, #16
 8015074:	af00      	add	r7, sp, #0
 8015076:	60f8      	str	r0, [r7, #12]
 8015078:	60b9      	str	r1, [r7, #8]
 801507a:	607a      	str	r2, [r7, #4]
 801507c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 801507e:	68f8      	ldr	r0, [r7, #12]
 8015080:	f7ff ffcf 	bl	8015022 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8015084:	68fa      	ldr	r2, [r7, #12]
 8015086:	68bb      	ldr	r3, [r7, #8]
 8015088:	4614      	mov	r4, r2
 801508a:	461d      	mov	r5, r3
 801508c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801508e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015090:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015094:	e884 0003 	stmia.w	r4, {r0, r1}
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	f103 0218 	add.w	r2, r3, #24
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	4614      	mov	r4, r2
 80150a2:	461d      	mov	r5, r3
 80150a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80150a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80150ac:	e884 0003 	stmia.w	r4, {r0, r1}
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	3330      	adds	r3, #48	; 0x30
 80150b4:	6839      	ldr	r1, [r7, #0]
 80150b6:	4618      	mov	r0, r3
 80150b8:	f7f0 f92c 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80150bc:	68b8      	ldr	r0, [r7, #8]
 80150be:	f7ff ffbc 	bl	801503a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 80150c2:	4604      	mov	r4, r0
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	4618      	mov	r0, r3
 80150c8:	f7f7 fdd1 	bl	800cc6e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 80150cc:	4603      	mov	r3, r0
 80150ce:	429c      	cmp	r4, r3
 80150d0:	d10a      	bne.n	80150e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 80150d2:	68b8      	ldr	r0, [r7, #8]
 80150d4:	f7ff ffbe 	bl	8015054 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 80150d8:	4604      	mov	r4, r0
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	4618      	mov	r0, r3
 80150de:	f7f7 fdd1 	bl	800cc84 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 80150e2:	4603      	mov	r3, r0
 80150e4:	429c      	cmp	r4, r3
 80150e6:	d005      	beq.n	80150f4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 80150e8:	4b05      	ldr	r3, [pc, #20]	; (8015100 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 80150ea:	4a06      	ldr	r2, [pc, #24]	; (8015104 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 80150ec:	2174      	movs	r1, #116	; 0x74
 80150ee:	4806      	ldr	r0, [pc, #24]	; (8015108 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 80150f0:	f008 fcfc 	bl	801daec <__assert_func>
    }
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	4618      	mov	r0, r3
 80150f8:	3710      	adds	r7, #16
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bdb0      	pop	{r4, r5, r7, pc}
 80150fe:	bf00      	nop
 8015100:	0801f954 	.word	0x0801f954
 8015104:	08029634 	.word	0x08029634
 8015108:	0801fbb8 	.word	0x0801fbb8

0801510c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 801510c:	b580      	push	{r7, lr}
 801510e:	b082      	sub	sp, #8
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f000 f809 	bl	801512c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 801511a:	4603      	mov	r3, r0
 801511c:	4618      	mov	r0, r3
 801511e:	f000 f93a 	bl	8015396 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>
 8015122:	4603      	mov	r3, r0
 8015124:	4618      	mov	r0, r3
 8015126:	3708      	adds	r7, #8
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}

0801512c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801512c:	b480      	push	{r7}
 801512e:	b083      	sub	sp, #12
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	4618      	mov	r0, r3
 8015138:	370c      	adds	r7, #12
 801513a:	46bd      	mov	sp, r7
 801513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015140:	4770      	bx	lr

08015142 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8015142:	b580      	push	{r7, lr}
 8015144:	b082      	sub	sp, #8
 8015146:	af00      	add	r7, sp, #0
 8015148:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	4618      	mov	r0, r3
 801514e:	f7ff ff74 	bl	801503a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 8015152:	4603      	mov	r3, r0
    }
 8015154:	4618      	mov	r0, r3
 8015156:	3708      	adds	r7, #8
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}

0801515c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 801515c:	b580      	push	{r7, lr}
 801515e:	b082      	sub	sp, #8
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	f000 f948 	bl	80153fa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	4618      	mov	r0, r3
 801516e:	3708      	adds	r7, #8
 8015170:	46bd      	mov	sp, r7
 8015172:	bd80      	pop	{r7, pc}

08015174 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8015174:	b580      	push	{r7, lr}
 8015176:	b082      	sub	sp, #8
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	4618      	mov	r0, r3
 8015180:	f7ff ffec 	bl	801515c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	4618      	mov	r0, r3
 8015188:	3708      	adds	r7, #8
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}

0801518e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 801518e:	b580      	push	{r7, lr}
 8015190:	b082      	sub	sp, #8
 8015192:	af00      	add	r7, sp, #0
 8015194:	6078      	str	r0, [r7, #4]
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	4618      	mov	r0, r3
 801519a:	f7ff ffeb 	bl	8015174 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	4618      	mov	r0, r3
 80151a2:	3708      	adds	r7, #8
 80151a4:	46bd      	mov	sp, r7
 80151a6:	bd80      	pop	{r7, pc}

080151a8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<const T>
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	4618      	mov	r0, r3
 80151b4:	f7ff ffeb 	bl	801518e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	4618      	mov	r0, r3
 80151bc:	3708      	adds	r7, #8
 80151be:	46bd      	mov	sp, r7
 80151c0:	bd80      	pop	{r7, pc}

080151c2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 80151c2:	b580      	push	{r7, lr}
 80151c4:	b082      	sub	sp, #8
 80151c6:	af00      	add	r7, sp, #0
 80151c8:	6078      	str	r0, [r7, #4]
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	4618      	mov	r0, r3
 80151ce:	f7ff ffeb 	bl	80151a8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 80151d2:	6878      	ldr	r0, [r7, #4]
 80151d4:	f000 f906 	bl	80153e4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	4618      	mov	r0, r3
 80151dc:	3708      	adds	r7, #8
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd80      	pop	{r7, pc}

080151e2 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 80151e2:	b580      	push	{r7, lr}
 80151e4:	b082      	sub	sp, #8
 80151e6:	af00      	add	r7, sp, #0
 80151e8:	6078      	str	r0, [r7, #4]
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7ff ffe8 	bl	80151c2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	4618      	mov	r0, r3
 80151f6:	3708      	adds	r7, #8
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}

080151fc <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator<const T>
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b082      	sub	sp, #8
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	4618      	mov	r0, r3
 8015208:	f7ff ffeb 	bl	80151e2 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	4618      	mov	r0, r3
 8015210:	3708      	adds	r7, #8
 8015212:	46bd      	mov	sp, r7
 8015214:	bd80      	pop	{r7, pc}

08015216 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 8015216:	b580      	push	{r7, lr}
 8015218:	b082      	sub	sp, #8
 801521a:	af00      	add	r7, sp, #0
 801521c:	6078      	str	r0, [r7, #4]
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	330c      	adds	r3, #12
 8015222:	4618      	mov	r0, r3
 8015224:	f7f7 fdd6 	bl	800cdd4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	3304      	adds	r3, #4
 801522c:	4618      	mov	r0, r3
 801522e:	f7ff ffe5 	bl	80151fc <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	4618      	mov	r0, r3
 8015236:	3708      	adds	r7, #8
 8015238:	46bd      	mov	sp, r7
 801523a:	bd80      	pop	{r7, pc}

0801523c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 801523c:	b580      	push	{r7, lr}
 801523e:	b082      	sub	sp, #8
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	4618      	mov	r0, r3
 8015248:	f7ff ffe5 	bl	8015216 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 801524c:	6878      	ldr	r0, [r7, #4]
 801524e:	f000 f8be 	bl	80153ce <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	4618      	mov	r0, r3
 8015256:	3708      	adds	r7, #8
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}

0801525c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 801525c:	b580      	push	{r7, lr}
 801525e:	b082      	sub	sp, #8
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	4618      	mov	r0, r3
 8015268:	f7ff ffe8 	bl	801523c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	4618      	mov	r0, r3
 8015270:	3708      	adds	r7, #8
 8015272:	46bd      	mov	sp, r7
 8015274:	bd80      	pop	{r7, pc}

08015276 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8015276:	b580      	push	{r7, lr}
 8015278:	b082      	sub	sp, #8
 801527a:	af00      	add	r7, sp, #0
 801527c:	6078      	str	r0, [r7, #4]
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	4618      	mov	r0, r3
 8015282:	f7ff ffeb 	bl	801525c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	4618      	mov	r0, r3
 801528a:	3708      	adds	r7, #8
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8015290:	b580      	push	{r7, lr}
 8015292:	ed2d 8b02 	vpush	{d8}
 8015296:	b088      	sub	sp, #32
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
 801529c:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f7ff fe0f 	bl	8014ec2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>
 80152a4:	4603      	mov	r3, r0
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	dd05      	ble.n	80152b6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 80152aa:	6878      	ldr	r0, [r7, #4]
 80152ac:	f7ff ff2e 	bl	801510c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>
 80152b0:	4603      	mov	r3, r0
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	dc06      	bgt.n	80152c4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80152b6:	4b16      	ldr	r3, [pc, #88]	; (8015310 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 80152b8:	4a16      	ldr	r2, [pc, #88]	; (8015314 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 80152ba:	f240 119b 	movw	r1, #411	; 0x19b
 80152be:	4816      	ldr	r0, [pc, #88]	; (8015318 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80152c0:	f008 fc14 	bl	801daec <__assert_func>
 80152c4:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80152c6:	6878      	ldr	r0, [r7, #4]
 80152c8:	f7ff ff30 	bl	801512c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80152cc:	4602      	mov	r2, r0
 80152ce:	f107 030c 	add.w	r3, r7, #12
 80152d2:	4611      	mov	r1, r2
 80152d4:	4618      	mov	r0, r3
 80152d6:	f000 f86b 	bl	80153b0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80152da:	6878      	ldr	r0, [r7, #4]
 80152dc:	f7ff ff26 	bl	801512c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80152e0:	4602      	mov	r2, r0
 80152e2:	f107 030c 	add.w	r3, r7, #12
 80152e6:	6839      	ldr	r1, [r7, #0]
 80152e8:	4618      	mov	r0, r3
 80152ea:	f000 f891 	bl	8015410 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 80152ee:	eeb0 8a40 	vmov.f32	s16, s0
 80152f2:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80152f4:	f107 030c 	add.w	r3, r7, #12
 80152f8:	4618      	mov	r0, r3
 80152fa:	f7ff ffbc 	bl	8015276 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80152fe:	eef0 7a48 	vmov.f32	s15, s16
}
 8015302:	eeb0 0a67 	vmov.f32	s0, s15
 8015306:	3720      	adds	r7, #32
 8015308:	46bd      	mov	sp, r7
 801530a:	ecbd 8b02 	vpop	{d8}
 801530e:	bd80      	pop	{r7, pc}
 8015310:	080249d4 	.word	0x080249d4
 8015314:	0802987c 	.word	0x0802987c
 8015318:	08024be0 	.word	0x08024be0

0801531c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 801531c:	b580      	push	{r7, lr}
 801531e:	b084      	sub	sp, #16
 8015320:	af00      	add	r7, sp, #0
 8015322:	60f8      	str	r0, [r7, #12]
 8015324:	60b9      	str	r1, [r7, #8]
 8015326:	607a      	str	r2, [r7, #4]
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	687a      	ldr	r2, [r7, #4]
 801532c:	68b9      	ldr	r1, [r7, #8]
 801532e:	4618      	mov	r0, r3
 8015330:	f000 f87f 	bl	8015432 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	4618      	mov	r0, r3
 8015338:	3710      	adds	r7, #16
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}

0801533e <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801533e:	b480      	push	{r7}
 8015340:	b083      	sub	sp, #12
 8015342:	af00      	add	r7, sp, #0
 8015344:	6078      	str	r0, [r7, #4]
    }
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	4618      	mov	r0, r3
 801534a:	370c      	adds	r7, #12
 801534c:	46bd      	mov	sp, r7
 801534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015352:	4770      	bx	lr

08015354 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8015354:	b480      	push	{r7}
 8015356:	b083      	sub	sp, #12
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
    }
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	4618      	mov	r0, r3
 8015360:	370c      	adds	r7, #12
 8015362:	46bd      	mov	sp, r7
 8015364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015368:	4770      	bx	lr

0801536a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 801536a:	b580      	push	{r7, lr}
 801536c:	b082      	sub	sp, #8
 801536e:	af00      	add	r7, sp, #0
 8015370:	6078      	str	r0, [r7, #4]
 8015372:	f7f1 fa6e 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8015376:	4603      	mov	r3, r0
 8015378:	4618      	mov	r0, r3
 801537a:	3708      	adds	r7, #8
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}

08015380 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8015380:	b580      	push	{r7, lr}
 8015382:	b082      	sub	sp, #8
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
 8015388:	f7f1 fa6b 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801538c:	4603      	mov	r3, r0
 801538e:	4618      	mov	r0, r3
 8015390:	3708      	adds	r7, #8
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}

08015396 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8015396:	b580      	push	{r7, lr}
 8015398:	b082      	sub	sp, #8
 801539a:	af00      	add	r7, sp, #0
 801539c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	4618      	mov	r0, r3
 80153a2:	f7ff fe57 	bl	8015054 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 80153a6:	4603      	mov	r3, r0
    }
 80153a8:	4618      	mov	r0, r3
 80153aa:	3708      	adds	r7, #8
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}

080153b0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b082      	sub	sp, #8
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
 80153b8:	6039      	str	r1, [r7, #0]
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	6839      	ldr	r1, [r7, #0]
 80153be:	4618      	mov	r0, r3
 80153c0:	f000 f86d 	bl	801549e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	4618      	mov	r0, r3
 80153c8:	3708      	adds	r7, #8
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}

080153ce <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80153ce:	b480      	push	{r7}
 80153d0:	b083      	sub	sp, #12
 80153d2:	af00      	add	r7, sp, #0
 80153d4:	6078      	str	r0, [r7, #4]
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	4618      	mov	r0, r3
 80153da:	370c      	adds	r7, #12
 80153dc:	46bd      	mov	sp, r7
 80153de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e2:	4770      	bx	lr

080153e4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
 80153e4:	b480      	push	{r7}
 80153e6:	b083      	sub	sp, #12
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	4618      	mov	r0, r3
 80153f0:	370c      	adds	r7, #12
 80153f2:	46bd      	mov	sp, r7
 80153f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f8:	4770      	bx	lr

080153fa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
 80153fa:	b480      	push	{r7}
 80153fc:	b083      	sub	sp, #12
 80153fe:	af00      	add	r7, sp, #0
 8015400:	6078      	str	r0, [r7, #4]
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	4618      	mov	r0, r3
 8015406:	370c      	adds	r7, #12
 8015408:	46bd      	mov	sp, r7
 801540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540e:	4770      	bx	lr

08015410 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8015410:	b580      	push	{r7, lr}
 8015412:	b084      	sub	sp, #16
 8015414:	af00      	add	r7, sp, #0
 8015416:	60f8      	str	r0, [r7, #12]
 8015418:	60b9      	str	r1, [r7, #8]
 801541a:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 801541c:	68b9      	ldr	r1, [r7, #8]
 801541e:	68f8      	ldr	r0, [r7, #12]
 8015420:	f000 f84c 	bl	80154bc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 8015424:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015428:	eeb0 0a67 	vmov.f32	s0, s15
 801542c:	3710      	adds	r7, #16
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}

08015432 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8015432:	b5b0      	push	{r4, r5, r7, lr}
 8015434:	b084      	sub	sp, #16
 8015436:	af00      	add	r7, sp, #0
 8015438:	60f8      	str	r0, [r7, #12]
 801543a:	60b9      	str	r1, [r7, #8]
 801543c:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 801543e:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8015440:	68bb      	ldr	r3, [r7, #8]
 8015442:	4618      	mov	r0, r3
 8015444:	f7fd f866 	bl	8012514 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8015448:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 801544a:	68b8      	ldr	r0, [r7, #8]
 801544c:	f7fd fa90 	bl	8012970 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015450:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	fb02 f303 	mul.w	r3, r2, r3
 8015458:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 801545a:	441d      	add	r5, r3
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	4618      	mov	r0, r3
 8015460:	f7ef fde4 	bl	800502c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8015464:	4603      	mov	r3, r0
 8015466:	2201      	movs	r2, #1
 8015468:	4629      	mov	r1, r5
 801546a:	4620      	mov	r0, r4
 801546c:	f000 f856 	bl	801551c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	68ba      	ldr	r2, [r7, #8]
 8015474:	609a      	str	r2, [r3, #8]
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	330c      	adds	r3, #12
 801547a:	6879      	ldr	r1, [r7, #4]
 801547c:	4618      	mov	r0, r3
 801547e:	f7f8 faab 	bl	800d9d8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	3310      	adds	r3, #16
 8015486:	2100      	movs	r1, #0
 8015488:	4618      	mov	r0, r3
 801548a:	f7f8 fa31 	bl	800d8f0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 801548e:	68f8      	ldr	r0, [r7, #12]
 8015490:	f000 f882 	bl	8015598 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>
    }
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	4618      	mov	r0, r3
 8015498:	3710      	adds	r7, #16
 801549a:	46bd      	mov	sp, r7
 801549c:	bdb0      	pop	{r4, r5, r7, pc}

0801549e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 801549e:	b580      	push	{r7, lr}
 80154a0:	b082      	sub	sp, #8
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	6078      	str	r0, [r7, #4]
 80154a6:	6039      	str	r1, [r7, #0]
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	6839      	ldr	r1, [r7, #0]
 80154ac:	4618      	mov	r0, r3
 80154ae:	f000 f883 	bl	80155b8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	4618      	mov	r0, r3
 80154b6:	3708      	adds	r7, #8
 80154b8:	46bd      	mov	sp, r7
 80154ba:	bd80      	pop	{r7, pc}

080154bc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80154bc:	b580      	push	{r7, lr}
 80154be:	b084      	sub	sp, #16
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80154c6:	6839      	ldr	r1, [r7, #0]
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f000 f887 	bl	80155dc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 80154ce:	eef0 7a40 	vmov.f32	s15, s0
 80154d2:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80154d6:	6839      	ldr	r1, [r7, #0]
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	f000 f890 	bl	80155fe <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 80154de:	eef0 7a40 	vmov.f32	s15, s0
 80154e2:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80154e6:	f107 020c 	add.w	r2, r7, #12
 80154ea:	f107 0308 	add.w	r3, r7, #8
 80154ee:	4619      	mov	r1, r3
 80154f0:	6838      	ldr	r0, [r7, #0]
 80154f2:	f7f3 fd74 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80154f6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80154fa:	eeb0 0a67 	vmov.f32	s0, s15
 80154fe:	3710      	adds	r7, #16
 8015500:	46bd      	mov	sp, r7
 8015502:	bd80      	pop	{r7, pc}

08015504 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
 8015504:	b580      	push	{r7, lr}
 8015506:	b082      	sub	sp, #8
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
 801550c:	6878      	ldr	r0, [r7, #4]
 801550e:	f000 f89a 	bl	8015646 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	4618      	mov	r0, r3
 8015516:	3708      	adds	r7, #8
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}

0801551c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 801551c:	b580      	push	{r7, lr}
 801551e:	b084      	sub	sp, #16
 8015520:	af00      	add	r7, sp, #0
 8015522:	60f8      	str	r0, [r7, #12]
 8015524:	60b9      	str	r1, [r7, #8]
 8015526:	607a      	str	r2, [r7, #4]
 8015528:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 801552a:	68f8      	ldr	r0, [r7, #12]
 801552c:	f7ff ffea 	bl	8015504 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	68ba      	ldr	r2, [r7, #8]
 8015534:	601a      	str	r2, [r3, #0]
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	3304      	adds	r3, #4
 801553a:	6879      	ldr	r1, [r7, #4]
 801553c:	4618      	mov	r0, r3
 801553e:	f7f1 f963 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	3305      	adds	r3, #5
 8015546:	6839      	ldr	r1, [r7, #0]
 8015548:	4618      	mov	r0, r3
 801554a:	f7f1 f943 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      eigen_assert( (dataPtr == 0)
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d011      	beq.n	8015578 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2b00      	cmp	r3, #0
 8015558:	db08      	blt.n	801556c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	2b01      	cmp	r3, #1
 801555e:	d105      	bne.n	801556c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	db02      	blt.n	801556c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015566:	683b      	ldr	r3, [r7, #0]
 8015568:	2b03      	cmp	r3, #3
 801556a:	d005      	beq.n	8015578 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 801556c:	4b07      	ldr	r3, [pc, #28]	; (801558c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x70>)
 801556e:	4a08      	ldr	r2, [pc, #32]	; (8015590 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x74>)
 8015570:	21b0      	movs	r1, #176	; 0xb0
 8015572:	4808      	ldr	r0, [pc, #32]	; (8015594 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x78>)
 8015574:	f008 faba 	bl	801daec <__assert_func>
      checkSanity<Derived>();
 8015578:	2100      	movs	r1, #0
 801557a:	68f8      	ldr	r0, [r7, #12]
 801557c:	f000 f86e 	bl	801565c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	4618      	mov	r0, r3
 8015584:	3710      	adds	r7, #16
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}
 801558a:	bf00      	nop
 801558c:	08026078 	.word	0x08026078
 8015590:	08029a40 	.word	0x08029a40
 8015594:	08026228 	.word	0x08026228

08015598 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>:
    void init()
 8015598:	b580      	push	{r7, lr}
 801559a:	b082      	sub	sp, #8
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	689b      	ldr	r3, [r3, #8]
 80155a4:	4618      	mov	r0, r3
 80155a6:	f7fd f9e3 	bl	8012970 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 80155aa:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	615a      	str	r2, [r3, #20]
    }
 80155b0:	bf00      	nop
 80155b2:	3708      	adds	r7, #8
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}

080155b8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b082      	sub	sp, #8
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
 80155c0:	6039      	str	r1, [r7, #0]
 80155c2:	6878      	ldr	r0, [r7, #4]
 80155c4:	f000 f855 	bl	8015672 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	6839      	ldr	r1, [r7, #0]
 80155cc:	4618      	mov	r0, r3
 80155ce:	f000 f85b 	bl	8015688 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	4618      	mov	r0, r3
 80155d6:	3708      	adds	r7, #8
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}

080155dc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80155dc:	b580      	push	{r7, lr}
 80155de:	b082      	sub	sp, #8
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
 80155e4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80155e6:	2200      	movs	r2, #0
 80155e8:	2100      	movs	r1, #0
 80155ea:	6878      	ldr	r0, [r7, #4]
 80155ec:	f000 f874 	bl	80156d8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80155f0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80155f4:	eeb0 0a67 	vmov.f32	s0, s15
 80155f8:	3708      	adds	r7, #8
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}

080155fe <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80155fe:	b580      	push	{r7, lr}
 8015600:	b084      	sub	sp, #16
 8015602:	af00      	add	r7, sp, #0
 8015604:	6078      	str	r0, [r7, #4]
 8015606:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015608:	6839      	ldr	r1, [r7, #0]
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f000 f877 	bl	80156fe <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 8015610:	eef0 7a40 	vmov.f32	s15, s0
 8015614:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8015618:	6839      	ldr	r1, [r7, #0]
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f000 f880 	bl	8015720 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 8015620:	eef0 7a40 	vmov.f32	s15, s0
 8015624:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015628:	f107 020c 	add.w	r2, r7, #12
 801562c:	f107 0308 	add.w	r3, r7, #8
 8015630:	4619      	mov	r1, r3
 8015632:	6838      	ldr	r0, [r7, #0]
 8015634:	f7f3 fcd3 	bl	8008fde <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8015638:	eef0 7a40 	vmov.f32	s15, s0
  }
 801563c:	eeb0 0a67 	vmov.f32	s0, s15
 8015640:	3710      	adds	r7, #16
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}

08015646 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8015646:	b480      	push	{r7}
 8015648:	b083      	sub	sp, #12
 801564a:	af00      	add	r7, sp, #0
 801564c:	6078      	str	r0, [r7, #4]
    }
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	4618      	mov	r0, r3
 8015652:	370c      	adds	r7, #12
 8015654:	46bd      	mov	sp, r7
 8015656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801565a:	4770      	bx	lr

0801565c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 801565c:	b480      	push	{r7}
 801565e:	b083      	sub	sp, #12
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
 8015664:	6039      	str	r1, [r7, #0]
    {}
 8015666:	bf00      	nop
 8015668:	370c      	adds	r7, #12
 801566a:	46bd      	mov	sp, r7
 801566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015670:	4770      	bx	lr

08015672 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015672:	b480      	push	{r7}
 8015674:	b083      	sub	sp, #12
 8015676:	af00      	add	r7, sp, #0
 8015678:	6078      	str	r0, [r7, #4]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	4618      	mov	r0, r3
 801567e:	370c      	adds	r7, #12
 8015680:	46bd      	mov	sp, r7
 8015682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015686:	4770      	bx	lr

08015688 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8015688:	b590      	push	{r4, r7, lr}
 801568a:	b083      	sub	sp, #12
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
 8015690:	6039      	str	r1, [r7, #0]
 8015692:	687c      	ldr	r4, [r7, #4]
 8015694:	6838      	ldr	r0, [r7, #0]
 8015696:	f000 f854 	bl	8015742 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>
 801569a:	4603      	mov	r3, r0
 801569c:	4619      	mov	r1, r3
 801569e:	4620      	mov	r0, r4
 80156a0:	f7ef fe38 	bl	8005314 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	1d1c      	adds	r4, r3, #4
 80156a8:	6838      	ldr	r0, [r7, #0]
 80156aa:	f000 f856 	bl	801575a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>
 80156ae:	4603      	mov	r3, r0
 80156b0:	4619      	mov	r1, r3
 80156b2:	4620      	mov	r0, r4
 80156b4:	f000 f868 	bl	8015788 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	f103 040c 	add.w	r4, r3, #12
 80156be:	6838      	ldr	r0, [r7, #0]
 80156c0:	f000 f856 	bl	8015770 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>
 80156c4:	4603      	mov	r3, r0
 80156c6:	4619      	mov	r1, r3
 80156c8:	4620      	mov	r0, r4
 80156ca:	f7fa f995 	bl	800f9f8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	4618      	mov	r0, r3
 80156d2:	370c      	adds	r7, #12
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd90      	pop	{r4, r7, pc}

080156d8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 80156d8:	b580      	push	{r7, lr}
 80156da:	b084      	sub	sp, #16
 80156dc:	af00      	add	r7, sp, #0
 80156de:	60f8      	str	r0, [r7, #12]
 80156e0:	60b9      	str	r1, [r7, #8]
 80156e2:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	68ba      	ldr	r2, [r7, #8]
 80156e8:	6879      	ldr	r1, [r7, #4]
 80156ea:	4618      	mov	r0, r3
 80156ec:	f000 f85b 	bl	80157a6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 80156f0:	eef0 7a40 	vmov.f32	s15, s0
 80156f4:	eeb0 0a67 	vmov.f32	s0, s15
 80156f8:	3710      	adds	r7, #16
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd80      	pop	{r7, pc}

080156fe <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80156fe:	b580      	push	{r7, lr}
 8015700:	b082      	sub	sp, #8
 8015702:	af00      	add	r7, sp, #0
 8015704:	6078      	str	r0, [r7, #4]
 8015706:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015708:	2201      	movs	r2, #1
 801570a:	2100      	movs	r1, #0
 801570c:	6878      	ldr	r0, [r7, #4]
 801570e:	f7ff ffe3 	bl	80156d8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015712:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015716:	eeb0 0a67 	vmov.f32	s0, s15
 801571a:	3708      	adds	r7, #8
 801571c:	46bd      	mov	sp, r7
 801571e:	bd80      	pop	{r7, pc}

08015720 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015720:	b580      	push	{r7, lr}
 8015722:	b082      	sub	sp, #8
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
 8015728:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801572a:	2202      	movs	r2, #2
 801572c:	2100      	movs	r1, #0
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	f7ff ffd2 	bl	80156d8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015734:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015738:	eeb0 0a67 	vmov.f32	s0, s15
 801573c:	3708      	adds	r7, #8
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}

08015742 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8015742:	b480      	push	{r7}
 8015744:	b083      	sub	sp, #12
 8015746:	af00      	add	r7, sp, #0
 8015748:	6078      	str	r0, [r7, #4]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	3330      	adds	r3, #48	; 0x30
 801574e:	4618      	mov	r0, r3
 8015750:	370c      	adds	r7, #12
 8015752:	46bd      	mov	sp, r7
 8015754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015758:	4770      	bx	lr

0801575a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 801575a:	b480      	push	{r7}
 801575c:	b083      	sub	sp, #12
 801575e:	af00      	add	r7, sp, #0
 8015760:	6078      	str	r0, [r7, #4]
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	4618      	mov	r0, r3
 8015766:	370c      	adds	r7, #12
 8015768:	46bd      	mov	sp, r7
 801576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576e:	4770      	bx	lr

08015770 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8015770:	b480      	push	{r7}
 8015772:	b083      	sub	sp, #12
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	3318      	adds	r3, #24
 801577c:	4618      	mov	r0, r3
 801577e:	370c      	adds	r7, #12
 8015780:	46bd      	mov	sp, r7
 8015782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015786:	4770      	bx	lr

08015788 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8015788:	b580      	push	{r7, lr}
 801578a:	b082      	sub	sp, #8
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
 8015790:	6039      	str	r1, [r7, #0]
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	6839      	ldr	r1, [r7, #0]
 8015796:	4618      	mov	r0, r3
 8015798:	f000 f835 	bl	8015806 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	4618      	mov	r0, r3
 80157a0:	3708      	adds	r7, #8
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}

080157a6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80157a6:	b590      	push	{r4, r7, lr}
 80157a8:	b087      	sub	sp, #28
 80157aa:	af00      	add	r7, sp, #0
 80157ac:	60f8      	str	r0, [r7, #12]
 80157ae:	60b9      	str	r1, [r7, #8]
 80157b0:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	4618      	mov	r0, r3
 80157b6:	f000 f835 	bl	8015824 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 80157ba:	4604      	mov	r4, r0
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	3304      	adds	r3, #4
 80157c0:	687a      	ldr	r2, [r7, #4]
 80157c2:	68b9      	ldr	r1, [r7, #8]
 80157c4:	4618      	mov	r0, r3
 80157c6:	f000 f838 	bl	801583a <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>
 80157ca:	eef0 7a40 	vmov.f32	s15, s0
 80157ce:	edc7 7a04 	vstr	s15, [r7, #16]
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	330c      	adds	r3, #12
 80157d6:	687a      	ldr	r2, [r7, #4]
 80157d8:	68b9      	ldr	r1, [r7, #8]
 80157da:	4618      	mov	r0, r3
 80157dc:	f7fa fd4e 	bl	801027c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 80157e0:	eef0 7a40 	vmov.f32	s15, s0
 80157e4:	edc7 7a05 	vstr	s15, [r7, #20]
 80157e8:	f107 0214 	add.w	r2, r7, #20
 80157ec:	f107 0310 	add.w	r3, r7, #16
 80157f0:	4619      	mov	r1, r3
 80157f2:	4620      	mov	r0, r4
 80157f4:	f7f9 fc34 	bl	800f060 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80157f8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80157fc:	eeb0 0a67 	vmov.f32	s0, s15
 8015800:	371c      	adds	r7, #28
 8015802:	46bd      	mov	sp, r7
 8015804:	bd90      	pop	{r4, r7, pc}

08015806 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8015806:	b580      	push	{r7, lr}
 8015808:	b082      	sub	sp, #8
 801580a:	af00      	add	r7, sp, #0
 801580c:	6078      	str	r0, [r7, #4]
 801580e:	6039      	str	r1, [r7, #0]
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	6839      	ldr	r1, [r7, #0]
 8015814:	4618      	mov	r0, r3
 8015816:	f000 f823 	bl	8015860 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	4618      	mov	r0, r3
 801581e:	3708      	adds	r7, #8
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}

08015824 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8015824:	b480      	push	{r7}
 8015826:	b083      	sub	sp, #12
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	4618      	mov	r0, r3
 8015830:	370c      	adds	r7, #12
 8015832:	46bd      	mov	sp, r7
 8015834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015838:	4770      	bx	lr

0801583a <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801583a:	b580      	push	{r7, lr}
 801583c:	b084      	sub	sp, #16
 801583e:	af00      	add	r7, sp, #0
 8015840:	60f8      	str	r0, [r7, #12]
 8015842:	60b9      	str	r1, [r7, #8]
 8015844:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	68ba      	ldr	r2, [r7, #8]
 801584a:	6879      	ldr	r1, [r7, #4]
 801584c:	4618      	mov	r0, r3
 801584e:	f000 f81d 	bl	801588c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>
 8015852:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015856:	eeb0 0a67 	vmov.f32	s0, s15
 801585a:	3710      	adds	r7, #16
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}

08015860 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8015860:	b590      	push	{r4, r7, lr}
 8015862:	b083      	sub	sp, #12
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	6039      	str	r1, [r7, #0]
 801586a:	6878      	ldr	r0, [r7, #4]
 801586c:	f000 f83a 	bl	80158e4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015870:	687c      	ldr	r4, [r7, #4]
 8015872:	6838      	ldr	r0, [r7, #0]
 8015874:	f000 f82b 	bl	80158ce <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>
 8015878:	4603      	mov	r3, r0
 801587a:	4619      	mov	r1, r3
 801587c:	4620      	mov	r0, r4
 801587e:	f000 f83c 	bl	80158fa <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	4618      	mov	r0, r3
 8015886:	370c      	adds	r7, #12
 8015888:	46bd      	mov	sp, r7
 801588a:	bd90      	pop	{r4, r7, pc}

0801588c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801588c:	b5b0      	push	{r4, r5, r7, lr}
 801588e:	b084      	sub	sp, #16
 8015890:	af00      	add	r7, sp, #0
 8015892:	60f8      	str	r0, [r7, #12]
 8015894:	60b9      	str	r1, [r7, #8]
 8015896:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	681c      	ldr	r4, [r3, #0]
 801589c:	68f8      	ldr	r0, [r7, #12]
 801589e:	f000 f83b 	bl	8015918 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>
 80158a2:	4602      	mov	r2, r0
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	fb03 f502 	mul.w	r5, r3, r2
 80158aa:	68f8      	ldr	r0, [r7, #12]
 80158ac:	f000 f83f 	bl	801592e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>
 80158b0:	4602      	mov	r2, r0
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	fb02 f303 	mul.w	r3, r2, r3
 80158b8:	442b      	add	r3, r5
 80158ba:	009b      	lsls	r3, r3, #2
 80158bc:	4423      	add	r3, r4
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	ee07 3a90 	vmov	s15, r3
  }
 80158c4:	eeb0 0a67 	vmov.f32	s0, s15
 80158c8:	3710      	adds	r7, #16
 80158ca:	46bd      	mov	sp, r7
 80158cc:	bdb0      	pop	{r4, r5, r7, pc}

080158ce <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 80158ce:	b480      	push	{r7}
 80158d0:	b083      	sub	sp, #12
 80158d2:	af00      	add	r7, sp, #0
 80158d4:	6078      	str	r0, [r7, #4]
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	4618      	mov	r0, r3
 80158da:	370c      	adds	r7, #12
 80158dc:	46bd      	mov	sp, r7
 80158de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e2:	4770      	bx	lr

080158e4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80158e4:	b480      	push	{r7}
 80158e6:	b083      	sub	sp, #12
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	4618      	mov	r0, r3
 80158f0:	370c      	adds	r7, #12
 80158f2:	46bd      	mov	sp, r7
 80158f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f8:	4770      	bx	lr

080158fa <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80158fa:	b580      	push	{r7, lr}
 80158fc:	b082      	sub	sp, #8
 80158fe:	af00      	add	r7, sp, #0
 8015900:	6078      	str	r0, [r7, #4]
 8015902:	6039      	str	r1, [r7, #0]
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	6839      	ldr	r1, [r7, #0]
 8015908:	4618      	mov	r0, r3
 801590a:	f000 f81b 	bl	8015944 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	4618      	mov	r0, r3
 8015912:	3708      	adds	r7, #8
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}

08015918 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8015918:	b580      	push	{r7, lr}
 801591a:	b082      	sub	sp, #8
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8015920:	f7f0 ff9f 	bl	8006862 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8015924:	4603      	mov	r3, r0
  }
 8015926:	4618      	mov	r0, r3
 8015928:	3708      	adds	r7, #8
 801592a:	46bd      	mov	sp, r7
 801592c:	bd80      	pop	{r7, pc}

0801592e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 801592e:	b580      	push	{r7, lr}
 8015930:	b082      	sub	sp, #8
 8015932:	af00      	add	r7, sp, #0
 8015934:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8015936:	f7f0 ff8c 	bl	8006852 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801593a:	4603      	mov	r3, r0
  }
 801593c:	4618      	mov	r0, r3
 801593e:	3708      	adds	r7, #8
 8015940:	46bd      	mov	sp, r7
 8015942:	bd80      	pop	{r7, pc}

08015944 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8015944:	b580      	push	{r7, lr}
 8015946:	b082      	sub	sp, #8
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
 801594c:	6039      	str	r1, [r7, #0]
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	6839      	ldr	r1, [r7, #0]
 8015952:	4618      	mov	r0, r3
 8015954:	f000 f805 	bl	8015962 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>
  }
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	4618      	mov	r0, r3
 801595c:	3708      	adds	r7, #8
 801595e:	46bd      	mov	sp, r7
 8015960:	bd80      	pop	{r7, pc}

08015962 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8015962:	b580      	push	{r7, lr}
 8015964:	b082      	sub	sp, #8
 8015966:	af00      	add	r7, sp, #0
 8015968:	6078      	str	r0, [r7, #4]
 801596a:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	6839      	ldr	r1, [r7, #0]
 8015970:	4618      	mov	r0, r3
 8015972:	f000 f80a 	bl	801598a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8015976:	683b      	ldr	r3, [r7, #0]
 8015978:	4618      	mov	r0, r3
 801597a:	f000 f830 	bl	80159de <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 801597e:	bf00      	nop
  }
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	4618      	mov	r0, r3
 8015984:	3708      	adds	r7, #8
 8015986:	46bd      	mov	sp, r7
 8015988:	bd80      	pop	{r7, pc}

0801598a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 801598a:	b590      	push	{r4, r7, lr}
 801598c:	b083      	sub	sp, #12
 801598e:	af00      	add	r7, sp, #0
 8015990:	6078      	str	r0, [r7, #4]
 8015992:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8015994:	6878      	ldr	r0, [r7, #4]
 8015996:	f000 f84a 	bl	8015a2e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	4618      	mov	r0, r3
 801599e:	f000 f81e 	bl	80159de <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 80159a2:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	601a      	str	r2, [r3, #0]
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	1d1c      	adds	r4, r3, #4
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	4618      	mov	r0, r3
 80159b0:	f000 f821 	bl	80159f6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>
 80159b4:	4603      	mov	r3, r0
 80159b6:	4619      	mov	r1, r3
 80159b8:	4620      	mov	r0, r4
 80159ba:	f7f0 ff25 	bl	8006808 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	1d5c      	adds	r4, r3, #5
 80159c2:	683b      	ldr	r3, [r7, #0]
 80159c4:	4618      	mov	r0, r3
 80159c6:	f000 f824 	bl	8015a12 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>
 80159ca:	4603      	mov	r3, r0
 80159cc:	4619      	mov	r1, r3
 80159ce:	4620      	mov	r0, r4
 80159d0:	f7f0 ff00 	bl	80067d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	4618      	mov	r0, r3
 80159d8:	370c      	adds	r7, #12
 80159da:	46bd      	mov	sp, r7
 80159dc:	bd90      	pop	{r4, r7, pc}

080159de <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80159de:	b480      	push	{r7}
 80159e0:	b083      	sub	sp, #12
 80159e2:	af00      	add	r7, sp, #0
 80159e4:	6078      	str	r0, [r7, #4]
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	4618      	mov	r0, r3
 80159ec:	370c      	adds	r7, #12
 80159ee:	46bd      	mov	sp, r7
 80159f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f4:	4770      	bx	lr

080159f6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80159f6:	b580      	push	{r7, lr}
 80159f8:	b082      	sub	sp, #8
 80159fa:	af00      	add	r7, sp, #0
 80159fc:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	689b      	ldr	r3, [r3, #8]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7fd fcf8 	bl	80133f8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8015a08:	4603      	mov	r3, r0
    }
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3708      	adds	r7, #8
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}

08015a12 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8015a12:	b580      	push	{r7, lr}
 8015a14:	b082      	sub	sp, #8
 8015a16:	af00      	add	r7, sp, #0
 8015a18:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	689b      	ldr	r3, [r3, #8]
 8015a1e:	4618      	mov	r0, r3
 8015a20:	f7fc ffa6 	bl	8012970 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015a24:	4603      	mov	r3, r0
    }
 8015a26:	4618      	mov	r0, r3
 8015a28:	3708      	adds	r7, #8
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	bd80      	pop	{r7, pc}

08015a2e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015a2e:	b480      	push	{r7}
 8015a30:	b083      	sub	sp, #12
 8015a32:	af00      	add	r7, sp, #0
 8015a34:	6078      	str	r0, [r7, #4]
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	4618      	mov	r0, r3
 8015a3a:	370c      	adds	r7, #12
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a42:	4770      	bx	lr

08015a44 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8015a44:	b590      	push	{r4, r7, lr}
 8015a46:	b083      	sub	sp, #12
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
 8015a4c:	6039      	str	r1, [r7, #0]
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	2b01      	cmp	r3, #1
 8015a52:	d141      	bne.n	8015ad8 <_Z41__static_initialization_and_destruction_0ii+0x94>
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a5a:	4293      	cmp	r3, r2
 8015a5c:	d13c      	bne.n	8015ad8 <_Z41__static_initialization_and_destruction_0ii+0x94>
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 8015a5e:	4820      	ldr	r0, [pc, #128]	; (8015ae0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8015a60:	f7ee f9fb 	bl	8003e5a <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 8015a64:	481f      	ldr	r0, [pc, #124]	; (8015ae4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8015a66:	f7ee fa03 	bl	8003e70 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 8015a6a:	481e      	ldr	r0, [pc, #120]	; (8015ae4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8015a6c:	f7ee fa0b 	bl	8003e86 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 8015a70:	4621      	mov	r1, r4
 8015a72:	481b      	ldr	r0, [pc, #108]	; (8015ae0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8015a74:	f7ee fa12 	bl	8003e9c <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 8015a78:	481b      	ldr	r0, [pc, #108]	; (8015ae8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8015a7a:	f7eb fa6b 	bl	8000f54 <_ZN5Eigen8internal5all_tC1Ev>
Matrix <float,3,3> A ;
 8015a7e:	481b      	ldr	r0, [pc, #108]	; (8015aec <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8015a80:	f7ee fa31 	bl	8003ee6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> P ;
 8015a84:	481a      	ldr	r0, [pc, #104]	; (8015af0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8015a86:	f7ee fa2e 	bl	8003ee6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> O ;
 8015a8a:	481a      	ldr	r0, [pc, #104]	; (8015af4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8015a8c:	f7ee fa2b 	bl	8003ee6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> I ;
 8015a90:	4819      	ldr	r0, [pc, #100]	; (8015af8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8015a92:	f7ee fa28 	bl	8003ee6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,1,1> S ;
 8015a96:	4819      	ldr	r0, [pc, #100]	; (8015afc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8015a98:	f7ee fa34 	bl	8003f04 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> R ;
 8015a9c:	4818      	ldr	r0, [pc, #96]	; (8015b00 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8015a9e:	f7ee fa31 	bl	8003f04 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> D ;
 8015aa2:	4818      	ldr	r0, [pc, #96]	; (8015b04 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8015aa4:	f7ee fa2e 	bl	8003f04 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> Z ;
 8015aa8:	4817      	ldr	r0, [pc, #92]	; (8015b08 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8015aaa:	f7ee fa2b 	bl	8003f04 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,3,1> K ;
 8015aae:	4817      	ldr	r0, [pc, #92]	; (8015b0c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8015ab0:	f7ee fa37 	bl	8003f22 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,1,3> C ;
 8015ab4:	4816      	ldr	r0, [pc, #88]	; (8015b10 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8015ab6:	f7ee fa43 	bl	8003f40 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>
Matrix <float,3,1> G ;
 8015aba:	4816      	ldr	r0, [pc, #88]	; (8015b14 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8015abc:	f7ee fa31 	bl	8003f22 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,3,3> Q ;
 8015ac0:	4815      	ldr	r0, [pc, #84]	; (8015b18 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8015ac2:	f7ee fa10 	bl	8003ee6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Vector3f X;
 8015ac6:	4815      	ldr	r0, [pc, #84]	; (8015b1c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8015ac8:	f7ee fa2b 	bl	8003f22 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f X1;
 8015acc:	4814      	ldr	r0, [pc, #80]	; (8015b20 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8015ace:	f7ee fa28 	bl	8003f22 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f B;
 8015ad2:	4814      	ldr	r0, [pc, #80]	; (8015b24 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8015ad4:	f7ee fa25 	bl	8003f22 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
}
 8015ad8:	bf00      	nop
 8015ada:	370c      	adds	r7, #12
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd90      	pop	{r4, r7, pc}
 8015ae0:	2000026c 	.word	0x2000026c
 8015ae4:	200007e8 	.word	0x200007e8
 8015ae8:	20000270 	.word	0x20000270
 8015aec:	200005c4 	.word	0x200005c4
 8015af0:	200005e8 	.word	0x200005e8
 8015af4:	2000060c 	.word	0x2000060c
 8015af8:	20000630 	.word	0x20000630
 8015afc:	20000654 	.word	0x20000654
 8015b00:	20000658 	.word	0x20000658
 8015b04:	2000065c 	.word	0x2000065c
 8015b08:	20000660 	.word	0x20000660
 8015b0c:	20000664 	.word	0x20000664
 8015b10:	20000670 	.word	0x20000670
 8015b14:	2000067c 	.word	0x2000067c
 8015b18:	20000688 	.word	0x20000688
 8015b1c:	200006ac 	.word	0x200006ac
 8015b20:	200006b8 	.word	0x200006b8
 8015b24:	200006c4 	.word	0x200006c4

08015b28 <_GLOBAL__sub_I_hi2c1>:
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	af00      	add	r7, sp, #0
 8015b2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015b30:	2001      	movs	r0, #1
 8015b32:	f7ff ff87 	bl	8015a44 <_Z41__static_initialization_and_destruction_0ii>
 8015b36:	bd80      	pop	{r7, pc}

08015b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b082      	sub	sp, #8
 8015b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015b3e:	2300      	movs	r3, #0
 8015b40:	607b      	str	r3, [r7, #4]
 8015b42:	4b10      	ldr	r3, [pc, #64]	; (8015b84 <HAL_MspInit+0x4c>)
 8015b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b46:	4a0f      	ldr	r2, [pc, #60]	; (8015b84 <HAL_MspInit+0x4c>)
 8015b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8015b4e:	4b0d      	ldr	r3, [pc, #52]	; (8015b84 <HAL_MspInit+0x4c>)
 8015b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015b56:	607b      	str	r3, [r7, #4]
 8015b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	603b      	str	r3, [r7, #0]
 8015b5e:	4b09      	ldr	r3, [pc, #36]	; (8015b84 <HAL_MspInit+0x4c>)
 8015b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b62:	4a08      	ldr	r2, [pc, #32]	; (8015b84 <HAL_MspInit+0x4c>)
 8015b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015b68:	6413      	str	r3, [r2, #64]	; 0x40
 8015b6a:	4b06      	ldr	r3, [pc, #24]	; (8015b84 <HAL_MspInit+0x4c>)
 8015b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015b72:	603b      	str	r3, [r7, #0]
 8015b74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8015b76:	2007      	movs	r0, #7
 8015b78:	f000 fd14 	bl	80165a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015b7c:	bf00      	nop
 8015b7e:	3708      	adds	r7, #8
 8015b80:	46bd      	mov	sp, r7
 8015b82:	bd80      	pop	{r7, pc}
 8015b84:	40023800 	.word	0x40023800

08015b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b08c      	sub	sp, #48	; 0x30
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015b90:	f107 031c 	add.w	r3, r7, #28
 8015b94:	2200      	movs	r2, #0
 8015b96:	601a      	str	r2, [r3, #0]
 8015b98:	605a      	str	r2, [r3, #4]
 8015b9a:	609a      	str	r2, [r3, #8]
 8015b9c:	60da      	str	r2, [r3, #12]
 8015b9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	4a52      	ldr	r2, [pc, #328]	; (8015cf0 <HAL_I2C_MspInit+0x168>)
 8015ba6:	4293      	cmp	r3, r2
 8015ba8:	d13d      	bne.n	8015c26 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015baa:	2300      	movs	r3, #0
 8015bac:	61bb      	str	r3, [r7, #24]
 8015bae:	4b51      	ldr	r3, [pc, #324]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bb2:	4a50      	ldr	r2, [pc, #320]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015bb4:	f043 0302 	orr.w	r3, r3, #2
 8015bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8015bba:	4b4e      	ldr	r3, [pc, #312]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bbe:	f003 0302 	and.w	r3, r3, #2
 8015bc2:	61bb      	str	r3, [r7, #24]
 8015bc4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8015bc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8015bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015bcc:	2312      	movs	r3, #18
 8015bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015bd4:	2303      	movs	r3, #3
 8015bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015bd8:	2304      	movs	r3, #4
 8015bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015bdc:	f107 031c 	add.w	r3, r7, #28
 8015be0:	4619      	mov	r1, r3
 8015be2:	4845      	ldr	r0, [pc, #276]	; (8015cf8 <HAL_I2C_MspInit+0x170>)
 8015be4:	f001 f930 	bl	8016e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8015be8:	2300      	movs	r3, #0
 8015bea:	617b      	str	r3, [r7, #20]
 8015bec:	4b41      	ldr	r3, [pc, #260]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bf0:	4a40      	ldr	r2, [pc, #256]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015bf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8015bf8:	4b3e      	ldr	r3, [pc, #248]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015c00:	617b      	str	r3, [r7, #20]
 8015c02:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8015c04:	2200      	movs	r2, #0
 8015c06:	2100      	movs	r1, #0
 8015c08:	201f      	movs	r0, #31
 8015c0a:	f000 fcd6 	bl	80165ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8015c0e:	201f      	movs	r0, #31
 8015c10:	f000 fcef 	bl	80165f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8015c14:	2200      	movs	r2, #0
 8015c16:	2100      	movs	r1, #0
 8015c18:	2020      	movs	r0, #32
 8015c1a:	f000 fcce 	bl	80165ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8015c1e:	2020      	movs	r0, #32
 8015c20:	f000 fce7 	bl	80165f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8015c24:	e060      	b.n	8015ce8 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	4a34      	ldr	r2, [pc, #208]	; (8015cfc <HAL_I2C_MspInit+0x174>)
 8015c2c:	4293      	cmp	r3, r2
 8015c2e:	d15b      	bne.n	8015ce8 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015c30:	2300      	movs	r3, #0
 8015c32:	613b      	str	r3, [r7, #16]
 8015c34:	4b2f      	ldr	r3, [pc, #188]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c38:	4a2e      	ldr	r2, [pc, #184]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015c3a:	f043 0304 	orr.w	r3, r3, #4
 8015c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8015c40:	4b2c      	ldr	r3, [pc, #176]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c44:	f003 0304 	and.w	r3, r3, #4
 8015c48:	613b      	str	r3, [r7, #16]
 8015c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	60fb      	str	r3, [r7, #12]
 8015c50:	4b28      	ldr	r3, [pc, #160]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c54:	4a27      	ldr	r2, [pc, #156]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015c56:	f043 0301 	orr.w	r3, r3, #1
 8015c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8015c5c:	4b25      	ldr	r3, [pc, #148]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c60:	f003 0301 	and.w	r3, r3, #1
 8015c64:	60fb      	str	r3, [r7, #12]
 8015c66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8015c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015c6e:	2312      	movs	r3, #18
 8015c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c72:	2300      	movs	r3, #0
 8015c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c76:	2303      	movs	r3, #3
 8015c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8015c7a:	2304      	movs	r3, #4
 8015c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015c7e:	f107 031c 	add.w	r3, r7, #28
 8015c82:	4619      	mov	r1, r3
 8015c84:	481e      	ldr	r0, [pc, #120]	; (8015d00 <HAL_I2C_MspInit+0x178>)
 8015c86:	f001 f8df 	bl	8016e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8015c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015c90:	2312      	movs	r3, #18
 8015c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c94:	2300      	movs	r3, #0
 8015c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c98:	2303      	movs	r3, #3
 8015c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8015c9c:	2304      	movs	r3, #4
 8015c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015ca0:	f107 031c 	add.w	r3, r7, #28
 8015ca4:	4619      	mov	r1, r3
 8015ca6:	4817      	ldr	r0, [pc, #92]	; (8015d04 <HAL_I2C_MspInit+0x17c>)
 8015ca8:	f001 f8ce 	bl	8016e48 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8015cac:	2300      	movs	r3, #0
 8015cae:	60bb      	str	r3, [r7, #8]
 8015cb0:	4b10      	ldr	r3, [pc, #64]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cb4:	4a0f      	ldr	r2, [pc, #60]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015cb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015cba:	6413      	str	r3, [r2, #64]	; 0x40
 8015cbc:	4b0d      	ldr	r3, [pc, #52]	; (8015cf4 <HAL_I2C_MspInit+0x16c>)
 8015cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015cc4:	60bb      	str	r3, [r7, #8]
 8015cc6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8015cc8:	2200      	movs	r2, #0
 8015cca:	2100      	movs	r1, #0
 8015ccc:	2048      	movs	r0, #72	; 0x48
 8015cce:	f000 fc74 	bl	80165ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8015cd2:	2048      	movs	r0, #72	; 0x48
 8015cd4:	f000 fc8d 	bl	80165f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8015cd8:	2200      	movs	r2, #0
 8015cda:	2100      	movs	r1, #0
 8015cdc:	2049      	movs	r0, #73	; 0x49
 8015cde:	f000 fc6c 	bl	80165ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8015ce2:	2049      	movs	r0, #73	; 0x49
 8015ce4:	f000 fc85 	bl	80165f2 <HAL_NVIC_EnableIRQ>
}
 8015ce8:	bf00      	nop
 8015cea:	3730      	adds	r7, #48	; 0x30
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}
 8015cf0:	40005400 	.word	0x40005400
 8015cf4:	40023800 	.word	0x40023800
 8015cf8:	40020400 	.word	0x40020400
 8015cfc:	40005c00 	.word	0x40005c00
 8015d00:	40020800 	.word	0x40020800
 8015d04:	40020000 	.word	0x40020000

08015d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b086      	sub	sp, #24
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	4a26      	ldr	r2, [pc, #152]	; (8015db0 <HAL_TIM_Base_MspInit+0xa8>)
 8015d16:	4293      	cmp	r3, r2
 8015d18:	d10e      	bne.n	8015d38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	617b      	str	r3, [r7, #20]
 8015d1e:	4b25      	ldr	r3, [pc, #148]	; (8015db4 <HAL_TIM_Base_MspInit+0xac>)
 8015d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d22:	4a24      	ldr	r2, [pc, #144]	; (8015db4 <HAL_TIM_Base_MspInit+0xac>)
 8015d24:	f043 0304 	orr.w	r3, r3, #4
 8015d28:	6413      	str	r3, [r2, #64]	; 0x40
 8015d2a:	4b22      	ldr	r3, [pc, #136]	; (8015db4 <HAL_TIM_Base_MspInit+0xac>)
 8015d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d2e:	f003 0304 	and.w	r3, r3, #4
 8015d32:	617b      	str	r3, [r7, #20]
 8015d34:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8015d36:	e036      	b.n	8015da6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	4a1e      	ldr	r2, [pc, #120]	; (8015db8 <HAL_TIM_Base_MspInit+0xb0>)
 8015d3e:	4293      	cmp	r3, r2
 8015d40:	d116      	bne.n	8015d70 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8015d42:	2300      	movs	r3, #0
 8015d44:	613b      	str	r3, [r7, #16]
 8015d46:	4b1b      	ldr	r3, [pc, #108]	; (8015db4 <HAL_TIM_Base_MspInit+0xac>)
 8015d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d4a:	4a1a      	ldr	r2, [pc, #104]	; (8015db4 <HAL_TIM_Base_MspInit+0xac>)
 8015d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015d50:	6453      	str	r3, [r2, #68]	; 0x44
 8015d52:	4b18      	ldr	r3, [pc, #96]	; (8015db4 <HAL_TIM_Base_MspInit+0xac>)
 8015d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015d5a:	613b      	str	r3, [r7, #16]
 8015d5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8015d5e:	2200      	movs	r2, #0
 8015d60:	2100      	movs	r1, #0
 8015d62:	2019      	movs	r0, #25
 8015d64:	f000 fc29 	bl	80165ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8015d68:	2019      	movs	r0, #25
 8015d6a:	f000 fc42 	bl	80165f2 <HAL_NVIC_EnableIRQ>
}
 8015d6e:	e01a      	b.n	8015da6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	4a11      	ldr	r2, [pc, #68]	; (8015dbc <HAL_TIM_Base_MspInit+0xb4>)
 8015d76:	4293      	cmp	r3, r2
 8015d78:	d115      	bne.n	8015da6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	60fb      	str	r3, [r7, #12]
 8015d7e:	4b0d      	ldr	r3, [pc, #52]	; (8015db4 <HAL_TIM_Base_MspInit+0xac>)
 8015d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d82:	4a0c      	ldr	r2, [pc, #48]	; (8015db4 <HAL_TIM_Base_MspInit+0xac>)
 8015d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015d88:	6453      	str	r3, [r2, #68]	; 0x44
 8015d8a:	4b0a      	ldr	r3, [pc, #40]	; (8015db4 <HAL_TIM_Base_MspInit+0xac>)
 8015d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015d92:	60fb      	str	r3, [r7, #12]
 8015d94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8015d96:	2200      	movs	r2, #0
 8015d98:	2100      	movs	r1, #0
 8015d9a:	201a      	movs	r0, #26
 8015d9c:	f000 fc0d 	bl	80165ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8015da0:	201a      	movs	r0, #26
 8015da2:	f000 fc26 	bl	80165f2 <HAL_NVIC_EnableIRQ>
}
 8015da6:	bf00      	nop
 8015da8:	3718      	adds	r7, #24
 8015daa:	46bd      	mov	sp, r7
 8015dac:	bd80      	pop	{r7, pc}
 8015dae:	bf00      	nop
 8015db0:	40000800 	.word	0x40000800
 8015db4:	40023800 	.word	0x40023800
 8015db8:	40014400 	.word	0x40014400
 8015dbc:	40014800 	.word	0x40014800

08015dc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b088      	sub	sp, #32
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015dc8:	f107 030c 	add.w	r3, r7, #12
 8015dcc:	2200      	movs	r2, #0
 8015dce:	601a      	str	r2, [r3, #0]
 8015dd0:	605a      	str	r2, [r3, #4]
 8015dd2:	609a      	str	r2, [r3, #8]
 8015dd4:	60da      	str	r2, [r3, #12]
 8015dd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	4a12      	ldr	r2, [pc, #72]	; (8015e28 <HAL_TIM_MspPostInit+0x68>)
 8015dde:	4293      	cmp	r3, r2
 8015de0:	d11d      	bne.n	8015e1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015de2:	2300      	movs	r3, #0
 8015de4:	60bb      	str	r3, [r7, #8]
 8015de6:	4b11      	ldr	r3, [pc, #68]	; (8015e2c <HAL_TIM_MspPostInit+0x6c>)
 8015de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dea:	4a10      	ldr	r2, [pc, #64]	; (8015e2c <HAL_TIM_MspPostInit+0x6c>)
 8015dec:	f043 0302 	orr.w	r3, r3, #2
 8015df0:	6313      	str	r3, [r2, #48]	; 0x30
 8015df2:	4b0e      	ldr	r3, [pc, #56]	; (8015e2c <HAL_TIM_MspPostInit+0x6c>)
 8015df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015df6:	f003 0302 	and.w	r3, r3, #2
 8015dfa:	60bb      	str	r3, [r7, #8]
 8015dfc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 8015dfe:	2340      	movs	r3, #64	; 0x40
 8015e00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e02:	2302      	movs	r3, #2
 8015e04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e06:	2300      	movs	r3, #0
 8015e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8015e0e:	2302      	movs	r3, #2
 8015e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 8015e12:	f107 030c 	add.w	r3, r7, #12
 8015e16:	4619      	mov	r1, r3
 8015e18:	4805      	ldr	r0, [pc, #20]	; (8015e30 <HAL_TIM_MspPostInit+0x70>)
 8015e1a:	f001 f815 	bl	8016e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8015e1e:	bf00      	nop
 8015e20:	3720      	adds	r7, #32
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}
 8015e26:	bf00      	nop
 8015e28:	40000800 	.word	0x40000800
 8015e2c:	40023800 	.word	0x40023800
 8015e30:	40020400 	.word	0x40020400

08015e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b08a      	sub	sp, #40	; 0x28
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015e3c:	f107 0314 	add.w	r3, r7, #20
 8015e40:	2200      	movs	r2, #0
 8015e42:	601a      	str	r2, [r3, #0]
 8015e44:	605a      	str	r2, [r3, #4]
 8015e46:	609a      	str	r2, [r3, #8]
 8015e48:	60da      	str	r2, [r3, #12]
 8015e4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	4a4b      	ldr	r2, [pc, #300]	; (8015f80 <HAL_UART_MspInit+0x14c>)
 8015e52:	4293      	cmp	r3, r2
 8015e54:	f040 8090 	bne.w	8015f78 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8015e58:	2300      	movs	r3, #0
 8015e5a:	613b      	str	r3, [r7, #16]
 8015e5c:	4b49      	ldr	r3, [pc, #292]	; (8015f84 <HAL_UART_MspInit+0x150>)
 8015e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e60:	4a48      	ldr	r2, [pc, #288]	; (8015f84 <HAL_UART_MspInit+0x150>)
 8015e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015e66:	6413      	str	r3, [r2, #64]	; 0x40
 8015e68:	4b46      	ldr	r3, [pc, #280]	; (8015f84 <HAL_UART_MspInit+0x150>)
 8015e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015e70:	613b      	str	r3, [r7, #16]
 8015e72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015e74:	2300      	movs	r3, #0
 8015e76:	60fb      	str	r3, [r7, #12]
 8015e78:	4b42      	ldr	r3, [pc, #264]	; (8015f84 <HAL_UART_MspInit+0x150>)
 8015e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e7c:	4a41      	ldr	r2, [pc, #260]	; (8015f84 <HAL_UART_MspInit+0x150>)
 8015e7e:	f043 0301 	orr.w	r3, r3, #1
 8015e82:	6313      	str	r3, [r2, #48]	; 0x30
 8015e84:	4b3f      	ldr	r3, [pc, #252]	; (8015f84 <HAL_UART_MspInit+0x150>)
 8015e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e88:	f003 0301 	and.w	r3, r3, #1
 8015e8c:	60fb      	str	r3, [r7, #12]
 8015e8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8015e90:	230c      	movs	r3, #12
 8015e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e94:	2302      	movs	r3, #2
 8015e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e98:	2300      	movs	r3, #0
 8015e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e9c:	2303      	movs	r3, #3
 8015e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8015ea0:	2307      	movs	r3, #7
 8015ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015ea4:	f107 0314 	add.w	r3, r7, #20
 8015ea8:	4619      	mov	r1, r3
 8015eaa:	4837      	ldr	r0, [pc, #220]	; (8015f88 <HAL_UART_MspInit+0x154>)
 8015eac:	f000 ffcc 	bl	8016e48 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream7;
 8015eb0:	4b36      	ldr	r3, [pc, #216]	; (8015f8c <HAL_UART_MspInit+0x158>)
 8015eb2:	4a37      	ldr	r2, [pc, #220]	; (8015f90 <HAL_UART_MspInit+0x15c>)
 8015eb4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 8015eb6:	4b35      	ldr	r3, [pc, #212]	; (8015f8c <HAL_UART_MspInit+0x158>)
 8015eb8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8015ebc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015ebe:	4b33      	ldr	r3, [pc, #204]	; (8015f8c <HAL_UART_MspInit+0x158>)
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015ec4:	4b31      	ldr	r3, [pc, #196]	; (8015f8c <HAL_UART_MspInit+0x158>)
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8015eca:	4b30      	ldr	r3, [pc, #192]	; (8015f8c <HAL_UART_MspInit+0x158>)
 8015ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015ed0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8015ed2:	4b2e      	ldr	r3, [pc, #184]	; (8015f8c <HAL_UART_MspInit+0x158>)
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8015ed8:	4b2c      	ldr	r3, [pc, #176]	; (8015f8c <HAL_UART_MspInit+0x158>)
 8015eda:	2200      	movs	r2, #0
 8015edc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8015ede:	4b2b      	ldr	r3, [pc, #172]	; (8015f8c <HAL_UART_MspInit+0x158>)
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8015ee4:	4b29      	ldr	r3, [pc, #164]	; (8015f8c <HAL_UART_MspInit+0x158>)
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015eea:	4b28      	ldr	r3, [pc, #160]	; (8015f8c <HAL_UART_MspInit+0x158>)
 8015eec:	2200      	movs	r2, #0
 8015eee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8015ef0:	4826      	ldr	r0, [pc, #152]	; (8015f8c <HAL_UART_MspInit+0x158>)
 8015ef2:	f000 fb99 	bl	8016628 <HAL_DMA_Init>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d001      	beq.n	8015f00 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8015efc:	f7ed ffa8 	bl	8003e50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	4a22      	ldr	r2, [pc, #136]	; (8015f8c <HAL_UART_MspInit+0x158>)
 8015f04:	639a      	str	r2, [r3, #56]	; 0x38
 8015f06:	4a21      	ldr	r2, [pc, #132]	; (8015f8c <HAL_UART_MspInit+0x158>)
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8015f0c:	4b21      	ldr	r3, [pc, #132]	; (8015f94 <HAL_UART_MspInit+0x160>)
 8015f0e:	4a22      	ldr	r2, [pc, #136]	; (8015f98 <HAL_UART_MspInit+0x164>)
 8015f10:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8015f12:	4b20      	ldr	r3, [pc, #128]	; (8015f94 <HAL_UART_MspInit+0x160>)
 8015f14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015f18:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8015f1a:	4b1e      	ldr	r3, [pc, #120]	; (8015f94 <HAL_UART_MspInit+0x160>)
 8015f1c:	2240      	movs	r2, #64	; 0x40
 8015f1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015f20:	4b1c      	ldr	r3, [pc, #112]	; (8015f94 <HAL_UART_MspInit+0x160>)
 8015f22:	2200      	movs	r2, #0
 8015f24:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8015f26:	4b1b      	ldr	r3, [pc, #108]	; (8015f94 <HAL_UART_MspInit+0x160>)
 8015f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015f2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8015f2e:	4b19      	ldr	r3, [pc, #100]	; (8015f94 <HAL_UART_MspInit+0x160>)
 8015f30:	2200      	movs	r2, #0
 8015f32:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8015f34:	4b17      	ldr	r3, [pc, #92]	; (8015f94 <HAL_UART_MspInit+0x160>)
 8015f36:	2200      	movs	r2, #0
 8015f38:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8015f3a:	4b16      	ldr	r3, [pc, #88]	; (8015f94 <HAL_UART_MspInit+0x160>)
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8015f40:	4b14      	ldr	r3, [pc, #80]	; (8015f94 <HAL_UART_MspInit+0x160>)
 8015f42:	2200      	movs	r2, #0
 8015f44:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015f46:	4b13      	ldr	r3, [pc, #76]	; (8015f94 <HAL_UART_MspInit+0x160>)
 8015f48:	2200      	movs	r2, #0
 8015f4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8015f4c:	4811      	ldr	r0, [pc, #68]	; (8015f94 <HAL_UART_MspInit+0x160>)
 8015f4e:	f000 fb6b 	bl	8016628 <HAL_DMA_Init>
 8015f52:	4603      	mov	r3, r0
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d001      	beq.n	8015f5c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8015f58:	f7ed ff7a 	bl	8003e50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	4a0d      	ldr	r2, [pc, #52]	; (8015f94 <HAL_UART_MspInit+0x160>)
 8015f60:	635a      	str	r2, [r3, #52]	; 0x34
 8015f62:	4a0c      	ldr	r2, [pc, #48]	; (8015f94 <HAL_UART_MspInit+0x160>)
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8015f68:	2200      	movs	r2, #0
 8015f6a:	2100      	movs	r1, #0
 8015f6c:	2026      	movs	r0, #38	; 0x26
 8015f6e:	f000 fb24 	bl	80165ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8015f72:	2026      	movs	r0, #38	; 0x26
 8015f74:	f000 fb3d 	bl	80165f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8015f78:	bf00      	nop
 8015f7a:	3728      	adds	r7, #40	; 0x28
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd80      	pop	{r7, pc}
 8015f80:	40004400 	.word	0x40004400
 8015f84:	40023800 	.word	0x40023800
 8015f88:	40020000 	.word	0x40020000
 8015f8c:	20000438 	.word	0x20000438
 8015f90:	400260b8 	.word	0x400260b8
 8015f94:	20000498 	.word	0x20000498
 8015f98:	400260a0 	.word	0x400260a0

08015f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8015f9c:	b480      	push	{r7}
 8015f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8015fa0:	e7fe      	b.n	8015fa0 <NMI_Handler+0x4>

08015fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8015fa2:	b480      	push	{r7}
 8015fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8015fa6:	e7fe      	b.n	8015fa6 <HardFault_Handler+0x4>

08015fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8015fa8:	b480      	push	{r7}
 8015faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8015fac:	e7fe      	b.n	8015fac <MemManage_Handler+0x4>

08015fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8015fae:	b480      	push	{r7}
 8015fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8015fb2:	e7fe      	b.n	8015fb2 <BusFault_Handler+0x4>

08015fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8015fb4:	b480      	push	{r7}
 8015fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015fb8:	e7fe      	b.n	8015fb8 <UsageFault_Handler+0x4>

08015fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8015fba:	b480      	push	{r7}
 8015fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8015fbe:	bf00      	nop
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc6:	4770      	bx	lr

08015fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015fc8:	b480      	push	{r7}
 8015fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8015fcc:	bf00      	nop
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd4:	4770      	bx	lr

08015fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8015fd6:	b480      	push	{r7}
 8015fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8015fda:	bf00      	nop
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe2:	4770      	bx	lr

08015fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8015fe8:	f000 f9c8 	bl	801637c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8015fec:	bf00      	nop
 8015fee:	bd80      	pop	{r7, pc}

08015ff0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 8015ff4:	2004      	movs	r0, #4
 8015ff6:	f001 f8dd 	bl	80171b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8015ffa:	bf00      	nop
 8015ffc:	bd80      	pop	{r7, pc}
	...

08016000 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8016000:	b580      	push	{r7, lr}
 8016002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8016004:	4802      	ldr	r0, [pc, #8]	; (8016010 <DMA1_Stream6_IRQHandler+0x10>)
 8016006:	f000 fca7 	bl	8016958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 801600a:	bf00      	nop
 801600c:	bd80      	pop	{r7, pc}
 801600e:	bf00      	nop
 8016010:	20000498 	.word	0x20000498

08016014 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8016014:	b580      	push	{r7, lr}
 8016016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8016018:	4802      	ldr	r0, [pc, #8]	; (8016024 <TIM1_UP_TIM10_IRQHandler+0x10>)
 801601a:	f004 fdef 	bl	801abfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 801601e:	bf00      	nop
 8016020:	bd80      	pop	{r7, pc}
 8016022:	bf00      	nop
 8016024:	20000364 	.word	0x20000364

08016028 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 801602c:	4802      	ldr	r0, [pc, #8]	; (8016038 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 801602e:	f004 fde5 	bl	801abfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8016032:	bf00      	nop
 8016034:	bd80      	pop	{r7, pc}
 8016036:	bf00      	nop
 8016038:	200003ac 	.word	0x200003ac

0801603c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 801603c:	b580      	push	{r7, lr}
 801603e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8016040:	4802      	ldr	r0, [pc, #8]	; (801604c <I2C1_EV_IRQHandler+0x10>)
 8016042:	f001 fef7 	bl	8017e34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8016046:	bf00      	nop
 8016048:	bd80      	pop	{r7, pc}
 801604a:	bf00      	nop
 801604c:	20000274 	.word	0x20000274

08016050 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8016054:	4802      	ldr	r0, [pc, #8]	; (8016060 <I2C1_ER_IRQHandler+0x10>)
 8016056:	f002 f85e 	bl	8018116 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 801605a:	bf00      	nop
 801605c:	bd80      	pop	{r7, pc}
 801605e:	bf00      	nop
 8016060:	20000274 	.word	0x20000274

08016064 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8016068:	4802      	ldr	r0, [pc, #8]	; (8016074 <USART2_IRQHandler+0x10>)
 801606a:	f005 fd13 	bl	801ba94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 801606e:	bf00      	nop
 8016070:	bd80      	pop	{r7, pc}
 8016072:	bf00      	nop
 8016074:	200003f4 	.word	0x200003f4

08016078 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 801607c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8016080:	f001 f898 	bl	80171b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 8016084:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8016088:	f001 f894 	bl	80171b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 801608c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8016090:	f001 f890 	bl	80171b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8016094:	bf00      	nop
 8016096:	bd80      	pop	{r7, pc}

08016098 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 801609c:	4802      	ldr	r0, [pc, #8]	; (80160a8 <DMA1_Stream7_IRQHandler+0x10>)
 801609e:	f000 fc5b 	bl	8016958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80160a2:	bf00      	nop
 80160a4:	bd80      	pop	{r7, pc}
 80160a6:	bf00      	nop
 80160a8:	20000438 	.word	0x20000438

080160ac <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80160b0:	4802      	ldr	r0, [pc, #8]	; (80160bc <I2C3_EV_IRQHandler+0x10>)
 80160b2:	f001 febf 	bl	8017e34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80160b6:	bf00      	nop
 80160b8:	bd80      	pop	{r7, pc}
 80160ba:	bf00      	nop
 80160bc:	200002c8 	.word	0x200002c8

080160c0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80160c4:	4802      	ldr	r0, [pc, #8]	; (80160d0 <I2C3_ER_IRQHandler+0x10>)
 80160c6:	f002 f826 	bl	8018116 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80160ca:	bf00      	nop
 80160cc:	bd80      	pop	{r7, pc}
 80160ce:	bf00      	nop
 80160d0:	200002c8 	.word	0x200002c8

080160d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80160d4:	b480      	push	{r7}
 80160d6:	af00      	add	r7, sp, #0
	return 1;
 80160d8:	2301      	movs	r3, #1
}
 80160da:	4618      	mov	r0, r3
 80160dc:	46bd      	mov	sp, r7
 80160de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e2:	4770      	bx	lr

080160e4 <_kill>:

int _kill(int pid, int sig)
{
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b082      	sub	sp, #8
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
 80160ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80160ee:	f007 fd1b 	bl	801db28 <__errno>
 80160f2:	4603      	mov	r3, r0
 80160f4:	2216      	movs	r2, #22
 80160f6:	601a      	str	r2, [r3, #0]
	return -1;
 80160f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80160fc:	4618      	mov	r0, r3
 80160fe:	3708      	adds	r7, #8
 8016100:	46bd      	mov	sp, r7
 8016102:	bd80      	pop	{r7, pc}

08016104 <_exit>:

void _exit (int status)
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b082      	sub	sp, #8
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801610c:	f04f 31ff 	mov.w	r1, #4294967295
 8016110:	6878      	ldr	r0, [r7, #4]
 8016112:	f7ff ffe7 	bl	80160e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8016116:	e7fe      	b.n	8016116 <_exit+0x12>

08016118 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b086      	sub	sp, #24
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016124:	2300      	movs	r3, #0
 8016126:	617b      	str	r3, [r7, #20]
 8016128:	e00a      	b.n	8016140 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801612a:	f3af 8000 	nop.w
 801612e:	4601      	mov	r1, r0
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	1c5a      	adds	r2, r3, #1
 8016134:	60ba      	str	r2, [r7, #8]
 8016136:	b2ca      	uxtb	r2, r1
 8016138:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801613a:	697b      	ldr	r3, [r7, #20]
 801613c:	3301      	adds	r3, #1
 801613e:	617b      	str	r3, [r7, #20]
 8016140:	697a      	ldr	r2, [r7, #20]
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	429a      	cmp	r2, r3
 8016146:	dbf0      	blt.n	801612a <_read+0x12>
	}

return len;
 8016148:	687b      	ldr	r3, [r7, #4]
}
 801614a:	4618      	mov	r0, r3
 801614c:	3718      	adds	r7, #24
 801614e:	46bd      	mov	sp, r7
 8016150:	bd80      	pop	{r7, pc}

08016152 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8016152:	b580      	push	{r7, lr}
 8016154:	b086      	sub	sp, #24
 8016156:	af00      	add	r7, sp, #0
 8016158:	60f8      	str	r0, [r7, #12]
 801615a:	60b9      	str	r1, [r7, #8]
 801615c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801615e:	2300      	movs	r3, #0
 8016160:	617b      	str	r3, [r7, #20]
 8016162:	e009      	b.n	8016178 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8016164:	68bb      	ldr	r3, [r7, #8]
 8016166:	1c5a      	adds	r2, r3, #1
 8016168:	60ba      	str	r2, [r7, #8]
 801616a:	781b      	ldrb	r3, [r3, #0]
 801616c:	4618      	mov	r0, r3
 801616e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016172:	697b      	ldr	r3, [r7, #20]
 8016174:	3301      	adds	r3, #1
 8016176:	617b      	str	r3, [r7, #20]
 8016178:	697a      	ldr	r2, [r7, #20]
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	429a      	cmp	r2, r3
 801617e:	dbf1      	blt.n	8016164 <_write+0x12>
	}
	return len;
 8016180:	687b      	ldr	r3, [r7, #4]
}
 8016182:	4618      	mov	r0, r3
 8016184:	3718      	adds	r7, #24
 8016186:	46bd      	mov	sp, r7
 8016188:	bd80      	pop	{r7, pc}

0801618a <_close>:

int _close(int file)
{
 801618a:	b480      	push	{r7}
 801618c:	b083      	sub	sp, #12
 801618e:	af00      	add	r7, sp, #0
 8016190:	6078      	str	r0, [r7, #4]
	return -1;
 8016192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016196:	4618      	mov	r0, r3
 8016198:	370c      	adds	r7, #12
 801619a:	46bd      	mov	sp, r7
 801619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a0:	4770      	bx	lr

080161a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80161a2:	b480      	push	{r7}
 80161a4:	b083      	sub	sp, #12
 80161a6:	af00      	add	r7, sp, #0
 80161a8:	6078      	str	r0, [r7, #4]
 80161aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80161ac:	683b      	ldr	r3, [r7, #0]
 80161ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80161b2:	605a      	str	r2, [r3, #4]
	return 0;
 80161b4:	2300      	movs	r3, #0
}
 80161b6:	4618      	mov	r0, r3
 80161b8:	370c      	adds	r7, #12
 80161ba:	46bd      	mov	sp, r7
 80161bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c0:	4770      	bx	lr

080161c2 <_isatty>:

int _isatty(int file)
{
 80161c2:	b480      	push	{r7}
 80161c4:	b083      	sub	sp, #12
 80161c6:	af00      	add	r7, sp, #0
 80161c8:	6078      	str	r0, [r7, #4]
	return 1;
 80161ca:	2301      	movs	r3, #1
}
 80161cc:	4618      	mov	r0, r3
 80161ce:	370c      	adds	r7, #12
 80161d0:	46bd      	mov	sp, r7
 80161d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d6:	4770      	bx	lr

080161d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80161d8:	b480      	push	{r7}
 80161da:	b085      	sub	sp, #20
 80161dc:	af00      	add	r7, sp, #0
 80161de:	60f8      	str	r0, [r7, #12]
 80161e0:	60b9      	str	r1, [r7, #8]
 80161e2:	607a      	str	r2, [r7, #4]
	return 0;
 80161e4:	2300      	movs	r3, #0
}
 80161e6:	4618      	mov	r0, r3
 80161e8:	3714      	adds	r7, #20
 80161ea:	46bd      	mov	sp, r7
 80161ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f0:	4770      	bx	lr
	...

080161f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b086      	sub	sp, #24
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80161fc:	4a14      	ldr	r2, [pc, #80]	; (8016250 <_sbrk+0x5c>)
 80161fe:	4b15      	ldr	r3, [pc, #84]	; (8016254 <_sbrk+0x60>)
 8016200:	1ad3      	subs	r3, r2, r3
 8016202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8016204:	697b      	ldr	r3, [r7, #20]
 8016206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8016208:	4b13      	ldr	r3, [pc, #76]	; (8016258 <_sbrk+0x64>)
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d102      	bne.n	8016216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8016210:	4b11      	ldr	r3, [pc, #68]	; (8016258 <_sbrk+0x64>)
 8016212:	4a12      	ldr	r2, [pc, #72]	; (801625c <_sbrk+0x68>)
 8016214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8016216:	4b10      	ldr	r3, [pc, #64]	; (8016258 <_sbrk+0x64>)
 8016218:	681a      	ldr	r2, [r3, #0]
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	4413      	add	r3, r2
 801621e:	693a      	ldr	r2, [r7, #16]
 8016220:	429a      	cmp	r2, r3
 8016222:	d207      	bcs.n	8016234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8016224:	f007 fc80 	bl	801db28 <__errno>
 8016228:	4603      	mov	r3, r0
 801622a:	220c      	movs	r2, #12
 801622c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801622e:	f04f 33ff 	mov.w	r3, #4294967295
 8016232:	e009      	b.n	8016248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8016234:	4b08      	ldr	r3, [pc, #32]	; (8016258 <_sbrk+0x64>)
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801623a:	4b07      	ldr	r3, [pc, #28]	; (8016258 <_sbrk+0x64>)
 801623c:	681a      	ldr	r2, [r3, #0]
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	4413      	add	r3, r2
 8016242:	4a05      	ldr	r2, [pc, #20]	; (8016258 <_sbrk+0x64>)
 8016244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8016246:	68fb      	ldr	r3, [r7, #12]
}
 8016248:	4618      	mov	r0, r3
 801624a:	3718      	adds	r7, #24
 801624c:	46bd      	mov	sp, r7
 801624e:	bd80      	pop	{r7, pc}
 8016250:	20020000 	.word	0x20020000
 8016254:	00000400 	.word	0x00000400
 8016258:	200007ec 	.word	0x200007ec
 801625c:	20000808 	.word	0x20000808

08016260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8016260:	b480      	push	{r7}
 8016262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8016264:	4b06      	ldr	r3, [pc, #24]	; (8016280 <SystemInit+0x20>)
 8016266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801626a:	4a05      	ldr	r2, [pc, #20]	; (8016280 <SystemInit+0x20>)
 801626c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8016274:	bf00      	nop
 8016276:	46bd      	mov	sp, r7
 8016278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627c:	4770      	bx	lr
 801627e:	bf00      	nop
 8016280:	e000ed00 	.word	0xe000ed00

08016284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8016284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80162bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8016288:	480d      	ldr	r0, [pc, #52]	; (80162c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801628a:	490e      	ldr	r1, [pc, #56]	; (80162c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 801628c:	4a0e      	ldr	r2, [pc, #56]	; (80162c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801628e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8016290:	e002      	b.n	8016298 <LoopCopyDataInit>

08016292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8016292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8016294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8016296:	3304      	adds	r3, #4

08016298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8016298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801629a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801629c:	d3f9      	bcc.n	8016292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801629e:	4a0b      	ldr	r2, [pc, #44]	; (80162cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80162a0:	4c0b      	ldr	r4, [pc, #44]	; (80162d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80162a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80162a4:	e001      	b.n	80162aa <LoopFillZerobss>

080162a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80162a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80162a8:	3204      	adds	r2, #4

080162aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80162aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80162ac:	d3fb      	bcc.n	80162a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80162ae:	f7ff ffd7 	bl	8016260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80162b2:	f007 fc51 	bl	801db58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80162b6:	f7eb fb7b 	bl	80019b0 <main>
  bx  lr    
 80162ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80162bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80162c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80162c4:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80162c8:	08029c80 	.word	0x08029c80
  ldr r2, =_sbss
 80162cc:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80162d0:	20000804 	.word	0x20000804

080162d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80162d4:	e7fe      	b.n	80162d4 <ADC_IRQHandler>
	...

080162d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80162dc:	4b0e      	ldr	r3, [pc, #56]	; (8016318 <HAL_Init+0x40>)
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	4a0d      	ldr	r2, [pc, #52]	; (8016318 <HAL_Init+0x40>)
 80162e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80162e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80162e8:	4b0b      	ldr	r3, [pc, #44]	; (8016318 <HAL_Init+0x40>)
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	4a0a      	ldr	r2, [pc, #40]	; (8016318 <HAL_Init+0x40>)
 80162ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80162f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80162f4:	4b08      	ldr	r3, [pc, #32]	; (8016318 <HAL_Init+0x40>)
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	4a07      	ldr	r2, [pc, #28]	; (8016318 <HAL_Init+0x40>)
 80162fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80162fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8016300:	2003      	movs	r0, #3
 8016302:	f000 f94f 	bl	80165a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8016306:	2000      	movs	r0, #0
 8016308:	f000 f808 	bl	801631c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801630c:	f7ff fc14 	bl	8015b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8016310:	2300      	movs	r3, #0
}
 8016312:	4618      	mov	r0, r3
 8016314:	bd80      	pop	{r7, pc}
 8016316:	bf00      	nop
 8016318:	40023c00 	.word	0x40023c00

0801631c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b082      	sub	sp, #8
 8016320:	af00      	add	r7, sp, #0
 8016322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8016324:	4b12      	ldr	r3, [pc, #72]	; (8016370 <HAL_InitTick+0x54>)
 8016326:	681a      	ldr	r2, [r3, #0]
 8016328:	4b12      	ldr	r3, [pc, #72]	; (8016374 <HAL_InitTick+0x58>)
 801632a:	781b      	ldrb	r3, [r3, #0]
 801632c:	4619      	mov	r1, r3
 801632e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016332:	fbb3 f3f1 	udiv	r3, r3, r1
 8016336:	fbb2 f3f3 	udiv	r3, r2, r3
 801633a:	4618      	mov	r0, r3
 801633c:	f000 f967 	bl	801660e <HAL_SYSTICK_Config>
 8016340:	4603      	mov	r3, r0
 8016342:	2b00      	cmp	r3, #0
 8016344:	d001      	beq.n	801634a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8016346:	2301      	movs	r3, #1
 8016348:	e00e      	b.n	8016368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	2b0f      	cmp	r3, #15
 801634e:	d80a      	bhi.n	8016366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8016350:	2200      	movs	r2, #0
 8016352:	6879      	ldr	r1, [r7, #4]
 8016354:	f04f 30ff 	mov.w	r0, #4294967295
 8016358:	f000 f92f 	bl	80165ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801635c:	4a06      	ldr	r2, [pc, #24]	; (8016378 <HAL_InitTick+0x5c>)
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8016362:	2300      	movs	r3, #0
 8016364:	e000      	b.n	8016368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8016366:	2301      	movs	r3, #1
}
 8016368:	4618      	mov	r0, r3
 801636a:	3708      	adds	r7, #8
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}
 8016370:	200001dc 	.word	0x200001dc
 8016374:	200001e4 	.word	0x200001e4
 8016378:	200001e0 	.word	0x200001e0

0801637c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801637c:	b480      	push	{r7}
 801637e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8016380:	4b06      	ldr	r3, [pc, #24]	; (801639c <HAL_IncTick+0x20>)
 8016382:	781b      	ldrb	r3, [r3, #0]
 8016384:	461a      	mov	r2, r3
 8016386:	4b06      	ldr	r3, [pc, #24]	; (80163a0 <HAL_IncTick+0x24>)
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	4413      	add	r3, r2
 801638c:	4a04      	ldr	r2, [pc, #16]	; (80163a0 <HAL_IncTick+0x24>)
 801638e:	6013      	str	r3, [r2, #0]
}
 8016390:	bf00      	nop
 8016392:	46bd      	mov	sp, r7
 8016394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016398:	4770      	bx	lr
 801639a:	bf00      	nop
 801639c:	200001e4 	.word	0x200001e4
 80163a0:	200007f0 	.word	0x200007f0

080163a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80163a4:	b480      	push	{r7}
 80163a6:	af00      	add	r7, sp, #0
  return uwTick;
 80163a8:	4b03      	ldr	r3, [pc, #12]	; (80163b8 <HAL_GetTick+0x14>)
 80163aa:	681b      	ldr	r3, [r3, #0]
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	46bd      	mov	sp, r7
 80163b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b4:	4770      	bx	lr
 80163b6:	bf00      	nop
 80163b8:	200007f0 	.word	0x200007f0

080163bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80163bc:	b580      	push	{r7, lr}
 80163be:	b084      	sub	sp, #16
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80163c4:	f7ff ffee 	bl	80163a4 <HAL_GetTick>
 80163c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163d4:	d005      	beq.n	80163e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80163d6:	4b0a      	ldr	r3, [pc, #40]	; (8016400 <HAL_Delay+0x44>)
 80163d8:	781b      	ldrb	r3, [r3, #0]
 80163da:	461a      	mov	r2, r3
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	4413      	add	r3, r2
 80163e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80163e2:	bf00      	nop
 80163e4:	f7ff ffde 	bl	80163a4 <HAL_GetTick>
 80163e8:	4602      	mov	r2, r0
 80163ea:	68bb      	ldr	r3, [r7, #8]
 80163ec:	1ad3      	subs	r3, r2, r3
 80163ee:	68fa      	ldr	r2, [r7, #12]
 80163f0:	429a      	cmp	r2, r3
 80163f2:	d8f7      	bhi.n	80163e4 <HAL_Delay+0x28>
  {
  }
}
 80163f4:	bf00      	nop
 80163f6:	bf00      	nop
 80163f8:	3710      	adds	r7, #16
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bd80      	pop	{r7, pc}
 80163fe:	bf00      	nop
 8016400:	200001e4 	.word	0x200001e4

08016404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016404:	b480      	push	{r7}
 8016406:	b085      	sub	sp, #20
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	f003 0307 	and.w	r3, r3, #7
 8016412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016414:	4b0c      	ldr	r3, [pc, #48]	; (8016448 <__NVIC_SetPriorityGrouping+0x44>)
 8016416:	68db      	ldr	r3, [r3, #12]
 8016418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801641a:	68ba      	ldr	r2, [r7, #8]
 801641c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8016420:	4013      	ands	r3, r2
 8016422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016428:	68bb      	ldr	r3, [r7, #8]
 801642a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801642c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8016430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8016436:	4a04      	ldr	r2, [pc, #16]	; (8016448 <__NVIC_SetPriorityGrouping+0x44>)
 8016438:	68bb      	ldr	r3, [r7, #8]
 801643a:	60d3      	str	r3, [r2, #12]
}
 801643c:	bf00      	nop
 801643e:	3714      	adds	r7, #20
 8016440:	46bd      	mov	sp, r7
 8016442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016446:	4770      	bx	lr
 8016448:	e000ed00 	.word	0xe000ed00

0801644c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801644c:	b480      	push	{r7}
 801644e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016450:	4b04      	ldr	r3, [pc, #16]	; (8016464 <__NVIC_GetPriorityGrouping+0x18>)
 8016452:	68db      	ldr	r3, [r3, #12]
 8016454:	0a1b      	lsrs	r3, r3, #8
 8016456:	f003 0307 	and.w	r3, r3, #7
}
 801645a:	4618      	mov	r0, r3
 801645c:	46bd      	mov	sp, r7
 801645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016462:	4770      	bx	lr
 8016464:	e000ed00 	.word	0xe000ed00

08016468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016468:	b480      	push	{r7}
 801646a:	b083      	sub	sp, #12
 801646c:	af00      	add	r7, sp, #0
 801646e:	4603      	mov	r3, r0
 8016470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016476:	2b00      	cmp	r3, #0
 8016478:	db0b      	blt.n	8016492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801647a:	79fb      	ldrb	r3, [r7, #7]
 801647c:	f003 021f 	and.w	r2, r3, #31
 8016480:	4907      	ldr	r1, [pc, #28]	; (80164a0 <__NVIC_EnableIRQ+0x38>)
 8016482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016486:	095b      	lsrs	r3, r3, #5
 8016488:	2001      	movs	r0, #1
 801648a:	fa00 f202 	lsl.w	r2, r0, r2
 801648e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8016492:	bf00      	nop
 8016494:	370c      	adds	r7, #12
 8016496:	46bd      	mov	sp, r7
 8016498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649c:	4770      	bx	lr
 801649e:	bf00      	nop
 80164a0:	e000e100 	.word	0xe000e100

080164a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80164a4:	b480      	push	{r7}
 80164a6:	b083      	sub	sp, #12
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	4603      	mov	r3, r0
 80164ac:	6039      	str	r1, [r7, #0]
 80164ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80164b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	db0a      	blt.n	80164ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80164b8:	683b      	ldr	r3, [r7, #0]
 80164ba:	b2da      	uxtb	r2, r3
 80164bc:	490c      	ldr	r1, [pc, #48]	; (80164f0 <__NVIC_SetPriority+0x4c>)
 80164be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80164c2:	0112      	lsls	r2, r2, #4
 80164c4:	b2d2      	uxtb	r2, r2
 80164c6:	440b      	add	r3, r1
 80164c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80164cc:	e00a      	b.n	80164e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80164ce:	683b      	ldr	r3, [r7, #0]
 80164d0:	b2da      	uxtb	r2, r3
 80164d2:	4908      	ldr	r1, [pc, #32]	; (80164f4 <__NVIC_SetPriority+0x50>)
 80164d4:	79fb      	ldrb	r3, [r7, #7]
 80164d6:	f003 030f 	and.w	r3, r3, #15
 80164da:	3b04      	subs	r3, #4
 80164dc:	0112      	lsls	r2, r2, #4
 80164de:	b2d2      	uxtb	r2, r2
 80164e0:	440b      	add	r3, r1
 80164e2:	761a      	strb	r2, [r3, #24]
}
 80164e4:	bf00      	nop
 80164e6:	370c      	adds	r7, #12
 80164e8:	46bd      	mov	sp, r7
 80164ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ee:	4770      	bx	lr
 80164f0:	e000e100 	.word	0xe000e100
 80164f4:	e000ed00 	.word	0xe000ed00

080164f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80164f8:	b480      	push	{r7}
 80164fa:	b089      	sub	sp, #36	; 0x24
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	60f8      	str	r0, [r7, #12]
 8016500:	60b9      	str	r1, [r7, #8]
 8016502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	f003 0307 	and.w	r3, r3, #7
 801650a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801650c:	69fb      	ldr	r3, [r7, #28]
 801650e:	f1c3 0307 	rsb	r3, r3, #7
 8016512:	2b04      	cmp	r3, #4
 8016514:	bf28      	it	cs
 8016516:	2304      	movcs	r3, #4
 8016518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801651a:	69fb      	ldr	r3, [r7, #28]
 801651c:	3304      	adds	r3, #4
 801651e:	2b06      	cmp	r3, #6
 8016520:	d902      	bls.n	8016528 <NVIC_EncodePriority+0x30>
 8016522:	69fb      	ldr	r3, [r7, #28]
 8016524:	3b03      	subs	r3, #3
 8016526:	e000      	b.n	801652a <NVIC_EncodePriority+0x32>
 8016528:	2300      	movs	r3, #0
 801652a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801652c:	f04f 32ff 	mov.w	r2, #4294967295
 8016530:	69bb      	ldr	r3, [r7, #24]
 8016532:	fa02 f303 	lsl.w	r3, r2, r3
 8016536:	43da      	mvns	r2, r3
 8016538:	68bb      	ldr	r3, [r7, #8]
 801653a:	401a      	ands	r2, r3
 801653c:	697b      	ldr	r3, [r7, #20]
 801653e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016540:	f04f 31ff 	mov.w	r1, #4294967295
 8016544:	697b      	ldr	r3, [r7, #20]
 8016546:	fa01 f303 	lsl.w	r3, r1, r3
 801654a:	43d9      	mvns	r1, r3
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016550:	4313      	orrs	r3, r2
         );
}
 8016552:	4618      	mov	r0, r3
 8016554:	3724      	adds	r7, #36	; 0x24
 8016556:	46bd      	mov	sp, r7
 8016558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655c:	4770      	bx	lr
	...

08016560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b082      	sub	sp, #8
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	3b01      	subs	r3, #1
 801656c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016570:	d301      	bcc.n	8016576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8016572:	2301      	movs	r3, #1
 8016574:	e00f      	b.n	8016596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8016576:	4a0a      	ldr	r2, [pc, #40]	; (80165a0 <SysTick_Config+0x40>)
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	3b01      	subs	r3, #1
 801657c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801657e:	210f      	movs	r1, #15
 8016580:	f04f 30ff 	mov.w	r0, #4294967295
 8016584:	f7ff ff8e 	bl	80164a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016588:	4b05      	ldr	r3, [pc, #20]	; (80165a0 <SysTick_Config+0x40>)
 801658a:	2200      	movs	r2, #0
 801658c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801658e:	4b04      	ldr	r3, [pc, #16]	; (80165a0 <SysTick_Config+0x40>)
 8016590:	2207      	movs	r2, #7
 8016592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016594:	2300      	movs	r3, #0
}
 8016596:	4618      	mov	r0, r3
 8016598:	3708      	adds	r7, #8
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
 801659e:	bf00      	nop
 80165a0:	e000e010 	.word	0xe000e010

080165a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80165a4:	b580      	push	{r7, lr}
 80165a6:	b082      	sub	sp, #8
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80165ac:	6878      	ldr	r0, [r7, #4]
 80165ae:	f7ff ff29 	bl	8016404 <__NVIC_SetPriorityGrouping>
}
 80165b2:	bf00      	nop
 80165b4:	3708      	adds	r7, #8
 80165b6:	46bd      	mov	sp, r7
 80165b8:	bd80      	pop	{r7, pc}

080165ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80165ba:	b580      	push	{r7, lr}
 80165bc:	b086      	sub	sp, #24
 80165be:	af00      	add	r7, sp, #0
 80165c0:	4603      	mov	r3, r0
 80165c2:	60b9      	str	r1, [r7, #8]
 80165c4:	607a      	str	r2, [r7, #4]
 80165c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80165c8:	2300      	movs	r3, #0
 80165ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80165cc:	f7ff ff3e 	bl	801644c <__NVIC_GetPriorityGrouping>
 80165d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80165d2:	687a      	ldr	r2, [r7, #4]
 80165d4:	68b9      	ldr	r1, [r7, #8]
 80165d6:	6978      	ldr	r0, [r7, #20]
 80165d8:	f7ff ff8e 	bl	80164f8 <NVIC_EncodePriority>
 80165dc:	4602      	mov	r2, r0
 80165de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165e2:	4611      	mov	r1, r2
 80165e4:	4618      	mov	r0, r3
 80165e6:	f7ff ff5d 	bl	80164a4 <__NVIC_SetPriority>
}
 80165ea:	bf00      	nop
 80165ec:	3718      	adds	r7, #24
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}

080165f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80165f2:	b580      	push	{r7, lr}
 80165f4:	b082      	sub	sp, #8
 80165f6:	af00      	add	r7, sp, #0
 80165f8:	4603      	mov	r3, r0
 80165fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80165fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016600:	4618      	mov	r0, r3
 8016602:	f7ff ff31 	bl	8016468 <__NVIC_EnableIRQ>
}
 8016606:	bf00      	nop
 8016608:	3708      	adds	r7, #8
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}

0801660e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801660e:	b580      	push	{r7, lr}
 8016610:	b082      	sub	sp, #8
 8016612:	af00      	add	r7, sp, #0
 8016614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8016616:	6878      	ldr	r0, [r7, #4]
 8016618:	f7ff ffa2 	bl	8016560 <SysTick_Config>
 801661c:	4603      	mov	r3, r0
}
 801661e:	4618      	mov	r0, r3
 8016620:	3708      	adds	r7, #8
 8016622:	46bd      	mov	sp, r7
 8016624:	bd80      	pop	{r7, pc}
	...

08016628 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b086      	sub	sp, #24
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8016630:	2300      	movs	r3, #0
 8016632:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8016634:	f7ff feb6 	bl	80163a4 <HAL_GetTick>
 8016638:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d101      	bne.n	8016644 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8016640:	2301      	movs	r3, #1
 8016642:	e099      	b.n	8016778 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	2202      	movs	r2, #2
 8016648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	2200      	movs	r2, #0
 8016650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	681a      	ldr	r2, [r3, #0]
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	f022 0201 	bic.w	r2, r2, #1
 8016662:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016664:	e00f      	b.n	8016686 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016666:	f7ff fe9d 	bl	80163a4 <HAL_GetTick>
 801666a:	4602      	mov	r2, r0
 801666c:	693b      	ldr	r3, [r7, #16]
 801666e:	1ad3      	subs	r3, r2, r3
 8016670:	2b05      	cmp	r3, #5
 8016672:	d908      	bls.n	8016686 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2220      	movs	r2, #32
 8016678:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	2203      	movs	r2, #3
 801667e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8016682:	2303      	movs	r3, #3
 8016684:	e078      	b.n	8016778 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	f003 0301 	and.w	r3, r3, #1
 8016690:	2b00      	cmp	r3, #0
 8016692:	d1e8      	bne.n	8016666 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801669c:	697a      	ldr	r2, [r7, #20]
 801669e:	4b38      	ldr	r3, [pc, #224]	; (8016780 <HAL_DMA_Init+0x158>)
 80166a0:	4013      	ands	r3, r2
 80166a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	685a      	ldr	r2, [r3, #4]
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	689b      	ldr	r3, [r3, #8]
 80166ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80166b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	691b      	ldr	r3, [r3, #16]
 80166b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80166be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	699b      	ldr	r3, [r3, #24]
 80166c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80166ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	6a1b      	ldr	r3, [r3, #32]
 80166d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80166d2:	697a      	ldr	r2, [r7, #20]
 80166d4:	4313      	orrs	r3, r2
 80166d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166dc:	2b04      	cmp	r3, #4
 80166de:	d107      	bne.n	80166f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166e8:	4313      	orrs	r3, r2
 80166ea:	697a      	ldr	r2, [r7, #20]
 80166ec:	4313      	orrs	r3, r2
 80166ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	697a      	ldr	r2, [r7, #20]
 80166f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	695b      	ldr	r3, [r3, #20]
 80166fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8016700:	697b      	ldr	r3, [r7, #20]
 8016702:	f023 0307 	bic.w	r3, r3, #7
 8016706:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801670c:	697a      	ldr	r2, [r7, #20]
 801670e:	4313      	orrs	r3, r2
 8016710:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016716:	2b04      	cmp	r3, #4
 8016718:	d117      	bne.n	801674a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801671e:	697a      	ldr	r2, [r7, #20]
 8016720:	4313      	orrs	r3, r2
 8016722:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016728:	2b00      	cmp	r3, #0
 801672a:	d00e      	beq.n	801674a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801672c:	6878      	ldr	r0, [r7, #4]
 801672e:	f000 fb0f 	bl	8016d50 <DMA_CheckFifoParam>
 8016732:	4603      	mov	r3, r0
 8016734:	2b00      	cmp	r3, #0
 8016736:	d008      	beq.n	801674a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2240      	movs	r2, #64	; 0x40
 801673c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	2201      	movs	r2, #1
 8016742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8016746:	2301      	movs	r3, #1
 8016748:	e016      	b.n	8016778 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	697a      	ldr	r2, [r7, #20]
 8016750:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8016752:	6878      	ldr	r0, [r7, #4]
 8016754:	f000 fac6 	bl	8016ce4 <DMA_CalcBaseAndBitshift>
 8016758:	4603      	mov	r3, r0
 801675a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016760:	223f      	movs	r2, #63	; 0x3f
 8016762:	409a      	lsls	r2, r3
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	2200      	movs	r2, #0
 801676c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	2201      	movs	r2, #1
 8016772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8016776:	2300      	movs	r3, #0
}
 8016778:	4618      	mov	r0, r3
 801677a:	3718      	adds	r7, #24
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}
 8016780:	f010803f 	.word	0xf010803f

08016784 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b086      	sub	sp, #24
 8016788:	af00      	add	r7, sp, #0
 801678a:	60f8      	str	r0, [r7, #12]
 801678c:	60b9      	str	r1, [r7, #8]
 801678e:	607a      	str	r2, [r7, #4]
 8016790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016792:	2300      	movs	r3, #0
 8016794:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801679a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80167a2:	2b01      	cmp	r3, #1
 80167a4:	d101      	bne.n	80167aa <HAL_DMA_Start_IT+0x26>
 80167a6:	2302      	movs	r3, #2
 80167a8:	e040      	b.n	801682c <HAL_DMA_Start_IT+0xa8>
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	2201      	movs	r2, #1
 80167ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80167b8:	b2db      	uxtb	r3, r3
 80167ba:	2b01      	cmp	r3, #1
 80167bc:	d12f      	bne.n	801681e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	2202      	movs	r2, #2
 80167c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	2200      	movs	r2, #0
 80167ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80167cc:	683b      	ldr	r3, [r7, #0]
 80167ce:	687a      	ldr	r2, [r7, #4]
 80167d0:	68b9      	ldr	r1, [r7, #8]
 80167d2:	68f8      	ldr	r0, [r7, #12]
 80167d4:	f000 fa58 	bl	8016c88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80167dc:	223f      	movs	r2, #63	; 0x3f
 80167de:	409a      	lsls	r2, r3
 80167e0:	693b      	ldr	r3, [r7, #16]
 80167e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	681a      	ldr	r2, [r3, #0]
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	f042 0216 	orr.w	r2, r2, #22
 80167f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d007      	beq.n	801680c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	681a      	ldr	r2, [r3, #0]
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	f042 0208 	orr.w	r2, r2, #8
 801680a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	681a      	ldr	r2, [r3, #0]
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	f042 0201 	orr.w	r2, r2, #1
 801681a:	601a      	str	r2, [r3, #0]
 801681c:	e005      	b.n	801682a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	2200      	movs	r2, #0
 8016822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8016826:	2302      	movs	r3, #2
 8016828:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801682a:	7dfb      	ldrb	r3, [r7, #23]
}
 801682c:	4618      	mov	r0, r3
 801682e:	3718      	adds	r7, #24
 8016830:	46bd      	mov	sp, r7
 8016832:	bd80      	pop	{r7, pc}

08016834 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b084      	sub	sp, #16
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016840:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8016842:	f7ff fdaf 	bl	80163a4 <HAL_GetTick>
 8016846:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801684e:	b2db      	uxtb	r3, r3
 8016850:	2b02      	cmp	r3, #2
 8016852:	d008      	beq.n	8016866 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	2280      	movs	r2, #128	; 0x80
 8016858:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	2200      	movs	r2, #0
 801685e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8016862:	2301      	movs	r3, #1
 8016864:	e052      	b.n	801690c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	681a      	ldr	r2, [r3, #0]
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	f022 0216 	bic.w	r2, r2, #22
 8016874:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	695a      	ldr	r2, [r3, #20]
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016884:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801688a:	2b00      	cmp	r3, #0
 801688c:	d103      	bne.n	8016896 <HAL_DMA_Abort+0x62>
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016892:	2b00      	cmp	r3, #0
 8016894:	d007      	beq.n	80168a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	681a      	ldr	r2, [r3, #0]
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	f022 0208 	bic.w	r2, r2, #8
 80168a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	681a      	ldr	r2, [r3, #0]
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	f022 0201 	bic.w	r2, r2, #1
 80168b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80168b6:	e013      	b.n	80168e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80168b8:	f7ff fd74 	bl	80163a4 <HAL_GetTick>
 80168bc:	4602      	mov	r2, r0
 80168be:	68bb      	ldr	r3, [r7, #8]
 80168c0:	1ad3      	subs	r3, r2, r3
 80168c2:	2b05      	cmp	r3, #5
 80168c4:	d90c      	bls.n	80168e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	2220      	movs	r2, #32
 80168ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2203      	movs	r2, #3
 80168d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	2200      	movs	r2, #0
 80168d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80168dc:	2303      	movs	r3, #3
 80168de:	e015      	b.n	801690c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	f003 0301 	and.w	r3, r3, #1
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d1e4      	bne.n	80168b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80168f2:	223f      	movs	r2, #63	; 0x3f
 80168f4:	409a      	lsls	r2, r3
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	2201      	movs	r2, #1
 80168fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2200      	movs	r2, #0
 8016906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801690a:	2300      	movs	r3, #0
}
 801690c:	4618      	mov	r0, r3
 801690e:	3710      	adds	r7, #16
 8016910:	46bd      	mov	sp, r7
 8016912:	bd80      	pop	{r7, pc}

08016914 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016914:	b480      	push	{r7}
 8016916:	b083      	sub	sp, #12
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016922:	b2db      	uxtb	r3, r3
 8016924:	2b02      	cmp	r3, #2
 8016926:	d004      	beq.n	8016932 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	2280      	movs	r2, #128	; 0x80
 801692c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801692e:	2301      	movs	r3, #1
 8016930:	e00c      	b.n	801694c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	2205      	movs	r2, #5
 8016936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	681a      	ldr	r2, [r3, #0]
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	f022 0201 	bic.w	r2, r2, #1
 8016948:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801694a:	2300      	movs	r3, #0
}
 801694c:	4618      	mov	r0, r3
 801694e:	370c      	adds	r7, #12
 8016950:	46bd      	mov	sp, r7
 8016952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016956:	4770      	bx	lr

08016958 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b086      	sub	sp, #24
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8016960:	2300      	movs	r3, #0
 8016962:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8016964:	4b8e      	ldr	r3, [pc, #568]	; (8016ba0 <HAL_DMA_IRQHandler+0x248>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	4a8e      	ldr	r2, [pc, #568]	; (8016ba4 <HAL_DMA_IRQHandler+0x24c>)
 801696a:	fba2 2303 	umull	r2, r3, r2, r3
 801696e:	0a9b      	lsrs	r3, r3, #10
 8016970:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016976:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8016978:	693b      	ldr	r3, [r7, #16]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016982:	2208      	movs	r2, #8
 8016984:	409a      	lsls	r2, r3
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	4013      	ands	r3, r2
 801698a:	2b00      	cmp	r3, #0
 801698c:	d01a      	beq.n	80169c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	f003 0304 	and.w	r3, r3, #4
 8016998:	2b00      	cmp	r3, #0
 801699a:	d013      	beq.n	80169c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	681a      	ldr	r2, [r3, #0]
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	f022 0204 	bic.w	r2, r2, #4
 80169aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80169b0:	2208      	movs	r2, #8
 80169b2:	409a      	lsls	r2, r3
 80169b4:	693b      	ldr	r3, [r7, #16]
 80169b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80169bc:	f043 0201 	orr.w	r2, r3, #1
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80169c8:	2201      	movs	r2, #1
 80169ca:	409a      	lsls	r2, r3
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	4013      	ands	r3, r2
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d012      	beq.n	80169fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	695b      	ldr	r3, [r3, #20]
 80169da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d00b      	beq.n	80169fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80169e6:	2201      	movs	r2, #1
 80169e8:	409a      	lsls	r2, r3
 80169ea:	693b      	ldr	r3, [r7, #16]
 80169ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80169f2:	f043 0202 	orr.w	r2, r3, #2
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80169fe:	2204      	movs	r2, #4
 8016a00:	409a      	lsls	r2, r3
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	4013      	ands	r3, r2
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d012      	beq.n	8016a30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	f003 0302 	and.w	r3, r3, #2
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d00b      	beq.n	8016a30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016a1c:	2204      	movs	r2, #4
 8016a1e:	409a      	lsls	r2, r3
 8016a20:	693b      	ldr	r3, [r7, #16]
 8016a22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016a28:	f043 0204 	orr.w	r2, r3, #4
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016a34:	2210      	movs	r2, #16
 8016a36:	409a      	lsls	r2, r3
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	4013      	ands	r3, r2
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d043      	beq.n	8016ac8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	f003 0308 	and.w	r3, r3, #8
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d03c      	beq.n	8016ac8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016a52:	2210      	movs	r2, #16
 8016a54:	409a      	lsls	r2, r3
 8016a56:	693b      	ldr	r3, [r7, #16]
 8016a58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d018      	beq.n	8016a9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d108      	bne.n	8016a88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d024      	beq.n	8016ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a82:	6878      	ldr	r0, [r7, #4]
 8016a84:	4798      	blx	r3
 8016a86:	e01f      	b.n	8016ac8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d01b      	beq.n	8016ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a94:	6878      	ldr	r0, [r7, #4]
 8016a96:	4798      	blx	r3
 8016a98:	e016      	b.n	8016ac8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d107      	bne.n	8016ab8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	681a      	ldr	r2, [r3, #0]
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	f022 0208 	bic.w	r2, r2, #8
 8016ab6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d003      	beq.n	8016ac8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ac4:	6878      	ldr	r0, [r7, #4]
 8016ac6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016acc:	2220      	movs	r2, #32
 8016ace:	409a      	lsls	r2, r3
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	4013      	ands	r3, r2
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	f000 808f 	beq.w	8016bf8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	f003 0310 	and.w	r3, r3, #16
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	f000 8087 	beq.w	8016bf8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016aee:	2220      	movs	r2, #32
 8016af0:	409a      	lsls	r2, r3
 8016af2:	693b      	ldr	r3, [r7, #16]
 8016af4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016afc:	b2db      	uxtb	r3, r3
 8016afe:	2b05      	cmp	r3, #5
 8016b00:	d136      	bne.n	8016b70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	681a      	ldr	r2, [r3, #0]
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	f022 0216 	bic.w	r2, r2, #22
 8016b10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	695a      	ldr	r2, [r3, #20]
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016b20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d103      	bne.n	8016b32 <HAL_DMA_IRQHandler+0x1da>
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d007      	beq.n	8016b42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	681a      	ldr	r2, [r3, #0]
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	f022 0208 	bic.w	r2, r2, #8
 8016b40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b46:	223f      	movs	r2, #63	; 0x3f
 8016b48:	409a      	lsls	r2, r3
 8016b4a:	693b      	ldr	r3, [r7, #16]
 8016b4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	2201      	movs	r2, #1
 8016b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	2200      	movs	r2, #0
 8016b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d07e      	beq.n	8016c64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016b6a:	6878      	ldr	r0, [r7, #4]
 8016b6c:	4798      	blx	r3
        }
        return;
 8016b6e:	e079      	b.n	8016c64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d01d      	beq.n	8016bba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d10d      	bne.n	8016ba8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d031      	beq.n	8016bf8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016b98:	6878      	ldr	r0, [r7, #4]
 8016b9a:	4798      	blx	r3
 8016b9c:	e02c      	b.n	8016bf8 <HAL_DMA_IRQHandler+0x2a0>
 8016b9e:	bf00      	nop
 8016ba0:	200001dc 	.word	0x200001dc
 8016ba4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d023      	beq.n	8016bf8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bb4:	6878      	ldr	r0, [r7, #4]
 8016bb6:	4798      	blx	r3
 8016bb8:	e01e      	b.n	8016bf8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d10f      	bne.n	8016be8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	681a      	ldr	r2, [r3, #0]
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	f022 0210 	bic.w	r2, r2, #16
 8016bd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	2201      	movs	r2, #1
 8016bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	2200      	movs	r2, #0
 8016be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d003      	beq.n	8016bf8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bf4:	6878      	ldr	r0, [r7, #4]
 8016bf6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d032      	beq.n	8016c66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016c04:	f003 0301 	and.w	r3, r3, #1
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d022      	beq.n	8016c52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	2205      	movs	r2, #5
 8016c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	681a      	ldr	r2, [r3, #0]
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	f022 0201 	bic.w	r2, r2, #1
 8016c22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8016c24:	68bb      	ldr	r3, [r7, #8]
 8016c26:	3301      	adds	r3, #1
 8016c28:	60bb      	str	r3, [r7, #8]
 8016c2a:	697a      	ldr	r2, [r7, #20]
 8016c2c:	429a      	cmp	r2, r3
 8016c2e:	d307      	bcc.n	8016c40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	f003 0301 	and.w	r3, r3, #1
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d1f2      	bne.n	8016c24 <HAL_DMA_IRQHandler+0x2cc>
 8016c3e:	e000      	b.n	8016c42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8016c40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	2201      	movs	r2, #1
 8016c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d005      	beq.n	8016c66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016c5e:	6878      	ldr	r0, [r7, #4]
 8016c60:	4798      	blx	r3
 8016c62:	e000      	b.n	8016c66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8016c64:	bf00      	nop
    }
  }
}
 8016c66:	3718      	adds	r7, #24
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}

08016c6c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	b083      	sub	sp, #12
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016c7a:	b2db      	uxtb	r3, r3
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	370c      	adds	r7, #12
 8016c80:	46bd      	mov	sp, r7
 8016c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c86:	4770      	bx	lr

08016c88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016c88:	b480      	push	{r7}
 8016c8a:	b085      	sub	sp, #20
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	60f8      	str	r0, [r7, #12]
 8016c90:	60b9      	str	r1, [r7, #8]
 8016c92:	607a      	str	r2, [r7, #4]
 8016c94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	681a      	ldr	r2, [r3, #0]
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8016ca4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	683a      	ldr	r2, [r7, #0]
 8016cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	689b      	ldr	r3, [r3, #8]
 8016cb2:	2b40      	cmp	r3, #64	; 0x40
 8016cb4:	d108      	bne.n	8016cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	687a      	ldr	r2, [r7, #4]
 8016cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	68ba      	ldr	r2, [r7, #8]
 8016cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8016cc6:	e007      	b.n	8016cd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	68ba      	ldr	r2, [r7, #8]
 8016cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	687a      	ldr	r2, [r7, #4]
 8016cd6:	60da      	str	r2, [r3, #12]
}
 8016cd8:	bf00      	nop
 8016cda:	3714      	adds	r7, #20
 8016cdc:	46bd      	mov	sp, r7
 8016cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce2:	4770      	bx	lr

08016ce4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8016ce4:	b480      	push	{r7}
 8016ce6:	b085      	sub	sp, #20
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	b2db      	uxtb	r3, r3
 8016cf2:	3b10      	subs	r3, #16
 8016cf4:	4a14      	ldr	r2, [pc, #80]	; (8016d48 <DMA_CalcBaseAndBitshift+0x64>)
 8016cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8016cfa:	091b      	lsrs	r3, r3, #4
 8016cfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8016cfe:	4a13      	ldr	r2, [pc, #76]	; (8016d4c <DMA_CalcBaseAndBitshift+0x68>)
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	4413      	add	r3, r2
 8016d04:	781b      	ldrb	r3, [r3, #0]
 8016d06:	461a      	mov	r2, r3
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	2b03      	cmp	r3, #3
 8016d10:	d909      	bls.n	8016d26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8016d1a:	f023 0303 	bic.w	r3, r3, #3
 8016d1e:	1d1a      	adds	r2, r3, #4
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	659a      	str	r2, [r3, #88]	; 0x58
 8016d24:	e007      	b.n	8016d36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8016d2e:	f023 0303 	bic.w	r3, r3, #3
 8016d32:	687a      	ldr	r2, [r7, #4]
 8016d34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	3714      	adds	r7, #20
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d44:	4770      	bx	lr
 8016d46:	bf00      	nop
 8016d48:	aaaaaaab 	.word	0xaaaaaaab
 8016d4c:	08029b5c 	.word	0x08029b5c

08016d50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8016d50:	b480      	push	{r7}
 8016d52:	b085      	sub	sp, #20
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016d58:	2300      	movs	r3, #0
 8016d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	699b      	ldr	r3, [r3, #24]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d11f      	bne.n	8016daa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8016d6a:	68bb      	ldr	r3, [r7, #8]
 8016d6c:	2b03      	cmp	r3, #3
 8016d6e:	d856      	bhi.n	8016e1e <DMA_CheckFifoParam+0xce>
 8016d70:	a201      	add	r2, pc, #4	; (adr r2, 8016d78 <DMA_CheckFifoParam+0x28>)
 8016d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d76:	bf00      	nop
 8016d78:	08016d89 	.word	0x08016d89
 8016d7c:	08016d9b 	.word	0x08016d9b
 8016d80:	08016d89 	.word	0x08016d89
 8016d84:	08016e1f 	.word	0x08016e1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d046      	beq.n	8016e22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8016d94:	2301      	movs	r3, #1
 8016d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016d98:	e043      	b.n	8016e22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8016da2:	d140      	bne.n	8016e26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8016da4:	2301      	movs	r3, #1
 8016da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016da8:	e03d      	b.n	8016e26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	699b      	ldr	r3, [r3, #24]
 8016dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016db2:	d121      	bne.n	8016df8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8016db4:	68bb      	ldr	r3, [r7, #8]
 8016db6:	2b03      	cmp	r3, #3
 8016db8:	d837      	bhi.n	8016e2a <DMA_CheckFifoParam+0xda>
 8016dba:	a201      	add	r2, pc, #4	; (adr r2, 8016dc0 <DMA_CheckFifoParam+0x70>)
 8016dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016dc0:	08016dd1 	.word	0x08016dd1
 8016dc4:	08016dd7 	.word	0x08016dd7
 8016dc8:	08016dd1 	.word	0x08016dd1
 8016dcc:	08016de9 	.word	0x08016de9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8016dd0:	2301      	movs	r3, #1
 8016dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8016dd4:	e030      	b.n	8016e38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d025      	beq.n	8016e2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8016de2:	2301      	movs	r3, #1
 8016de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016de6:	e022      	b.n	8016e2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8016df0:	d11f      	bne.n	8016e32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8016df2:	2301      	movs	r3, #1
 8016df4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8016df6:	e01c      	b.n	8016e32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8016df8:	68bb      	ldr	r3, [r7, #8]
 8016dfa:	2b02      	cmp	r3, #2
 8016dfc:	d903      	bls.n	8016e06 <DMA_CheckFifoParam+0xb6>
 8016dfe:	68bb      	ldr	r3, [r7, #8]
 8016e00:	2b03      	cmp	r3, #3
 8016e02:	d003      	beq.n	8016e0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8016e04:	e018      	b.n	8016e38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8016e06:	2301      	movs	r3, #1
 8016e08:	73fb      	strb	r3, [r7, #15]
      break;
 8016e0a:	e015      	b.n	8016e38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d00e      	beq.n	8016e36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8016e18:	2301      	movs	r3, #1
 8016e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8016e1c:	e00b      	b.n	8016e36 <DMA_CheckFifoParam+0xe6>
      break;
 8016e1e:	bf00      	nop
 8016e20:	e00a      	b.n	8016e38 <DMA_CheckFifoParam+0xe8>
      break;
 8016e22:	bf00      	nop
 8016e24:	e008      	b.n	8016e38 <DMA_CheckFifoParam+0xe8>
      break;
 8016e26:	bf00      	nop
 8016e28:	e006      	b.n	8016e38 <DMA_CheckFifoParam+0xe8>
      break;
 8016e2a:	bf00      	nop
 8016e2c:	e004      	b.n	8016e38 <DMA_CheckFifoParam+0xe8>
      break;
 8016e2e:	bf00      	nop
 8016e30:	e002      	b.n	8016e38 <DMA_CheckFifoParam+0xe8>
      break;   
 8016e32:	bf00      	nop
 8016e34:	e000      	b.n	8016e38 <DMA_CheckFifoParam+0xe8>
      break;
 8016e36:	bf00      	nop
    }
  } 
  
  return status; 
 8016e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	3714      	adds	r7, #20
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e44:	4770      	bx	lr
 8016e46:	bf00      	nop

08016e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016e48:	b480      	push	{r7}
 8016e4a:	b089      	sub	sp, #36	; 0x24
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
 8016e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8016e52:	2300      	movs	r3, #0
 8016e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8016e56:	2300      	movs	r3, #0
 8016e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016e5e:	2300      	movs	r3, #0
 8016e60:	61fb      	str	r3, [r7, #28]
 8016e62:	e159      	b.n	8017118 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8016e64:	2201      	movs	r2, #1
 8016e66:	69fb      	ldr	r3, [r7, #28]
 8016e68:	fa02 f303 	lsl.w	r3, r2, r3
 8016e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8016e6e:	683b      	ldr	r3, [r7, #0]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	697a      	ldr	r2, [r7, #20]
 8016e74:	4013      	ands	r3, r2
 8016e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8016e78:	693a      	ldr	r2, [r7, #16]
 8016e7a:	697b      	ldr	r3, [r7, #20]
 8016e7c:	429a      	cmp	r2, r3
 8016e7e:	f040 8148 	bne.w	8017112 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016e82:	683b      	ldr	r3, [r7, #0]
 8016e84:	685b      	ldr	r3, [r3, #4]
 8016e86:	f003 0303 	and.w	r3, r3, #3
 8016e8a:	2b01      	cmp	r3, #1
 8016e8c:	d005      	beq.n	8016e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016e8e:	683b      	ldr	r3, [r7, #0]
 8016e90:	685b      	ldr	r3, [r3, #4]
 8016e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016e96:	2b02      	cmp	r3, #2
 8016e98:	d130      	bne.n	8016efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	689b      	ldr	r3, [r3, #8]
 8016e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016ea0:	69fb      	ldr	r3, [r7, #28]
 8016ea2:	005b      	lsls	r3, r3, #1
 8016ea4:	2203      	movs	r2, #3
 8016ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8016eaa:	43db      	mvns	r3, r3
 8016eac:	69ba      	ldr	r2, [r7, #24]
 8016eae:	4013      	ands	r3, r2
 8016eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8016eb2:	683b      	ldr	r3, [r7, #0]
 8016eb4:	68da      	ldr	r2, [r3, #12]
 8016eb6:	69fb      	ldr	r3, [r7, #28]
 8016eb8:	005b      	lsls	r3, r3, #1
 8016eba:	fa02 f303 	lsl.w	r3, r2, r3
 8016ebe:	69ba      	ldr	r2, [r7, #24]
 8016ec0:	4313      	orrs	r3, r2
 8016ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	69ba      	ldr	r2, [r7, #24]
 8016ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	685b      	ldr	r3, [r3, #4]
 8016ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016ed0:	2201      	movs	r2, #1
 8016ed2:	69fb      	ldr	r3, [r7, #28]
 8016ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8016ed8:	43db      	mvns	r3, r3
 8016eda:	69ba      	ldr	r2, [r7, #24]
 8016edc:	4013      	ands	r3, r2
 8016ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8016ee0:	683b      	ldr	r3, [r7, #0]
 8016ee2:	685b      	ldr	r3, [r3, #4]
 8016ee4:	091b      	lsrs	r3, r3, #4
 8016ee6:	f003 0201 	and.w	r2, r3, #1
 8016eea:	69fb      	ldr	r3, [r7, #28]
 8016eec:	fa02 f303 	lsl.w	r3, r2, r3
 8016ef0:	69ba      	ldr	r2, [r7, #24]
 8016ef2:	4313      	orrs	r3, r2
 8016ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	69ba      	ldr	r2, [r7, #24]
 8016efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8016efc:	683b      	ldr	r3, [r7, #0]
 8016efe:	685b      	ldr	r3, [r3, #4]
 8016f00:	f003 0303 	and.w	r3, r3, #3
 8016f04:	2b03      	cmp	r3, #3
 8016f06:	d017      	beq.n	8016f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	68db      	ldr	r3, [r3, #12]
 8016f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016f0e:	69fb      	ldr	r3, [r7, #28]
 8016f10:	005b      	lsls	r3, r3, #1
 8016f12:	2203      	movs	r2, #3
 8016f14:	fa02 f303 	lsl.w	r3, r2, r3
 8016f18:	43db      	mvns	r3, r3
 8016f1a:	69ba      	ldr	r2, [r7, #24]
 8016f1c:	4013      	ands	r3, r2
 8016f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8016f20:	683b      	ldr	r3, [r7, #0]
 8016f22:	689a      	ldr	r2, [r3, #8]
 8016f24:	69fb      	ldr	r3, [r7, #28]
 8016f26:	005b      	lsls	r3, r3, #1
 8016f28:	fa02 f303 	lsl.w	r3, r2, r3
 8016f2c:	69ba      	ldr	r2, [r7, #24]
 8016f2e:	4313      	orrs	r3, r2
 8016f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	69ba      	ldr	r2, [r7, #24]
 8016f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016f38:	683b      	ldr	r3, [r7, #0]
 8016f3a:	685b      	ldr	r3, [r3, #4]
 8016f3c:	f003 0303 	and.w	r3, r3, #3
 8016f40:	2b02      	cmp	r3, #2
 8016f42:	d123      	bne.n	8016f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016f44:	69fb      	ldr	r3, [r7, #28]
 8016f46:	08da      	lsrs	r2, r3, #3
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	3208      	adds	r2, #8
 8016f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016f52:	69fb      	ldr	r3, [r7, #28]
 8016f54:	f003 0307 	and.w	r3, r3, #7
 8016f58:	009b      	lsls	r3, r3, #2
 8016f5a:	220f      	movs	r2, #15
 8016f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8016f60:	43db      	mvns	r3, r3
 8016f62:	69ba      	ldr	r2, [r7, #24]
 8016f64:	4013      	ands	r3, r2
 8016f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	691a      	ldr	r2, [r3, #16]
 8016f6c:	69fb      	ldr	r3, [r7, #28]
 8016f6e:	f003 0307 	and.w	r3, r3, #7
 8016f72:	009b      	lsls	r3, r3, #2
 8016f74:	fa02 f303 	lsl.w	r3, r2, r3
 8016f78:	69ba      	ldr	r2, [r7, #24]
 8016f7a:	4313      	orrs	r3, r2
 8016f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8016f7e:	69fb      	ldr	r3, [r7, #28]
 8016f80:	08da      	lsrs	r2, r3, #3
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	3208      	adds	r2, #8
 8016f86:	69b9      	ldr	r1, [r7, #24]
 8016f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016f92:	69fb      	ldr	r3, [r7, #28]
 8016f94:	005b      	lsls	r3, r3, #1
 8016f96:	2203      	movs	r2, #3
 8016f98:	fa02 f303 	lsl.w	r3, r2, r3
 8016f9c:	43db      	mvns	r3, r3
 8016f9e:	69ba      	ldr	r2, [r7, #24]
 8016fa0:	4013      	ands	r3, r2
 8016fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	685b      	ldr	r3, [r3, #4]
 8016fa8:	f003 0203 	and.w	r2, r3, #3
 8016fac:	69fb      	ldr	r3, [r7, #28]
 8016fae:	005b      	lsls	r3, r3, #1
 8016fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8016fb4:	69ba      	ldr	r2, [r7, #24]
 8016fb6:	4313      	orrs	r3, r2
 8016fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	69ba      	ldr	r2, [r7, #24]
 8016fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	685b      	ldr	r3, [r3, #4]
 8016fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	f000 80a2 	beq.w	8017112 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016fce:	2300      	movs	r3, #0
 8016fd0:	60fb      	str	r3, [r7, #12]
 8016fd2:	4b57      	ldr	r3, [pc, #348]	; (8017130 <HAL_GPIO_Init+0x2e8>)
 8016fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fd6:	4a56      	ldr	r2, [pc, #344]	; (8017130 <HAL_GPIO_Init+0x2e8>)
 8016fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8016fde:	4b54      	ldr	r3, [pc, #336]	; (8017130 <HAL_GPIO_Init+0x2e8>)
 8016fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016fe6:	60fb      	str	r3, [r7, #12]
 8016fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8016fea:	4a52      	ldr	r2, [pc, #328]	; (8017134 <HAL_GPIO_Init+0x2ec>)
 8016fec:	69fb      	ldr	r3, [r7, #28]
 8016fee:	089b      	lsrs	r3, r3, #2
 8016ff0:	3302      	adds	r3, #2
 8016ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8016ff8:	69fb      	ldr	r3, [r7, #28]
 8016ffa:	f003 0303 	and.w	r3, r3, #3
 8016ffe:	009b      	lsls	r3, r3, #2
 8017000:	220f      	movs	r2, #15
 8017002:	fa02 f303 	lsl.w	r3, r2, r3
 8017006:	43db      	mvns	r3, r3
 8017008:	69ba      	ldr	r2, [r7, #24]
 801700a:	4013      	ands	r3, r2
 801700c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	4a49      	ldr	r2, [pc, #292]	; (8017138 <HAL_GPIO_Init+0x2f0>)
 8017012:	4293      	cmp	r3, r2
 8017014:	d019      	beq.n	801704a <HAL_GPIO_Init+0x202>
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	4a48      	ldr	r2, [pc, #288]	; (801713c <HAL_GPIO_Init+0x2f4>)
 801701a:	4293      	cmp	r3, r2
 801701c:	d013      	beq.n	8017046 <HAL_GPIO_Init+0x1fe>
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	4a47      	ldr	r2, [pc, #284]	; (8017140 <HAL_GPIO_Init+0x2f8>)
 8017022:	4293      	cmp	r3, r2
 8017024:	d00d      	beq.n	8017042 <HAL_GPIO_Init+0x1fa>
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	4a46      	ldr	r2, [pc, #280]	; (8017144 <HAL_GPIO_Init+0x2fc>)
 801702a:	4293      	cmp	r3, r2
 801702c:	d007      	beq.n	801703e <HAL_GPIO_Init+0x1f6>
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	4a45      	ldr	r2, [pc, #276]	; (8017148 <HAL_GPIO_Init+0x300>)
 8017032:	4293      	cmp	r3, r2
 8017034:	d101      	bne.n	801703a <HAL_GPIO_Init+0x1f2>
 8017036:	2304      	movs	r3, #4
 8017038:	e008      	b.n	801704c <HAL_GPIO_Init+0x204>
 801703a:	2307      	movs	r3, #7
 801703c:	e006      	b.n	801704c <HAL_GPIO_Init+0x204>
 801703e:	2303      	movs	r3, #3
 8017040:	e004      	b.n	801704c <HAL_GPIO_Init+0x204>
 8017042:	2302      	movs	r3, #2
 8017044:	e002      	b.n	801704c <HAL_GPIO_Init+0x204>
 8017046:	2301      	movs	r3, #1
 8017048:	e000      	b.n	801704c <HAL_GPIO_Init+0x204>
 801704a:	2300      	movs	r3, #0
 801704c:	69fa      	ldr	r2, [r7, #28]
 801704e:	f002 0203 	and.w	r2, r2, #3
 8017052:	0092      	lsls	r2, r2, #2
 8017054:	4093      	lsls	r3, r2
 8017056:	69ba      	ldr	r2, [r7, #24]
 8017058:	4313      	orrs	r3, r2
 801705a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801705c:	4935      	ldr	r1, [pc, #212]	; (8017134 <HAL_GPIO_Init+0x2ec>)
 801705e:	69fb      	ldr	r3, [r7, #28]
 8017060:	089b      	lsrs	r3, r3, #2
 8017062:	3302      	adds	r3, #2
 8017064:	69ba      	ldr	r2, [r7, #24]
 8017066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801706a:	4b38      	ldr	r3, [pc, #224]	; (801714c <HAL_GPIO_Init+0x304>)
 801706c:	689b      	ldr	r3, [r3, #8]
 801706e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017070:	693b      	ldr	r3, [r7, #16]
 8017072:	43db      	mvns	r3, r3
 8017074:	69ba      	ldr	r2, [r7, #24]
 8017076:	4013      	ands	r3, r2
 8017078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801707a:	683b      	ldr	r3, [r7, #0]
 801707c:	685b      	ldr	r3, [r3, #4]
 801707e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017082:	2b00      	cmp	r3, #0
 8017084:	d003      	beq.n	801708e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8017086:	69ba      	ldr	r2, [r7, #24]
 8017088:	693b      	ldr	r3, [r7, #16]
 801708a:	4313      	orrs	r3, r2
 801708c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801708e:	4a2f      	ldr	r2, [pc, #188]	; (801714c <HAL_GPIO_Init+0x304>)
 8017090:	69bb      	ldr	r3, [r7, #24]
 8017092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8017094:	4b2d      	ldr	r3, [pc, #180]	; (801714c <HAL_GPIO_Init+0x304>)
 8017096:	68db      	ldr	r3, [r3, #12]
 8017098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801709a:	693b      	ldr	r3, [r7, #16]
 801709c:	43db      	mvns	r3, r3
 801709e:	69ba      	ldr	r2, [r7, #24]
 80170a0:	4013      	ands	r3, r2
 80170a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80170a4:	683b      	ldr	r3, [r7, #0]
 80170a6:	685b      	ldr	r3, [r3, #4]
 80170a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d003      	beq.n	80170b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80170b0:	69ba      	ldr	r2, [r7, #24]
 80170b2:	693b      	ldr	r3, [r7, #16]
 80170b4:	4313      	orrs	r3, r2
 80170b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80170b8:	4a24      	ldr	r2, [pc, #144]	; (801714c <HAL_GPIO_Init+0x304>)
 80170ba:	69bb      	ldr	r3, [r7, #24]
 80170bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80170be:	4b23      	ldr	r3, [pc, #140]	; (801714c <HAL_GPIO_Init+0x304>)
 80170c0:	685b      	ldr	r3, [r3, #4]
 80170c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80170c4:	693b      	ldr	r3, [r7, #16]
 80170c6:	43db      	mvns	r3, r3
 80170c8:	69ba      	ldr	r2, [r7, #24]
 80170ca:	4013      	ands	r3, r2
 80170cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	685b      	ldr	r3, [r3, #4]
 80170d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d003      	beq.n	80170e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80170da:	69ba      	ldr	r2, [r7, #24]
 80170dc:	693b      	ldr	r3, [r7, #16]
 80170de:	4313      	orrs	r3, r2
 80170e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80170e2:	4a1a      	ldr	r2, [pc, #104]	; (801714c <HAL_GPIO_Init+0x304>)
 80170e4:	69bb      	ldr	r3, [r7, #24]
 80170e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80170e8:	4b18      	ldr	r3, [pc, #96]	; (801714c <HAL_GPIO_Init+0x304>)
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80170ee:	693b      	ldr	r3, [r7, #16]
 80170f0:	43db      	mvns	r3, r3
 80170f2:	69ba      	ldr	r2, [r7, #24]
 80170f4:	4013      	ands	r3, r2
 80170f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	685b      	ldr	r3, [r3, #4]
 80170fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017100:	2b00      	cmp	r3, #0
 8017102:	d003      	beq.n	801710c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8017104:	69ba      	ldr	r2, [r7, #24]
 8017106:	693b      	ldr	r3, [r7, #16]
 8017108:	4313      	orrs	r3, r2
 801710a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801710c:	4a0f      	ldr	r2, [pc, #60]	; (801714c <HAL_GPIO_Init+0x304>)
 801710e:	69bb      	ldr	r3, [r7, #24]
 8017110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017112:	69fb      	ldr	r3, [r7, #28]
 8017114:	3301      	adds	r3, #1
 8017116:	61fb      	str	r3, [r7, #28]
 8017118:	69fb      	ldr	r3, [r7, #28]
 801711a:	2b0f      	cmp	r3, #15
 801711c:	f67f aea2 	bls.w	8016e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8017120:	bf00      	nop
 8017122:	bf00      	nop
 8017124:	3724      	adds	r7, #36	; 0x24
 8017126:	46bd      	mov	sp, r7
 8017128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712c:	4770      	bx	lr
 801712e:	bf00      	nop
 8017130:	40023800 	.word	0x40023800
 8017134:	40013800 	.word	0x40013800
 8017138:	40020000 	.word	0x40020000
 801713c:	40020400 	.word	0x40020400
 8017140:	40020800 	.word	0x40020800
 8017144:	40020c00 	.word	0x40020c00
 8017148:	40021000 	.word	0x40021000
 801714c:	40013c00 	.word	0x40013c00

08017150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017150:	b480      	push	{r7}
 8017152:	b085      	sub	sp, #20
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
 8017158:	460b      	mov	r3, r1
 801715a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	691a      	ldr	r2, [r3, #16]
 8017160:	887b      	ldrh	r3, [r7, #2]
 8017162:	4013      	ands	r3, r2
 8017164:	2b00      	cmp	r3, #0
 8017166:	d002      	beq.n	801716e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8017168:	2301      	movs	r3, #1
 801716a:	73fb      	strb	r3, [r7, #15]
 801716c:	e001      	b.n	8017172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801716e:	2300      	movs	r3, #0
 8017170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8017172:	7bfb      	ldrb	r3, [r7, #15]
}
 8017174:	4618      	mov	r0, r3
 8017176:	3714      	adds	r7, #20
 8017178:	46bd      	mov	sp, r7
 801717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717e:	4770      	bx	lr

08017180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017180:	b480      	push	{r7}
 8017182:	b083      	sub	sp, #12
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]
 8017188:	460b      	mov	r3, r1
 801718a:	807b      	strh	r3, [r7, #2]
 801718c:	4613      	mov	r3, r2
 801718e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017190:	787b      	ldrb	r3, [r7, #1]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d003      	beq.n	801719e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8017196:	887a      	ldrh	r2, [r7, #2]
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801719c:	e003      	b.n	80171a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801719e:	887b      	ldrh	r3, [r7, #2]
 80171a0:	041a      	lsls	r2, r3, #16
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	619a      	str	r2, [r3, #24]
}
 80171a6:	bf00      	nop
 80171a8:	370c      	adds	r7, #12
 80171aa:	46bd      	mov	sp, r7
 80171ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b0:	4770      	bx	lr
	...

080171b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b082      	sub	sp, #8
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	4603      	mov	r3, r0
 80171bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80171be:	4b08      	ldr	r3, [pc, #32]	; (80171e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80171c0:	695a      	ldr	r2, [r3, #20]
 80171c2:	88fb      	ldrh	r3, [r7, #6]
 80171c4:	4013      	ands	r3, r2
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d006      	beq.n	80171d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80171ca:	4a05      	ldr	r2, [pc, #20]	; (80171e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80171cc:	88fb      	ldrh	r3, [r7, #6]
 80171ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80171d0:	88fb      	ldrh	r3, [r7, #6]
 80171d2:	4618      	mov	r0, r3
 80171d4:	f7ec fd74 	bl	8003cc0 <HAL_GPIO_EXTI_Callback>
  }
}
 80171d8:	bf00      	nop
 80171da:	3708      	adds	r7, #8
 80171dc:	46bd      	mov	sp, r7
 80171de:	bd80      	pop	{r7, pc}
 80171e0:	40013c00 	.word	0x40013c00

080171e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b084      	sub	sp, #16
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d101      	bne.n	80171f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80171f2:	2301      	movs	r3, #1
 80171f4:	e12b      	b.n	801744e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80171fc:	b2db      	uxtb	r3, r3
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d106      	bne.n	8017210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	2200      	movs	r2, #0
 8017206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f7fe fcbc 	bl	8015b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	2224      	movs	r2, #36	; 0x24
 8017214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	681a      	ldr	r2, [r3, #0]
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	f022 0201 	bic.w	r2, r2, #1
 8017226:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	681a      	ldr	r2, [r3, #0]
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017236:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	681a      	ldr	r2, [r3, #0]
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8017246:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8017248:	f003 fa9a 	bl	801a780 <HAL_RCC_GetPCLK1Freq>
 801724c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	685b      	ldr	r3, [r3, #4]
 8017252:	4a81      	ldr	r2, [pc, #516]	; (8017458 <HAL_I2C_Init+0x274>)
 8017254:	4293      	cmp	r3, r2
 8017256:	d807      	bhi.n	8017268 <HAL_I2C_Init+0x84>
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	4a80      	ldr	r2, [pc, #512]	; (801745c <HAL_I2C_Init+0x278>)
 801725c:	4293      	cmp	r3, r2
 801725e:	bf94      	ite	ls
 8017260:	2301      	movls	r3, #1
 8017262:	2300      	movhi	r3, #0
 8017264:	b2db      	uxtb	r3, r3
 8017266:	e006      	b.n	8017276 <HAL_I2C_Init+0x92>
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	4a7d      	ldr	r2, [pc, #500]	; (8017460 <HAL_I2C_Init+0x27c>)
 801726c:	4293      	cmp	r3, r2
 801726e:	bf94      	ite	ls
 8017270:	2301      	movls	r3, #1
 8017272:	2300      	movhi	r3, #0
 8017274:	b2db      	uxtb	r3, r3
 8017276:	2b00      	cmp	r3, #0
 8017278:	d001      	beq.n	801727e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801727a:	2301      	movs	r3, #1
 801727c:	e0e7      	b.n	801744e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	4a78      	ldr	r2, [pc, #480]	; (8017464 <HAL_I2C_Init+0x280>)
 8017282:	fba2 2303 	umull	r2, r3, r2, r3
 8017286:	0c9b      	lsrs	r3, r3, #18
 8017288:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	685b      	ldr	r3, [r3, #4]
 8017290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	68ba      	ldr	r2, [r7, #8]
 801729a:	430a      	orrs	r2, r1
 801729c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	6a1b      	ldr	r3, [r3, #32]
 80172a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	685b      	ldr	r3, [r3, #4]
 80172ac:	4a6a      	ldr	r2, [pc, #424]	; (8017458 <HAL_I2C_Init+0x274>)
 80172ae:	4293      	cmp	r3, r2
 80172b0:	d802      	bhi.n	80172b8 <HAL_I2C_Init+0xd4>
 80172b2:	68bb      	ldr	r3, [r7, #8]
 80172b4:	3301      	adds	r3, #1
 80172b6:	e009      	b.n	80172cc <HAL_I2C_Init+0xe8>
 80172b8:	68bb      	ldr	r3, [r7, #8]
 80172ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80172be:	fb02 f303 	mul.w	r3, r2, r3
 80172c2:	4a69      	ldr	r2, [pc, #420]	; (8017468 <HAL_I2C_Init+0x284>)
 80172c4:	fba2 2303 	umull	r2, r3, r2, r3
 80172c8:	099b      	lsrs	r3, r3, #6
 80172ca:	3301      	adds	r3, #1
 80172cc:	687a      	ldr	r2, [r7, #4]
 80172ce:	6812      	ldr	r2, [r2, #0]
 80172d0:	430b      	orrs	r3, r1
 80172d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	69db      	ldr	r3, [r3, #28]
 80172da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80172de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	685b      	ldr	r3, [r3, #4]
 80172e6:	495c      	ldr	r1, [pc, #368]	; (8017458 <HAL_I2C_Init+0x274>)
 80172e8:	428b      	cmp	r3, r1
 80172ea:	d819      	bhi.n	8017320 <HAL_I2C_Init+0x13c>
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	1e59      	subs	r1, r3, #1
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	685b      	ldr	r3, [r3, #4]
 80172f4:	005b      	lsls	r3, r3, #1
 80172f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80172fa:	1c59      	adds	r1, r3, #1
 80172fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8017300:	400b      	ands	r3, r1
 8017302:	2b00      	cmp	r3, #0
 8017304:	d00a      	beq.n	801731c <HAL_I2C_Init+0x138>
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	1e59      	subs	r1, r3, #1
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	685b      	ldr	r3, [r3, #4]
 801730e:	005b      	lsls	r3, r3, #1
 8017310:	fbb1 f3f3 	udiv	r3, r1, r3
 8017314:	3301      	adds	r3, #1
 8017316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801731a:	e051      	b.n	80173c0 <HAL_I2C_Init+0x1dc>
 801731c:	2304      	movs	r3, #4
 801731e:	e04f      	b.n	80173c0 <HAL_I2C_Init+0x1dc>
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	689b      	ldr	r3, [r3, #8]
 8017324:	2b00      	cmp	r3, #0
 8017326:	d111      	bne.n	801734c <HAL_I2C_Init+0x168>
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	1e58      	subs	r0, r3, #1
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	6859      	ldr	r1, [r3, #4]
 8017330:	460b      	mov	r3, r1
 8017332:	005b      	lsls	r3, r3, #1
 8017334:	440b      	add	r3, r1
 8017336:	fbb0 f3f3 	udiv	r3, r0, r3
 801733a:	3301      	adds	r3, #1
 801733c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017340:	2b00      	cmp	r3, #0
 8017342:	bf0c      	ite	eq
 8017344:	2301      	moveq	r3, #1
 8017346:	2300      	movne	r3, #0
 8017348:	b2db      	uxtb	r3, r3
 801734a:	e012      	b.n	8017372 <HAL_I2C_Init+0x18e>
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	1e58      	subs	r0, r3, #1
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	6859      	ldr	r1, [r3, #4]
 8017354:	460b      	mov	r3, r1
 8017356:	009b      	lsls	r3, r3, #2
 8017358:	440b      	add	r3, r1
 801735a:	0099      	lsls	r1, r3, #2
 801735c:	440b      	add	r3, r1
 801735e:	fbb0 f3f3 	udiv	r3, r0, r3
 8017362:	3301      	adds	r3, #1
 8017364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017368:	2b00      	cmp	r3, #0
 801736a:	bf0c      	ite	eq
 801736c:	2301      	moveq	r3, #1
 801736e:	2300      	movne	r3, #0
 8017370:	b2db      	uxtb	r3, r3
 8017372:	2b00      	cmp	r3, #0
 8017374:	d001      	beq.n	801737a <HAL_I2C_Init+0x196>
 8017376:	2301      	movs	r3, #1
 8017378:	e022      	b.n	80173c0 <HAL_I2C_Init+0x1dc>
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	689b      	ldr	r3, [r3, #8]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d10e      	bne.n	80173a0 <HAL_I2C_Init+0x1bc>
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	1e58      	subs	r0, r3, #1
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	6859      	ldr	r1, [r3, #4]
 801738a:	460b      	mov	r3, r1
 801738c:	005b      	lsls	r3, r3, #1
 801738e:	440b      	add	r3, r1
 8017390:	fbb0 f3f3 	udiv	r3, r0, r3
 8017394:	3301      	adds	r3, #1
 8017396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801739a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801739e:	e00f      	b.n	80173c0 <HAL_I2C_Init+0x1dc>
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	1e58      	subs	r0, r3, #1
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	6859      	ldr	r1, [r3, #4]
 80173a8:	460b      	mov	r3, r1
 80173aa:	009b      	lsls	r3, r3, #2
 80173ac:	440b      	add	r3, r1
 80173ae:	0099      	lsls	r1, r3, #2
 80173b0:	440b      	add	r3, r1
 80173b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80173b6:	3301      	adds	r3, #1
 80173b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80173bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80173c0:	6879      	ldr	r1, [r7, #4]
 80173c2:	6809      	ldr	r1, [r1, #0]
 80173c4:	4313      	orrs	r3, r2
 80173c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	69da      	ldr	r2, [r3, #28]
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	6a1b      	ldr	r3, [r3, #32]
 80173da:	431a      	orrs	r2, r3
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	430a      	orrs	r2, r1
 80173e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	689b      	ldr	r3, [r3, #8]
 80173ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80173ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80173f2:	687a      	ldr	r2, [r7, #4]
 80173f4:	6911      	ldr	r1, [r2, #16]
 80173f6:	687a      	ldr	r2, [r7, #4]
 80173f8:	68d2      	ldr	r2, [r2, #12]
 80173fa:	4311      	orrs	r1, r2
 80173fc:	687a      	ldr	r2, [r7, #4]
 80173fe:	6812      	ldr	r2, [r2, #0]
 8017400:	430b      	orrs	r3, r1
 8017402:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	68db      	ldr	r3, [r3, #12]
 801740a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	695a      	ldr	r2, [r3, #20]
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	699b      	ldr	r3, [r3, #24]
 8017416:	431a      	orrs	r2, r3
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	430a      	orrs	r2, r1
 801741e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	681a      	ldr	r2, [r3, #0]
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	f042 0201 	orr.w	r2, r2, #1
 801742e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	2200      	movs	r2, #0
 8017434:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	2220      	movs	r2, #32
 801743a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	2200      	movs	r2, #0
 8017442:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	2200      	movs	r2, #0
 8017448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801744c:	2300      	movs	r3, #0
}
 801744e:	4618      	mov	r0, r3
 8017450:	3710      	adds	r7, #16
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}
 8017456:	bf00      	nop
 8017458:	000186a0 	.word	0x000186a0
 801745c:	001e847f 	.word	0x001e847f
 8017460:	003d08ff 	.word	0x003d08ff
 8017464:	431bde83 	.word	0x431bde83
 8017468:	10624dd3 	.word	0x10624dd3

0801746c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801746c:	b580      	push	{r7, lr}
 801746e:	b088      	sub	sp, #32
 8017470:	af02      	add	r7, sp, #8
 8017472:	60f8      	str	r0, [r7, #12]
 8017474:	4608      	mov	r0, r1
 8017476:	4611      	mov	r1, r2
 8017478:	461a      	mov	r2, r3
 801747a:	4603      	mov	r3, r0
 801747c:	817b      	strh	r3, [r7, #10]
 801747e:	460b      	mov	r3, r1
 8017480:	813b      	strh	r3, [r7, #8]
 8017482:	4613      	mov	r3, r2
 8017484:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8017486:	f7fe ff8d 	bl	80163a4 <HAL_GetTick>
 801748a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017492:	b2db      	uxtb	r3, r3
 8017494:	2b20      	cmp	r3, #32
 8017496:	f040 80d9 	bne.w	801764c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801749a:	697b      	ldr	r3, [r7, #20]
 801749c:	9300      	str	r3, [sp, #0]
 801749e:	2319      	movs	r3, #25
 80174a0:	2201      	movs	r2, #1
 80174a2:	496d      	ldr	r1, [pc, #436]	; (8017658 <HAL_I2C_Mem_Write+0x1ec>)
 80174a4:	68f8      	ldr	r0, [r7, #12]
 80174a6:	f002 fad1 	bl	8019a4c <I2C_WaitOnFlagUntilTimeout>
 80174aa:	4603      	mov	r3, r0
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d001      	beq.n	80174b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80174b0:	2302      	movs	r3, #2
 80174b2:	e0cc      	b.n	801764e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80174ba:	2b01      	cmp	r3, #1
 80174bc:	d101      	bne.n	80174c2 <HAL_I2C_Mem_Write+0x56>
 80174be:	2302      	movs	r3, #2
 80174c0:	e0c5      	b.n	801764e <HAL_I2C_Mem_Write+0x1e2>
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	2201      	movs	r2, #1
 80174c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	f003 0301 	and.w	r3, r3, #1
 80174d4:	2b01      	cmp	r3, #1
 80174d6:	d007      	beq.n	80174e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	681a      	ldr	r2, [r3, #0]
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	f042 0201 	orr.w	r2, r2, #1
 80174e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	681a      	ldr	r2, [r3, #0]
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80174f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	2221      	movs	r2, #33	; 0x21
 80174fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	2240      	movs	r2, #64	; 0x40
 8017504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	2200      	movs	r2, #0
 801750c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	6a3a      	ldr	r2, [r7, #32]
 8017512:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017518:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801751e:	b29a      	uxth	r2, r3
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	4a4d      	ldr	r2, [pc, #308]	; (801765c <HAL_I2C_Mem_Write+0x1f0>)
 8017528:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801752a:	88f8      	ldrh	r0, [r7, #6]
 801752c:	893a      	ldrh	r2, [r7, #8]
 801752e:	8979      	ldrh	r1, [r7, #10]
 8017530:	697b      	ldr	r3, [r7, #20]
 8017532:	9301      	str	r3, [sp, #4]
 8017534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017536:	9300      	str	r3, [sp, #0]
 8017538:	4603      	mov	r3, r0
 801753a:	68f8      	ldr	r0, [r7, #12]
 801753c:	f002 f860 	bl	8019600 <I2C_RequestMemoryWrite>
 8017540:	4603      	mov	r3, r0
 8017542:	2b00      	cmp	r3, #0
 8017544:	d052      	beq.n	80175ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8017546:	2301      	movs	r3, #1
 8017548:	e081      	b.n	801764e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801754a:	697a      	ldr	r2, [r7, #20]
 801754c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801754e:	68f8      	ldr	r0, [r7, #12]
 8017550:	f002 fb52 	bl	8019bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8017554:	4603      	mov	r3, r0
 8017556:	2b00      	cmp	r3, #0
 8017558:	d00d      	beq.n	8017576 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801755e:	2b04      	cmp	r3, #4
 8017560:	d107      	bne.n	8017572 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	681a      	ldr	r2, [r3, #0]
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017570:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8017572:	2301      	movs	r3, #1
 8017574:	e06b      	b.n	801764e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801757a:	781a      	ldrb	r2, [r3, #0]
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017586:	1c5a      	adds	r2, r3, #1
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017590:	3b01      	subs	r3, #1
 8017592:	b29a      	uxth	r2, r3
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801759c:	b29b      	uxth	r3, r3
 801759e:	3b01      	subs	r3, #1
 80175a0:	b29a      	uxth	r2, r3
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	695b      	ldr	r3, [r3, #20]
 80175ac:	f003 0304 	and.w	r3, r3, #4
 80175b0:	2b04      	cmp	r3, #4
 80175b2:	d11b      	bne.n	80175ec <HAL_I2C_Mem_Write+0x180>
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d017      	beq.n	80175ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175c0:	781a      	ldrb	r2, [r3, #0]
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175cc:	1c5a      	adds	r2, r3, #1
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80175d6:	3b01      	subs	r3, #1
 80175d8:	b29a      	uxth	r2, r3
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80175e2:	b29b      	uxth	r3, r3
 80175e4:	3b01      	subs	r3, #1
 80175e6:	b29a      	uxth	r2, r3
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d1aa      	bne.n	801754a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80175f4:	697a      	ldr	r2, [r7, #20]
 80175f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80175f8:	68f8      	ldr	r0, [r7, #12]
 80175fa:	f002 fb3e 	bl	8019c7a <I2C_WaitOnBTFFlagUntilTimeout>
 80175fe:	4603      	mov	r3, r0
 8017600:	2b00      	cmp	r3, #0
 8017602:	d00d      	beq.n	8017620 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017608:	2b04      	cmp	r3, #4
 801760a:	d107      	bne.n	801761c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	681a      	ldr	r2, [r3, #0]
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801761a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801761c:	2301      	movs	r3, #1
 801761e:	e016      	b.n	801764e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	681a      	ldr	r2, [r3, #0]
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801762e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	2220      	movs	r2, #32
 8017634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	2200      	movs	r2, #0
 801763c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	2200      	movs	r2, #0
 8017644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017648:	2300      	movs	r3, #0
 801764a:	e000      	b.n	801764e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 801764c:	2302      	movs	r3, #2
  }
}
 801764e:	4618      	mov	r0, r3
 8017650:	3718      	adds	r7, #24
 8017652:	46bd      	mov	sp, r7
 8017654:	bd80      	pop	{r7, pc}
 8017656:	bf00      	nop
 8017658:	00100002 	.word	0x00100002
 801765c:	ffff0000 	.word	0xffff0000

08017660 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b08c      	sub	sp, #48	; 0x30
 8017664:	af02      	add	r7, sp, #8
 8017666:	60f8      	str	r0, [r7, #12]
 8017668:	4608      	mov	r0, r1
 801766a:	4611      	mov	r1, r2
 801766c:	461a      	mov	r2, r3
 801766e:	4603      	mov	r3, r0
 8017670:	817b      	strh	r3, [r7, #10]
 8017672:	460b      	mov	r3, r1
 8017674:	813b      	strh	r3, [r7, #8]
 8017676:	4613      	mov	r3, r2
 8017678:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801767a:	f7fe fe93 	bl	80163a4 <HAL_GetTick>
 801767e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017686:	b2db      	uxtb	r3, r3
 8017688:	2b20      	cmp	r3, #32
 801768a:	f040 8208 	bne.w	8017a9e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017690:	9300      	str	r3, [sp, #0]
 8017692:	2319      	movs	r3, #25
 8017694:	2201      	movs	r2, #1
 8017696:	497b      	ldr	r1, [pc, #492]	; (8017884 <HAL_I2C_Mem_Read+0x224>)
 8017698:	68f8      	ldr	r0, [r7, #12]
 801769a:	f002 f9d7 	bl	8019a4c <I2C_WaitOnFlagUntilTimeout>
 801769e:	4603      	mov	r3, r0
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d001      	beq.n	80176a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80176a4:	2302      	movs	r3, #2
 80176a6:	e1fb      	b.n	8017aa0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80176ae:	2b01      	cmp	r3, #1
 80176b0:	d101      	bne.n	80176b6 <HAL_I2C_Mem_Read+0x56>
 80176b2:	2302      	movs	r3, #2
 80176b4:	e1f4      	b.n	8017aa0 <HAL_I2C_Mem_Read+0x440>
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	2201      	movs	r2, #1
 80176ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	f003 0301 	and.w	r3, r3, #1
 80176c8:	2b01      	cmp	r3, #1
 80176ca:	d007      	beq.n	80176dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	681a      	ldr	r2, [r3, #0]
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	f042 0201 	orr.w	r2, r2, #1
 80176da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	681a      	ldr	r2, [r3, #0]
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80176ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	2222      	movs	r2, #34	; 0x22
 80176f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	2240      	movs	r2, #64	; 0x40
 80176f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	2200      	movs	r2, #0
 8017700:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801770c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017712:	b29a      	uxth	r2, r3
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	4a5b      	ldr	r2, [pc, #364]	; (8017888 <HAL_I2C_Mem_Read+0x228>)
 801771c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801771e:	88f8      	ldrh	r0, [r7, #6]
 8017720:	893a      	ldrh	r2, [r7, #8]
 8017722:	8979      	ldrh	r1, [r7, #10]
 8017724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017726:	9301      	str	r3, [sp, #4]
 8017728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801772a:	9300      	str	r3, [sp, #0]
 801772c:	4603      	mov	r3, r0
 801772e:	68f8      	ldr	r0, [r7, #12]
 8017730:	f001 fffc 	bl	801972c <I2C_RequestMemoryRead>
 8017734:	4603      	mov	r3, r0
 8017736:	2b00      	cmp	r3, #0
 8017738:	d001      	beq.n	801773e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 801773a:	2301      	movs	r3, #1
 801773c:	e1b0      	b.n	8017aa0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017742:	2b00      	cmp	r3, #0
 8017744:	d113      	bne.n	801776e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017746:	2300      	movs	r3, #0
 8017748:	623b      	str	r3, [r7, #32]
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	695b      	ldr	r3, [r3, #20]
 8017750:	623b      	str	r3, [r7, #32]
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	699b      	ldr	r3, [r3, #24]
 8017758:	623b      	str	r3, [r7, #32]
 801775a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	681a      	ldr	r2, [r3, #0]
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801776a:	601a      	str	r2, [r3, #0]
 801776c:	e184      	b.n	8017a78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017772:	2b01      	cmp	r3, #1
 8017774:	d11b      	bne.n	80177ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	681a      	ldr	r2, [r3, #0]
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017784:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017786:	2300      	movs	r3, #0
 8017788:	61fb      	str	r3, [r7, #28]
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	695b      	ldr	r3, [r3, #20]
 8017790:	61fb      	str	r3, [r7, #28]
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	699b      	ldr	r3, [r3, #24]
 8017798:	61fb      	str	r3, [r7, #28]
 801779a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	681a      	ldr	r2, [r3, #0]
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80177aa:	601a      	str	r2, [r3, #0]
 80177ac:	e164      	b.n	8017a78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80177b2:	2b02      	cmp	r3, #2
 80177b4:	d11b      	bne.n	80177ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	681a      	ldr	r2, [r3, #0]
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80177c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	681a      	ldr	r2, [r3, #0]
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80177d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80177d6:	2300      	movs	r3, #0
 80177d8:	61bb      	str	r3, [r7, #24]
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	695b      	ldr	r3, [r3, #20]
 80177e0:	61bb      	str	r3, [r7, #24]
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	681b      	ldr	r3, [r3, #0]
 80177e6:	699b      	ldr	r3, [r3, #24]
 80177e8:	61bb      	str	r3, [r7, #24]
 80177ea:	69bb      	ldr	r3, [r7, #24]
 80177ec:	e144      	b.n	8017a78 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80177ee:	2300      	movs	r3, #0
 80177f0:	617b      	str	r3, [r7, #20]
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	695b      	ldr	r3, [r3, #20]
 80177f8:	617b      	str	r3, [r7, #20]
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	699b      	ldr	r3, [r3, #24]
 8017800:	617b      	str	r3, [r7, #20]
 8017802:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8017804:	e138      	b.n	8017a78 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801780a:	2b03      	cmp	r3, #3
 801780c:	f200 80f1 	bhi.w	80179f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017814:	2b01      	cmp	r3, #1
 8017816:	d123      	bne.n	8017860 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801781a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801781c:	68f8      	ldr	r0, [r7, #12]
 801781e:	f002 fa9f 	bl	8019d60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8017822:	4603      	mov	r3, r0
 8017824:	2b00      	cmp	r3, #0
 8017826:	d001      	beq.n	801782c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8017828:	2301      	movs	r3, #1
 801782a:	e139      	b.n	8017aa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	691a      	ldr	r2, [r3, #16]
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017836:	b2d2      	uxtb	r2, r2
 8017838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801783e:	1c5a      	adds	r2, r3, #1
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017848:	3b01      	subs	r3, #1
 801784a:	b29a      	uxth	r2, r3
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017854:	b29b      	uxth	r3, r3
 8017856:	3b01      	subs	r3, #1
 8017858:	b29a      	uxth	r2, r3
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801785e:	e10b      	b.n	8017a78 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017864:	2b02      	cmp	r3, #2
 8017866:	d14e      	bne.n	8017906 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801786a:	9300      	str	r3, [sp, #0]
 801786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801786e:	2200      	movs	r2, #0
 8017870:	4906      	ldr	r1, [pc, #24]	; (801788c <HAL_I2C_Mem_Read+0x22c>)
 8017872:	68f8      	ldr	r0, [r7, #12]
 8017874:	f002 f8ea 	bl	8019a4c <I2C_WaitOnFlagUntilTimeout>
 8017878:	4603      	mov	r3, r0
 801787a:	2b00      	cmp	r3, #0
 801787c:	d008      	beq.n	8017890 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 801787e:	2301      	movs	r3, #1
 8017880:	e10e      	b.n	8017aa0 <HAL_I2C_Mem_Read+0x440>
 8017882:	bf00      	nop
 8017884:	00100002 	.word	0x00100002
 8017888:	ffff0000 	.word	0xffff0000
 801788c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	681a      	ldr	r2, [r3, #0]
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801789e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	691a      	ldr	r2, [r3, #16]
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178aa:	b2d2      	uxtb	r2, r2
 80178ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178b2:	1c5a      	adds	r2, r3, #1
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80178bc:	3b01      	subs	r3, #1
 80178be:	b29a      	uxth	r2, r3
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80178c8:	b29b      	uxth	r3, r3
 80178ca:	3b01      	subs	r3, #1
 80178cc:	b29a      	uxth	r2, r3
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	691a      	ldr	r2, [r3, #16]
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178dc:	b2d2      	uxtb	r2, r2
 80178de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178e4:	1c5a      	adds	r2, r3, #1
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80178ee:	3b01      	subs	r3, #1
 80178f0:	b29a      	uxth	r2, r3
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80178fa:	b29b      	uxth	r3, r3
 80178fc:	3b01      	subs	r3, #1
 80178fe:	b29a      	uxth	r2, r3
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017904:	e0b8      	b.n	8017a78 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017908:	9300      	str	r3, [sp, #0]
 801790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801790c:	2200      	movs	r2, #0
 801790e:	4966      	ldr	r1, [pc, #408]	; (8017aa8 <HAL_I2C_Mem_Read+0x448>)
 8017910:	68f8      	ldr	r0, [r7, #12]
 8017912:	f002 f89b 	bl	8019a4c <I2C_WaitOnFlagUntilTimeout>
 8017916:	4603      	mov	r3, r0
 8017918:	2b00      	cmp	r3, #0
 801791a:	d001      	beq.n	8017920 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 801791c:	2301      	movs	r3, #1
 801791e:	e0bf      	b.n	8017aa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	681a      	ldr	r2, [r3, #0]
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801792e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	691a      	ldr	r2, [r3, #16]
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801793a:	b2d2      	uxtb	r2, r2
 801793c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017942:	1c5a      	adds	r2, r3, #1
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801794c:	3b01      	subs	r3, #1
 801794e:	b29a      	uxth	r2, r3
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017958:	b29b      	uxth	r3, r3
 801795a:	3b01      	subs	r3, #1
 801795c:	b29a      	uxth	r2, r3
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017964:	9300      	str	r3, [sp, #0]
 8017966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017968:	2200      	movs	r2, #0
 801796a:	494f      	ldr	r1, [pc, #316]	; (8017aa8 <HAL_I2C_Mem_Read+0x448>)
 801796c:	68f8      	ldr	r0, [r7, #12]
 801796e:	f002 f86d 	bl	8019a4c <I2C_WaitOnFlagUntilTimeout>
 8017972:	4603      	mov	r3, r0
 8017974:	2b00      	cmp	r3, #0
 8017976:	d001      	beq.n	801797c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8017978:	2301      	movs	r3, #1
 801797a:	e091      	b.n	8017aa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	681a      	ldr	r2, [r3, #0]
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801798a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	691a      	ldr	r2, [r3, #16]
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017996:	b2d2      	uxtb	r2, r2
 8017998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801799e:	1c5a      	adds	r2, r3, #1
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80179a8:	3b01      	subs	r3, #1
 80179aa:	b29a      	uxth	r2, r3
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80179b4:	b29b      	uxth	r3, r3
 80179b6:	3b01      	subs	r3, #1
 80179b8:	b29a      	uxth	r2, r3
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	691a      	ldr	r2, [r3, #16]
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179c8:	b2d2      	uxtb	r2, r2
 80179ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179d0:	1c5a      	adds	r2, r3, #1
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80179da:	3b01      	subs	r3, #1
 80179dc:	b29a      	uxth	r2, r3
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80179e6:	b29b      	uxth	r3, r3
 80179e8:	3b01      	subs	r3, #1
 80179ea:	b29a      	uxth	r2, r3
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80179f0:	e042      	b.n	8017a78 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80179f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80179f6:	68f8      	ldr	r0, [r7, #12]
 80179f8:	f002 f9b2 	bl	8019d60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80179fc:	4603      	mov	r3, r0
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d001      	beq.n	8017a06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8017a02:	2301      	movs	r3, #1
 8017a04:	e04c      	b.n	8017aa0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	691a      	ldr	r2, [r3, #16]
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a10:	b2d2      	uxtb	r2, r2
 8017a12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a18:	1c5a      	adds	r2, r3, #1
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a22:	3b01      	subs	r3, #1
 8017a24:	b29a      	uxth	r2, r3
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a2e:	b29b      	uxth	r3, r3
 8017a30:	3b01      	subs	r3, #1
 8017a32:	b29a      	uxth	r2, r3
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	695b      	ldr	r3, [r3, #20]
 8017a3e:	f003 0304 	and.w	r3, r3, #4
 8017a42:	2b04      	cmp	r3, #4
 8017a44:	d118      	bne.n	8017a78 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	691a      	ldr	r2, [r3, #16]
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a50:	b2d2      	uxtb	r2, r2
 8017a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a58:	1c5a      	adds	r2, r3, #1
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a62:	3b01      	subs	r3, #1
 8017a64:	b29a      	uxth	r2, r3
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a6e:	b29b      	uxth	r3, r3
 8017a70:	3b01      	subs	r3, #1
 8017a72:	b29a      	uxth	r2, r3
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	f47f aec2 	bne.w	8017806 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	2220      	movs	r2, #32
 8017a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	2200      	movs	r2, #0
 8017a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	2200      	movs	r2, #0
 8017a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	e000      	b.n	8017aa0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8017a9e:	2302      	movs	r3, #2
  }
}
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	3728      	adds	r7, #40	; 0x28
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}
 8017aa8:	00010004 	.word	0x00010004

08017aac <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017aac:	b480      	push	{r7}
 8017aae:	b087      	sub	sp, #28
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	60f8      	str	r0, [r7, #12]
 8017ab4:	607a      	str	r2, [r7, #4]
 8017ab6:	461a      	mov	r2, r3
 8017ab8:	460b      	mov	r3, r1
 8017aba:	817b      	strh	r3, [r7, #10]
 8017abc:	4613      	mov	r3, r2
 8017abe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017ace:	b2db      	uxtb	r3, r3
 8017ad0:	2b20      	cmp	r3, #32
 8017ad2:	f040 80a6 	bne.w	8017c22 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017ae4:	d005      	beq.n	8017af2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017ae6:	6a3b      	ldr	r3, [r7, #32]
 8017ae8:	2b08      	cmp	r3, #8
 8017aea:	d002      	beq.n	8017af2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017aec:	6a3b      	ldr	r3, [r7, #32]
 8017aee:	2b01      	cmp	r3, #1
 8017af0:	d130      	bne.n	8017b54 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8017af2:	4b4f      	ldr	r3, [pc, #316]	; (8017c30 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	08db      	lsrs	r3, r3, #3
 8017af8:	4a4e      	ldr	r2, [pc, #312]	; (8017c34 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8017afa:	fba2 2303 	umull	r2, r3, r2, r3
 8017afe:	0a1a      	lsrs	r2, r3, #8
 8017b00:	4613      	mov	r3, r2
 8017b02:	009b      	lsls	r3, r3, #2
 8017b04:	4413      	add	r3, r2
 8017b06:	009a      	lsls	r2, r3, #2
 8017b08:	4413      	add	r3, r2
 8017b0a:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8017b0c:	693b      	ldr	r3, [r7, #16]
 8017b0e:	3b01      	subs	r3, #1
 8017b10:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8017b12:	693b      	ldr	r3, [r7, #16]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d116      	bne.n	8017b46 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	2220      	movs	r2, #32
 8017b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	2200      	movs	r2, #0
 8017b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b32:	f043 0220 	orr.w	r2, r3, #32
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8017b42:	2301      	movs	r3, #1
 8017b44:	e06e      	b.n	8017c24 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	699b      	ldr	r3, [r3, #24]
 8017b4c:	f003 0302 	and.w	r3, r3, #2
 8017b50:	2b02      	cmp	r3, #2
 8017b52:	d0db      	beq.n	8017b0c <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017b5a:	2b01      	cmp	r3, #1
 8017b5c:	d101      	bne.n	8017b62 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8017b5e:	2302      	movs	r3, #2
 8017b60:	e060      	b.n	8017c24 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	2201      	movs	r2, #1
 8017b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	f003 0301 	and.w	r3, r3, #1
 8017b74:	2b01      	cmp	r3, #1
 8017b76:	d007      	beq.n	8017b88 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	681a      	ldr	r2, [r3, #0]
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	f042 0201 	orr.w	r2, r2, #1
 8017b86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	681a      	ldr	r2, [r3, #0]
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017b96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	2221      	movs	r2, #33	; 0x21
 8017b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	2210      	movs	r2, #16
 8017ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	2200      	movs	r2, #0
 8017bac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	687a      	ldr	r2, [r7, #4]
 8017bb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	893a      	ldrh	r2, [r7, #8]
 8017bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017bbe:	b29a      	uxth	r2, r3
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	6a3a      	ldr	r2, [r7, #32]
 8017bc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8017bca:	897a      	ldrh	r2, [r7, #10]
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bd4:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8017bd6:	697b      	ldr	r3, [r7, #20]
 8017bd8:	2b11      	cmp	r3, #17
 8017bda:	d10c      	bne.n	8017bf6 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8017bdc:	6a3b      	ldr	r3, [r7, #32]
 8017bde:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017be2:	d003      	beq.n	8017bec <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8017be4:	6a3b      	ldr	r3, [r7, #32]
 8017be6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017bea:	d101      	bne.n	8017bf0 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8017bec:	2301      	movs	r3, #1
 8017bee:	e000      	b.n	8017bf2 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	2b01      	cmp	r3, #1
 8017bf4:	d107      	bne.n	8017c06 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	681a      	ldr	r2, [r3, #0]
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017c04:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	2200      	movs	r2, #0
 8017c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	685a      	ldr	r2, [r3, #4]
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8017c1c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8017c1e:	2300      	movs	r3, #0
 8017c20:	e000      	b.n	8017c24 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8017c22:	2302      	movs	r3, #2
  }
}
 8017c24:	4618      	mov	r0, r3
 8017c26:	371c      	adds	r7, #28
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2e:	4770      	bx	lr
 8017c30:	200001dc 	.word	0x200001dc
 8017c34:	14f8b589 	.word	0x14f8b589

08017c38 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017c38:	b480      	push	{r7}
 8017c3a:	b089      	sub	sp, #36	; 0x24
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	60f8      	str	r0, [r7, #12]
 8017c40:	607a      	str	r2, [r7, #4]
 8017c42:	461a      	mov	r2, r3
 8017c44:	460b      	mov	r3, r1
 8017c46:	817b      	strh	r3, [r7, #10]
 8017c48:	4613      	mov	r3, r2
 8017c4a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8017c50:	2300      	movs	r3, #0
 8017c52:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017c54:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8017c58:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017c60:	b2db      	uxtb	r3, r3
 8017c62:	2b20      	cmp	r3, #32
 8017c64:	f040 80da 	bne.w	8017e1c <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017c76:	d005      	beq.n	8017c84 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8017c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c7a:	2b08      	cmp	r3, #8
 8017c7c:	d002      	beq.n	8017c84 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8017c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c80:	2b01      	cmp	r3, #1
 8017c82:	d130      	bne.n	8017ce6 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8017c84:	4b69      	ldr	r3, [pc, #420]	; (8017e2c <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	08db      	lsrs	r3, r3, #3
 8017c8a:	4a69      	ldr	r2, [pc, #420]	; (8017e30 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8017c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8017c90:	0a1a      	lsrs	r2, r3, #8
 8017c92:	4613      	mov	r3, r2
 8017c94:	009b      	lsls	r3, r3, #2
 8017c96:	4413      	add	r3, r2
 8017c98:	009a      	lsls	r2, r3, #2
 8017c9a:	4413      	add	r3, r2
 8017c9c:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8017c9e:	697b      	ldr	r3, [r7, #20]
 8017ca0:	3b01      	subs	r3, #1
 8017ca2:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8017ca4:	697b      	ldr	r3, [r7, #20]
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d116      	bne.n	8017cd8 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	2200      	movs	r2, #0
 8017cae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	2220      	movs	r2, #32
 8017cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	2200      	movs	r2, #0
 8017cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017cc4:	f043 0220 	orr.w	r2, r3, #32
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	2200      	movs	r2, #0
 8017cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8017cd4:	2301      	movs	r3, #1
 8017cd6:	e0a2      	b.n	8017e1e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	699b      	ldr	r3, [r3, #24]
 8017cde:	f003 0302 	and.w	r3, r3, #2
 8017ce2:	2b02      	cmp	r3, #2
 8017ce4:	d0db      	beq.n	8017c9e <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017cec:	2b01      	cmp	r3, #1
 8017cee:	d101      	bne.n	8017cf4 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8017cf0:	2302      	movs	r3, #2
 8017cf2:	e094      	b.n	8017e1e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	2201      	movs	r2, #1
 8017cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	f003 0301 	and.w	r3, r3, #1
 8017d06:	2b01      	cmp	r3, #1
 8017d08:	d007      	beq.n	8017d1a <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	681a      	ldr	r2, [r3, #0]
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	f042 0201 	orr.w	r2, r2, #1
 8017d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	681a      	ldr	r2, [r3, #0]
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017d28:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	2222      	movs	r2, #34	; 0x22
 8017d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	2210      	movs	r2, #16
 8017d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	687a      	ldr	r2, [r7, #4]
 8017d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	893a      	ldrh	r2, [r7, #8]
 8017d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d50:	b29a      	uxth	r2, r3
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8017d5c:	897a      	ldrh	r2, [r7, #10]
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d66:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d6c:	b29b      	uxth	r3, r3
 8017d6e:	2b02      	cmp	r3, #2
 8017d70:	d126      	bne.n	8017dc0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8017d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d74:	2b20      	cmp	r3, #32
 8017d76:	d002      	beq.n	8017d7e <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8017d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d7a:	2b10      	cmp	r3, #16
 8017d7c:	d120      	bne.n	8017dc0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017d7e:	69bb      	ldr	r3, [r7, #24]
 8017d80:	2b12      	cmp	r3, #18
 8017d82:	d114      	bne.n	8017dae <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	681a      	ldr	r2, [r3, #0]
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017d92:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	681a      	ldr	r2, [r3, #0]
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017da2:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8017da4:	69fb      	ldr	r3, [r7, #28]
 8017da6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017daa:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017dac:	e010      	b.n	8017dd0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	681a      	ldr	r2, [r3, #0]
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017dbc:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017dbe:	e007      	b.n	8017dd0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	681a      	ldr	r2, [r3, #0]
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017dce:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8017dd0:	69bb      	ldr	r3, [r7, #24]
 8017dd2:	2b12      	cmp	r3, #18
 8017dd4:	d10c      	bne.n	8017df0 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8017dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dd8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017ddc:	d003      	beq.n	8017de6 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8017dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017de0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017de4:	d101      	bne.n	8017dea <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8017de6:	2301      	movs	r3, #1
 8017de8:	e000      	b.n	8017dec <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8017dea:	2300      	movs	r3, #0
 8017dec:	2b01      	cmp	r3, #1
 8017dee:	d107      	bne.n	8017e00 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	681a      	ldr	r2, [r3, #0]
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017dfe:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	2200      	movs	r2, #0
 8017e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	6859      	ldr	r1, [r3, #4]
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	69fa      	ldr	r2, [r7, #28]
 8017e14:	430a      	orrs	r2, r1
 8017e16:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8017e18:	2300      	movs	r3, #0
 8017e1a:	e000      	b.n	8017e1e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8017e1c:	2302      	movs	r3, #2
  }
}
 8017e1e:	4618      	mov	r0, r3
 8017e20:	3724      	adds	r7, #36	; 0x24
 8017e22:	46bd      	mov	sp, r7
 8017e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e28:	4770      	bx	lr
 8017e2a:	bf00      	nop
 8017e2c:	200001dc 	.word	0x200001dc
 8017e30:	14f8b589 	.word	0x14f8b589

08017e34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b088      	sub	sp, #32
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	685b      	ldr	r3, [r3, #4]
 8017e46:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e4c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017e54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017e5c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8017e5e:	7bfb      	ldrb	r3, [r7, #15]
 8017e60:	2b10      	cmp	r3, #16
 8017e62:	d003      	beq.n	8017e6c <HAL_I2C_EV_IRQHandler+0x38>
 8017e64:	7bfb      	ldrb	r3, [r7, #15]
 8017e66:	2b40      	cmp	r3, #64	; 0x40
 8017e68:	f040 80c1 	bne.w	8017fee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	699b      	ldr	r3, [r3, #24]
 8017e72:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	695b      	ldr	r3, [r3, #20]
 8017e7a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8017e7c:	69fb      	ldr	r3, [r7, #28]
 8017e7e:	f003 0301 	and.w	r3, r3, #1
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d10d      	bne.n	8017ea2 <HAL_I2C_EV_IRQHandler+0x6e>
 8017e86:	693b      	ldr	r3, [r7, #16]
 8017e88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017e8c:	d003      	beq.n	8017e96 <HAL_I2C_EV_IRQHandler+0x62>
 8017e8e:	693b      	ldr	r3, [r7, #16]
 8017e90:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017e94:	d101      	bne.n	8017e9a <HAL_I2C_EV_IRQHandler+0x66>
 8017e96:	2301      	movs	r3, #1
 8017e98:	e000      	b.n	8017e9c <HAL_I2C_EV_IRQHandler+0x68>
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	2b01      	cmp	r3, #1
 8017e9e:	f000 8132 	beq.w	8018106 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017ea2:	69fb      	ldr	r3, [r7, #28]
 8017ea4:	f003 0301 	and.w	r3, r3, #1
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d00c      	beq.n	8017ec6 <HAL_I2C_EV_IRQHandler+0x92>
 8017eac:	697b      	ldr	r3, [r7, #20]
 8017eae:	0a5b      	lsrs	r3, r3, #9
 8017eb0:	f003 0301 	and.w	r3, r3, #1
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d006      	beq.n	8017ec6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8017eb8:	6878      	ldr	r0, [r7, #4]
 8017eba:	f001 ffd6 	bl	8019e6a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8017ebe:	6878      	ldr	r0, [r7, #4]
 8017ec0:	f000 fd83 	bl	80189ca <I2C_Master_SB>
 8017ec4:	e092      	b.n	8017fec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017ec6:	69fb      	ldr	r3, [r7, #28]
 8017ec8:	08db      	lsrs	r3, r3, #3
 8017eca:	f003 0301 	and.w	r3, r3, #1
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d009      	beq.n	8017ee6 <HAL_I2C_EV_IRQHandler+0xb2>
 8017ed2:	697b      	ldr	r3, [r7, #20]
 8017ed4:	0a5b      	lsrs	r3, r3, #9
 8017ed6:	f003 0301 	and.w	r3, r3, #1
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d003      	beq.n	8017ee6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8017ede:	6878      	ldr	r0, [r7, #4]
 8017ee0:	f000 fdf9 	bl	8018ad6 <I2C_Master_ADD10>
 8017ee4:	e082      	b.n	8017fec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017ee6:	69fb      	ldr	r3, [r7, #28]
 8017ee8:	085b      	lsrs	r3, r3, #1
 8017eea:	f003 0301 	and.w	r3, r3, #1
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d009      	beq.n	8017f06 <HAL_I2C_EV_IRQHandler+0xd2>
 8017ef2:	697b      	ldr	r3, [r7, #20]
 8017ef4:	0a5b      	lsrs	r3, r3, #9
 8017ef6:	f003 0301 	and.w	r3, r3, #1
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d003      	beq.n	8017f06 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8017efe:	6878      	ldr	r0, [r7, #4]
 8017f00:	f000 fe13 	bl	8018b2a <I2C_Master_ADDR>
 8017f04:	e072      	b.n	8017fec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8017f06:	69bb      	ldr	r3, [r7, #24]
 8017f08:	089b      	lsrs	r3, r3, #2
 8017f0a:	f003 0301 	and.w	r3, r3, #1
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d03b      	beq.n	8017f8a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	685b      	ldr	r3, [r3, #4]
 8017f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017f20:	f000 80f3 	beq.w	801810a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017f24:	69fb      	ldr	r3, [r7, #28]
 8017f26:	09db      	lsrs	r3, r3, #7
 8017f28:	f003 0301 	and.w	r3, r3, #1
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d00f      	beq.n	8017f50 <HAL_I2C_EV_IRQHandler+0x11c>
 8017f30:	697b      	ldr	r3, [r7, #20]
 8017f32:	0a9b      	lsrs	r3, r3, #10
 8017f34:	f003 0301 	and.w	r3, r3, #1
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d009      	beq.n	8017f50 <HAL_I2C_EV_IRQHandler+0x11c>
 8017f3c:	69fb      	ldr	r3, [r7, #28]
 8017f3e:	089b      	lsrs	r3, r3, #2
 8017f40:	f003 0301 	and.w	r3, r3, #1
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d103      	bne.n	8017f50 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8017f48:	6878      	ldr	r0, [r7, #4]
 8017f4a:	f000 f9f3 	bl	8018334 <I2C_MasterTransmit_TXE>
 8017f4e:	e04d      	b.n	8017fec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017f50:	69fb      	ldr	r3, [r7, #28]
 8017f52:	089b      	lsrs	r3, r3, #2
 8017f54:	f003 0301 	and.w	r3, r3, #1
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	f000 80d6 	beq.w	801810a <HAL_I2C_EV_IRQHandler+0x2d6>
 8017f5e:	697b      	ldr	r3, [r7, #20]
 8017f60:	0a5b      	lsrs	r3, r3, #9
 8017f62:	f003 0301 	and.w	r3, r3, #1
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	f000 80cf 	beq.w	801810a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8017f6c:	7bbb      	ldrb	r3, [r7, #14]
 8017f6e:	2b21      	cmp	r3, #33	; 0x21
 8017f70:	d103      	bne.n	8017f7a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8017f72:	6878      	ldr	r0, [r7, #4]
 8017f74:	f000 fa7a 	bl	801846c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017f78:	e0c7      	b.n	801810a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8017f7a:	7bfb      	ldrb	r3, [r7, #15]
 8017f7c:	2b40      	cmp	r3, #64	; 0x40
 8017f7e:	f040 80c4 	bne.w	801810a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8017f82:	6878      	ldr	r0, [r7, #4]
 8017f84:	f000 fae8 	bl	8018558 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017f88:	e0bf      	b.n	801810a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	685b      	ldr	r3, [r3, #4]
 8017f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017f98:	f000 80b7 	beq.w	801810a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017f9c:	69fb      	ldr	r3, [r7, #28]
 8017f9e:	099b      	lsrs	r3, r3, #6
 8017fa0:	f003 0301 	and.w	r3, r3, #1
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d00f      	beq.n	8017fc8 <HAL_I2C_EV_IRQHandler+0x194>
 8017fa8:	697b      	ldr	r3, [r7, #20]
 8017faa:	0a9b      	lsrs	r3, r3, #10
 8017fac:	f003 0301 	and.w	r3, r3, #1
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d009      	beq.n	8017fc8 <HAL_I2C_EV_IRQHandler+0x194>
 8017fb4:	69fb      	ldr	r3, [r7, #28]
 8017fb6:	089b      	lsrs	r3, r3, #2
 8017fb8:	f003 0301 	and.w	r3, r3, #1
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d103      	bne.n	8017fc8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8017fc0:	6878      	ldr	r0, [r7, #4]
 8017fc2:	f000 fb5d 	bl	8018680 <I2C_MasterReceive_RXNE>
 8017fc6:	e011      	b.n	8017fec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017fc8:	69fb      	ldr	r3, [r7, #28]
 8017fca:	089b      	lsrs	r3, r3, #2
 8017fcc:	f003 0301 	and.w	r3, r3, #1
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	f000 809a 	beq.w	801810a <HAL_I2C_EV_IRQHandler+0x2d6>
 8017fd6:	697b      	ldr	r3, [r7, #20]
 8017fd8:	0a5b      	lsrs	r3, r3, #9
 8017fda:	f003 0301 	and.w	r3, r3, #1
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	f000 8093 	beq.w	801810a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8017fe4:	6878      	ldr	r0, [r7, #4]
 8017fe6:	f000 fc06 	bl	80187f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017fea:	e08e      	b.n	801810a <HAL_I2C_EV_IRQHandler+0x2d6>
 8017fec:	e08d      	b.n	801810a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d004      	beq.n	8018000 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	695b      	ldr	r3, [r3, #20]
 8017ffc:	61fb      	str	r3, [r7, #28]
 8017ffe:	e007      	b.n	8018010 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	699b      	ldr	r3, [r3, #24]
 8018006:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	695b      	ldr	r3, [r3, #20]
 801800e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018010:	69fb      	ldr	r3, [r7, #28]
 8018012:	085b      	lsrs	r3, r3, #1
 8018014:	f003 0301 	and.w	r3, r3, #1
 8018018:	2b00      	cmp	r3, #0
 801801a:	d012      	beq.n	8018042 <HAL_I2C_EV_IRQHandler+0x20e>
 801801c:	697b      	ldr	r3, [r7, #20]
 801801e:	0a5b      	lsrs	r3, r3, #9
 8018020:	f003 0301 	and.w	r3, r3, #1
 8018024:	2b00      	cmp	r3, #0
 8018026:	d00c      	beq.n	8018042 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801802c:	2b00      	cmp	r3, #0
 801802e:	d003      	beq.n	8018038 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	699b      	ldr	r3, [r3, #24]
 8018036:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8018038:	69b9      	ldr	r1, [r7, #24]
 801803a:	6878      	ldr	r0, [r7, #4]
 801803c:	f000 ffc4 	bl	8018fc8 <I2C_Slave_ADDR>
 8018040:	e066      	b.n	8018110 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018042:	69fb      	ldr	r3, [r7, #28]
 8018044:	091b      	lsrs	r3, r3, #4
 8018046:	f003 0301 	and.w	r3, r3, #1
 801804a:	2b00      	cmp	r3, #0
 801804c:	d009      	beq.n	8018062 <HAL_I2C_EV_IRQHandler+0x22e>
 801804e:	697b      	ldr	r3, [r7, #20]
 8018050:	0a5b      	lsrs	r3, r3, #9
 8018052:	f003 0301 	and.w	r3, r3, #1
 8018056:	2b00      	cmp	r3, #0
 8018058:	d003      	beq.n	8018062 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 801805a:	6878      	ldr	r0, [r7, #4]
 801805c:	f000 fffe 	bl	801905c <I2C_Slave_STOPF>
 8018060:	e056      	b.n	8018110 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8018062:	7bbb      	ldrb	r3, [r7, #14]
 8018064:	2b21      	cmp	r3, #33	; 0x21
 8018066:	d002      	beq.n	801806e <HAL_I2C_EV_IRQHandler+0x23a>
 8018068:	7bbb      	ldrb	r3, [r7, #14]
 801806a:	2b29      	cmp	r3, #41	; 0x29
 801806c:	d125      	bne.n	80180ba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801806e:	69fb      	ldr	r3, [r7, #28]
 8018070:	09db      	lsrs	r3, r3, #7
 8018072:	f003 0301 	and.w	r3, r3, #1
 8018076:	2b00      	cmp	r3, #0
 8018078:	d00f      	beq.n	801809a <HAL_I2C_EV_IRQHandler+0x266>
 801807a:	697b      	ldr	r3, [r7, #20]
 801807c:	0a9b      	lsrs	r3, r3, #10
 801807e:	f003 0301 	and.w	r3, r3, #1
 8018082:	2b00      	cmp	r3, #0
 8018084:	d009      	beq.n	801809a <HAL_I2C_EV_IRQHandler+0x266>
 8018086:	69fb      	ldr	r3, [r7, #28]
 8018088:	089b      	lsrs	r3, r3, #2
 801808a:	f003 0301 	and.w	r3, r3, #1
 801808e:	2b00      	cmp	r3, #0
 8018090:	d103      	bne.n	801809a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8018092:	6878      	ldr	r0, [r7, #4]
 8018094:	f000 feda 	bl	8018e4c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018098:	e039      	b.n	801810e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801809a:	69fb      	ldr	r3, [r7, #28]
 801809c:	089b      	lsrs	r3, r3, #2
 801809e:	f003 0301 	and.w	r3, r3, #1
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d033      	beq.n	801810e <HAL_I2C_EV_IRQHandler+0x2da>
 80180a6:	697b      	ldr	r3, [r7, #20]
 80180a8:	0a5b      	lsrs	r3, r3, #9
 80180aa:	f003 0301 	and.w	r3, r3, #1
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d02d      	beq.n	801810e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80180b2:	6878      	ldr	r0, [r7, #4]
 80180b4:	f000 ff07 	bl	8018ec6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80180b8:	e029      	b.n	801810e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80180ba:	69fb      	ldr	r3, [r7, #28]
 80180bc:	099b      	lsrs	r3, r3, #6
 80180be:	f003 0301 	and.w	r3, r3, #1
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d00f      	beq.n	80180e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80180c6:	697b      	ldr	r3, [r7, #20]
 80180c8:	0a9b      	lsrs	r3, r3, #10
 80180ca:	f003 0301 	and.w	r3, r3, #1
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d009      	beq.n	80180e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80180d2:	69fb      	ldr	r3, [r7, #28]
 80180d4:	089b      	lsrs	r3, r3, #2
 80180d6:	f003 0301 	and.w	r3, r3, #1
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d103      	bne.n	80180e6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80180de:	6878      	ldr	r0, [r7, #4]
 80180e0:	f000 ff12 	bl	8018f08 <I2C_SlaveReceive_RXNE>
 80180e4:	e014      	b.n	8018110 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80180e6:	69fb      	ldr	r3, [r7, #28]
 80180e8:	089b      	lsrs	r3, r3, #2
 80180ea:	f003 0301 	and.w	r3, r3, #1
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d00e      	beq.n	8018110 <HAL_I2C_EV_IRQHandler+0x2dc>
 80180f2:	697b      	ldr	r3, [r7, #20]
 80180f4:	0a5b      	lsrs	r3, r3, #9
 80180f6:	f003 0301 	and.w	r3, r3, #1
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d008      	beq.n	8018110 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80180fe:	6878      	ldr	r0, [r7, #4]
 8018100:	f000 ff40 	bl	8018f84 <I2C_SlaveReceive_BTF>
 8018104:	e004      	b.n	8018110 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8018106:	bf00      	nop
 8018108:	e002      	b.n	8018110 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801810a:	bf00      	nop
 801810c:	e000      	b.n	8018110 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801810e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8018110:	3720      	adds	r7, #32
 8018112:	46bd      	mov	sp, r7
 8018114:	bd80      	pop	{r7, pc}

08018116 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8018116:	b580      	push	{r7, lr}
 8018118:	b08a      	sub	sp, #40	; 0x28
 801811a:	af00      	add	r7, sp, #0
 801811c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	695b      	ldr	r3, [r3, #20]
 8018124:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	685b      	ldr	r3, [r3, #4]
 801812c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801812e:	2300      	movs	r3, #0
 8018130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018138:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801813a:	6a3b      	ldr	r3, [r7, #32]
 801813c:	0a1b      	lsrs	r3, r3, #8
 801813e:	f003 0301 	and.w	r3, r3, #1
 8018142:	2b00      	cmp	r3, #0
 8018144:	d00e      	beq.n	8018164 <HAL_I2C_ER_IRQHandler+0x4e>
 8018146:	69fb      	ldr	r3, [r7, #28]
 8018148:	0a1b      	lsrs	r3, r3, #8
 801814a:	f003 0301 	and.w	r3, r3, #1
 801814e:	2b00      	cmp	r3, #0
 8018150:	d008      	beq.n	8018164 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8018152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018154:	f043 0301 	orr.w	r3, r3, #1
 8018158:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8018162:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8018164:	6a3b      	ldr	r3, [r7, #32]
 8018166:	0a5b      	lsrs	r3, r3, #9
 8018168:	f003 0301 	and.w	r3, r3, #1
 801816c:	2b00      	cmp	r3, #0
 801816e:	d00e      	beq.n	801818e <HAL_I2C_ER_IRQHandler+0x78>
 8018170:	69fb      	ldr	r3, [r7, #28]
 8018172:	0a1b      	lsrs	r3, r3, #8
 8018174:	f003 0301 	and.w	r3, r3, #1
 8018178:	2b00      	cmp	r3, #0
 801817a:	d008      	beq.n	801818e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 801817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801817e:	f043 0302 	orr.w	r3, r3, #2
 8018182:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	f46f 7200 	mvn.w	r2, #512	; 0x200
 801818c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801818e:	6a3b      	ldr	r3, [r7, #32]
 8018190:	0a9b      	lsrs	r3, r3, #10
 8018192:	f003 0301 	and.w	r3, r3, #1
 8018196:	2b00      	cmp	r3, #0
 8018198:	d03f      	beq.n	801821a <HAL_I2C_ER_IRQHandler+0x104>
 801819a:	69fb      	ldr	r3, [r7, #28]
 801819c:	0a1b      	lsrs	r3, r3, #8
 801819e:	f003 0301 	and.w	r3, r3, #1
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d039      	beq.n	801821a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80181a6:	7efb      	ldrb	r3, [r7, #27]
 80181a8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80181ae:	b29b      	uxth	r3, r3
 80181b0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80181b8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181be:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80181c0:	7ebb      	ldrb	r3, [r7, #26]
 80181c2:	2b20      	cmp	r3, #32
 80181c4:	d112      	bne.n	80181ec <HAL_I2C_ER_IRQHandler+0xd6>
 80181c6:	697b      	ldr	r3, [r7, #20]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d10f      	bne.n	80181ec <HAL_I2C_ER_IRQHandler+0xd6>
 80181cc:	7cfb      	ldrb	r3, [r7, #19]
 80181ce:	2b21      	cmp	r3, #33	; 0x21
 80181d0:	d008      	beq.n	80181e4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80181d2:	7cfb      	ldrb	r3, [r7, #19]
 80181d4:	2b29      	cmp	r3, #41	; 0x29
 80181d6:	d005      	beq.n	80181e4 <HAL_I2C_ER_IRQHandler+0xce>
 80181d8:	7cfb      	ldrb	r3, [r7, #19]
 80181da:	2b28      	cmp	r3, #40	; 0x28
 80181dc:	d106      	bne.n	80181ec <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	2b21      	cmp	r3, #33	; 0x21
 80181e2:	d103      	bne.n	80181ec <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80181e4:	6878      	ldr	r0, [r7, #4]
 80181e6:	f001 f869 	bl	80192bc <I2C_Slave_AF>
 80181ea:	e016      	b.n	801821a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80181f4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80181f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181f8:	f043 0304 	orr.w	r3, r3, #4
 80181fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80181fe:	7efb      	ldrb	r3, [r7, #27]
 8018200:	2b10      	cmp	r3, #16
 8018202:	d002      	beq.n	801820a <HAL_I2C_ER_IRQHandler+0xf4>
 8018204:	7efb      	ldrb	r3, [r7, #27]
 8018206:	2b40      	cmp	r3, #64	; 0x40
 8018208:	d107      	bne.n	801821a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	681a      	ldr	r2, [r3, #0]
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018218:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801821a:	6a3b      	ldr	r3, [r7, #32]
 801821c:	0adb      	lsrs	r3, r3, #11
 801821e:	f003 0301 	and.w	r3, r3, #1
 8018222:	2b00      	cmp	r3, #0
 8018224:	d00e      	beq.n	8018244 <HAL_I2C_ER_IRQHandler+0x12e>
 8018226:	69fb      	ldr	r3, [r7, #28]
 8018228:	0a1b      	lsrs	r3, r3, #8
 801822a:	f003 0301 	and.w	r3, r3, #1
 801822e:	2b00      	cmp	r3, #0
 8018230:	d008      	beq.n	8018244 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8018232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018234:	f043 0308 	orr.w	r3, r3, #8
 8018238:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8018242:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8018244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018246:	2b00      	cmp	r3, #0
 8018248:	d008      	beq.n	801825c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018250:	431a      	orrs	r2, r3
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8018256:	6878      	ldr	r0, [r7, #4]
 8018258:	f001 f8a0 	bl	801939c <I2C_ITError>
  }
}
 801825c:	bf00      	nop
 801825e:	3728      	adds	r7, #40	; 0x28
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}

08018264 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018264:	b480      	push	{r7}
 8018266:	b083      	sub	sp, #12
 8018268:	af00      	add	r7, sp, #0
 801826a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801826c:	bf00      	nop
 801826e:	370c      	adds	r7, #12
 8018270:	46bd      	mov	sp, r7
 8018272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018276:	4770      	bx	lr

08018278 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018278:	b480      	push	{r7}
 801827a:	b083      	sub	sp, #12
 801827c:	af00      	add	r7, sp, #0
 801827e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8018280:	bf00      	nop
 8018282:	370c      	adds	r7, #12
 8018284:	46bd      	mov	sp, r7
 8018286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828a:	4770      	bx	lr

0801828c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801828c:	b480      	push	{r7}
 801828e:	b083      	sub	sp, #12
 8018290:	af00      	add	r7, sp, #0
 8018292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8018294:	bf00      	nop
 8018296:	370c      	adds	r7, #12
 8018298:	46bd      	mov	sp, r7
 801829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801829e:	4770      	bx	lr

080182a0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80182a0:	b480      	push	{r7}
 80182a2:	b083      	sub	sp, #12
 80182a4:	af00      	add	r7, sp, #0
 80182a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80182a8:	bf00      	nop
 80182aa:	370c      	adds	r7, #12
 80182ac:	46bd      	mov	sp, r7
 80182ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b2:	4770      	bx	lr

080182b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80182b4:	b480      	push	{r7}
 80182b6:	b083      	sub	sp, #12
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	6078      	str	r0, [r7, #4]
 80182bc:	460b      	mov	r3, r1
 80182be:	70fb      	strb	r3, [r7, #3]
 80182c0:	4613      	mov	r3, r2
 80182c2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80182c4:	bf00      	nop
 80182c6:	370c      	adds	r7, #12
 80182c8:	46bd      	mov	sp, r7
 80182ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ce:	4770      	bx	lr

080182d0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80182d0:	b480      	push	{r7}
 80182d2:	b083      	sub	sp, #12
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80182d8:	bf00      	nop
 80182da:	370c      	adds	r7, #12
 80182dc:	46bd      	mov	sp, r7
 80182de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e2:	4770      	bx	lr

080182e4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80182e4:	b480      	push	{r7}
 80182e6:	b083      	sub	sp, #12
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80182ec:	bf00      	nop
 80182ee:	370c      	adds	r7, #12
 80182f0:	46bd      	mov	sp, r7
 80182f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f6:	4770      	bx	lr

080182f8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80182f8:	b480      	push	{r7}
 80182fa:	b083      	sub	sp, #12
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8018300:	bf00      	nop
 8018302:	370c      	adds	r7, #12
 8018304:	46bd      	mov	sp, r7
 8018306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801830a:	4770      	bx	lr

0801830c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801830c:	b480      	push	{r7}
 801830e:	b083      	sub	sp, #12
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8018314:	bf00      	nop
 8018316:	370c      	adds	r7, #12
 8018318:	46bd      	mov	sp, r7
 801831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801831e:	4770      	bx	lr

08018320 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018320:	b480      	push	{r7}
 8018322:	b083      	sub	sp, #12
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8018328:	bf00      	nop
 801832a:	370c      	adds	r7, #12
 801832c:	46bd      	mov	sp, r7
 801832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018332:	4770      	bx	lr

08018334 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b084      	sub	sp, #16
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018342:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801834a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018350:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018356:	2b00      	cmp	r3, #0
 8018358:	d150      	bne.n	80183fc <I2C_MasterTransmit_TXE+0xc8>
 801835a:	7bfb      	ldrb	r3, [r7, #15]
 801835c:	2b21      	cmp	r3, #33	; 0x21
 801835e:	d14d      	bne.n	80183fc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018360:	68bb      	ldr	r3, [r7, #8]
 8018362:	2b08      	cmp	r3, #8
 8018364:	d01d      	beq.n	80183a2 <I2C_MasterTransmit_TXE+0x6e>
 8018366:	68bb      	ldr	r3, [r7, #8]
 8018368:	2b20      	cmp	r3, #32
 801836a:	d01a      	beq.n	80183a2 <I2C_MasterTransmit_TXE+0x6e>
 801836c:	68bb      	ldr	r3, [r7, #8]
 801836e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018372:	d016      	beq.n	80183a2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	685a      	ldr	r2, [r3, #4]
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018382:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	2211      	movs	r2, #17
 8018388:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	2200      	movs	r2, #0
 801838e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	2220      	movs	r2, #32
 8018396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801839a:	6878      	ldr	r0, [r7, #4]
 801839c:	f7ff ff62 	bl	8018264 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80183a0:	e060      	b.n	8018464 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	685a      	ldr	r2, [r3, #4]
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80183b0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	681a      	ldr	r2, [r3, #0]
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80183c0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	2200      	movs	r2, #0
 80183c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2220      	movs	r2, #32
 80183cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80183d6:	b2db      	uxtb	r3, r3
 80183d8:	2b40      	cmp	r3, #64	; 0x40
 80183da:	d107      	bne.n	80183ec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	2200      	movs	r2, #0
 80183e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80183e4:	6878      	ldr	r0, [r7, #4]
 80183e6:	f7ff ff7d 	bl	80182e4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80183ea:	e03b      	b.n	8018464 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	2200      	movs	r2, #0
 80183f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80183f4:	6878      	ldr	r0, [r7, #4]
 80183f6:	f7ff ff35 	bl	8018264 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80183fa:	e033      	b.n	8018464 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80183fc:	7bfb      	ldrb	r3, [r7, #15]
 80183fe:	2b21      	cmp	r3, #33	; 0x21
 8018400:	d005      	beq.n	801840e <I2C_MasterTransmit_TXE+0xda>
 8018402:	7bbb      	ldrb	r3, [r7, #14]
 8018404:	2b40      	cmp	r3, #64	; 0x40
 8018406:	d12d      	bne.n	8018464 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8018408:	7bfb      	ldrb	r3, [r7, #15]
 801840a:	2b22      	cmp	r3, #34	; 0x22
 801840c:	d12a      	bne.n	8018464 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018412:	b29b      	uxth	r3, r3
 8018414:	2b00      	cmp	r3, #0
 8018416:	d108      	bne.n	801842a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	685a      	ldr	r2, [r3, #4]
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018426:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8018428:	e01c      	b.n	8018464 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018430:	b2db      	uxtb	r3, r3
 8018432:	2b40      	cmp	r3, #64	; 0x40
 8018434:	d103      	bne.n	801843e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8018436:	6878      	ldr	r0, [r7, #4]
 8018438:	f000 f88e 	bl	8018558 <I2C_MemoryTransmit_TXE_BTF>
}
 801843c:	e012      	b.n	8018464 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018442:	781a      	ldrb	r2, [r3, #0]
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801844e:	1c5a      	adds	r2, r3, #1
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018458:	b29b      	uxth	r3, r3
 801845a:	3b01      	subs	r3, #1
 801845c:	b29a      	uxth	r2, r3
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018462:	e7ff      	b.n	8018464 <I2C_MasterTransmit_TXE+0x130>
 8018464:	bf00      	nop
 8018466:	3710      	adds	r7, #16
 8018468:	46bd      	mov	sp, r7
 801846a:	bd80      	pop	{r7, pc}

0801846c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b084      	sub	sp, #16
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018478:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018480:	b2db      	uxtb	r3, r3
 8018482:	2b21      	cmp	r3, #33	; 0x21
 8018484:	d164      	bne.n	8018550 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801848a:	b29b      	uxth	r3, r3
 801848c:	2b00      	cmp	r3, #0
 801848e:	d012      	beq.n	80184b6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018494:	781a      	ldrb	r2, [r3, #0]
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184a0:	1c5a      	adds	r2, r3, #1
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184aa:	b29b      	uxth	r3, r3
 80184ac:	3b01      	subs	r3, #1
 80184ae:	b29a      	uxth	r2, r3
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80184b4:	e04c      	b.n	8018550 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	2b08      	cmp	r3, #8
 80184ba:	d01d      	beq.n	80184f8 <I2C_MasterTransmit_BTF+0x8c>
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	2b20      	cmp	r3, #32
 80184c0:	d01a      	beq.n	80184f8 <I2C_MasterTransmit_BTF+0x8c>
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80184c8:	d016      	beq.n	80184f8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	685a      	ldr	r2, [r3, #4]
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80184d8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	2211      	movs	r2, #17
 80184de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	2200      	movs	r2, #0
 80184e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	2220      	movs	r2, #32
 80184ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80184f0:	6878      	ldr	r0, [r7, #4]
 80184f2:	f7ff feb7 	bl	8018264 <HAL_I2C_MasterTxCpltCallback>
}
 80184f6:	e02b      	b.n	8018550 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	685a      	ldr	r2, [r3, #4]
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018506:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	681a      	ldr	r2, [r3, #0]
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018516:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	2200      	movs	r2, #0
 801851c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	2220      	movs	r2, #32
 8018522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801852c:	b2db      	uxtb	r3, r3
 801852e:	2b40      	cmp	r3, #64	; 0x40
 8018530:	d107      	bne.n	8018542 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	2200      	movs	r2, #0
 8018536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801853a:	6878      	ldr	r0, [r7, #4]
 801853c:	f7ff fed2 	bl	80182e4 <HAL_I2C_MemTxCpltCallback>
}
 8018540:	e006      	b.n	8018550 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	2200      	movs	r2, #0
 8018546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801854a:	6878      	ldr	r0, [r7, #4]
 801854c:	f7ff fe8a 	bl	8018264 <HAL_I2C_MasterTxCpltCallback>
}
 8018550:	bf00      	nop
 8018552:	3710      	adds	r7, #16
 8018554:	46bd      	mov	sp, r7
 8018556:	bd80      	pop	{r7, pc}

08018558 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b084      	sub	sp, #16
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018566:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801856c:	2b00      	cmp	r3, #0
 801856e:	d11d      	bne.n	80185ac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018574:	2b01      	cmp	r3, #1
 8018576:	d10b      	bne.n	8018590 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801857c:	b2da      	uxtb	r2, r3
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018588:	1c9a      	adds	r2, r3, #2
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801858e:	e073      	b.n	8018678 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018594:	b29b      	uxth	r3, r3
 8018596:	121b      	asrs	r3, r3, #8
 8018598:	b2da      	uxtb	r2, r3
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80185a4:	1c5a      	adds	r2, r3, #1
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80185aa:	e065      	b.n	8018678 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80185b0:	2b01      	cmp	r3, #1
 80185b2:	d10b      	bne.n	80185cc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80185b8:	b2da      	uxtb	r2, r3
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80185c4:	1c5a      	adds	r2, r3, #1
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80185ca:	e055      	b.n	8018678 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80185d0:	2b02      	cmp	r3, #2
 80185d2:	d151      	bne.n	8018678 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80185d4:	7bfb      	ldrb	r3, [r7, #15]
 80185d6:	2b22      	cmp	r3, #34	; 0x22
 80185d8:	d10d      	bne.n	80185f6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	681a      	ldr	r2, [r3, #0]
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80185e8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80185ee:	1c5a      	adds	r2, r3, #1
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80185f4:	e040      	b.n	8018678 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80185fa:	b29b      	uxth	r3, r3
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d015      	beq.n	801862c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8018600:	7bfb      	ldrb	r3, [r7, #15]
 8018602:	2b21      	cmp	r3, #33	; 0x21
 8018604:	d112      	bne.n	801862c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801860a:	781a      	ldrb	r2, [r3, #0]
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018616:	1c5a      	adds	r2, r3, #1
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018620:	b29b      	uxth	r3, r3
 8018622:	3b01      	subs	r3, #1
 8018624:	b29a      	uxth	r2, r3
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801862a:	e025      	b.n	8018678 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018630:	b29b      	uxth	r3, r3
 8018632:	2b00      	cmp	r3, #0
 8018634:	d120      	bne.n	8018678 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8018636:	7bfb      	ldrb	r3, [r7, #15]
 8018638:	2b21      	cmp	r3, #33	; 0x21
 801863a:	d11d      	bne.n	8018678 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	685a      	ldr	r2, [r3, #4]
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801864a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	681a      	ldr	r2, [r3, #0]
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801865a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	2200      	movs	r2, #0
 8018660:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	2220      	movs	r2, #32
 8018666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	2200      	movs	r2, #0
 801866e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8018672:	6878      	ldr	r0, [r7, #4]
 8018674:	f7ff fe36 	bl	80182e4 <HAL_I2C_MemTxCpltCallback>
}
 8018678:	bf00      	nop
 801867a:	3710      	adds	r7, #16
 801867c:	46bd      	mov	sp, r7
 801867e:	bd80      	pop	{r7, pc}

08018680 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018680:	b580      	push	{r7, lr}
 8018682:	b084      	sub	sp, #16
 8018684:	af00      	add	r7, sp, #0
 8018686:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801868e:	b2db      	uxtb	r3, r3
 8018690:	2b22      	cmp	r3, #34	; 0x22
 8018692:	f040 80ac 	bne.w	80187ee <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801869a:	b29b      	uxth	r3, r3
 801869c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	2b03      	cmp	r3, #3
 80186a2:	d921      	bls.n	80186e8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	691a      	ldr	r2, [r3, #16]
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186ae:	b2d2      	uxtb	r2, r2
 80186b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186b6:	1c5a      	adds	r2, r3, #1
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186c0:	b29b      	uxth	r3, r3
 80186c2:	3b01      	subs	r3, #1
 80186c4:	b29a      	uxth	r2, r3
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186ce:	b29b      	uxth	r3, r3
 80186d0:	2b03      	cmp	r3, #3
 80186d2:	f040 808c 	bne.w	80187ee <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	685a      	ldr	r2, [r3, #4]
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80186e4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80186e6:	e082      	b.n	80187ee <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186ec:	2b02      	cmp	r3, #2
 80186ee:	d075      	beq.n	80187dc <I2C_MasterReceive_RXNE+0x15c>
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	2b01      	cmp	r3, #1
 80186f4:	d002      	beq.n	80186fc <I2C_MasterReceive_RXNE+0x7c>
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d16f      	bne.n	80187dc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80186fc:	6878      	ldr	r0, [r7, #4]
 80186fe:	f001 fafd 	bl	8019cfc <I2C_WaitOnSTOPRequestThroughIT>
 8018702:	4603      	mov	r3, r0
 8018704:	2b00      	cmp	r3, #0
 8018706:	d142      	bne.n	801878e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	681a      	ldr	r2, [r3, #0]
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018716:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	685a      	ldr	r2, [r3, #4]
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018726:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	691a      	ldr	r2, [r3, #16]
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018732:	b2d2      	uxtb	r2, r2
 8018734:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801873a:	1c5a      	adds	r2, r3, #1
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018744:	b29b      	uxth	r3, r3
 8018746:	3b01      	subs	r3, #1
 8018748:	b29a      	uxth	r2, r3
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	2220      	movs	r2, #32
 8018752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801875c:	b2db      	uxtb	r3, r3
 801875e:	2b40      	cmp	r3, #64	; 0x40
 8018760:	d10a      	bne.n	8018778 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	2200      	movs	r2, #0
 8018766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	2200      	movs	r2, #0
 801876e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8018770:	6878      	ldr	r0, [r7, #4]
 8018772:	f7ff fdc1 	bl	80182f8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018776:	e03a      	b.n	80187ee <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	2200      	movs	r2, #0
 801877c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	2212      	movs	r2, #18
 8018784:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8018786:	6878      	ldr	r0, [r7, #4]
 8018788:	f7ff fd76 	bl	8018278 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801878c:	e02f      	b.n	80187ee <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	685a      	ldr	r2, [r3, #4]
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801879c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	691a      	ldr	r2, [r3, #16]
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187a8:	b2d2      	uxtb	r2, r2
 80187aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187b0:	1c5a      	adds	r2, r3, #1
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187ba:	b29b      	uxth	r3, r3
 80187bc:	3b01      	subs	r3, #1
 80187be:	b29a      	uxth	r2, r3
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	2220      	movs	r2, #32
 80187c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	2200      	movs	r2, #0
 80187d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80187d4:	6878      	ldr	r0, [r7, #4]
 80187d6:	f7ff fd99 	bl	801830c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80187da:	e008      	b.n	80187ee <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	685a      	ldr	r2, [r3, #4]
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80187ea:	605a      	str	r2, [r3, #4]
}
 80187ec:	e7ff      	b.n	80187ee <I2C_MasterReceive_RXNE+0x16e>
 80187ee:	bf00      	nop
 80187f0:	3710      	adds	r7, #16
 80187f2:	46bd      	mov	sp, r7
 80187f4:	bd80      	pop	{r7, pc}

080187f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80187f6:	b580      	push	{r7, lr}
 80187f8:	b084      	sub	sp, #16
 80187fa:	af00      	add	r7, sp, #0
 80187fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018802:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018808:	b29b      	uxth	r3, r3
 801880a:	2b04      	cmp	r3, #4
 801880c:	d11b      	bne.n	8018846 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	685a      	ldr	r2, [r3, #4]
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801881c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	691a      	ldr	r2, [r3, #16]
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018828:	b2d2      	uxtb	r2, r2
 801882a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018830:	1c5a      	adds	r2, r3, #1
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801883a:	b29b      	uxth	r3, r3
 801883c:	3b01      	subs	r3, #1
 801883e:	b29a      	uxth	r2, r3
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8018844:	e0bd      	b.n	80189c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801884a:	b29b      	uxth	r3, r3
 801884c:	2b03      	cmp	r3, #3
 801884e:	d129      	bne.n	80188a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	685a      	ldr	r2, [r3, #4]
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801885e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	2b04      	cmp	r3, #4
 8018864:	d00a      	beq.n	801887c <I2C_MasterReceive_BTF+0x86>
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	2b02      	cmp	r3, #2
 801886a:	d007      	beq.n	801887c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	681a      	ldr	r2, [r3, #0]
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801887a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	691a      	ldr	r2, [r3, #16]
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018886:	b2d2      	uxtb	r2, r2
 8018888:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801888e:	1c5a      	adds	r2, r3, #1
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018898:	b29b      	uxth	r3, r3
 801889a:	3b01      	subs	r3, #1
 801889c:	b29a      	uxth	r2, r3
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80188a2:	e08e      	b.n	80189c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80188a8:	b29b      	uxth	r3, r3
 80188aa:	2b02      	cmp	r3, #2
 80188ac:	d176      	bne.n	801899c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	2b01      	cmp	r3, #1
 80188b2:	d002      	beq.n	80188ba <I2C_MasterReceive_BTF+0xc4>
 80188b4:	68fb      	ldr	r3, [r7, #12]
 80188b6:	2b10      	cmp	r3, #16
 80188b8:	d108      	bne.n	80188cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	681a      	ldr	r2, [r3, #0]
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80188c8:	601a      	str	r2, [r3, #0]
 80188ca:	e019      	b.n	8018900 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	2b04      	cmp	r3, #4
 80188d0:	d002      	beq.n	80188d8 <I2C_MasterReceive_BTF+0xe2>
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	2b02      	cmp	r3, #2
 80188d6:	d108      	bne.n	80188ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	681a      	ldr	r2, [r3, #0]
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80188e6:	601a      	str	r2, [r3, #0]
 80188e8:	e00a      	b.n	8018900 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	2b10      	cmp	r3, #16
 80188ee:	d007      	beq.n	8018900 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	681a      	ldr	r2, [r3, #0]
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80188fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	691a      	ldr	r2, [r3, #16]
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801890a:	b2d2      	uxtb	r2, r2
 801890c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018912:	1c5a      	adds	r2, r3, #1
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801891c:	b29b      	uxth	r3, r3
 801891e:	3b01      	subs	r3, #1
 8018920:	b29a      	uxth	r2, r3
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	691a      	ldr	r2, [r3, #16]
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018930:	b2d2      	uxtb	r2, r2
 8018932:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018938:	1c5a      	adds	r2, r3, #1
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018942:	b29b      	uxth	r3, r3
 8018944:	3b01      	subs	r3, #1
 8018946:	b29a      	uxth	r2, r3
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	685a      	ldr	r2, [r3, #4]
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801895a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	2220      	movs	r2, #32
 8018960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801896a:	b2db      	uxtb	r3, r3
 801896c:	2b40      	cmp	r3, #64	; 0x40
 801896e:	d10a      	bne.n	8018986 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	2200      	movs	r2, #0
 8018974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	2200      	movs	r2, #0
 801897c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 801897e:	6878      	ldr	r0, [r7, #4]
 8018980:	f7ff fcba 	bl	80182f8 <HAL_I2C_MemRxCpltCallback>
}
 8018984:	e01d      	b.n	80189c2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	2200      	movs	r2, #0
 801898a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	2212      	movs	r2, #18
 8018992:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8018994:	6878      	ldr	r0, [r7, #4]
 8018996:	f7ff fc6f 	bl	8018278 <HAL_I2C_MasterRxCpltCallback>
}
 801899a:	e012      	b.n	80189c2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	691a      	ldr	r2, [r3, #16]
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189a6:	b2d2      	uxtb	r2, r2
 80189a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189ae:	1c5a      	adds	r2, r3, #1
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189b8:	b29b      	uxth	r3, r3
 80189ba:	3b01      	subs	r3, #1
 80189bc:	b29a      	uxth	r2, r3
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80189c2:	bf00      	nop
 80189c4:	3710      	adds	r7, #16
 80189c6:	46bd      	mov	sp, r7
 80189c8:	bd80      	pop	{r7, pc}

080189ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80189ca:	b480      	push	{r7}
 80189cc:	b083      	sub	sp, #12
 80189ce:	af00      	add	r7, sp, #0
 80189d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80189d8:	b2db      	uxtb	r3, r3
 80189da:	2b40      	cmp	r3, #64	; 0x40
 80189dc:	d117      	bne.n	8018a0e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d109      	bne.n	80189fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189ea:	b2db      	uxtb	r3, r3
 80189ec:	461a      	mov	r2, r3
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80189f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80189f8:	e067      	b.n	8018aca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189fe:	b2db      	uxtb	r3, r3
 8018a00:	f043 0301 	orr.w	r3, r3, #1
 8018a04:	b2da      	uxtb	r2, r3
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	611a      	str	r2, [r3, #16]
}
 8018a0c:	e05d      	b.n	8018aca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	691b      	ldr	r3, [r3, #16]
 8018a12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018a16:	d133      	bne.n	8018a80 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018a1e:	b2db      	uxtb	r3, r3
 8018a20:	2b21      	cmp	r3, #33	; 0x21
 8018a22:	d109      	bne.n	8018a38 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a28:	b2db      	uxtb	r3, r3
 8018a2a:	461a      	mov	r2, r3
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018a34:	611a      	str	r2, [r3, #16]
 8018a36:	e008      	b.n	8018a4a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a3c:	b2db      	uxtb	r3, r3
 8018a3e:	f043 0301 	orr.w	r3, r3, #1
 8018a42:	b2da      	uxtb	r2, r3
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d004      	beq.n	8018a5c <I2C_Master_SB+0x92>
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d108      	bne.n	8018a6e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d032      	beq.n	8018aca <I2C_Master_SB+0x100>
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d02d      	beq.n	8018aca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	685a      	ldr	r2, [r3, #4]
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018a7c:	605a      	str	r2, [r3, #4]
}
 8018a7e:	e024      	b.n	8018aca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d10e      	bne.n	8018aa6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a8c:	b29b      	uxth	r3, r3
 8018a8e:	11db      	asrs	r3, r3, #7
 8018a90:	b2db      	uxtb	r3, r3
 8018a92:	f003 0306 	and.w	r3, r3, #6
 8018a96:	b2db      	uxtb	r3, r3
 8018a98:	f063 030f 	orn	r3, r3, #15
 8018a9c:	b2da      	uxtb	r2, r3
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	611a      	str	r2, [r3, #16]
}
 8018aa4:	e011      	b.n	8018aca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018aaa:	2b01      	cmp	r3, #1
 8018aac:	d10d      	bne.n	8018aca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ab2:	b29b      	uxth	r3, r3
 8018ab4:	11db      	asrs	r3, r3, #7
 8018ab6:	b2db      	uxtb	r3, r3
 8018ab8:	f003 0306 	and.w	r3, r3, #6
 8018abc:	b2db      	uxtb	r3, r3
 8018abe:	f063 030e 	orn	r3, r3, #14
 8018ac2:	b2da      	uxtb	r2, r3
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	611a      	str	r2, [r3, #16]
}
 8018aca:	bf00      	nop
 8018acc:	370c      	adds	r7, #12
 8018ace:	46bd      	mov	sp, r7
 8018ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad4:	4770      	bx	lr

08018ad6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8018ad6:	b480      	push	{r7}
 8018ad8:	b083      	sub	sp, #12
 8018ada:	af00      	add	r7, sp, #0
 8018adc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ae2:	b2da      	uxtb	r2, r3
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d004      	beq.n	8018afc <I2C_Master_ADD10+0x26>
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d108      	bne.n	8018b0e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d00c      	beq.n	8018b1e <I2C_Master_ADD10+0x48>
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d007      	beq.n	8018b1e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	685a      	ldr	r2, [r3, #4]
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018b1c:	605a      	str	r2, [r3, #4]
  }
}
 8018b1e:	bf00      	nop
 8018b20:	370c      	adds	r7, #12
 8018b22:	46bd      	mov	sp, r7
 8018b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b28:	4770      	bx	lr

08018b2a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8018b2a:	b480      	push	{r7}
 8018b2c:	b091      	sub	sp, #68	; 0x44
 8018b2e:	af00      	add	r7, sp, #0
 8018b30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018b38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b40:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b46:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018b4e:	b2db      	uxtb	r3, r3
 8018b50:	2b22      	cmp	r3, #34	; 0x22
 8018b52:	f040 8169 	bne.w	8018e28 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d10f      	bne.n	8018b7e <I2C_Master_ADDR+0x54>
 8018b5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018b62:	2b40      	cmp	r3, #64	; 0x40
 8018b64:	d10b      	bne.n	8018b7e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018b66:	2300      	movs	r3, #0
 8018b68:	633b      	str	r3, [r7, #48]	; 0x30
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	695b      	ldr	r3, [r3, #20]
 8018b70:	633b      	str	r3, [r7, #48]	; 0x30
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	699b      	ldr	r3, [r3, #24]
 8018b78:	633b      	str	r3, [r7, #48]	; 0x30
 8018b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b7c:	e160      	b.n	8018e40 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d11d      	bne.n	8018bc2 <I2C_Master_ADDR+0x98>
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	691b      	ldr	r3, [r3, #16]
 8018b8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8018b8e:	d118      	bne.n	8018bc2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018b90:	2300      	movs	r3, #0
 8018b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	695b      	ldr	r3, [r3, #20]
 8018b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	699b      	ldr	r3, [r3, #24]
 8018ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	681a      	ldr	r2, [r3, #0]
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018bb4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bba:	1c5a      	adds	r2, r3, #1
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	651a      	str	r2, [r3, #80]	; 0x50
 8018bc0:	e13e      	b.n	8018e40 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bc6:	b29b      	uxth	r3, r3
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d113      	bne.n	8018bf4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018bcc:	2300      	movs	r3, #0
 8018bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	695b      	ldr	r3, [r3, #20]
 8018bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	699b      	ldr	r3, [r3, #24]
 8018bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8018be0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	681a      	ldr	r2, [r3, #0]
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018bf0:	601a      	str	r2, [r3, #0]
 8018bf2:	e115      	b.n	8018e20 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bf8:	b29b      	uxth	r3, r3
 8018bfa:	2b01      	cmp	r3, #1
 8018bfc:	f040 808a 	bne.w	8018d14 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8018c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018c06:	d137      	bne.n	8018c78 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	681a      	ldr	r2, [r3, #0]
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c16:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	685b      	ldr	r3, [r3, #4]
 8018c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018c26:	d113      	bne.n	8018c50 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	681a      	ldr	r2, [r3, #0]
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c36:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018c38:	2300      	movs	r3, #0
 8018c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	695b      	ldr	r3, [r3, #20]
 8018c42:	627b      	str	r3, [r7, #36]	; 0x24
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	699b      	ldr	r3, [r3, #24]
 8018c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8018c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c4e:	e0e7      	b.n	8018e20 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018c50:	2300      	movs	r3, #0
 8018c52:	623b      	str	r3, [r7, #32]
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	695b      	ldr	r3, [r3, #20]
 8018c5a:	623b      	str	r3, [r7, #32]
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	699b      	ldr	r3, [r3, #24]
 8018c62:	623b      	str	r3, [r7, #32]
 8018c64:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	681a      	ldr	r2, [r3, #0]
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018c74:	601a      	str	r2, [r3, #0]
 8018c76:	e0d3      	b.n	8018e20 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8018c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c7a:	2b08      	cmp	r3, #8
 8018c7c:	d02e      	beq.n	8018cdc <I2C_Master_ADDR+0x1b2>
 8018c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c80:	2b20      	cmp	r3, #32
 8018c82:	d02b      	beq.n	8018cdc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8018c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c86:	2b12      	cmp	r3, #18
 8018c88:	d102      	bne.n	8018c90 <I2C_Master_ADDR+0x166>
 8018c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c8c:	2b01      	cmp	r3, #1
 8018c8e:	d125      	bne.n	8018cdc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8018c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c92:	2b04      	cmp	r3, #4
 8018c94:	d00e      	beq.n	8018cb4 <I2C_Master_ADDR+0x18a>
 8018c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c98:	2b02      	cmp	r3, #2
 8018c9a:	d00b      	beq.n	8018cb4 <I2C_Master_ADDR+0x18a>
 8018c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c9e:	2b10      	cmp	r3, #16
 8018ca0:	d008      	beq.n	8018cb4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	681a      	ldr	r2, [r3, #0]
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018cb0:	601a      	str	r2, [r3, #0]
 8018cb2:	e007      	b.n	8018cc4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	681a      	ldr	r2, [r3, #0]
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018cc2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	61fb      	str	r3, [r7, #28]
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	695b      	ldr	r3, [r3, #20]
 8018cce:	61fb      	str	r3, [r7, #28]
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	699b      	ldr	r3, [r3, #24]
 8018cd6:	61fb      	str	r3, [r7, #28]
 8018cd8:	69fb      	ldr	r3, [r7, #28]
 8018cda:	e0a1      	b.n	8018e20 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	681a      	ldr	r2, [r3, #0]
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018cea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018cec:	2300      	movs	r3, #0
 8018cee:	61bb      	str	r3, [r7, #24]
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	695b      	ldr	r3, [r3, #20]
 8018cf6:	61bb      	str	r3, [r7, #24]
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	699b      	ldr	r3, [r3, #24]
 8018cfe:	61bb      	str	r3, [r7, #24]
 8018d00:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	681a      	ldr	r2, [r3, #0]
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018d10:	601a      	str	r2, [r3, #0]
 8018d12:	e085      	b.n	8018e20 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d18:	b29b      	uxth	r3, r3
 8018d1a:	2b02      	cmp	r3, #2
 8018d1c:	d14d      	bne.n	8018dba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8018d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d20:	2b04      	cmp	r3, #4
 8018d22:	d016      	beq.n	8018d52 <I2C_Master_ADDR+0x228>
 8018d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d26:	2b02      	cmp	r3, #2
 8018d28:	d013      	beq.n	8018d52 <I2C_Master_ADDR+0x228>
 8018d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d2c:	2b10      	cmp	r3, #16
 8018d2e:	d010      	beq.n	8018d52 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	681a      	ldr	r2, [r3, #0]
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018d3e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	681a      	ldr	r2, [r3, #0]
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018d4e:	601a      	str	r2, [r3, #0]
 8018d50:	e007      	b.n	8018d62 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	681a      	ldr	r2, [r3, #0]
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018d60:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	685b      	ldr	r3, [r3, #4]
 8018d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018d70:	d117      	bne.n	8018da2 <I2C_Master_ADDR+0x278>
 8018d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018d78:	d00b      	beq.n	8018d92 <I2C_Master_ADDR+0x268>
 8018d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d7c:	2b01      	cmp	r3, #1
 8018d7e:	d008      	beq.n	8018d92 <I2C_Master_ADDR+0x268>
 8018d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d82:	2b08      	cmp	r3, #8
 8018d84:	d005      	beq.n	8018d92 <I2C_Master_ADDR+0x268>
 8018d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d88:	2b10      	cmp	r3, #16
 8018d8a:	d002      	beq.n	8018d92 <I2C_Master_ADDR+0x268>
 8018d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d8e:	2b20      	cmp	r3, #32
 8018d90:	d107      	bne.n	8018da2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	685a      	ldr	r2, [r3, #4]
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018da0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018da2:	2300      	movs	r3, #0
 8018da4:	617b      	str	r3, [r7, #20]
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	695b      	ldr	r3, [r3, #20]
 8018dac:	617b      	str	r3, [r7, #20]
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	699b      	ldr	r3, [r3, #24]
 8018db4:	617b      	str	r3, [r7, #20]
 8018db6:	697b      	ldr	r3, [r7, #20]
 8018db8:	e032      	b.n	8018e20 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	681a      	ldr	r2, [r3, #0]
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018dc8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	685b      	ldr	r3, [r3, #4]
 8018dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018dd8:	d117      	bne.n	8018e0a <I2C_Master_ADDR+0x2e0>
 8018dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ddc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018de0:	d00b      	beq.n	8018dfa <I2C_Master_ADDR+0x2d0>
 8018de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018de4:	2b01      	cmp	r3, #1
 8018de6:	d008      	beq.n	8018dfa <I2C_Master_ADDR+0x2d0>
 8018de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dea:	2b08      	cmp	r3, #8
 8018dec:	d005      	beq.n	8018dfa <I2C_Master_ADDR+0x2d0>
 8018dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018df0:	2b10      	cmp	r3, #16
 8018df2:	d002      	beq.n	8018dfa <I2C_Master_ADDR+0x2d0>
 8018df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018df6:	2b20      	cmp	r3, #32
 8018df8:	d107      	bne.n	8018e0a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	685a      	ldr	r2, [r3, #4]
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018e08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	613b      	str	r3, [r7, #16]
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	695b      	ldr	r3, [r3, #20]
 8018e14:	613b      	str	r3, [r7, #16]
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	699b      	ldr	r3, [r3, #24]
 8018e1c:	613b      	str	r3, [r7, #16]
 8018e1e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	2200      	movs	r2, #0
 8018e24:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8018e26:	e00b      	b.n	8018e40 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018e28:	2300      	movs	r3, #0
 8018e2a:	60fb      	str	r3, [r7, #12]
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	695b      	ldr	r3, [r3, #20]
 8018e32:	60fb      	str	r3, [r7, #12]
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	699b      	ldr	r3, [r3, #24]
 8018e3a:	60fb      	str	r3, [r7, #12]
 8018e3c:	68fb      	ldr	r3, [r7, #12]
}
 8018e3e:	e7ff      	b.n	8018e40 <I2C_Master_ADDR+0x316>
 8018e40:	bf00      	nop
 8018e42:	3744      	adds	r7, #68	; 0x44
 8018e44:	46bd      	mov	sp, r7
 8018e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e4a:	4770      	bx	lr

08018e4c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b084      	sub	sp, #16
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018e5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e60:	b29b      	uxth	r3, r3
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d02b      	beq.n	8018ebe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e6a:	781a      	ldrb	r2, [r3, #0]
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e76:	1c5a      	adds	r2, r3, #1
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e80:	b29b      	uxth	r3, r3
 8018e82:	3b01      	subs	r3, #1
 8018e84:	b29a      	uxth	r2, r3
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e8e:	b29b      	uxth	r3, r3
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d114      	bne.n	8018ebe <I2C_SlaveTransmit_TXE+0x72>
 8018e94:	7bfb      	ldrb	r3, [r7, #15]
 8018e96:	2b29      	cmp	r3, #41	; 0x29
 8018e98:	d111      	bne.n	8018ebe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	685a      	ldr	r2, [r3, #4]
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018ea8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	2221      	movs	r2, #33	; 0x21
 8018eae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	2228      	movs	r2, #40	; 0x28
 8018eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8018eb8:	6878      	ldr	r0, [r7, #4]
 8018eba:	f7ff f9e7 	bl	801828c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8018ebe:	bf00      	nop
 8018ec0:	3710      	adds	r7, #16
 8018ec2:	46bd      	mov	sp, r7
 8018ec4:	bd80      	pop	{r7, pc}

08018ec6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8018ec6:	b480      	push	{r7}
 8018ec8:	b083      	sub	sp, #12
 8018eca:	af00      	add	r7, sp, #0
 8018ecc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ed2:	b29b      	uxth	r3, r3
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d011      	beq.n	8018efc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018edc:	781a      	ldrb	r2, [r3, #0]
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ee8:	1c5a      	adds	r2, r3, #1
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ef2:	b29b      	uxth	r3, r3
 8018ef4:	3b01      	subs	r3, #1
 8018ef6:	b29a      	uxth	r2, r3
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8018efc:	bf00      	nop
 8018efe:	370c      	adds	r7, #12
 8018f00:	46bd      	mov	sp, r7
 8018f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f06:	4770      	bx	lr

08018f08 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b084      	sub	sp, #16
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018f16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f1c:	b29b      	uxth	r3, r3
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d02c      	beq.n	8018f7c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	691a      	ldr	r2, [r3, #16]
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f2c:	b2d2      	uxtb	r2, r2
 8018f2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f34:	1c5a      	adds	r2, r3, #1
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f3e:	b29b      	uxth	r3, r3
 8018f40:	3b01      	subs	r3, #1
 8018f42:	b29a      	uxth	r2, r3
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f4c:	b29b      	uxth	r3, r3
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d114      	bne.n	8018f7c <I2C_SlaveReceive_RXNE+0x74>
 8018f52:	7bfb      	ldrb	r3, [r7, #15]
 8018f54:	2b2a      	cmp	r3, #42	; 0x2a
 8018f56:	d111      	bne.n	8018f7c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	685a      	ldr	r2, [r3, #4]
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018f66:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	2222      	movs	r2, #34	; 0x22
 8018f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	2228      	movs	r2, #40	; 0x28
 8018f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018f76:	6878      	ldr	r0, [r7, #4]
 8018f78:	f7ff f992 	bl	80182a0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8018f7c:	bf00      	nop
 8018f7e:	3710      	adds	r7, #16
 8018f80:	46bd      	mov	sp, r7
 8018f82:	bd80      	pop	{r7, pc}

08018f84 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018f84:	b480      	push	{r7}
 8018f86:	b083      	sub	sp, #12
 8018f88:	af00      	add	r7, sp, #0
 8018f8a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f90:	b29b      	uxth	r3, r3
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d012      	beq.n	8018fbc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	691a      	ldr	r2, [r3, #16]
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fa0:	b2d2      	uxtb	r2, r2
 8018fa2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fa8:	1c5a      	adds	r2, r3, #1
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018fb2:	b29b      	uxth	r3, r3
 8018fb4:	3b01      	subs	r3, #1
 8018fb6:	b29a      	uxth	r2, r3
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8018fbc:	bf00      	nop
 8018fbe:	370c      	adds	r7, #12
 8018fc0:	46bd      	mov	sp, r7
 8018fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc6:	4770      	bx	lr

08018fc8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b084      	sub	sp, #16
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	6078      	str	r0, [r7, #4]
 8018fd0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018fdc:	b2db      	uxtb	r3, r3
 8018fde:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018fe2:	2b28      	cmp	r3, #40	; 0x28
 8018fe4:	d127      	bne.n	8019036 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	685a      	ldr	r2, [r3, #4]
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018ff4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8018ff6:	683b      	ldr	r3, [r7, #0]
 8018ff8:	089b      	lsrs	r3, r3, #2
 8018ffa:	f003 0301 	and.w	r3, r3, #1
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d101      	bne.n	8019006 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8019002:	2301      	movs	r3, #1
 8019004:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8019006:	683b      	ldr	r3, [r7, #0]
 8019008:	09db      	lsrs	r3, r3, #7
 801900a:	f003 0301 	and.w	r3, r3, #1
 801900e:	2b00      	cmp	r3, #0
 8019010:	d103      	bne.n	801901a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	68db      	ldr	r3, [r3, #12]
 8019016:	81bb      	strh	r3, [r7, #12]
 8019018:	e002      	b.n	8019020 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	699b      	ldr	r3, [r3, #24]
 801901e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	2200      	movs	r2, #0
 8019024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8019028:	89ba      	ldrh	r2, [r7, #12]
 801902a:	7bfb      	ldrb	r3, [r7, #15]
 801902c:	4619      	mov	r1, r3
 801902e:	6878      	ldr	r0, [r7, #4]
 8019030:	f7ff f940 	bl	80182b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8019034:	e00e      	b.n	8019054 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019036:	2300      	movs	r3, #0
 8019038:	60bb      	str	r3, [r7, #8]
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	695b      	ldr	r3, [r3, #20]
 8019040:	60bb      	str	r3, [r7, #8]
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	699b      	ldr	r3, [r3, #24]
 8019048:	60bb      	str	r3, [r7, #8]
 801904a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	2200      	movs	r2, #0
 8019050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8019054:	bf00      	nop
 8019056:	3710      	adds	r7, #16
 8019058:	46bd      	mov	sp, r7
 801905a:	bd80      	pop	{r7, pc}

0801905c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b084      	sub	sp, #16
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801906a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	685a      	ldr	r2, [r3, #4]
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801907a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 801907c:	2300      	movs	r3, #0
 801907e:	60bb      	str	r3, [r7, #8]
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	695b      	ldr	r3, [r3, #20]
 8019086:	60bb      	str	r3, [r7, #8]
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	681a      	ldr	r2, [r3, #0]
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	f042 0201 	orr.w	r2, r2, #1
 8019096:	601a      	str	r2, [r3, #0]
 8019098:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	681a      	ldr	r2, [r3, #0]
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80190a8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	685b      	ldr	r3, [r3, #4]
 80190b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80190b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80190b8:	d172      	bne.n	80191a0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80190ba:	7bfb      	ldrb	r3, [r7, #15]
 80190bc:	2b22      	cmp	r3, #34	; 0x22
 80190be:	d002      	beq.n	80190c6 <I2C_Slave_STOPF+0x6a>
 80190c0:	7bfb      	ldrb	r3, [r7, #15]
 80190c2:	2b2a      	cmp	r3, #42	; 0x2a
 80190c4:	d135      	bne.n	8019132 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	685b      	ldr	r3, [r3, #4]
 80190ce:	b29a      	uxth	r2, r3
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80190d8:	b29b      	uxth	r3, r3
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d005      	beq.n	80190ea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80190e2:	f043 0204 	orr.w	r2, r3, #4
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	685a      	ldr	r2, [r3, #4]
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80190f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80190fe:	4618      	mov	r0, r3
 8019100:	f7fd fdb4 	bl	8016c6c <HAL_DMA_GetState>
 8019104:	4603      	mov	r3, r0
 8019106:	2b01      	cmp	r3, #1
 8019108:	d049      	beq.n	801919e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801910e:	4a69      	ldr	r2, [pc, #420]	; (80192b4 <I2C_Slave_STOPF+0x258>)
 8019110:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019116:	4618      	mov	r0, r3
 8019118:	f7fd fbfc 	bl	8016914 <HAL_DMA_Abort_IT>
 801911c:	4603      	mov	r3, r0
 801911e:	2b00      	cmp	r3, #0
 8019120:	d03d      	beq.n	801919e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019128:	687a      	ldr	r2, [r7, #4]
 801912a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801912c:	4610      	mov	r0, r2
 801912e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8019130:	e035      	b.n	801919e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	685b      	ldr	r3, [r3, #4]
 801913a:	b29a      	uxth	r2, r3
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019144:	b29b      	uxth	r3, r3
 8019146:	2b00      	cmp	r3, #0
 8019148:	d005      	beq.n	8019156 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801914e:	f043 0204 	orr.w	r2, r3, #4
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	685a      	ldr	r2, [r3, #4]
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019164:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801916a:	4618      	mov	r0, r3
 801916c:	f7fd fd7e 	bl	8016c6c <HAL_DMA_GetState>
 8019170:	4603      	mov	r3, r0
 8019172:	2b01      	cmp	r3, #1
 8019174:	d014      	beq.n	80191a0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801917a:	4a4e      	ldr	r2, [pc, #312]	; (80192b4 <I2C_Slave_STOPF+0x258>)
 801917c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019182:	4618      	mov	r0, r3
 8019184:	f7fd fbc6 	bl	8016914 <HAL_DMA_Abort_IT>
 8019188:	4603      	mov	r3, r0
 801918a:	2b00      	cmp	r3, #0
 801918c:	d008      	beq.n	80191a0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019194:	687a      	ldr	r2, [r7, #4]
 8019196:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8019198:	4610      	mov	r0, r2
 801919a:	4798      	blx	r3
 801919c:	e000      	b.n	80191a0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801919e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80191a4:	b29b      	uxth	r3, r3
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d03e      	beq.n	8019228 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	695b      	ldr	r3, [r3, #20]
 80191b0:	f003 0304 	and.w	r3, r3, #4
 80191b4:	2b04      	cmp	r3, #4
 80191b6:	d112      	bne.n	80191de <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	691a      	ldr	r2, [r3, #16]
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191c2:	b2d2      	uxtb	r2, r2
 80191c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191ca:	1c5a      	adds	r2, r3, #1
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80191d4:	b29b      	uxth	r3, r3
 80191d6:	3b01      	subs	r3, #1
 80191d8:	b29a      	uxth	r2, r3
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	695b      	ldr	r3, [r3, #20]
 80191e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80191e8:	2b40      	cmp	r3, #64	; 0x40
 80191ea:	d112      	bne.n	8019212 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	691a      	ldr	r2, [r3, #16]
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191f6:	b2d2      	uxtb	r2, r2
 80191f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191fe:	1c5a      	adds	r2, r3, #1
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019208:	b29b      	uxth	r3, r3
 801920a:	3b01      	subs	r3, #1
 801920c:	b29a      	uxth	r2, r3
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019216:	b29b      	uxth	r3, r3
 8019218:	2b00      	cmp	r3, #0
 801921a:	d005      	beq.n	8019228 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019220:	f043 0204 	orr.w	r2, r3, #4
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801922c:	2b00      	cmp	r3, #0
 801922e:	d003      	beq.n	8019238 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8019230:	6878      	ldr	r0, [r7, #4]
 8019232:	f000 f8b3 	bl	801939c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8019236:	e039      	b.n	80192ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8019238:	7bfb      	ldrb	r3, [r7, #15]
 801923a:	2b2a      	cmp	r3, #42	; 0x2a
 801923c:	d109      	bne.n	8019252 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	2200      	movs	r2, #0
 8019242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	2228      	movs	r2, #40	; 0x28
 8019248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801924c:	6878      	ldr	r0, [r7, #4]
 801924e:	f7ff f827 	bl	80182a0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019258:	b2db      	uxtb	r3, r3
 801925a:	2b28      	cmp	r3, #40	; 0x28
 801925c:	d111      	bne.n	8019282 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	4a15      	ldr	r2, [pc, #84]	; (80192b8 <I2C_Slave_STOPF+0x25c>)
 8019262:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	2200      	movs	r2, #0
 8019268:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	2220      	movs	r2, #32
 801926e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	2200      	movs	r2, #0
 8019276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801927a:	6878      	ldr	r0, [r7, #4]
 801927c:	f7ff f828 	bl	80182d0 <HAL_I2C_ListenCpltCallback>
}
 8019280:	e014      	b.n	80192ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019286:	2b22      	cmp	r3, #34	; 0x22
 8019288:	d002      	beq.n	8019290 <I2C_Slave_STOPF+0x234>
 801928a:	7bfb      	ldrb	r3, [r7, #15]
 801928c:	2b22      	cmp	r3, #34	; 0x22
 801928e:	d10d      	bne.n	80192ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	2200      	movs	r2, #0
 8019294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	2220      	movs	r2, #32
 801929a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	2200      	movs	r2, #0
 80192a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80192a6:	6878      	ldr	r0, [r7, #4]
 80192a8:	f7fe fffa 	bl	80182a0 <HAL_I2C_SlaveRxCpltCallback>
}
 80192ac:	bf00      	nop
 80192ae:	3710      	adds	r7, #16
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd80      	pop	{r7, pc}
 80192b4:	080198fd 	.word	0x080198fd
 80192b8:	ffff0000 	.word	0xffff0000

080192bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80192bc:	b580      	push	{r7, lr}
 80192be:	b084      	sub	sp, #16
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80192ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80192d2:	68bb      	ldr	r3, [r7, #8]
 80192d4:	2b08      	cmp	r3, #8
 80192d6:	d002      	beq.n	80192de <I2C_Slave_AF+0x22>
 80192d8:	68bb      	ldr	r3, [r7, #8]
 80192da:	2b20      	cmp	r3, #32
 80192dc:	d129      	bne.n	8019332 <I2C_Slave_AF+0x76>
 80192de:	7bfb      	ldrb	r3, [r7, #15]
 80192e0:	2b28      	cmp	r3, #40	; 0x28
 80192e2:	d126      	bne.n	8019332 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	4a2c      	ldr	r2, [pc, #176]	; (8019398 <I2C_Slave_AF+0xdc>)
 80192e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	685a      	ldr	r2, [r3, #4]
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80192f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019302:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	681a      	ldr	r2, [r3, #0]
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019312:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	2200      	movs	r2, #0
 8019318:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	2220      	movs	r2, #32
 801931e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	2200      	movs	r2, #0
 8019326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801932a:	6878      	ldr	r0, [r7, #4]
 801932c:	f7fe ffd0 	bl	80182d0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8019330:	e02e      	b.n	8019390 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8019332:	7bfb      	ldrb	r3, [r7, #15]
 8019334:	2b21      	cmp	r3, #33	; 0x21
 8019336:	d126      	bne.n	8019386 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	4a17      	ldr	r2, [pc, #92]	; (8019398 <I2C_Slave_AF+0xdc>)
 801933c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	2221      	movs	r2, #33	; 0x21
 8019342:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	2220      	movs	r2, #32
 8019348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	2200      	movs	r2, #0
 8019350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	685a      	ldr	r2, [r3, #4]
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019362:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801936c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	681a      	ldr	r2, [r3, #0]
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801937c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801937e:	6878      	ldr	r0, [r7, #4]
 8019380:	f7fe ff84 	bl	801828c <HAL_I2C_SlaveTxCpltCallback>
}
 8019384:	e004      	b.n	8019390 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801938e:	615a      	str	r2, [r3, #20]
}
 8019390:	bf00      	nop
 8019392:	3710      	adds	r7, #16
 8019394:	46bd      	mov	sp, r7
 8019396:	bd80      	pop	{r7, pc}
 8019398:	ffff0000 	.word	0xffff0000

0801939c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 801939c:	b580      	push	{r7, lr}
 801939e:	b084      	sub	sp, #16
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80193aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80193b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80193b4:	7bbb      	ldrb	r3, [r7, #14]
 80193b6:	2b10      	cmp	r3, #16
 80193b8:	d002      	beq.n	80193c0 <I2C_ITError+0x24>
 80193ba:	7bbb      	ldrb	r3, [r7, #14]
 80193bc:	2b40      	cmp	r3, #64	; 0x40
 80193be:	d10a      	bne.n	80193d6 <I2C_ITError+0x3a>
 80193c0:	7bfb      	ldrb	r3, [r7, #15]
 80193c2:	2b22      	cmp	r3, #34	; 0x22
 80193c4:	d107      	bne.n	80193d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	681a      	ldr	r2, [r3, #0]
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80193d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80193d6:	7bfb      	ldrb	r3, [r7, #15]
 80193d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80193dc:	2b28      	cmp	r3, #40	; 0x28
 80193de:	d107      	bne.n	80193f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	2200      	movs	r2, #0
 80193e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	2228      	movs	r2, #40	; 0x28
 80193ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80193ee:	e015      	b.n	801941c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	685b      	ldr	r3, [r3, #4]
 80193f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80193fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80193fe:	d00a      	beq.n	8019416 <I2C_ITError+0x7a>
 8019400:	7bfb      	ldrb	r3, [r7, #15]
 8019402:	2b60      	cmp	r3, #96	; 0x60
 8019404:	d007      	beq.n	8019416 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	2220      	movs	r2, #32
 801940a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	2200      	movs	r2, #0
 8019412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	2200      	movs	r2, #0
 801941a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	685b      	ldr	r3, [r3, #4]
 8019422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801942a:	d162      	bne.n	80194f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	685a      	ldr	r2, [r3, #4]
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801943a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019444:	b2db      	uxtb	r3, r3
 8019446:	2b01      	cmp	r3, #1
 8019448:	d020      	beq.n	801948c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801944e:	4a6a      	ldr	r2, [pc, #424]	; (80195f8 <I2C_ITError+0x25c>)
 8019450:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019456:	4618      	mov	r0, r3
 8019458:	f7fd fa5c 	bl	8016914 <HAL_DMA_Abort_IT>
 801945c:	4603      	mov	r3, r0
 801945e:	2b00      	cmp	r3, #0
 8019460:	f000 8089 	beq.w	8019576 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	681a      	ldr	r2, [r3, #0]
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	f022 0201 	bic.w	r2, r2, #1
 8019472:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	2220      	movs	r2, #32
 8019478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019482:	687a      	ldr	r2, [r7, #4]
 8019484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8019486:	4610      	mov	r0, r2
 8019488:	4798      	blx	r3
 801948a:	e074      	b.n	8019576 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019490:	4a59      	ldr	r2, [pc, #356]	; (80195f8 <I2C_ITError+0x25c>)
 8019492:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019498:	4618      	mov	r0, r3
 801949a:	f7fd fa3b 	bl	8016914 <HAL_DMA_Abort_IT>
 801949e:	4603      	mov	r3, r0
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d068      	beq.n	8019576 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	695b      	ldr	r3, [r3, #20]
 80194aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80194ae:	2b40      	cmp	r3, #64	; 0x40
 80194b0:	d10b      	bne.n	80194ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	691a      	ldr	r2, [r3, #16]
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194bc:	b2d2      	uxtb	r2, r2
 80194be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194c4:	1c5a      	adds	r2, r3, #1
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	681a      	ldr	r2, [r3, #0]
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	f022 0201 	bic.w	r2, r2, #1
 80194d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	2220      	movs	r2, #32
 80194de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80194e8:	687a      	ldr	r2, [r7, #4]
 80194ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80194ec:	4610      	mov	r0, r2
 80194ee:	4798      	blx	r3
 80194f0:	e041      	b.n	8019576 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80194f8:	b2db      	uxtb	r3, r3
 80194fa:	2b60      	cmp	r3, #96	; 0x60
 80194fc:	d125      	bne.n	801954a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	2220      	movs	r2, #32
 8019502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	2200      	movs	r2, #0
 801950a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	695b      	ldr	r3, [r3, #20]
 8019512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019516:	2b40      	cmp	r3, #64	; 0x40
 8019518:	d10b      	bne.n	8019532 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	691a      	ldr	r2, [r3, #16]
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019524:	b2d2      	uxtb	r2, r2
 8019526:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801952c:	1c5a      	adds	r2, r3, #1
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	681a      	ldr	r2, [r3, #0]
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	f022 0201 	bic.w	r2, r2, #1
 8019540:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8019542:	6878      	ldr	r0, [r7, #4]
 8019544:	f7fe feec 	bl	8018320 <HAL_I2C_AbortCpltCallback>
 8019548:	e015      	b.n	8019576 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	695b      	ldr	r3, [r3, #20]
 8019550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019554:	2b40      	cmp	r3, #64	; 0x40
 8019556:	d10b      	bne.n	8019570 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	691a      	ldr	r2, [r3, #16]
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019562:	b2d2      	uxtb	r2, r2
 8019564:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801956a:	1c5a      	adds	r2, r3, #1
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8019570:	6878      	ldr	r0, [r7, #4]
 8019572:	f7fe fecb 	bl	801830c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801957a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801957c:	68bb      	ldr	r3, [r7, #8]
 801957e:	f003 0301 	and.w	r3, r3, #1
 8019582:	2b00      	cmp	r3, #0
 8019584:	d10e      	bne.n	80195a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8019586:	68bb      	ldr	r3, [r7, #8]
 8019588:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801958c:	2b00      	cmp	r3, #0
 801958e:	d109      	bne.n	80195a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019590:	68bb      	ldr	r3, [r7, #8]
 8019592:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8019596:	2b00      	cmp	r3, #0
 8019598:	d104      	bne.n	80195a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801959a:	68bb      	ldr	r3, [r7, #8]
 801959c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d007      	beq.n	80195b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	685a      	ldr	r2, [r3, #4]
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80195b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80195ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195c0:	f003 0304 	and.w	r3, r3, #4
 80195c4:	2b04      	cmp	r3, #4
 80195c6:	d113      	bne.n	80195f0 <I2C_ITError+0x254>
 80195c8:	7bfb      	ldrb	r3, [r7, #15]
 80195ca:	2b28      	cmp	r3, #40	; 0x28
 80195cc:	d110      	bne.n	80195f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	4a0a      	ldr	r2, [pc, #40]	; (80195fc <I2C_ITError+0x260>)
 80195d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	2200      	movs	r2, #0
 80195d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	2220      	movs	r2, #32
 80195de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	2200      	movs	r2, #0
 80195e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80195ea:	6878      	ldr	r0, [r7, #4]
 80195ec:	f7fe fe70 	bl	80182d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80195f0:	bf00      	nop
 80195f2:	3710      	adds	r7, #16
 80195f4:	46bd      	mov	sp, r7
 80195f6:	bd80      	pop	{r7, pc}
 80195f8:	080198fd 	.word	0x080198fd
 80195fc:	ffff0000 	.word	0xffff0000

08019600 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b088      	sub	sp, #32
 8019604:	af02      	add	r7, sp, #8
 8019606:	60f8      	str	r0, [r7, #12]
 8019608:	4608      	mov	r0, r1
 801960a:	4611      	mov	r1, r2
 801960c:	461a      	mov	r2, r3
 801960e:	4603      	mov	r3, r0
 8019610:	817b      	strh	r3, [r7, #10]
 8019612:	460b      	mov	r3, r1
 8019614:	813b      	strh	r3, [r7, #8]
 8019616:	4613      	mov	r3, r2
 8019618:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	681a      	ldr	r2, [r3, #0]
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019628:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801962c:	9300      	str	r3, [sp, #0]
 801962e:	6a3b      	ldr	r3, [r7, #32]
 8019630:	2200      	movs	r2, #0
 8019632:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019636:	68f8      	ldr	r0, [r7, #12]
 8019638:	f000 fa08 	bl	8019a4c <I2C_WaitOnFlagUntilTimeout>
 801963c:	4603      	mov	r3, r0
 801963e:	2b00      	cmp	r3, #0
 8019640:	d00d      	beq.n	801965e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801964c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019650:	d103      	bne.n	801965a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019658:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801965a:	2303      	movs	r3, #3
 801965c:	e05f      	b.n	801971e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801965e:	897b      	ldrh	r3, [r7, #10]
 8019660:	b2db      	uxtb	r3, r3
 8019662:	461a      	mov	r2, r3
 8019664:	68fb      	ldr	r3, [r7, #12]
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801966c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019670:	6a3a      	ldr	r2, [r7, #32]
 8019672:	492d      	ldr	r1, [pc, #180]	; (8019728 <I2C_RequestMemoryWrite+0x128>)
 8019674:	68f8      	ldr	r0, [r7, #12]
 8019676:	f000 fa40 	bl	8019afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801967a:	4603      	mov	r3, r0
 801967c:	2b00      	cmp	r3, #0
 801967e:	d001      	beq.n	8019684 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8019680:	2301      	movs	r3, #1
 8019682:	e04c      	b.n	801971e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019684:	2300      	movs	r3, #0
 8019686:	617b      	str	r3, [r7, #20]
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	695b      	ldr	r3, [r3, #20]
 801968e:	617b      	str	r3, [r7, #20]
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	699b      	ldr	r3, [r3, #24]
 8019696:	617b      	str	r3, [r7, #20]
 8019698:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801969a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801969c:	6a39      	ldr	r1, [r7, #32]
 801969e:	68f8      	ldr	r0, [r7, #12]
 80196a0:	f000 faaa 	bl	8019bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80196a4:	4603      	mov	r3, r0
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d00d      	beq.n	80196c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196ae:	2b04      	cmp	r3, #4
 80196b0:	d107      	bne.n	80196c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	681a      	ldr	r2, [r3, #0]
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80196c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80196c2:	2301      	movs	r3, #1
 80196c4:	e02b      	b.n	801971e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80196c6:	88fb      	ldrh	r3, [r7, #6]
 80196c8:	2b01      	cmp	r3, #1
 80196ca:	d105      	bne.n	80196d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80196cc:	893b      	ldrh	r3, [r7, #8]
 80196ce:	b2da      	uxtb	r2, r3
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	611a      	str	r2, [r3, #16]
 80196d6:	e021      	b.n	801971c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80196d8:	893b      	ldrh	r3, [r7, #8]
 80196da:	0a1b      	lsrs	r3, r3, #8
 80196dc:	b29b      	uxth	r3, r3
 80196de:	b2da      	uxtb	r2, r3
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80196e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80196e8:	6a39      	ldr	r1, [r7, #32]
 80196ea:	68f8      	ldr	r0, [r7, #12]
 80196ec:	f000 fa84 	bl	8019bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80196f0:	4603      	mov	r3, r0
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d00d      	beq.n	8019712 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196fa:	2b04      	cmp	r3, #4
 80196fc:	d107      	bne.n	801970e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	681a      	ldr	r2, [r3, #0]
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801970c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801970e:	2301      	movs	r3, #1
 8019710:	e005      	b.n	801971e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019712:	893b      	ldrh	r3, [r7, #8]
 8019714:	b2da      	uxtb	r2, r3
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801971c:	2300      	movs	r3, #0
}
 801971e:	4618      	mov	r0, r3
 8019720:	3718      	adds	r7, #24
 8019722:	46bd      	mov	sp, r7
 8019724:	bd80      	pop	{r7, pc}
 8019726:	bf00      	nop
 8019728:	00010002 	.word	0x00010002

0801972c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b088      	sub	sp, #32
 8019730:	af02      	add	r7, sp, #8
 8019732:	60f8      	str	r0, [r7, #12]
 8019734:	4608      	mov	r0, r1
 8019736:	4611      	mov	r1, r2
 8019738:	461a      	mov	r2, r3
 801973a:	4603      	mov	r3, r0
 801973c:	817b      	strh	r3, [r7, #10]
 801973e:	460b      	mov	r3, r1
 8019740:	813b      	strh	r3, [r7, #8]
 8019742:	4613      	mov	r3, r2
 8019744:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	681a      	ldr	r2, [r3, #0]
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019754:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	681a      	ldr	r2, [r3, #0]
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019764:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019768:	9300      	str	r3, [sp, #0]
 801976a:	6a3b      	ldr	r3, [r7, #32]
 801976c:	2200      	movs	r2, #0
 801976e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019772:	68f8      	ldr	r0, [r7, #12]
 8019774:	f000 f96a 	bl	8019a4c <I2C_WaitOnFlagUntilTimeout>
 8019778:	4603      	mov	r3, r0
 801977a:	2b00      	cmp	r3, #0
 801977c:	d00d      	beq.n	801979a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801978c:	d103      	bne.n	8019796 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019794:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019796:	2303      	movs	r3, #3
 8019798:	e0aa      	b.n	80198f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801979a:	897b      	ldrh	r3, [r7, #10]
 801979c:	b2db      	uxtb	r3, r3
 801979e:	461a      	mov	r2, r3
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80197a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80197aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ac:	6a3a      	ldr	r2, [r7, #32]
 80197ae:	4952      	ldr	r1, [pc, #328]	; (80198f8 <I2C_RequestMemoryRead+0x1cc>)
 80197b0:	68f8      	ldr	r0, [r7, #12]
 80197b2:	f000 f9a2 	bl	8019afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80197b6:	4603      	mov	r3, r0
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d001      	beq.n	80197c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80197bc:	2301      	movs	r3, #1
 80197be:	e097      	b.n	80198f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80197c0:	2300      	movs	r3, #0
 80197c2:	617b      	str	r3, [r7, #20]
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	695b      	ldr	r3, [r3, #20]
 80197ca:	617b      	str	r3, [r7, #20]
 80197cc:	68fb      	ldr	r3, [r7, #12]
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	699b      	ldr	r3, [r3, #24]
 80197d2:	617b      	str	r3, [r7, #20]
 80197d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80197d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197d8:	6a39      	ldr	r1, [r7, #32]
 80197da:	68f8      	ldr	r0, [r7, #12]
 80197dc:	f000 fa0c 	bl	8019bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80197e0:	4603      	mov	r3, r0
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d00d      	beq.n	8019802 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197ea:	2b04      	cmp	r3, #4
 80197ec:	d107      	bne.n	80197fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	681a      	ldr	r2, [r3, #0]
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80197fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80197fe:	2301      	movs	r3, #1
 8019800:	e076      	b.n	80198f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019802:	88fb      	ldrh	r3, [r7, #6]
 8019804:	2b01      	cmp	r3, #1
 8019806:	d105      	bne.n	8019814 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019808:	893b      	ldrh	r3, [r7, #8]
 801980a:	b2da      	uxtb	r2, r3
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	611a      	str	r2, [r3, #16]
 8019812:	e021      	b.n	8019858 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8019814:	893b      	ldrh	r3, [r7, #8]
 8019816:	0a1b      	lsrs	r3, r3, #8
 8019818:	b29b      	uxth	r3, r3
 801981a:	b2da      	uxtb	r2, r3
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019824:	6a39      	ldr	r1, [r7, #32]
 8019826:	68f8      	ldr	r0, [r7, #12]
 8019828:	f000 f9e6 	bl	8019bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 801982c:	4603      	mov	r3, r0
 801982e:	2b00      	cmp	r3, #0
 8019830:	d00d      	beq.n	801984e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019836:	2b04      	cmp	r3, #4
 8019838:	d107      	bne.n	801984a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	681a      	ldr	r2, [r3, #0]
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019848:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801984a:	2301      	movs	r3, #1
 801984c:	e050      	b.n	80198f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801984e:	893b      	ldrh	r3, [r7, #8]
 8019850:	b2da      	uxtb	r2, r3
 8019852:	68fb      	ldr	r3, [r7, #12]
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801985a:	6a39      	ldr	r1, [r7, #32]
 801985c:	68f8      	ldr	r0, [r7, #12]
 801985e:	f000 f9cb 	bl	8019bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8019862:	4603      	mov	r3, r0
 8019864:	2b00      	cmp	r3, #0
 8019866:	d00d      	beq.n	8019884 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801986c:	2b04      	cmp	r3, #4
 801986e:	d107      	bne.n	8019880 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	681a      	ldr	r2, [r3, #0]
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801987e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019880:	2301      	movs	r3, #1
 8019882:	e035      	b.n	80198f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019884:	68fb      	ldr	r3, [r7, #12]
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	681a      	ldr	r2, [r3, #0]
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019892:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019896:	9300      	str	r3, [sp, #0]
 8019898:	6a3b      	ldr	r3, [r7, #32]
 801989a:	2200      	movs	r2, #0
 801989c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80198a0:	68f8      	ldr	r0, [r7, #12]
 80198a2:	f000 f8d3 	bl	8019a4c <I2C_WaitOnFlagUntilTimeout>
 80198a6:	4603      	mov	r3, r0
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d00d      	beq.n	80198c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80198b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80198ba:	d103      	bne.n	80198c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80198c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80198c4:	2303      	movs	r3, #3
 80198c6:	e013      	b.n	80198f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80198c8:	897b      	ldrh	r3, [r7, #10]
 80198ca:	b2db      	uxtb	r3, r3
 80198cc:	f043 0301 	orr.w	r3, r3, #1
 80198d0:	b2da      	uxtb	r2, r3
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80198d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198da:	6a3a      	ldr	r2, [r7, #32]
 80198dc:	4906      	ldr	r1, [pc, #24]	; (80198f8 <I2C_RequestMemoryRead+0x1cc>)
 80198de:	68f8      	ldr	r0, [r7, #12]
 80198e0:	f000 f90b 	bl	8019afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80198e4:	4603      	mov	r3, r0
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d001      	beq.n	80198ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80198ea:	2301      	movs	r3, #1
 80198ec:	e000      	b.n	80198f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80198ee:	2300      	movs	r3, #0
}
 80198f0:	4618      	mov	r0, r3
 80198f2:	3718      	adds	r7, #24
 80198f4:	46bd      	mov	sp, r7
 80198f6:	bd80      	pop	{r7, pc}
 80198f8:	00010002 	.word	0x00010002

080198fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	b086      	sub	sp, #24
 8019900:	af00      	add	r7, sp, #0
 8019902:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019904:	2300      	movs	r3, #0
 8019906:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801990c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801990e:	697b      	ldr	r3, [r7, #20]
 8019910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019914:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8019916:	4b4b      	ldr	r3, [pc, #300]	; (8019a44 <I2C_DMAAbort+0x148>)
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	08db      	lsrs	r3, r3, #3
 801991c:	4a4a      	ldr	r2, [pc, #296]	; (8019a48 <I2C_DMAAbort+0x14c>)
 801991e:	fba2 2303 	umull	r2, r3, r2, r3
 8019922:	0a1a      	lsrs	r2, r3, #8
 8019924:	4613      	mov	r3, r2
 8019926:	009b      	lsls	r3, r3, #2
 8019928:	4413      	add	r3, r2
 801992a:	00da      	lsls	r2, r3, #3
 801992c:	1ad3      	subs	r3, r2, r3
 801992e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	2b00      	cmp	r3, #0
 8019934:	d106      	bne.n	8019944 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019936:	697b      	ldr	r3, [r7, #20]
 8019938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801993a:	f043 0220 	orr.w	r2, r3, #32
 801993e:	697b      	ldr	r3, [r7, #20]
 8019940:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8019942:	e00a      	b.n	801995a <I2C_DMAAbort+0x5e>
    }
    count--;
 8019944:	68fb      	ldr	r3, [r7, #12]
 8019946:	3b01      	subs	r3, #1
 8019948:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801994a:	697b      	ldr	r3, [r7, #20]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019958:	d0ea      	beq.n	8019930 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801995a:	697b      	ldr	r3, [r7, #20]
 801995c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801995e:	2b00      	cmp	r3, #0
 8019960:	d003      	beq.n	801996a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8019962:	697b      	ldr	r3, [r7, #20]
 8019964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019966:	2200      	movs	r2, #0
 8019968:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801996a:	697b      	ldr	r3, [r7, #20]
 801996c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801996e:	2b00      	cmp	r3, #0
 8019970:	d003      	beq.n	801997a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8019972:	697b      	ldr	r3, [r7, #20]
 8019974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019976:	2200      	movs	r2, #0
 8019978:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801997a:	697b      	ldr	r3, [r7, #20]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	681a      	ldr	r2, [r3, #0]
 8019980:	697b      	ldr	r3, [r7, #20]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019988:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801998a:	697b      	ldr	r3, [r7, #20]
 801998c:	2200      	movs	r2, #0
 801998e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8019990:	697b      	ldr	r3, [r7, #20]
 8019992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019994:	2b00      	cmp	r3, #0
 8019996:	d003      	beq.n	80199a0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8019998:	697b      	ldr	r3, [r7, #20]
 801999a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801999c:	2200      	movs	r2, #0
 801999e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80199a0:	697b      	ldr	r3, [r7, #20]
 80199a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d003      	beq.n	80199b0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80199a8:	697b      	ldr	r3, [r7, #20]
 80199aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80199ac:	2200      	movs	r2, #0
 80199ae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80199b0:	697b      	ldr	r3, [r7, #20]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	681a      	ldr	r2, [r3, #0]
 80199b6:	697b      	ldr	r3, [r7, #20]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	f022 0201 	bic.w	r2, r2, #1
 80199be:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80199c0:	697b      	ldr	r3, [r7, #20]
 80199c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80199c6:	b2db      	uxtb	r3, r3
 80199c8:	2b60      	cmp	r3, #96	; 0x60
 80199ca:	d10e      	bne.n	80199ea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80199cc:	697b      	ldr	r3, [r7, #20]
 80199ce:	2220      	movs	r2, #32
 80199d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80199d4:	697b      	ldr	r3, [r7, #20]
 80199d6:	2200      	movs	r2, #0
 80199d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80199dc:	697b      	ldr	r3, [r7, #20]
 80199de:	2200      	movs	r2, #0
 80199e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80199e2:	6978      	ldr	r0, [r7, #20]
 80199e4:	f7fe fc9c 	bl	8018320 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80199e8:	e027      	b.n	8019a3a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80199ea:	7cfb      	ldrb	r3, [r7, #19]
 80199ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80199f0:	2b28      	cmp	r3, #40	; 0x28
 80199f2:	d117      	bne.n	8019a24 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80199f4:	697b      	ldr	r3, [r7, #20]
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	681a      	ldr	r2, [r3, #0]
 80199fa:	697b      	ldr	r3, [r7, #20]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	f042 0201 	orr.w	r2, r2, #1
 8019a02:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019a04:	697b      	ldr	r3, [r7, #20]
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	681a      	ldr	r2, [r3, #0]
 8019a0a:	697b      	ldr	r3, [r7, #20]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019a12:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8019a14:	697b      	ldr	r3, [r7, #20]
 8019a16:	2200      	movs	r2, #0
 8019a18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019a1a:	697b      	ldr	r3, [r7, #20]
 8019a1c:	2228      	movs	r2, #40	; 0x28
 8019a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8019a22:	e007      	b.n	8019a34 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8019a24:	697b      	ldr	r3, [r7, #20]
 8019a26:	2220      	movs	r2, #32
 8019a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019a2c:	697b      	ldr	r3, [r7, #20]
 8019a2e:	2200      	movs	r2, #0
 8019a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8019a34:	6978      	ldr	r0, [r7, #20]
 8019a36:	f7fe fc69 	bl	801830c <HAL_I2C_ErrorCallback>
}
 8019a3a:	bf00      	nop
 8019a3c:	3718      	adds	r7, #24
 8019a3e:	46bd      	mov	sp, r7
 8019a40:	bd80      	pop	{r7, pc}
 8019a42:	bf00      	nop
 8019a44:	200001dc 	.word	0x200001dc
 8019a48:	14f8b589 	.word	0x14f8b589

08019a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8019a4c:	b580      	push	{r7, lr}
 8019a4e:	b084      	sub	sp, #16
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	60f8      	str	r0, [r7, #12]
 8019a54:	60b9      	str	r1, [r7, #8]
 8019a56:	603b      	str	r3, [r7, #0]
 8019a58:	4613      	mov	r3, r2
 8019a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019a5c:	e025      	b.n	8019aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019a5e:	683b      	ldr	r3, [r7, #0]
 8019a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a64:	d021      	beq.n	8019aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019a66:	f7fc fc9d 	bl	80163a4 <HAL_GetTick>
 8019a6a:	4602      	mov	r2, r0
 8019a6c:	69bb      	ldr	r3, [r7, #24]
 8019a6e:	1ad3      	subs	r3, r2, r3
 8019a70:	683a      	ldr	r2, [r7, #0]
 8019a72:	429a      	cmp	r2, r3
 8019a74:	d302      	bcc.n	8019a7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8019a76:	683b      	ldr	r3, [r7, #0]
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d116      	bne.n	8019aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	2200      	movs	r2, #0
 8019a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	2220      	movs	r2, #32
 8019a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	2200      	movs	r2, #0
 8019a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a96:	f043 0220 	orr.w	r2, r3, #32
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	2200      	movs	r2, #0
 8019aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019aa6:	2301      	movs	r3, #1
 8019aa8:	e023      	b.n	8019af2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019aaa:	68bb      	ldr	r3, [r7, #8]
 8019aac:	0c1b      	lsrs	r3, r3, #16
 8019aae:	b2db      	uxtb	r3, r3
 8019ab0:	2b01      	cmp	r3, #1
 8019ab2:	d10d      	bne.n	8019ad0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	681b      	ldr	r3, [r3, #0]
 8019ab8:	695b      	ldr	r3, [r3, #20]
 8019aba:	43da      	mvns	r2, r3
 8019abc:	68bb      	ldr	r3, [r7, #8]
 8019abe:	4013      	ands	r3, r2
 8019ac0:	b29b      	uxth	r3, r3
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	bf0c      	ite	eq
 8019ac6:	2301      	moveq	r3, #1
 8019ac8:	2300      	movne	r3, #0
 8019aca:	b2db      	uxtb	r3, r3
 8019acc:	461a      	mov	r2, r3
 8019ace:	e00c      	b.n	8019aea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	699b      	ldr	r3, [r3, #24]
 8019ad6:	43da      	mvns	r2, r3
 8019ad8:	68bb      	ldr	r3, [r7, #8]
 8019ada:	4013      	ands	r3, r2
 8019adc:	b29b      	uxth	r3, r3
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	bf0c      	ite	eq
 8019ae2:	2301      	moveq	r3, #1
 8019ae4:	2300      	movne	r3, #0
 8019ae6:	b2db      	uxtb	r3, r3
 8019ae8:	461a      	mov	r2, r3
 8019aea:	79fb      	ldrb	r3, [r7, #7]
 8019aec:	429a      	cmp	r2, r3
 8019aee:	d0b6      	beq.n	8019a5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8019af0:	2300      	movs	r3, #0
}
 8019af2:	4618      	mov	r0, r3
 8019af4:	3710      	adds	r7, #16
 8019af6:	46bd      	mov	sp, r7
 8019af8:	bd80      	pop	{r7, pc}

08019afa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8019afa:	b580      	push	{r7, lr}
 8019afc:	b084      	sub	sp, #16
 8019afe:	af00      	add	r7, sp, #0
 8019b00:	60f8      	str	r0, [r7, #12]
 8019b02:	60b9      	str	r1, [r7, #8]
 8019b04:	607a      	str	r2, [r7, #4]
 8019b06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8019b08:	e051      	b.n	8019bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	695b      	ldr	r3, [r3, #20]
 8019b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019b18:	d123      	bne.n	8019b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	681a      	ldr	r2, [r3, #0]
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019b28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019b32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	2200      	movs	r2, #0
 8019b38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	2220      	movs	r2, #32
 8019b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	2200      	movs	r2, #0
 8019b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b4e:	f043 0204 	orr.w	r2, r3, #4
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	2200      	movs	r2, #0
 8019b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019b5e:	2301      	movs	r3, #1
 8019b60:	e046      	b.n	8019bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b68:	d021      	beq.n	8019bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019b6a:	f7fc fc1b 	bl	80163a4 <HAL_GetTick>
 8019b6e:	4602      	mov	r2, r0
 8019b70:	683b      	ldr	r3, [r7, #0]
 8019b72:	1ad3      	subs	r3, r2, r3
 8019b74:	687a      	ldr	r2, [r7, #4]
 8019b76:	429a      	cmp	r2, r3
 8019b78:	d302      	bcc.n	8019b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d116      	bne.n	8019bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	2200      	movs	r2, #0
 8019b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	2220      	movs	r2, #32
 8019b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	2200      	movs	r2, #0
 8019b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b9a:	f043 0220 	orr.w	r2, r3, #32
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	2200      	movs	r2, #0
 8019ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019baa:	2301      	movs	r3, #1
 8019bac:	e020      	b.n	8019bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8019bae:	68bb      	ldr	r3, [r7, #8]
 8019bb0:	0c1b      	lsrs	r3, r3, #16
 8019bb2:	b2db      	uxtb	r3, r3
 8019bb4:	2b01      	cmp	r3, #1
 8019bb6:	d10c      	bne.n	8019bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	695b      	ldr	r3, [r3, #20]
 8019bbe:	43da      	mvns	r2, r3
 8019bc0:	68bb      	ldr	r3, [r7, #8]
 8019bc2:	4013      	ands	r3, r2
 8019bc4:	b29b      	uxth	r3, r3
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	bf14      	ite	ne
 8019bca:	2301      	movne	r3, #1
 8019bcc:	2300      	moveq	r3, #0
 8019bce:	b2db      	uxtb	r3, r3
 8019bd0:	e00b      	b.n	8019bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	699b      	ldr	r3, [r3, #24]
 8019bd8:	43da      	mvns	r2, r3
 8019bda:	68bb      	ldr	r3, [r7, #8]
 8019bdc:	4013      	ands	r3, r2
 8019bde:	b29b      	uxth	r3, r3
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	bf14      	ite	ne
 8019be4:	2301      	movne	r3, #1
 8019be6:	2300      	moveq	r3, #0
 8019be8:	b2db      	uxtb	r3, r3
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d18d      	bne.n	8019b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8019bee:	2300      	movs	r3, #0
}
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	3710      	adds	r7, #16
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	bd80      	pop	{r7, pc}

08019bf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019bf8:	b580      	push	{r7, lr}
 8019bfa:	b084      	sub	sp, #16
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	60f8      	str	r0, [r7, #12]
 8019c00:	60b9      	str	r1, [r7, #8]
 8019c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8019c04:	e02d      	b.n	8019c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019c06:	68f8      	ldr	r0, [r7, #12]
 8019c08:	f000 f900 	bl	8019e0c <I2C_IsAcknowledgeFailed>
 8019c0c:	4603      	mov	r3, r0
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d001      	beq.n	8019c16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8019c12:	2301      	movs	r3, #1
 8019c14:	e02d      	b.n	8019c72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019c16:	68bb      	ldr	r3, [r7, #8]
 8019c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c1c:	d021      	beq.n	8019c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019c1e:	f7fc fbc1 	bl	80163a4 <HAL_GetTick>
 8019c22:	4602      	mov	r2, r0
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	1ad3      	subs	r3, r2, r3
 8019c28:	68ba      	ldr	r2, [r7, #8]
 8019c2a:	429a      	cmp	r2, r3
 8019c2c:	d302      	bcc.n	8019c34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8019c2e:	68bb      	ldr	r3, [r7, #8]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d116      	bne.n	8019c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	2200      	movs	r2, #0
 8019c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	2220      	movs	r2, #32
 8019c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	2200      	movs	r2, #0
 8019c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c4e:	f043 0220 	orr.w	r2, r3, #32
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	2200      	movs	r2, #0
 8019c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019c5e:	2301      	movs	r3, #1
 8019c60:	e007      	b.n	8019c72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	695b      	ldr	r3, [r3, #20]
 8019c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019c6c:	2b80      	cmp	r3, #128	; 0x80
 8019c6e:	d1ca      	bne.n	8019c06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8019c70:	2300      	movs	r3, #0
}
 8019c72:	4618      	mov	r0, r3
 8019c74:	3710      	adds	r7, #16
 8019c76:	46bd      	mov	sp, r7
 8019c78:	bd80      	pop	{r7, pc}

08019c7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019c7a:	b580      	push	{r7, lr}
 8019c7c:	b084      	sub	sp, #16
 8019c7e:	af00      	add	r7, sp, #0
 8019c80:	60f8      	str	r0, [r7, #12]
 8019c82:	60b9      	str	r1, [r7, #8]
 8019c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8019c86:	e02d      	b.n	8019ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019c88:	68f8      	ldr	r0, [r7, #12]
 8019c8a:	f000 f8bf 	bl	8019e0c <I2C_IsAcknowledgeFailed>
 8019c8e:	4603      	mov	r3, r0
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d001      	beq.n	8019c98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8019c94:	2301      	movs	r3, #1
 8019c96:	e02d      	b.n	8019cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019c98:	68bb      	ldr	r3, [r7, #8]
 8019c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c9e:	d021      	beq.n	8019ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019ca0:	f7fc fb80 	bl	80163a4 <HAL_GetTick>
 8019ca4:	4602      	mov	r2, r0
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	1ad3      	subs	r3, r2, r3
 8019caa:	68ba      	ldr	r2, [r7, #8]
 8019cac:	429a      	cmp	r2, r3
 8019cae:	d302      	bcc.n	8019cb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8019cb0:	68bb      	ldr	r3, [r7, #8]
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d116      	bne.n	8019ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	2200      	movs	r2, #0
 8019cba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019cbc:	68fb      	ldr	r3, [r7, #12]
 8019cbe:	2220      	movs	r2, #32
 8019cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019cd0:	f043 0220 	orr.w	r2, r3, #32
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	2200      	movs	r2, #0
 8019cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019ce0:	2301      	movs	r3, #1
 8019ce2:	e007      	b.n	8019cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	695b      	ldr	r3, [r3, #20]
 8019cea:	f003 0304 	and.w	r3, r3, #4
 8019cee:	2b04      	cmp	r3, #4
 8019cf0:	d1ca      	bne.n	8019c88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8019cf2:	2300      	movs	r3, #0
}
 8019cf4:	4618      	mov	r0, r3
 8019cf6:	3710      	adds	r7, #16
 8019cf8:	46bd      	mov	sp, r7
 8019cfa:	bd80      	pop	{r7, pc}

08019cfc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8019cfc:	b480      	push	{r7}
 8019cfe:	b085      	sub	sp, #20
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019d04:	2300      	movs	r3, #0
 8019d06:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8019d08:	4b13      	ldr	r3, [pc, #76]	; (8019d58 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	08db      	lsrs	r3, r3, #3
 8019d0e:	4a13      	ldr	r2, [pc, #76]	; (8019d5c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8019d10:	fba2 2303 	umull	r2, r3, r2, r3
 8019d14:	0a1a      	lsrs	r2, r3, #8
 8019d16:	4613      	mov	r3, r2
 8019d18:	009b      	lsls	r3, r3, #2
 8019d1a:	4413      	add	r3, r2
 8019d1c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	3b01      	subs	r3, #1
 8019d22:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d107      	bne.n	8019d3a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d2e:	f043 0220 	orr.w	r2, r3, #32
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8019d36:	2301      	movs	r3, #1
 8019d38:	e008      	b.n	8019d4c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019d48:	d0e9      	beq.n	8019d1e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8019d4a:	2300      	movs	r3, #0
}
 8019d4c:	4618      	mov	r0, r3
 8019d4e:	3714      	adds	r7, #20
 8019d50:	46bd      	mov	sp, r7
 8019d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d56:	4770      	bx	lr
 8019d58:	200001dc 	.word	0x200001dc
 8019d5c:	14f8b589 	.word	0x14f8b589

08019d60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019d60:	b580      	push	{r7, lr}
 8019d62:	b084      	sub	sp, #16
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	60f8      	str	r0, [r7, #12]
 8019d68:	60b9      	str	r1, [r7, #8]
 8019d6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019d6c:	e042      	b.n	8019df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	695b      	ldr	r3, [r3, #20]
 8019d74:	f003 0310 	and.w	r3, r3, #16
 8019d78:	2b10      	cmp	r3, #16
 8019d7a:	d119      	bne.n	8019db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	f06f 0210 	mvn.w	r2, #16
 8019d84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	2200      	movs	r2, #0
 8019d8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	2220      	movs	r2, #32
 8019d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	2200      	movs	r2, #0
 8019d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	2200      	movs	r2, #0
 8019da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019dac:	2301      	movs	r3, #1
 8019dae:	e029      	b.n	8019e04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019db0:	f7fc faf8 	bl	80163a4 <HAL_GetTick>
 8019db4:	4602      	mov	r2, r0
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	1ad3      	subs	r3, r2, r3
 8019dba:	68ba      	ldr	r2, [r7, #8]
 8019dbc:	429a      	cmp	r2, r3
 8019dbe:	d302      	bcc.n	8019dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8019dc0:	68bb      	ldr	r3, [r7, #8]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d116      	bne.n	8019df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8019dc6:	68fb      	ldr	r3, [r7, #12]
 8019dc8:	2200      	movs	r2, #0
 8019dca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019dcc:	68fb      	ldr	r3, [r7, #12]
 8019dce:	2220      	movs	r2, #32
 8019dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	2200      	movs	r2, #0
 8019dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019de0:	f043 0220 	orr.w	r2, r3, #32
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	2200      	movs	r2, #0
 8019dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019df0:	2301      	movs	r3, #1
 8019df2:	e007      	b.n	8019e04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019df4:	68fb      	ldr	r3, [r7, #12]
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	695b      	ldr	r3, [r3, #20]
 8019dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019dfe:	2b40      	cmp	r3, #64	; 0x40
 8019e00:	d1b5      	bne.n	8019d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8019e02:	2300      	movs	r3, #0
}
 8019e04:	4618      	mov	r0, r3
 8019e06:	3710      	adds	r7, #16
 8019e08:	46bd      	mov	sp, r7
 8019e0a:	bd80      	pop	{r7, pc}

08019e0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8019e0c:	b480      	push	{r7}
 8019e0e:	b083      	sub	sp, #12
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	695b      	ldr	r3, [r3, #20]
 8019e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019e22:	d11b      	bne.n	8019e5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019e2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	2200      	movs	r2, #0
 8019e32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	2220      	movs	r2, #32
 8019e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	2200      	movs	r2, #0
 8019e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e48:	f043 0204 	orr.w	r2, r3, #4
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	2200      	movs	r2, #0
 8019e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8019e58:	2301      	movs	r3, #1
 8019e5a:	e000      	b.n	8019e5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8019e5c:	2300      	movs	r3, #0
}
 8019e5e:	4618      	mov	r0, r3
 8019e60:	370c      	adds	r7, #12
 8019e62:	46bd      	mov	sp, r7
 8019e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e68:	4770      	bx	lr

08019e6a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8019e6a:	b480      	push	{r7}
 8019e6c:	b083      	sub	sp, #12
 8019e6e:	af00      	add	r7, sp, #0
 8019e70:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e76:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8019e7a:	d103      	bne.n	8019e84 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	2201      	movs	r2, #1
 8019e80:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8019e82:	e007      	b.n	8019e94 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8019e8c:	d102      	bne.n	8019e94 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	2208      	movs	r2, #8
 8019e92:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8019e94:	bf00      	nop
 8019e96:	370c      	adds	r7, #12
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e9e:	4770      	bx	lr

08019ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b086      	sub	sp, #24
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d101      	bne.n	8019eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8019eae:	2301      	movs	r3, #1
 8019eb0:	e267      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	f003 0301 	and.w	r3, r3, #1
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d075      	beq.n	8019faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8019ebe:	4b88      	ldr	r3, [pc, #544]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019ec0:	689b      	ldr	r3, [r3, #8]
 8019ec2:	f003 030c 	and.w	r3, r3, #12
 8019ec6:	2b04      	cmp	r3, #4
 8019ec8:	d00c      	beq.n	8019ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019eca:	4b85      	ldr	r3, [pc, #532]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019ecc:	689b      	ldr	r3, [r3, #8]
 8019ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8019ed2:	2b08      	cmp	r3, #8
 8019ed4:	d112      	bne.n	8019efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019ed6:	4b82      	ldr	r3, [pc, #520]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019ed8:	685b      	ldr	r3, [r3, #4]
 8019eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019ee2:	d10b      	bne.n	8019efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019ee4:	4b7e      	ldr	r3, [pc, #504]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d05b      	beq.n	8019fa8 <HAL_RCC_OscConfig+0x108>
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	685b      	ldr	r3, [r3, #4]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d157      	bne.n	8019fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8019ef8:	2301      	movs	r3, #1
 8019efa:	e242      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	685b      	ldr	r3, [r3, #4]
 8019f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019f04:	d106      	bne.n	8019f14 <HAL_RCC_OscConfig+0x74>
 8019f06:	4b76      	ldr	r3, [pc, #472]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	4a75      	ldr	r2, [pc, #468]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019f10:	6013      	str	r3, [r2, #0]
 8019f12:	e01d      	b.n	8019f50 <HAL_RCC_OscConfig+0xb0>
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	685b      	ldr	r3, [r3, #4]
 8019f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8019f1c:	d10c      	bne.n	8019f38 <HAL_RCC_OscConfig+0x98>
 8019f1e:	4b70      	ldr	r3, [pc, #448]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	4a6f      	ldr	r2, [pc, #444]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8019f28:	6013      	str	r3, [r2, #0]
 8019f2a:	4b6d      	ldr	r3, [pc, #436]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	4a6c      	ldr	r2, [pc, #432]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019f34:	6013      	str	r3, [r2, #0]
 8019f36:	e00b      	b.n	8019f50 <HAL_RCC_OscConfig+0xb0>
 8019f38:	4b69      	ldr	r3, [pc, #420]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	4a68      	ldr	r2, [pc, #416]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019f42:	6013      	str	r3, [r2, #0]
 8019f44:	4b66      	ldr	r3, [pc, #408]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	4a65      	ldr	r2, [pc, #404]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8019f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	685b      	ldr	r3, [r3, #4]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d013      	beq.n	8019f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019f58:	f7fc fa24 	bl	80163a4 <HAL_GetTick>
 8019f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019f5e:	e008      	b.n	8019f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019f60:	f7fc fa20 	bl	80163a4 <HAL_GetTick>
 8019f64:	4602      	mov	r2, r0
 8019f66:	693b      	ldr	r3, [r7, #16]
 8019f68:	1ad3      	subs	r3, r2, r3
 8019f6a:	2b64      	cmp	r3, #100	; 0x64
 8019f6c:	d901      	bls.n	8019f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8019f6e:	2303      	movs	r3, #3
 8019f70:	e207      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019f72:	4b5b      	ldr	r3, [pc, #364]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d0f0      	beq.n	8019f60 <HAL_RCC_OscConfig+0xc0>
 8019f7e:	e014      	b.n	8019faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019f80:	f7fc fa10 	bl	80163a4 <HAL_GetTick>
 8019f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019f86:	e008      	b.n	8019f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019f88:	f7fc fa0c 	bl	80163a4 <HAL_GetTick>
 8019f8c:	4602      	mov	r2, r0
 8019f8e:	693b      	ldr	r3, [r7, #16]
 8019f90:	1ad3      	subs	r3, r2, r3
 8019f92:	2b64      	cmp	r3, #100	; 0x64
 8019f94:	d901      	bls.n	8019f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8019f96:	2303      	movs	r3, #3
 8019f98:	e1f3      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019f9a:	4b51      	ldr	r3, [pc, #324]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d1f0      	bne.n	8019f88 <HAL_RCC_OscConfig+0xe8>
 8019fa6:	e000      	b.n	8019faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	f003 0302 	and.w	r3, r3, #2
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d063      	beq.n	801a07e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8019fb6:	4b4a      	ldr	r3, [pc, #296]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019fb8:	689b      	ldr	r3, [r3, #8]
 8019fba:	f003 030c 	and.w	r3, r3, #12
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d00b      	beq.n	8019fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8019fc2:	4b47      	ldr	r3, [pc, #284]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019fc4:	689b      	ldr	r3, [r3, #8]
 8019fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8019fca:	2b08      	cmp	r3, #8
 8019fcc:	d11c      	bne.n	801a008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8019fce:	4b44      	ldr	r3, [pc, #272]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019fd0:	685b      	ldr	r3, [r3, #4]
 8019fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d116      	bne.n	801a008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019fda:	4b41      	ldr	r3, [pc, #260]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	f003 0302 	and.w	r3, r3, #2
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d005      	beq.n	8019ff2 <HAL_RCC_OscConfig+0x152>
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	68db      	ldr	r3, [r3, #12]
 8019fea:	2b01      	cmp	r3, #1
 8019fec:	d001      	beq.n	8019ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8019fee:	2301      	movs	r3, #1
 8019ff0:	e1c7      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019ff2:	4b3b      	ldr	r3, [pc, #236]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	691b      	ldr	r3, [r3, #16]
 8019ffe:	00db      	lsls	r3, r3, #3
 801a000:	4937      	ldr	r1, [pc, #220]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 801a002:	4313      	orrs	r3, r2
 801a004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801a006:	e03a      	b.n	801a07e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	68db      	ldr	r3, [r3, #12]
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d020      	beq.n	801a052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801a010:	4b34      	ldr	r3, [pc, #208]	; (801a0e4 <HAL_RCC_OscConfig+0x244>)
 801a012:	2201      	movs	r2, #1
 801a014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a016:	f7fc f9c5 	bl	80163a4 <HAL_GetTick>
 801a01a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a01c:	e008      	b.n	801a030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a01e:	f7fc f9c1 	bl	80163a4 <HAL_GetTick>
 801a022:	4602      	mov	r2, r0
 801a024:	693b      	ldr	r3, [r7, #16]
 801a026:	1ad3      	subs	r3, r2, r3
 801a028:	2b02      	cmp	r3, #2
 801a02a:	d901      	bls.n	801a030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801a02c:	2303      	movs	r3, #3
 801a02e:	e1a8      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a030:	4b2b      	ldr	r3, [pc, #172]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	f003 0302 	and.w	r3, r3, #2
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d0f0      	beq.n	801a01e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a03c:	4b28      	ldr	r3, [pc, #160]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	691b      	ldr	r3, [r3, #16]
 801a048:	00db      	lsls	r3, r3, #3
 801a04a:	4925      	ldr	r1, [pc, #148]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 801a04c:	4313      	orrs	r3, r2
 801a04e:	600b      	str	r3, [r1, #0]
 801a050:	e015      	b.n	801a07e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a052:	4b24      	ldr	r3, [pc, #144]	; (801a0e4 <HAL_RCC_OscConfig+0x244>)
 801a054:	2200      	movs	r2, #0
 801a056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a058:	f7fc f9a4 	bl	80163a4 <HAL_GetTick>
 801a05c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a05e:	e008      	b.n	801a072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a060:	f7fc f9a0 	bl	80163a4 <HAL_GetTick>
 801a064:	4602      	mov	r2, r0
 801a066:	693b      	ldr	r3, [r7, #16]
 801a068:	1ad3      	subs	r3, r2, r3
 801a06a:	2b02      	cmp	r3, #2
 801a06c:	d901      	bls.n	801a072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801a06e:	2303      	movs	r3, #3
 801a070:	e187      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a072:	4b1b      	ldr	r3, [pc, #108]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	f003 0302 	and.w	r3, r3, #2
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d1f0      	bne.n	801a060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	f003 0308 	and.w	r3, r3, #8
 801a086:	2b00      	cmp	r3, #0
 801a088:	d036      	beq.n	801a0f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	695b      	ldr	r3, [r3, #20]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d016      	beq.n	801a0c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a092:	4b15      	ldr	r3, [pc, #84]	; (801a0e8 <HAL_RCC_OscConfig+0x248>)
 801a094:	2201      	movs	r2, #1
 801a096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a098:	f7fc f984 	bl	80163a4 <HAL_GetTick>
 801a09c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a09e:	e008      	b.n	801a0b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a0a0:	f7fc f980 	bl	80163a4 <HAL_GetTick>
 801a0a4:	4602      	mov	r2, r0
 801a0a6:	693b      	ldr	r3, [r7, #16]
 801a0a8:	1ad3      	subs	r3, r2, r3
 801a0aa:	2b02      	cmp	r3, #2
 801a0ac:	d901      	bls.n	801a0b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801a0ae:	2303      	movs	r3, #3
 801a0b0:	e167      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a0b2:	4b0b      	ldr	r3, [pc, #44]	; (801a0e0 <HAL_RCC_OscConfig+0x240>)
 801a0b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a0b6:	f003 0302 	and.w	r3, r3, #2
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d0f0      	beq.n	801a0a0 <HAL_RCC_OscConfig+0x200>
 801a0be:	e01b      	b.n	801a0f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a0c0:	4b09      	ldr	r3, [pc, #36]	; (801a0e8 <HAL_RCC_OscConfig+0x248>)
 801a0c2:	2200      	movs	r2, #0
 801a0c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a0c6:	f7fc f96d 	bl	80163a4 <HAL_GetTick>
 801a0ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a0cc:	e00e      	b.n	801a0ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a0ce:	f7fc f969 	bl	80163a4 <HAL_GetTick>
 801a0d2:	4602      	mov	r2, r0
 801a0d4:	693b      	ldr	r3, [r7, #16]
 801a0d6:	1ad3      	subs	r3, r2, r3
 801a0d8:	2b02      	cmp	r3, #2
 801a0da:	d907      	bls.n	801a0ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801a0dc:	2303      	movs	r3, #3
 801a0de:	e150      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
 801a0e0:	40023800 	.word	0x40023800
 801a0e4:	42470000 	.word	0x42470000
 801a0e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a0ec:	4b88      	ldr	r3, [pc, #544]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a0ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a0f0:	f003 0302 	and.w	r3, r3, #2
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d1ea      	bne.n	801a0ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	f003 0304 	and.w	r3, r3, #4
 801a100:	2b00      	cmp	r3, #0
 801a102:	f000 8097 	beq.w	801a234 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a106:	2300      	movs	r3, #0
 801a108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a10a:	4b81      	ldr	r3, [pc, #516]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a10e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a112:	2b00      	cmp	r3, #0
 801a114:	d10f      	bne.n	801a136 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a116:	2300      	movs	r3, #0
 801a118:	60bb      	str	r3, [r7, #8]
 801a11a:	4b7d      	ldr	r3, [pc, #500]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a11e:	4a7c      	ldr	r2, [pc, #496]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a124:	6413      	str	r3, [r2, #64]	; 0x40
 801a126:	4b7a      	ldr	r3, [pc, #488]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a12a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a12e:	60bb      	str	r3, [r7, #8]
 801a130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801a132:	2301      	movs	r3, #1
 801a134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a136:	4b77      	ldr	r3, [pc, #476]	; (801a314 <HAL_RCC_OscConfig+0x474>)
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d118      	bne.n	801a174 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a142:	4b74      	ldr	r3, [pc, #464]	; (801a314 <HAL_RCC_OscConfig+0x474>)
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	4a73      	ldr	r2, [pc, #460]	; (801a314 <HAL_RCC_OscConfig+0x474>)
 801a148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a14c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a14e:	f7fc f929 	bl	80163a4 <HAL_GetTick>
 801a152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a154:	e008      	b.n	801a168 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a156:	f7fc f925 	bl	80163a4 <HAL_GetTick>
 801a15a:	4602      	mov	r2, r0
 801a15c:	693b      	ldr	r3, [r7, #16]
 801a15e:	1ad3      	subs	r3, r2, r3
 801a160:	2b02      	cmp	r3, #2
 801a162:	d901      	bls.n	801a168 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801a164:	2303      	movs	r3, #3
 801a166:	e10c      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a168:	4b6a      	ldr	r3, [pc, #424]	; (801a314 <HAL_RCC_OscConfig+0x474>)
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a170:	2b00      	cmp	r3, #0
 801a172:	d0f0      	beq.n	801a156 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	689b      	ldr	r3, [r3, #8]
 801a178:	2b01      	cmp	r3, #1
 801a17a:	d106      	bne.n	801a18a <HAL_RCC_OscConfig+0x2ea>
 801a17c:	4b64      	ldr	r3, [pc, #400]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a17e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a180:	4a63      	ldr	r2, [pc, #396]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a182:	f043 0301 	orr.w	r3, r3, #1
 801a186:	6713      	str	r3, [r2, #112]	; 0x70
 801a188:	e01c      	b.n	801a1c4 <HAL_RCC_OscConfig+0x324>
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	689b      	ldr	r3, [r3, #8]
 801a18e:	2b05      	cmp	r3, #5
 801a190:	d10c      	bne.n	801a1ac <HAL_RCC_OscConfig+0x30c>
 801a192:	4b5f      	ldr	r3, [pc, #380]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a196:	4a5e      	ldr	r2, [pc, #376]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a198:	f043 0304 	orr.w	r3, r3, #4
 801a19c:	6713      	str	r3, [r2, #112]	; 0x70
 801a19e:	4b5c      	ldr	r3, [pc, #368]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a1a2:	4a5b      	ldr	r2, [pc, #364]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a1a4:	f043 0301 	orr.w	r3, r3, #1
 801a1a8:	6713      	str	r3, [r2, #112]	; 0x70
 801a1aa:	e00b      	b.n	801a1c4 <HAL_RCC_OscConfig+0x324>
 801a1ac:	4b58      	ldr	r3, [pc, #352]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a1b0:	4a57      	ldr	r2, [pc, #348]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a1b2:	f023 0301 	bic.w	r3, r3, #1
 801a1b6:	6713      	str	r3, [r2, #112]	; 0x70
 801a1b8:	4b55      	ldr	r3, [pc, #340]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a1bc:	4a54      	ldr	r2, [pc, #336]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a1be:	f023 0304 	bic.w	r3, r3, #4
 801a1c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	689b      	ldr	r3, [r3, #8]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d015      	beq.n	801a1f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a1cc:	f7fc f8ea 	bl	80163a4 <HAL_GetTick>
 801a1d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a1d2:	e00a      	b.n	801a1ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a1d4:	f7fc f8e6 	bl	80163a4 <HAL_GetTick>
 801a1d8:	4602      	mov	r2, r0
 801a1da:	693b      	ldr	r3, [r7, #16]
 801a1dc:	1ad3      	subs	r3, r2, r3
 801a1de:	f241 3288 	movw	r2, #5000	; 0x1388
 801a1e2:	4293      	cmp	r3, r2
 801a1e4:	d901      	bls.n	801a1ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801a1e6:	2303      	movs	r3, #3
 801a1e8:	e0cb      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a1ea:	4b49      	ldr	r3, [pc, #292]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a1ee:	f003 0302 	and.w	r3, r3, #2
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d0ee      	beq.n	801a1d4 <HAL_RCC_OscConfig+0x334>
 801a1f6:	e014      	b.n	801a222 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a1f8:	f7fc f8d4 	bl	80163a4 <HAL_GetTick>
 801a1fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a1fe:	e00a      	b.n	801a216 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a200:	f7fc f8d0 	bl	80163a4 <HAL_GetTick>
 801a204:	4602      	mov	r2, r0
 801a206:	693b      	ldr	r3, [r7, #16]
 801a208:	1ad3      	subs	r3, r2, r3
 801a20a:	f241 3288 	movw	r2, #5000	; 0x1388
 801a20e:	4293      	cmp	r3, r2
 801a210:	d901      	bls.n	801a216 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801a212:	2303      	movs	r3, #3
 801a214:	e0b5      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a216:	4b3e      	ldr	r3, [pc, #248]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a21a:	f003 0302 	and.w	r3, r3, #2
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d1ee      	bne.n	801a200 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801a222:	7dfb      	ldrb	r3, [r7, #23]
 801a224:	2b01      	cmp	r3, #1
 801a226:	d105      	bne.n	801a234 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a228:	4b39      	ldr	r3, [pc, #228]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a22c:	4a38      	ldr	r2, [pc, #224]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a22e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a232:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	699b      	ldr	r3, [r3, #24]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	f000 80a1 	beq.w	801a380 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801a23e:	4b34      	ldr	r3, [pc, #208]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a240:	689b      	ldr	r3, [r3, #8]
 801a242:	f003 030c 	and.w	r3, r3, #12
 801a246:	2b08      	cmp	r3, #8
 801a248:	d05c      	beq.n	801a304 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	699b      	ldr	r3, [r3, #24]
 801a24e:	2b02      	cmp	r3, #2
 801a250:	d141      	bne.n	801a2d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a252:	4b31      	ldr	r3, [pc, #196]	; (801a318 <HAL_RCC_OscConfig+0x478>)
 801a254:	2200      	movs	r2, #0
 801a256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a258:	f7fc f8a4 	bl	80163a4 <HAL_GetTick>
 801a25c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a25e:	e008      	b.n	801a272 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a260:	f7fc f8a0 	bl	80163a4 <HAL_GetTick>
 801a264:	4602      	mov	r2, r0
 801a266:	693b      	ldr	r3, [r7, #16]
 801a268:	1ad3      	subs	r3, r2, r3
 801a26a:	2b02      	cmp	r3, #2
 801a26c:	d901      	bls.n	801a272 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801a26e:	2303      	movs	r3, #3
 801a270:	e087      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a272:	4b27      	ldr	r3, [pc, #156]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d1f0      	bne.n	801a260 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	69da      	ldr	r2, [r3, #28]
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	6a1b      	ldr	r3, [r3, #32]
 801a286:	431a      	orrs	r2, r3
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a28c:	019b      	lsls	r3, r3, #6
 801a28e:	431a      	orrs	r2, r3
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a294:	085b      	lsrs	r3, r3, #1
 801a296:	3b01      	subs	r3, #1
 801a298:	041b      	lsls	r3, r3, #16
 801a29a:	431a      	orrs	r2, r3
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2a0:	061b      	lsls	r3, r3, #24
 801a2a2:	491b      	ldr	r1, [pc, #108]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a2a4:	4313      	orrs	r3, r2
 801a2a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801a2a8:	4b1b      	ldr	r3, [pc, #108]	; (801a318 <HAL_RCC_OscConfig+0x478>)
 801a2aa:	2201      	movs	r2, #1
 801a2ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a2ae:	f7fc f879 	bl	80163a4 <HAL_GetTick>
 801a2b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a2b4:	e008      	b.n	801a2c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a2b6:	f7fc f875 	bl	80163a4 <HAL_GetTick>
 801a2ba:	4602      	mov	r2, r0
 801a2bc:	693b      	ldr	r3, [r7, #16]
 801a2be:	1ad3      	subs	r3, r2, r3
 801a2c0:	2b02      	cmp	r3, #2
 801a2c2:	d901      	bls.n	801a2c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801a2c4:	2303      	movs	r3, #3
 801a2c6:	e05c      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a2c8:	4b11      	ldr	r3, [pc, #68]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d0f0      	beq.n	801a2b6 <HAL_RCC_OscConfig+0x416>
 801a2d4:	e054      	b.n	801a380 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a2d6:	4b10      	ldr	r3, [pc, #64]	; (801a318 <HAL_RCC_OscConfig+0x478>)
 801a2d8:	2200      	movs	r2, #0
 801a2da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a2dc:	f7fc f862 	bl	80163a4 <HAL_GetTick>
 801a2e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a2e2:	e008      	b.n	801a2f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a2e4:	f7fc f85e 	bl	80163a4 <HAL_GetTick>
 801a2e8:	4602      	mov	r2, r0
 801a2ea:	693b      	ldr	r3, [r7, #16]
 801a2ec:	1ad3      	subs	r3, r2, r3
 801a2ee:	2b02      	cmp	r3, #2
 801a2f0:	d901      	bls.n	801a2f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801a2f2:	2303      	movs	r3, #3
 801a2f4:	e045      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a2f6:	4b06      	ldr	r3, [pc, #24]	; (801a310 <HAL_RCC_OscConfig+0x470>)
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d1f0      	bne.n	801a2e4 <HAL_RCC_OscConfig+0x444>
 801a302:	e03d      	b.n	801a380 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	699b      	ldr	r3, [r3, #24]
 801a308:	2b01      	cmp	r3, #1
 801a30a:	d107      	bne.n	801a31c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801a30c:	2301      	movs	r3, #1
 801a30e:	e038      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
 801a310:	40023800 	.word	0x40023800
 801a314:	40007000 	.word	0x40007000
 801a318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801a31c:	4b1b      	ldr	r3, [pc, #108]	; (801a38c <HAL_RCC_OscConfig+0x4ec>)
 801a31e:	685b      	ldr	r3, [r3, #4]
 801a320:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	699b      	ldr	r3, [r3, #24]
 801a326:	2b01      	cmp	r3, #1
 801a328:	d028      	beq.n	801a37c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a32a:	68fb      	ldr	r3, [r7, #12]
 801a32c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a334:	429a      	cmp	r2, r3
 801a336:	d121      	bne.n	801a37c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a342:	429a      	cmp	r2, r3
 801a344:	d11a      	bne.n	801a37c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a346:	68fa      	ldr	r2, [r7, #12]
 801a348:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801a34c:	4013      	ands	r3, r2
 801a34e:	687a      	ldr	r2, [r7, #4]
 801a350:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801a352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a354:	4293      	cmp	r3, r2
 801a356:	d111      	bne.n	801a37c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a358:	68fb      	ldr	r3, [r7, #12]
 801a35a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a362:	085b      	lsrs	r3, r3, #1
 801a364:	3b01      	subs	r3, #1
 801a366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a368:	429a      	cmp	r2, r3
 801a36a:	d107      	bne.n	801a37c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a378:	429a      	cmp	r2, r3
 801a37a:	d001      	beq.n	801a380 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801a37c:	2301      	movs	r3, #1
 801a37e:	e000      	b.n	801a382 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801a380:	2300      	movs	r3, #0
}
 801a382:	4618      	mov	r0, r3
 801a384:	3718      	adds	r7, #24
 801a386:	46bd      	mov	sp, r7
 801a388:	bd80      	pop	{r7, pc}
 801a38a:	bf00      	nop
 801a38c:	40023800 	.word	0x40023800

0801a390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a390:	b580      	push	{r7, lr}
 801a392:	b084      	sub	sp, #16
 801a394:	af00      	add	r7, sp, #0
 801a396:	6078      	str	r0, [r7, #4]
 801a398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d101      	bne.n	801a3a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a3a0:	2301      	movs	r3, #1
 801a3a2:	e0cc      	b.n	801a53e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801a3a4:	4b68      	ldr	r3, [pc, #416]	; (801a548 <HAL_RCC_ClockConfig+0x1b8>)
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	f003 0307 	and.w	r3, r3, #7
 801a3ac:	683a      	ldr	r2, [r7, #0]
 801a3ae:	429a      	cmp	r2, r3
 801a3b0:	d90c      	bls.n	801a3cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a3b2:	4b65      	ldr	r3, [pc, #404]	; (801a548 <HAL_RCC_ClockConfig+0x1b8>)
 801a3b4:	683a      	ldr	r2, [r7, #0]
 801a3b6:	b2d2      	uxtb	r2, r2
 801a3b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a3ba:	4b63      	ldr	r3, [pc, #396]	; (801a548 <HAL_RCC_ClockConfig+0x1b8>)
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	f003 0307 	and.w	r3, r3, #7
 801a3c2:	683a      	ldr	r2, [r7, #0]
 801a3c4:	429a      	cmp	r2, r3
 801a3c6:	d001      	beq.n	801a3cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801a3c8:	2301      	movs	r3, #1
 801a3ca:	e0b8      	b.n	801a53e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	f003 0302 	and.w	r3, r3, #2
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d020      	beq.n	801a41a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	f003 0304 	and.w	r3, r3, #4
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d005      	beq.n	801a3f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801a3e4:	4b59      	ldr	r3, [pc, #356]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a3e6:	689b      	ldr	r3, [r3, #8]
 801a3e8:	4a58      	ldr	r2, [pc, #352]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a3ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801a3ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	f003 0308 	and.w	r3, r3, #8
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d005      	beq.n	801a408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801a3fc:	4b53      	ldr	r3, [pc, #332]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a3fe:	689b      	ldr	r3, [r3, #8]
 801a400:	4a52      	ldr	r2, [pc, #328]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801a406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a408:	4b50      	ldr	r3, [pc, #320]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a40a:	689b      	ldr	r3, [r3, #8]
 801a40c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	689b      	ldr	r3, [r3, #8]
 801a414:	494d      	ldr	r1, [pc, #308]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a416:	4313      	orrs	r3, r2
 801a418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	f003 0301 	and.w	r3, r3, #1
 801a422:	2b00      	cmp	r3, #0
 801a424:	d044      	beq.n	801a4b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	685b      	ldr	r3, [r3, #4]
 801a42a:	2b01      	cmp	r3, #1
 801a42c:	d107      	bne.n	801a43e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a42e:	4b47      	ldr	r3, [pc, #284]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a436:	2b00      	cmp	r3, #0
 801a438:	d119      	bne.n	801a46e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a43a:	2301      	movs	r3, #1
 801a43c:	e07f      	b.n	801a53e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	685b      	ldr	r3, [r3, #4]
 801a442:	2b02      	cmp	r3, #2
 801a444:	d003      	beq.n	801a44e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a44a:	2b03      	cmp	r3, #3
 801a44c:	d107      	bne.n	801a45e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a44e:	4b3f      	ldr	r3, [pc, #252]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a456:	2b00      	cmp	r3, #0
 801a458:	d109      	bne.n	801a46e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a45a:	2301      	movs	r3, #1
 801a45c:	e06f      	b.n	801a53e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a45e:	4b3b      	ldr	r3, [pc, #236]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	f003 0302 	and.w	r3, r3, #2
 801a466:	2b00      	cmp	r3, #0
 801a468:	d101      	bne.n	801a46e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a46a:	2301      	movs	r3, #1
 801a46c:	e067      	b.n	801a53e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801a46e:	4b37      	ldr	r3, [pc, #220]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a470:	689b      	ldr	r3, [r3, #8]
 801a472:	f023 0203 	bic.w	r2, r3, #3
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	685b      	ldr	r3, [r3, #4]
 801a47a:	4934      	ldr	r1, [pc, #208]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a47c:	4313      	orrs	r3, r2
 801a47e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801a480:	f7fb ff90 	bl	80163a4 <HAL_GetTick>
 801a484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a486:	e00a      	b.n	801a49e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a488:	f7fb ff8c 	bl	80163a4 <HAL_GetTick>
 801a48c:	4602      	mov	r2, r0
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	1ad3      	subs	r3, r2, r3
 801a492:	f241 3288 	movw	r2, #5000	; 0x1388
 801a496:	4293      	cmp	r3, r2
 801a498:	d901      	bls.n	801a49e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801a49a:	2303      	movs	r3, #3
 801a49c:	e04f      	b.n	801a53e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a49e:	4b2b      	ldr	r3, [pc, #172]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a4a0:	689b      	ldr	r3, [r3, #8]
 801a4a2:	f003 020c 	and.w	r2, r3, #12
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	685b      	ldr	r3, [r3, #4]
 801a4aa:	009b      	lsls	r3, r3, #2
 801a4ac:	429a      	cmp	r2, r3
 801a4ae:	d1eb      	bne.n	801a488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801a4b0:	4b25      	ldr	r3, [pc, #148]	; (801a548 <HAL_RCC_ClockConfig+0x1b8>)
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	f003 0307 	and.w	r3, r3, #7
 801a4b8:	683a      	ldr	r2, [r7, #0]
 801a4ba:	429a      	cmp	r2, r3
 801a4bc:	d20c      	bcs.n	801a4d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a4be:	4b22      	ldr	r3, [pc, #136]	; (801a548 <HAL_RCC_ClockConfig+0x1b8>)
 801a4c0:	683a      	ldr	r2, [r7, #0]
 801a4c2:	b2d2      	uxtb	r2, r2
 801a4c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a4c6:	4b20      	ldr	r3, [pc, #128]	; (801a548 <HAL_RCC_ClockConfig+0x1b8>)
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	f003 0307 	and.w	r3, r3, #7
 801a4ce:	683a      	ldr	r2, [r7, #0]
 801a4d0:	429a      	cmp	r2, r3
 801a4d2:	d001      	beq.n	801a4d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801a4d4:	2301      	movs	r3, #1
 801a4d6:	e032      	b.n	801a53e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	f003 0304 	and.w	r3, r3, #4
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d008      	beq.n	801a4f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801a4e4:	4b19      	ldr	r3, [pc, #100]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a4e6:	689b      	ldr	r3, [r3, #8]
 801a4e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	68db      	ldr	r3, [r3, #12]
 801a4f0:	4916      	ldr	r1, [pc, #88]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a4f2:	4313      	orrs	r3, r2
 801a4f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	f003 0308 	and.w	r3, r3, #8
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	d009      	beq.n	801a516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801a502:	4b12      	ldr	r3, [pc, #72]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a504:	689b      	ldr	r3, [r3, #8]
 801a506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	691b      	ldr	r3, [r3, #16]
 801a50e:	00db      	lsls	r3, r3, #3
 801a510:	490e      	ldr	r1, [pc, #56]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a512:	4313      	orrs	r3, r2
 801a514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a516:	f000 f821 	bl	801a55c <HAL_RCC_GetSysClockFreq>
 801a51a:	4602      	mov	r2, r0
 801a51c:	4b0b      	ldr	r3, [pc, #44]	; (801a54c <HAL_RCC_ClockConfig+0x1bc>)
 801a51e:	689b      	ldr	r3, [r3, #8]
 801a520:	091b      	lsrs	r3, r3, #4
 801a522:	f003 030f 	and.w	r3, r3, #15
 801a526:	490a      	ldr	r1, [pc, #40]	; (801a550 <HAL_RCC_ClockConfig+0x1c0>)
 801a528:	5ccb      	ldrb	r3, [r1, r3]
 801a52a:	fa22 f303 	lsr.w	r3, r2, r3
 801a52e:	4a09      	ldr	r2, [pc, #36]	; (801a554 <HAL_RCC_ClockConfig+0x1c4>)
 801a530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801a532:	4b09      	ldr	r3, [pc, #36]	; (801a558 <HAL_RCC_ClockConfig+0x1c8>)
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	4618      	mov	r0, r3
 801a538:	f7fb fef0 	bl	801631c <HAL_InitTick>

  return HAL_OK;
 801a53c:	2300      	movs	r3, #0
}
 801a53e:	4618      	mov	r0, r3
 801a540:	3710      	adds	r7, #16
 801a542:	46bd      	mov	sp, r7
 801a544:	bd80      	pop	{r7, pc}
 801a546:	bf00      	nop
 801a548:	40023c00 	.word	0x40023c00
 801a54c:	40023800 	.word	0x40023800
 801a550:	08029b44 	.word	0x08029b44
 801a554:	200001dc 	.word	0x200001dc
 801a558:	200001e0 	.word	0x200001e0

0801a55c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a55c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a560:	b094      	sub	sp, #80	; 0x50
 801a562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801a564:	2300      	movs	r3, #0
 801a566:	647b      	str	r3, [r7, #68]	; 0x44
 801a568:	2300      	movs	r3, #0
 801a56a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a56c:	2300      	movs	r3, #0
 801a56e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801a570:	2300      	movs	r3, #0
 801a572:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801a574:	4b79      	ldr	r3, [pc, #484]	; (801a75c <HAL_RCC_GetSysClockFreq+0x200>)
 801a576:	689b      	ldr	r3, [r3, #8]
 801a578:	f003 030c 	and.w	r3, r3, #12
 801a57c:	2b08      	cmp	r3, #8
 801a57e:	d00d      	beq.n	801a59c <HAL_RCC_GetSysClockFreq+0x40>
 801a580:	2b08      	cmp	r3, #8
 801a582:	f200 80e1 	bhi.w	801a748 <HAL_RCC_GetSysClockFreq+0x1ec>
 801a586:	2b00      	cmp	r3, #0
 801a588:	d002      	beq.n	801a590 <HAL_RCC_GetSysClockFreq+0x34>
 801a58a:	2b04      	cmp	r3, #4
 801a58c:	d003      	beq.n	801a596 <HAL_RCC_GetSysClockFreq+0x3a>
 801a58e:	e0db      	b.n	801a748 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801a590:	4b73      	ldr	r3, [pc, #460]	; (801a760 <HAL_RCC_GetSysClockFreq+0x204>)
 801a592:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801a594:	e0db      	b.n	801a74e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801a596:	4b73      	ldr	r3, [pc, #460]	; (801a764 <HAL_RCC_GetSysClockFreq+0x208>)
 801a598:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a59a:	e0d8      	b.n	801a74e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801a59c:	4b6f      	ldr	r3, [pc, #444]	; (801a75c <HAL_RCC_GetSysClockFreq+0x200>)
 801a59e:	685b      	ldr	r3, [r3, #4]
 801a5a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a5a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801a5a6:	4b6d      	ldr	r3, [pc, #436]	; (801a75c <HAL_RCC_GetSysClockFreq+0x200>)
 801a5a8:	685b      	ldr	r3, [r3, #4]
 801a5aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d063      	beq.n	801a67a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a5b2:	4b6a      	ldr	r3, [pc, #424]	; (801a75c <HAL_RCC_GetSysClockFreq+0x200>)
 801a5b4:	685b      	ldr	r3, [r3, #4]
 801a5b6:	099b      	lsrs	r3, r3, #6
 801a5b8:	2200      	movs	r2, #0
 801a5ba:	63bb      	str	r3, [r7, #56]	; 0x38
 801a5bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 801a5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a5c4:	633b      	str	r3, [r7, #48]	; 0x30
 801a5c6:	2300      	movs	r3, #0
 801a5c8:	637b      	str	r3, [r7, #52]	; 0x34
 801a5ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801a5ce:	4622      	mov	r2, r4
 801a5d0:	462b      	mov	r3, r5
 801a5d2:	f04f 0000 	mov.w	r0, #0
 801a5d6:	f04f 0100 	mov.w	r1, #0
 801a5da:	0159      	lsls	r1, r3, #5
 801a5dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801a5e0:	0150      	lsls	r0, r2, #5
 801a5e2:	4602      	mov	r2, r0
 801a5e4:	460b      	mov	r3, r1
 801a5e6:	4621      	mov	r1, r4
 801a5e8:	1a51      	subs	r1, r2, r1
 801a5ea:	6139      	str	r1, [r7, #16]
 801a5ec:	4629      	mov	r1, r5
 801a5ee:	eb63 0301 	sbc.w	r3, r3, r1
 801a5f2:	617b      	str	r3, [r7, #20]
 801a5f4:	f04f 0200 	mov.w	r2, #0
 801a5f8:	f04f 0300 	mov.w	r3, #0
 801a5fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801a600:	4659      	mov	r1, fp
 801a602:	018b      	lsls	r3, r1, #6
 801a604:	4651      	mov	r1, sl
 801a606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801a60a:	4651      	mov	r1, sl
 801a60c:	018a      	lsls	r2, r1, #6
 801a60e:	4651      	mov	r1, sl
 801a610:	ebb2 0801 	subs.w	r8, r2, r1
 801a614:	4659      	mov	r1, fp
 801a616:	eb63 0901 	sbc.w	r9, r3, r1
 801a61a:	f04f 0200 	mov.w	r2, #0
 801a61e:	f04f 0300 	mov.w	r3, #0
 801a622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801a626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801a62a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801a62e:	4690      	mov	r8, r2
 801a630:	4699      	mov	r9, r3
 801a632:	4623      	mov	r3, r4
 801a634:	eb18 0303 	adds.w	r3, r8, r3
 801a638:	60bb      	str	r3, [r7, #8]
 801a63a:	462b      	mov	r3, r5
 801a63c:	eb49 0303 	adc.w	r3, r9, r3
 801a640:	60fb      	str	r3, [r7, #12]
 801a642:	f04f 0200 	mov.w	r2, #0
 801a646:	f04f 0300 	mov.w	r3, #0
 801a64a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801a64e:	4629      	mov	r1, r5
 801a650:	024b      	lsls	r3, r1, #9
 801a652:	4621      	mov	r1, r4
 801a654:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801a658:	4621      	mov	r1, r4
 801a65a:	024a      	lsls	r2, r1, #9
 801a65c:	4610      	mov	r0, r2
 801a65e:	4619      	mov	r1, r3
 801a660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a662:	2200      	movs	r2, #0
 801a664:	62bb      	str	r3, [r7, #40]	; 0x28
 801a666:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a668:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801a66c:	f7e6 fac4 	bl	8000bf8 <__aeabi_uldivmod>
 801a670:	4602      	mov	r2, r0
 801a672:	460b      	mov	r3, r1
 801a674:	4613      	mov	r3, r2
 801a676:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a678:	e058      	b.n	801a72c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a67a:	4b38      	ldr	r3, [pc, #224]	; (801a75c <HAL_RCC_GetSysClockFreq+0x200>)
 801a67c:	685b      	ldr	r3, [r3, #4]
 801a67e:	099b      	lsrs	r3, r3, #6
 801a680:	2200      	movs	r2, #0
 801a682:	4618      	mov	r0, r3
 801a684:	4611      	mov	r1, r2
 801a686:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801a68a:	623b      	str	r3, [r7, #32]
 801a68c:	2300      	movs	r3, #0
 801a68e:	627b      	str	r3, [r7, #36]	; 0x24
 801a690:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801a694:	4642      	mov	r2, r8
 801a696:	464b      	mov	r3, r9
 801a698:	f04f 0000 	mov.w	r0, #0
 801a69c:	f04f 0100 	mov.w	r1, #0
 801a6a0:	0159      	lsls	r1, r3, #5
 801a6a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801a6a6:	0150      	lsls	r0, r2, #5
 801a6a8:	4602      	mov	r2, r0
 801a6aa:	460b      	mov	r3, r1
 801a6ac:	4641      	mov	r1, r8
 801a6ae:	ebb2 0a01 	subs.w	sl, r2, r1
 801a6b2:	4649      	mov	r1, r9
 801a6b4:	eb63 0b01 	sbc.w	fp, r3, r1
 801a6b8:	f04f 0200 	mov.w	r2, #0
 801a6bc:	f04f 0300 	mov.w	r3, #0
 801a6c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801a6c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801a6c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801a6cc:	ebb2 040a 	subs.w	r4, r2, sl
 801a6d0:	eb63 050b 	sbc.w	r5, r3, fp
 801a6d4:	f04f 0200 	mov.w	r2, #0
 801a6d8:	f04f 0300 	mov.w	r3, #0
 801a6dc:	00eb      	lsls	r3, r5, #3
 801a6de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801a6e2:	00e2      	lsls	r2, r4, #3
 801a6e4:	4614      	mov	r4, r2
 801a6e6:	461d      	mov	r5, r3
 801a6e8:	4643      	mov	r3, r8
 801a6ea:	18e3      	adds	r3, r4, r3
 801a6ec:	603b      	str	r3, [r7, #0]
 801a6ee:	464b      	mov	r3, r9
 801a6f0:	eb45 0303 	adc.w	r3, r5, r3
 801a6f4:	607b      	str	r3, [r7, #4]
 801a6f6:	f04f 0200 	mov.w	r2, #0
 801a6fa:	f04f 0300 	mov.w	r3, #0
 801a6fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 801a702:	4629      	mov	r1, r5
 801a704:	028b      	lsls	r3, r1, #10
 801a706:	4621      	mov	r1, r4
 801a708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801a70c:	4621      	mov	r1, r4
 801a70e:	028a      	lsls	r2, r1, #10
 801a710:	4610      	mov	r0, r2
 801a712:	4619      	mov	r1, r3
 801a714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a716:	2200      	movs	r2, #0
 801a718:	61bb      	str	r3, [r7, #24]
 801a71a:	61fa      	str	r2, [r7, #28]
 801a71c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a720:	f7e6 fa6a 	bl	8000bf8 <__aeabi_uldivmod>
 801a724:	4602      	mov	r2, r0
 801a726:	460b      	mov	r3, r1
 801a728:	4613      	mov	r3, r2
 801a72a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801a72c:	4b0b      	ldr	r3, [pc, #44]	; (801a75c <HAL_RCC_GetSysClockFreq+0x200>)
 801a72e:	685b      	ldr	r3, [r3, #4]
 801a730:	0c1b      	lsrs	r3, r3, #16
 801a732:	f003 0303 	and.w	r3, r3, #3
 801a736:	3301      	adds	r3, #1
 801a738:	005b      	lsls	r3, r3, #1
 801a73a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801a73c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a740:	fbb2 f3f3 	udiv	r3, r2, r3
 801a744:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a746:	e002      	b.n	801a74e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801a748:	4b05      	ldr	r3, [pc, #20]	; (801a760 <HAL_RCC_GetSysClockFreq+0x204>)
 801a74a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a74c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801a74e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801a750:	4618      	mov	r0, r3
 801a752:	3750      	adds	r7, #80	; 0x50
 801a754:	46bd      	mov	sp, r7
 801a756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a75a:	bf00      	nop
 801a75c:	40023800 	.word	0x40023800
 801a760:	00f42400 	.word	0x00f42400
 801a764:	007a1200 	.word	0x007a1200

0801a768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801a768:	b480      	push	{r7}
 801a76a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801a76c:	4b03      	ldr	r3, [pc, #12]	; (801a77c <HAL_RCC_GetHCLKFreq+0x14>)
 801a76e:	681b      	ldr	r3, [r3, #0]
}
 801a770:	4618      	mov	r0, r3
 801a772:	46bd      	mov	sp, r7
 801a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a778:	4770      	bx	lr
 801a77a:	bf00      	nop
 801a77c:	200001dc 	.word	0x200001dc

0801a780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801a780:	b580      	push	{r7, lr}
 801a782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801a784:	f7ff fff0 	bl	801a768 <HAL_RCC_GetHCLKFreq>
 801a788:	4602      	mov	r2, r0
 801a78a:	4b05      	ldr	r3, [pc, #20]	; (801a7a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 801a78c:	689b      	ldr	r3, [r3, #8]
 801a78e:	0a9b      	lsrs	r3, r3, #10
 801a790:	f003 0307 	and.w	r3, r3, #7
 801a794:	4903      	ldr	r1, [pc, #12]	; (801a7a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 801a796:	5ccb      	ldrb	r3, [r1, r3]
 801a798:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a79c:	4618      	mov	r0, r3
 801a79e:	bd80      	pop	{r7, pc}
 801a7a0:	40023800 	.word	0x40023800
 801a7a4:	08029b54 	.word	0x08029b54

0801a7a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801a7ac:	f7ff ffdc 	bl	801a768 <HAL_RCC_GetHCLKFreq>
 801a7b0:	4602      	mov	r2, r0
 801a7b2:	4b05      	ldr	r3, [pc, #20]	; (801a7c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 801a7b4:	689b      	ldr	r3, [r3, #8]
 801a7b6:	0b5b      	lsrs	r3, r3, #13
 801a7b8:	f003 0307 	and.w	r3, r3, #7
 801a7bc:	4903      	ldr	r1, [pc, #12]	; (801a7cc <HAL_RCC_GetPCLK2Freq+0x24>)
 801a7be:	5ccb      	ldrb	r3, [r1, r3]
 801a7c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	bd80      	pop	{r7, pc}
 801a7c8:	40023800 	.word	0x40023800
 801a7cc:	08029b54 	.word	0x08029b54

0801a7d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a7d0:	b580      	push	{r7, lr}
 801a7d2:	b082      	sub	sp, #8
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d101      	bne.n	801a7e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a7de:	2301      	movs	r3, #1
 801a7e0:	e041      	b.n	801a866 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a7e8:	b2db      	uxtb	r3, r3
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d106      	bne.n	801a7fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	2200      	movs	r2, #0
 801a7f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a7f6:	6878      	ldr	r0, [r7, #4]
 801a7f8:	f7fb fa86 	bl	8015d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	2202      	movs	r2, #2
 801a800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	681a      	ldr	r2, [r3, #0]
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	3304      	adds	r3, #4
 801a80c:	4619      	mov	r1, r3
 801a80e:	4610      	mov	r0, r2
 801a810:	f000 fcae 	bl	801b170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	2201      	movs	r2, #1
 801a818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	2201      	movs	r2, #1
 801a820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	2201      	movs	r2, #1
 801a828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	2201      	movs	r2, #1
 801a830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	2201      	movs	r2, #1
 801a838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	2201      	movs	r2, #1
 801a840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	2201      	movs	r2, #1
 801a848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	2201      	movs	r2, #1
 801a850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	2201      	movs	r2, #1
 801a858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	2201      	movs	r2, #1
 801a860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a864:	2300      	movs	r3, #0
}
 801a866:	4618      	mov	r0, r3
 801a868:	3708      	adds	r7, #8
 801a86a:	46bd      	mov	sp, r7
 801a86c:	bd80      	pop	{r7, pc}
	...

0801a870 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801a870:	b480      	push	{r7}
 801a872:	b085      	sub	sp, #20
 801a874:	af00      	add	r7, sp, #0
 801a876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a87e:	b2db      	uxtb	r3, r3
 801a880:	2b01      	cmp	r3, #1
 801a882:	d001      	beq.n	801a888 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801a884:	2301      	movs	r3, #1
 801a886:	e03c      	b.n	801a902 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	2202      	movs	r2, #2
 801a88c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	4a1e      	ldr	r2, [pc, #120]	; (801a910 <HAL_TIM_Base_Start+0xa0>)
 801a896:	4293      	cmp	r3, r2
 801a898:	d018      	beq.n	801a8cc <HAL_TIM_Base_Start+0x5c>
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a8a2:	d013      	beq.n	801a8cc <HAL_TIM_Base_Start+0x5c>
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	4a1a      	ldr	r2, [pc, #104]	; (801a914 <HAL_TIM_Base_Start+0xa4>)
 801a8aa:	4293      	cmp	r3, r2
 801a8ac:	d00e      	beq.n	801a8cc <HAL_TIM_Base_Start+0x5c>
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	4a19      	ldr	r2, [pc, #100]	; (801a918 <HAL_TIM_Base_Start+0xa8>)
 801a8b4:	4293      	cmp	r3, r2
 801a8b6:	d009      	beq.n	801a8cc <HAL_TIM_Base_Start+0x5c>
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	4a17      	ldr	r2, [pc, #92]	; (801a91c <HAL_TIM_Base_Start+0xac>)
 801a8be:	4293      	cmp	r3, r2
 801a8c0:	d004      	beq.n	801a8cc <HAL_TIM_Base_Start+0x5c>
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	4a16      	ldr	r2, [pc, #88]	; (801a920 <HAL_TIM_Base_Start+0xb0>)
 801a8c8:	4293      	cmp	r3, r2
 801a8ca:	d111      	bne.n	801a8f0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	689b      	ldr	r3, [r3, #8]
 801a8d2:	f003 0307 	and.w	r3, r3, #7
 801a8d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	2b06      	cmp	r3, #6
 801a8dc:	d010      	beq.n	801a900 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	681a      	ldr	r2, [r3, #0]
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	f042 0201 	orr.w	r2, r2, #1
 801a8ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a8ee:	e007      	b.n	801a900 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	681b      	ldr	r3, [r3, #0]
 801a8f4:	681a      	ldr	r2, [r3, #0]
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	f042 0201 	orr.w	r2, r2, #1
 801a8fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a900:	2300      	movs	r3, #0
}
 801a902:	4618      	mov	r0, r3
 801a904:	3714      	adds	r7, #20
 801a906:	46bd      	mov	sp, r7
 801a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a90c:	4770      	bx	lr
 801a90e:	bf00      	nop
 801a910:	40010000 	.word	0x40010000
 801a914:	40000400 	.word	0x40000400
 801a918:	40000800 	.word	0x40000800
 801a91c:	40000c00 	.word	0x40000c00
 801a920:	40014000 	.word	0x40014000

0801a924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801a924:	b480      	push	{r7}
 801a926:	b085      	sub	sp, #20
 801a928:	af00      	add	r7, sp, #0
 801a92a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a932:	b2db      	uxtb	r3, r3
 801a934:	2b01      	cmp	r3, #1
 801a936:	d001      	beq.n	801a93c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801a938:	2301      	movs	r3, #1
 801a93a:	e044      	b.n	801a9c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	2202      	movs	r2, #2
 801a940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	68da      	ldr	r2, [r3, #12]
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	f042 0201 	orr.w	r2, r2, #1
 801a952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	4a1e      	ldr	r2, [pc, #120]	; (801a9d4 <HAL_TIM_Base_Start_IT+0xb0>)
 801a95a:	4293      	cmp	r3, r2
 801a95c:	d018      	beq.n	801a990 <HAL_TIM_Base_Start_IT+0x6c>
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a966:	d013      	beq.n	801a990 <HAL_TIM_Base_Start_IT+0x6c>
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	4a1a      	ldr	r2, [pc, #104]	; (801a9d8 <HAL_TIM_Base_Start_IT+0xb4>)
 801a96e:	4293      	cmp	r3, r2
 801a970:	d00e      	beq.n	801a990 <HAL_TIM_Base_Start_IT+0x6c>
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	4a19      	ldr	r2, [pc, #100]	; (801a9dc <HAL_TIM_Base_Start_IT+0xb8>)
 801a978:	4293      	cmp	r3, r2
 801a97a:	d009      	beq.n	801a990 <HAL_TIM_Base_Start_IT+0x6c>
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	4a17      	ldr	r2, [pc, #92]	; (801a9e0 <HAL_TIM_Base_Start_IT+0xbc>)
 801a982:	4293      	cmp	r3, r2
 801a984:	d004      	beq.n	801a990 <HAL_TIM_Base_Start_IT+0x6c>
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	4a16      	ldr	r2, [pc, #88]	; (801a9e4 <HAL_TIM_Base_Start_IT+0xc0>)
 801a98c:	4293      	cmp	r3, r2
 801a98e:	d111      	bne.n	801a9b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	689b      	ldr	r3, [r3, #8]
 801a996:	f003 0307 	and.w	r3, r3, #7
 801a99a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	2b06      	cmp	r3, #6
 801a9a0:	d010      	beq.n	801a9c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	681a      	ldr	r2, [r3, #0]
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	f042 0201 	orr.w	r2, r2, #1
 801a9b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a9b2:	e007      	b.n	801a9c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	681a      	ldr	r2, [r3, #0]
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	f042 0201 	orr.w	r2, r2, #1
 801a9c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a9c4:	2300      	movs	r3, #0
}
 801a9c6:	4618      	mov	r0, r3
 801a9c8:	3714      	adds	r7, #20
 801a9ca:	46bd      	mov	sp, r7
 801a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9d0:	4770      	bx	lr
 801a9d2:	bf00      	nop
 801a9d4:	40010000 	.word	0x40010000
 801a9d8:	40000400 	.word	0x40000400
 801a9dc:	40000800 	.word	0x40000800
 801a9e0:	40000c00 	.word	0x40000c00
 801a9e4:	40014000 	.word	0x40014000

0801a9e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801a9e8:	b580      	push	{r7, lr}
 801a9ea:	b082      	sub	sp, #8
 801a9ec:	af00      	add	r7, sp, #0
 801a9ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d101      	bne.n	801a9fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801a9f6:	2301      	movs	r3, #1
 801a9f8:	e041      	b.n	801aa7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801aa00:	b2db      	uxtb	r3, r3
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d106      	bne.n	801aa14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	2200      	movs	r2, #0
 801aa0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801aa0e:	6878      	ldr	r0, [r7, #4]
 801aa10:	f000 f839 	bl	801aa86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	2202      	movs	r2, #2
 801aa18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	681a      	ldr	r2, [r3, #0]
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	3304      	adds	r3, #4
 801aa24:	4619      	mov	r1, r3
 801aa26:	4610      	mov	r0, r2
 801aa28:	f000 fba2 	bl	801b170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	2201      	movs	r2, #1
 801aa30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	2201      	movs	r2, #1
 801aa38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	2201      	movs	r2, #1
 801aa40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	2201      	movs	r2, #1
 801aa48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	2201      	movs	r2, #1
 801aa50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	2201      	movs	r2, #1
 801aa58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	2201      	movs	r2, #1
 801aa60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	2201      	movs	r2, #1
 801aa68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	2201      	movs	r2, #1
 801aa70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	2201      	movs	r2, #1
 801aa78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801aa7c:	2300      	movs	r3, #0
}
 801aa7e:	4618      	mov	r0, r3
 801aa80:	3708      	adds	r7, #8
 801aa82:	46bd      	mov	sp, r7
 801aa84:	bd80      	pop	{r7, pc}

0801aa86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801aa86:	b480      	push	{r7}
 801aa88:	b083      	sub	sp, #12
 801aa8a:	af00      	add	r7, sp, #0
 801aa8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801aa8e:	bf00      	nop
 801aa90:	370c      	adds	r7, #12
 801aa92:	46bd      	mov	sp, r7
 801aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa98:	4770      	bx	lr
	...

0801aa9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801aa9c:	b580      	push	{r7, lr}
 801aa9e:	b084      	sub	sp, #16
 801aaa0:	af00      	add	r7, sp, #0
 801aaa2:	6078      	str	r0, [r7, #4]
 801aaa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801aaa6:	683b      	ldr	r3, [r7, #0]
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d109      	bne.n	801aac0 <HAL_TIM_PWM_Start+0x24>
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801aab2:	b2db      	uxtb	r3, r3
 801aab4:	2b01      	cmp	r3, #1
 801aab6:	bf14      	ite	ne
 801aab8:	2301      	movne	r3, #1
 801aaba:	2300      	moveq	r3, #0
 801aabc:	b2db      	uxtb	r3, r3
 801aabe:	e022      	b.n	801ab06 <HAL_TIM_PWM_Start+0x6a>
 801aac0:	683b      	ldr	r3, [r7, #0]
 801aac2:	2b04      	cmp	r3, #4
 801aac4:	d109      	bne.n	801aada <HAL_TIM_PWM_Start+0x3e>
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801aacc:	b2db      	uxtb	r3, r3
 801aace:	2b01      	cmp	r3, #1
 801aad0:	bf14      	ite	ne
 801aad2:	2301      	movne	r3, #1
 801aad4:	2300      	moveq	r3, #0
 801aad6:	b2db      	uxtb	r3, r3
 801aad8:	e015      	b.n	801ab06 <HAL_TIM_PWM_Start+0x6a>
 801aada:	683b      	ldr	r3, [r7, #0]
 801aadc:	2b08      	cmp	r3, #8
 801aade:	d109      	bne.n	801aaf4 <HAL_TIM_PWM_Start+0x58>
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801aae6:	b2db      	uxtb	r3, r3
 801aae8:	2b01      	cmp	r3, #1
 801aaea:	bf14      	ite	ne
 801aaec:	2301      	movne	r3, #1
 801aaee:	2300      	moveq	r3, #0
 801aaf0:	b2db      	uxtb	r3, r3
 801aaf2:	e008      	b.n	801ab06 <HAL_TIM_PWM_Start+0x6a>
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801aafa:	b2db      	uxtb	r3, r3
 801aafc:	2b01      	cmp	r3, #1
 801aafe:	bf14      	ite	ne
 801ab00:	2301      	movne	r3, #1
 801ab02:	2300      	moveq	r3, #0
 801ab04:	b2db      	uxtb	r3, r3
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d001      	beq.n	801ab0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801ab0a:	2301      	movs	r3, #1
 801ab0c:	e068      	b.n	801abe0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ab0e:	683b      	ldr	r3, [r7, #0]
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	d104      	bne.n	801ab1e <HAL_TIM_PWM_Start+0x82>
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	2202      	movs	r2, #2
 801ab18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ab1c:	e013      	b.n	801ab46 <HAL_TIM_PWM_Start+0xaa>
 801ab1e:	683b      	ldr	r3, [r7, #0]
 801ab20:	2b04      	cmp	r3, #4
 801ab22:	d104      	bne.n	801ab2e <HAL_TIM_PWM_Start+0x92>
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	2202      	movs	r2, #2
 801ab28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ab2c:	e00b      	b.n	801ab46 <HAL_TIM_PWM_Start+0xaa>
 801ab2e:	683b      	ldr	r3, [r7, #0]
 801ab30:	2b08      	cmp	r3, #8
 801ab32:	d104      	bne.n	801ab3e <HAL_TIM_PWM_Start+0xa2>
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	2202      	movs	r2, #2
 801ab38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ab3c:	e003      	b.n	801ab46 <HAL_TIM_PWM_Start+0xaa>
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	2202      	movs	r2, #2
 801ab42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	2201      	movs	r2, #1
 801ab4c:	6839      	ldr	r1, [r7, #0]
 801ab4e:	4618      	mov	r0, r3
 801ab50:	f000 fdb4 	bl	801b6bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	4a23      	ldr	r2, [pc, #140]	; (801abe8 <HAL_TIM_PWM_Start+0x14c>)
 801ab5a:	4293      	cmp	r3, r2
 801ab5c:	d107      	bne.n	801ab6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ab6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	4a1d      	ldr	r2, [pc, #116]	; (801abe8 <HAL_TIM_PWM_Start+0x14c>)
 801ab74:	4293      	cmp	r3, r2
 801ab76:	d018      	beq.n	801abaa <HAL_TIM_PWM_Start+0x10e>
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ab80:	d013      	beq.n	801abaa <HAL_TIM_PWM_Start+0x10e>
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	4a19      	ldr	r2, [pc, #100]	; (801abec <HAL_TIM_PWM_Start+0x150>)
 801ab88:	4293      	cmp	r3, r2
 801ab8a:	d00e      	beq.n	801abaa <HAL_TIM_PWM_Start+0x10e>
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	4a17      	ldr	r2, [pc, #92]	; (801abf0 <HAL_TIM_PWM_Start+0x154>)
 801ab92:	4293      	cmp	r3, r2
 801ab94:	d009      	beq.n	801abaa <HAL_TIM_PWM_Start+0x10e>
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	4a16      	ldr	r2, [pc, #88]	; (801abf4 <HAL_TIM_PWM_Start+0x158>)
 801ab9c:	4293      	cmp	r3, r2
 801ab9e:	d004      	beq.n	801abaa <HAL_TIM_PWM_Start+0x10e>
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	4a14      	ldr	r2, [pc, #80]	; (801abf8 <HAL_TIM_PWM_Start+0x15c>)
 801aba6:	4293      	cmp	r3, r2
 801aba8:	d111      	bne.n	801abce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	689b      	ldr	r3, [r3, #8]
 801abb0:	f003 0307 	and.w	r3, r3, #7
 801abb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801abb6:	68fb      	ldr	r3, [r7, #12]
 801abb8:	2b06      	cmp	r3, #6
 801abba:	d010      	beq.n	801abde <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	681a      	ldr	r2, [r3, #0]
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	f042 0201 	orr.w	r2, r2, #1
 801abca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801abcc:	e007      	b.n	801abde <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	681a      	ldr	r2, [r3, #0]
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	f042 0201 	orr.w	r2, r2, #1
 801abdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801abde:	2300      	movs	r3, #0
}
 801abe0:	4618      	mov	r0, r3
 801abe2:	3710      	adds	r7, #16
 801abe4:	46bd      	mov	sp, r7
 801abe6:	bd80      	pop	{r7, pc}
 801abe8:	40010000 	.word	0x40010000
 801abec:	40000400 	.word	0x40000400
 801abf0:	40000800 	.word	0x40000800
 801abf4:	40000c00 	.word	0x40000c00
 801abf8:	40014000 	.word	0x40014000

0801abfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b082      	sub	sp, #8
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	691b      	ldr	r3, [r3, #16]
 801ac0a:	f003 0302 	and.w	r3, r3, #2
 801ac0e:	2b02      	cmp	r3, #2
 801ac10:	d122      	bne.n	801ac58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	68db      	ldr	r3, [r3, #12]
 801ac18:	f003 0302 	and.w	r3, r3, #2
 801ac1c:	2b02      	cmp	r3, #2
 801ac1e:	d11b      	bne.n	801ac58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	f06f 0202 	mvn.w	r2, #2
 801ac28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	2201      	movs	r2, #1
 801ac2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	699b      	ldr	r3, [r3, #24]
 801ac36:	f003 0303 	and.w	r3, r3, #3
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d003      	beq.n	801ac46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801ac3e:	6878      	ldr	r0, [r7, #4]
 801ac40:	f000 fa77 	bl	801b132 <HAL_TIM_IC_CaptureCallback>
 801ac44:	e005      	b.n	801ac52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801ac46:	6878      	ldr	r0, [r7, #4]
 801ac48:	f000 fa69 	bl	801b11e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ac4c:	6878      	ldr	r0, [r7, #4]
 801ac4e:	f000 fa7a 	bl	801b146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	2200      	movs	r2, #0
 801ac56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	691b      	ldr	r3, [r3, #16]
 801ac5e:	f003 0304 	and.w	r3, r3, #4
 801ac62:	2b04      	cmp	r3, #4
 801ac64:	d122      	bne.n	801acac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	68db      	ldr	r3, [r3, #12]
 801ac6c:	f003 0304 	and.w	r3, r3, #4
 801ac70:	2b04      	cmp	r3, #4
 801ac72:	d11b      	bne.n	801acac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	f06f 0204 	mvn.w	r2, #4
 801ac7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	2202      	movs	r2, #2
 801ac82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	699b      	ldr	r3, [r3, #24]
 801ac8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d003      	beq.n	801ac9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ac92:	6878      	ldr	r0, [r7, #4]
 801ac94:	f000 fa4d 	bl	801b132 <HAL_TIM_IC_CaptureCallback>
 801ac98:	e005      	b.n	801aca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ac9a:	6878      	ldr	r0, [r7, #4]
 801ac9c:	f000 fa3f 	bl	801b11e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801aca0:	6878      	ldr	r0, [r7, #4]
 801aca2:	f000 fa50 	bl	801b146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	2200      	movs	r2, #0
 801acaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	691b      	ldr	r3, [r3, #16]
 801acb2:	f003 0308 	and.w	r3, r3, #8
 801acb6:	2b08      	cmp	r3, #8
 801acb8:	d122      	bne.n	801ad00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	68db      	ldr	r3, [r3, #12]
 801acc0:	f003 0308 	and.w	r3, r3, #8
 801acc4:	2b08      	cmp	r3, #8
 801acc6:	d11b      	bne.n	801ad00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	f06f 0208 	mvn.w	r2, #8
 801acd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	2204      	movs	r2, #4
 801acd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	69db      	ldr	r3, [r3, #28]
 801acde:	f003 0303 	and.w	r3, r3, #3
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	d003      	beq.n	801acee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ace6:	6878      	ldr	r0, [r7, #4]
 801ace8:	f000 fa23 	bl	801b132 <HAL_TIM_IC_CaptureCallback>
 801acec:	e005      	b.n	801acfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801acee:	6878      	ldr	r0, [r7, #4]
 801acf0:	f000 fa15 	bl	801b11e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801acf4:	6878      	ldr	r0, [r7, #4]
 801acf6:	f000 fa26 	bl	801b146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	2200      	movs	r2, #0
 801acfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	681b      	ldr	r3, [r3, #0]
 801ad04:	691b      	ldr	r3, [r3, #16]
 801ad06:	f003 0310 	and.w	r3, r3, #16
 801ad0a:	2b10      	cmp	r3, #16
 801ad0c:	d122      	bne.n	801ad54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	68db      	ldr	r3, [r3, #12]
 801ad14:	f003 0310 	and.w	r3, r3, #16
 801ad18:	2b10      	cmp	r3, #16
 801ad1a:	d11b      	bne.n	801ad54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	f06f 0210 	mvn.w	r2, #16
 801ad24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	2208      	movs	r2, #8
 801ad2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	69db      	ldr	r3, [r3, #28]
 801ad32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d003      	beq.n	801ad42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ad3a:	6878      	ldr	r0, [r7, #4]
 801ad3c:	f000 f9f9 	bl	801b132 <HAL_TIM_IC_CaptureCallback>
 801ad40:	e005      	b.n	801ad4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ad42:	6878      	ldr	r0, [r7, #4]
 801ad44:	f000 f9eb 	bl	801b11e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ad48:	6878      	ldr	r0, [r7, #4]
 801ad4a:	f000 f9fc 	bl	801b146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	2200      	movs	r2, #0
 801ad52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	691b      	ldr	r3, [r3, #16]
 801ad5a:	f003 0301 	and.w	r3, r3, #1
 801ad5e:	2b01      	cmp	r3, #1
 801ad60:	d10e      	bne.n	801ad80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	68db      	ldr	r3, [r3, #12]
 801ad68:	f003 0301 	and.w	r3, r3, #1
 801ad6c:	2b01      	cmp	r3, #1
 801ad6e:	d107      	bne.n	801ad80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	681b      	ldr	r3, [r3, #0]
 801ad74:	f06f 0201 	mvn.w	r2, #1
 801ad78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801ad7a:	6878      	ldr	r0, [r7, #4]
 801ad7c:	f7e9 f83e 	bl	8003dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	691b      	ldr	r3, [r3, #16]
 801ad86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ad8a:	2b80      	cmp	r3, #128	; 0x80
 801ad8c:	d10e      	bne.n	801adac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	68db      	ldr	r3, [r3, #12]
 801ad94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ad98:	2b80      	cmp	r3, #128	; 0x80
 801ad9a:	d107      	bne.n	801adac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801ada4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801ada6:	6878      	ldr	r0, [r7, #4]
 801ada8:	f000 fd26 	bl	801b7f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	691b      	ldr	r3, [r3, #16]
 801adb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801adb6:	2b40      	cmp	r3, #64	; 0x40
 801adb8:	d10e      	bne.n	801add8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	68db      	ldr	r3, [r3, #12]
 801adc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801adc4:	2b40      	cmp	r3, #64	; 0x40
 801adc6:	d107      	bne.n	801add8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801add0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801add2:	6878      	ldr	r0, [r7, #4]
 801add4:	f000 f9c1 	bl	801b15a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	691b      	ldr	r3, [r3, #16]
 801adde:	f003 0320 	and.w	r3, r3, #32
 801ade2:	2b20      	cmp	r3, #32
 801ade4:	d10e      	bne.n	801ae04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	68db      	ldr	r3, [r3, #12]
 801adec:	f003 0320 	and.w	r3, r3, #32
 801adf0:	2b20      	cmp	r3, #32
 801adf2:	d107      	bne.n	801ae04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	f06f 0220 	mvn.w	r2, #32
 801adfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801adfe:	6878      	ldr	r0, [r7, #4]
 801ae00:	f000 fcf0 	bl	801b7e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801ae04:	bf00      	nop
 801ae06:	3708      	adds	r7, #8
 801ae08:	46bd      	mov	sp, r7
 801ae0a:	bd80      	pop	{r7, pc}

0801ae0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801ae0c:	b580      	push	{r7, lr}
 801ae0e:	b086      	sub	sp, #24
 801ae10:	af00      	add	r7, sp, #0
 801ae12:	60f8      	str	r0, [r7, #12]
 801ae14:	60b9      	str	r1, [r7, #8]
 801ae16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ae18:	2300      	movs	r3, #0
 801ae1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ae22:	2b01      	cmp	r3, #1
 801ae24:	d101      	bne.n	801ae2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 801ae26:	2302      	movs	r3, #2
 801ae28:	e0ae      	b.n	801af88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801ae2a:	68fb      	ldr	r3, [r7, #12]
 801ae2c:	2201      	movs	r2, #1
 801ae2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	2b0c      	cmp	r3, #12
 801ae36:	f200 809f 	bhi.w	801af78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801ae3a:	a201      	add	r2, pc, #4	; (adr r2, 801ae40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801ae3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae40:	0801ae75 	.word	0x0801ae75
 801ae44:	0801af79 	.word	0x0801af79
 801ae48:	0801af79 	.word	0x0801af79
 801ae4c:	0801af79 	.word	0x0801af79
 801ae50:	0801aeb5 	.word	0x0801aeb5
 801ae54:	0801af79 	.word	0x0801af79
 801ae58:	0801af79 	.word	0x0801af79
 801ae5c:	0801af79 	.word	0x0801af79
 801ae60:	0801aef7 	.word	0x0801aef7
 801ae64:	0801af79 	.word	0x0801af79
 801ae68:	0801af79 	.word	0x0801af79
 801ae6c:	0801af79 	.word	0x0801af79
 801ae70:	0801af37 	.word	0x0801af37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	68b9      	ldr	r1, [r7, #8]
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	f000 f9f8 	bl	801b270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	699a      	ldr	r2, [r3, #24]
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	f042 0208 	orr.w	r2, r2, #8
 801ae8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801ae90:	68fb      	ldr	r3, [r7, #12]
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	699a      	ldr	r2, [r3, #24]
 801ae96:	68fb      	ldr	r3, [r7, #12]
 801ae98:	681b      	ldr	r3, [r3, #0]
 801ae9a:	f022 0204 	bic.w	r2, r2, #4
 801ae9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801aea0:	68fb      	ldr	r3, [r7, #12]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	6999      	ldr	r1, [r3, #24]
 801aea6:	68bb      	ldr	r3, [r7, #8]
 801aea8:	691a      	ldr	r2, [r3, #16]
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	430a      	orrs	r2, r1
 801aeb0:	619a      	str	r2, [r3, #24]
      break;
 801aeb2:	e064      	b.n	801af7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	68b9      	ldr	r1, [r7, #8]
 801aeba:	4618      	mov	r0, r3
 801aebc:	f000 fa3e 	bl	801b33c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	699a      	ldr	r2, [r3, #24]
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801aece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	699a      	ldr	r2, [r3, #24]
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801aede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	6999      	ldr	r1, [r3, #24]
 801aee6:	68bb      	ldr	r3, [r7, #8]
 801aee8:	691b      	ldr	r3, [r3, #16]
 801aeea:	021a      	lsls	r2, r3, #8
 801aeec:	68fb      	ldr	r3, [r7, #12]
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	430a      	orrs	r2, r1
 801aef2:	619a      	str	r2, [r3, #24]
      break;
 801aef4:	e043      	b.n	801af7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801aef6:	68fb      	ldr	r3, [r7, #12]
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	68b9      	ldr	r1, [r7, #8]
 801aefc:	4618      	mov	r0, r3
 801aefe:	f000 fa89 	bl	801b414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801af02:	68fb      	ldr	r3, [r7, #12]
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	69da      	ldr	r2, [r3, #28]
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	f042 0208 	orr.w	r2, r2, #8
 801af10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	69da      	ldr	r2, [r3, #28]
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	f022 0204 	bic.w	r2, r2, #4
 801af20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801af22:	68fb      	ldr	r3, [r7, #12]
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	69d9      	ldr	r1, [r3, #28]
 801af28:	68bb      	ldr	r3, [r7, #8]
 801af2a:	691a      	ldr	r2, [r3, #16]
 801af2c:	68fb      	ldr	r3, [r7, #12]
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	430a      	orrs	r2, r1
 801af32:	61da      	str	r2, [r3, #28]
      break;
 801af34:	e023      	b.n	801af7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	681b      	ldr	r3, [r3, #0]
 801af3a:	68b9      	ldr	r1, [r7, #8]
 801af3c:	4618      	mov	r0, r3
 801af3e:	f000 fad3 	bl	801b4e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	69da      	ldr	r2, [r3, #28]
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801af50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801af52:	68fb      	ldr	r3, [r7, #12]
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	69da      	ldr	r2, [r3, #28]
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801af60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801af62:	68fb      	ldr	r3, [r7, #12]
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	69d9      	ldr	r1, [r3, #28]
 801af68:	68bb      	ldr	r3, [r7, #8]
 801af6a:	691b      	ldr	r3, [r3, #16]
 801af6c:	021a      	lsls	r2, r3, #8
 801af6e:	68fb      	ldr	r3, [r7, #12]
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	430a      	orrs	r2, r1
 801af74:	61da      	str	r2, [r3, #28]
      break;
 801af76:	e002      	b.n	801af7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801af78:	2301      	movs	r3, #1
 801af7a:	75fb      	strb	r3, [r7, #23]
      break;
 801af7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	2200      	movs	r2, #0
 801af82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801af86:	7dfb      	ldrb	r3, [r7, #23]
}
 801af88:	4618      	mov	r0, r3
 801af8a:	3718      	adds	r7, #24
 801af8c:	46bd      	mov	sp, r7
 801af8e:	bd80      	pop	{r7, pc}

0801af90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801af90:	b580      	push	{r7, lr}
 801af92:	b084      	sub	sp, #16
 801af94:	af00      	add	r7, sp, #0
 801af96:	6078      	str	r0, [r7, #4]
 801af98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801af9a:	2300      	movs	r3, #0
 801af9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801afa4:	2b01      	cmp	r3, #1
 801afa6:	d101      	bne.n	801afac <HAL_TIM_ConfigClockSource+0x1c>
 801afa8:	2302      	movs	r3, #2
 801afaa:	e0b4      	b.n	801b116 <HAL_TIM_ConfigClockSource+0x186>
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	2201      	movs	r2, #1
 801afb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	2202      	movs	r2, #2
 801afb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	689b      	ldr	r3, [r3, #8]
 801afc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801afc4:	68bb      	ldr	r3, [r7, #8]
 801afc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801afca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801afcc:	68bb      	ldr	r3, [r7, #8]
 801afce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801afd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	68ba      	ldr	r2, [r7, #8]
 801afda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801afdc:	683b      	ldr	r3, [r7, #0]
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801afe4:	d03e      	beq.n	801b064 <HAL_TIM_ConfigClockSource+0xd4>
 801afe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801afea:	f200 8087 	bhi.w	801b0fc <HAL_TIM_ConfigClockSource+0x16c>
 801afee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801aff2:	f000 8086 	beq.w	801b102 <HAL_TIM_ConfigClockSource+0x172>
 801aff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801affa:	d87f      	bhi.n	801b0fc <HAL_TIM_ConfigClockSource+0x16c>
 801affc:	2b70      	cmp	r3, #112	; 0x70
 801affe:	d01a      	beq.n	801b036 <HAL_TIM_ConfigClockSource+0xa6>
 801b000:	2b70      	cmp	r3, #112	; 0x70
 801b002:	d87b      	bhi.n	801b0fc <HAL_TIM_ConfigClockSource+0x16c>
 801b004:	2b60      	cmp	r3, #96	; 0x60
 801b006:	d050      	beq.n	801b0aa <HAL_TIM_ConfigClockSource+0x11a>
 801b008:	2b60      	cmp	r3, #96	; 0x60
 801b00a:	d877      	bhi.n	801b0fc <HAL_TIM_ConfigClockSource+0x16c>
 801b00c:	2b50      	cmp	r3, #80	; 0x50
 801b00e:	d03c      	beq.n	801b08a <HAL_TIM_ConfigClockSource+0xfa>
 801b010:	2b50      	cmp	r3, #80	; 0x50
 801b012:	d873      	bhi.n	801b0fc <HAL_TIM_ConfigClockSource+0x16c>
 801b014:	2b40      	cmp	r3, #64	; 0x40
 801b016:	d058      	beq.n	801b0ca <HAL_TIM_ConfigClockSource+0x13a>
 801b018:	2b40      	cmp	r3, #64	; 0x40
 801b01a:	d86f      	bhi.n	801b0fc <HAL_TIM_ConfigClockSource+0x16c>
 801b01c:	2b30      	cmp	r3, #48	; 0x30
 801b01e:	d064      	beq.n	801b0ea <HAL_TIM_ConfigClockSource+0x15a>
 801b020:	2b30      	cmp	r3, #48	; 0x30
 801b022:	d86b      	bhi.n	801b0fc <HAL_TIM_ConfigClockSource+0x16c>
 801b024:	2b20      	cmp	r3, #32
 801b026:	d060      	beq.n	801b0ea <HAL_TIM_ConfigClockSource+0x15a>
 801b028:	2b20      	cmp	r3, #32
 801b02a:	d867      	bhi.n	801b0fc <HAL_TIM_ConfigClockSource+0x16c>
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d05c      	beq.n	801b0ea <HAL_TIM_ConfigClockSource+0x15a>
 801b030:	2b10      	cmp	r3, #16
 801b032:	d05a      	beq.n	801b0ea <HAL_TIM_ConfigClockSource+0x15a>
 801b034:	e062      	b.n	801b0fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	6818      	ldr	r0, [r3, #0]
 801b03a:	683b      	ldr	r3, [r7, #0]
 801b03c:	6899      	ldr	r1, [r3, #8]
 801b03e:	683b      	ldr	r3, [r7, #0]
 801b040:	685a      	ldr	r2, [r3, #4]
 801b042:	683b      	ldr	r3, [r7, #0]
 801b044:	68db      	ldr	r3, [r3, #12]
 801b046:	f000 fb19 	bl	801b67c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	689b      	ldr	r3, [r3, #8]
 801b050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801b052:	68bb      	ldr	r3, [r7, #8]
 801b054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801b058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	68ba      	ldr	r2, [r7, #8]
 801b060:	609a      	str	r2, [r3, #8]
      break;
 801b062:	e04f      	b.n	801b104 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	6818      	ldr	r0, [r3, #0]
 801b068:	683b      	ldr	r3, [r7, #0]
 801b06a:	6899      	ldr	r1, [r3, #8]
 801b06c:	683b      	ldr	r3, [r7, #0]
 801b06e:	685a      	ldr	r2, [r3, #4]
 801b070:	683b      	ldr	r3, [r7, #0]
 801b072:	68db      	ldr	r3, [r3, #12]
 801b074:	f000 fb02 	bl	801b67c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	689a      	ldr	r2, [r3, #8]
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b086:	609a      	str	r2, [r3, #8]
      break;
 801b088:	e03c      	b.n	801b104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	6818      	ldr	r0, [r3, #0]
 801b08e:	683b      	ldr	r3, [r7, #0]
 801b090:	6859      	ldr	r1, [r3, #4]
 801b092:	683b      	ldr	r3, [r7, #0]
 801b094:	68db      	ldr	r3, [r3, #12]
 801b096:	461a      	mov	r2, r3
 801b098:	f000 fa76 	bl	801b588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	2150      	movs	r1, #80	; 0x50
 801b0a2:	4618      	mov	r0, r3
 801b0a4:	f000 facf 	bl	801b646 <TIM_ITRx_SetConfig>
      break;
 801b0a8:	e02c      	b.n	801b104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	6818      	ldr	r0, [r3, #0]
 801b0ae:	683b      	ldr	r3, [r7, #0]
 801b0b0:	6859      	ldr	r1, [r3, #4]
 801b0b2:	683b      	ldr	r3, [r7, #0]
 801b0b4:	68db      	ldr	r3, [r3, #12]
 801b0b6:	461a      	mov	r2, r3
 801b0b8:	f000 fa95 	bl	801b5e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	2160      	movs	r1, #96	; 0x60
 801b0c2:	4618      	mov	r0, r3
 801b0c4:	f000 fabf 	bl	801b646 <TIM_ITRx_SetConfig>
      break;
 801b0c8:	e01c      	b.n	801b104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	6818      	ldr	r0, [r3, #0]
 801b0ce:	683b      	ldr	r3, [r7, #0]
 801b0d0:	6859      	ldr	r1, [r3, #4]
 801b0d2:	683b      	ldr	r3, [r7, #0]
 801b0d4:	68db      	ldr	r3, [r3, #12]
 801b0d6:	461a      	mov	r2, r3
 801b0d8:	f000 fa56 	bl	801b588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	2140      	movs	r1, #64	; 0x40
 801b0e2:	4618      	mov	r0, r3
 801b0e4:	f000 faaf 	bl	801b646 <TIM_ITRx_SetConfig>
      break;
 801b0e8:	e00c      	b.n	801b104 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	681a      	ldr	r2, [r3, #0]
 801b0ee:	683b      	ldr	r3, [r7, #0]
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	4619      	mov	r1, r3
 801b0f4:	4610      	mov	r0, r2
 801b0f6:	f000 faa6 	bl	801b646 <TIM_ITRx_SetConfig>
      break;
 801b0fa:	e003      	b.n	801b104 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801b0fc:	2301      	movs	r3, #1
 801b0fe:	73fb      	strb	r3, [r7, #15]
      break;
 801b100:	e000      	b.n	801b104 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801b102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	2201      	movs	r2, #1
 801b108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	2200      	movs	r2, #0
 801b110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b114:	7bfb      	ldrb	r3, [r7, #15]
}
 801b116:	4618      	mov	r0, r3
 801b118:	3710      	adds	r7, #16
 801b11a:	46bd      	mov	sp, r7
 801b11c:	bd80      	pop	{r7, pc}

0801b11e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b11e:	b480      	push	{r7}
 801b120:	b083      	sub	sp, #12
 801b122:	af00      	add	r7, sp, #0
 801b124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b126:	bf00      	nop
 801b128:	370c      	adds	r7, #12
 801b12a:	46bd      	mov	sp, r7
 801b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b130:	4770      	bx	lr

0801b132 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801b132:	b480      	push	{r7}
 801b134:	b083      	sub	sp, #12
 801b136:	af00      	add	r7, sp, #0
 801b138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801b13a:	bf00      	nop
 801b13c:	370c      	adds	r7, #12
 801b13e:	46bd      	mov	sp, r7
 801b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b144:	4770      	bx	lr

0801b146 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b146:	b480      	push	{r7}
 801b148:	b083      	sub	sp, #12
 801b14a:	af00      	add	r7, sp, #0
 801b14c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b14e:	bf00      	nop
 801b150:	370c      	adds	r7, #12
 801b152:	46bd      	mov	sp, r7
 801b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b158:	4770      	bx	lr

0801b15a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b15a:	b480      	push	{r7}
 801b15c:	b083      	sub	sp, #12
 801b15e:	af00      	add	r7, sp, #0
 801b160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b162:	bf00      	nop
 801b164:	370c      	adds	r7, #12
 801b166:	46bd      	mov	sp, r7
 801b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b16c:	4770      	bx	lr
	...

0801b170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801b170:	b480      	push	{r7}
 801b172:	b085      	sub	sp, #20
 801b174:	af00      	add	r7, sp, #0
 801b176:	6078      	str	r0, [r7, #4]
 801b178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	4a34      	ldr	r2, [pc, #208]	; (801b254 <TIM_Base_SetConfig+0xe4>)
 801b184:	4293      	cmp	r3, r2
 801b186:	d00f      	beq.n	801b1a8 <TIM_Base_SetConfig+0x38>
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b18e:	d00b      	beq.n	801b1a8 <TIM_Base_SetConfig+0x38>
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	4a31      	ldr	r2, [pc, #196]	; (801b258 <TIM_Base_SetConfig+0xe8>)
 801b194:	4293      	cmp	r3, r2
 801b196:	d007      	beq.n	801b1a8 <TIM_Base_SetConfig+0x38>
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	4a30      	ldr	r2, [pc, #192]	; (801b25c <TIM_Base_SetConfig+0xec>)
 801b19c:	4293      	cmp	r3, r2
 801b19e:	d003      	beq.n	801b1a8 <TIM_Base_SetConfig+0x38>
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	4a2f      	ldr	r2, [pc, #188]	; (801b260 <TIM_Base_SetConfig+0xf0>)
 801b1a4:	4293      	cmp	r3, r2
 801b1a6:	d108      	bne.n	801b1ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b1a8:	68fb      	ldr	r3, [r7, #12]
 801b1aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b1ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b1b0:	683b      	ldr	r3, [r7, #0]
 801b1b2:	685b      	ldr	r3, [r3, #4]
 801b1b4:	68fa      	ldr	r2, [r7, #12]
 801b1b6:	4313      	orrs	r3, r2
 801b1b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	4a25      	ldr	r2, [pc, #148]	; (801b254 <TIM_Base_SetConfig+0xe4>)
 801b1be:	4293      	cmp	r3, r2
 801b1c0:	d01b      	beq.n	801b1fa <TIM_Base_SetConfig+0x8a>
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b1c8:	d017      	beq.n	801b1fa <TIM_Base_SetConfig+0x8a>
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	4a22      	ldr	r2, [pc, #136]	; (801b258 <TIM_Base_SetConfig+0xe8>)
 801b1ce:	4293      	cmp	r3, r2
 801b1d0:	d013      	beq.n	801b1fa <TIM_Base_SetConfig+0x8a>
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	4a21      	ldr	r2, [pc, #132]	; (801b25c <TIM_Base_SetConfig+0xec>)
 801b1d6:	4293      	cmp	r3, r2
 801b1d8:	d00f      	beq.n	801b1fa <TIM_Base_SetConfig+0x8a>
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	4a20      	ldr	r2, [pc, #128]	; (801b260 <TIM_Base_SetConfig+0xf0>)
 801b1de:	4293      	cmp	r3, r2
 801b1e0:	d00b      	beq.n	801b1fa <TIM_Base_SetConfig+0x8a>
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	4a1f      	ldr	r2, [pc, #124]	; (801b264 <TIM_Base_SetConfig+0xf4>)
 801b1e6:	4293      	cmp	r3, r2
 801b1e8:	d007      	beq.n	801b1fa <TIM_Base_SetConfig+0x8a>
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	4a1e      	ldr	r2, [pc, #120]	; (801b268 <TIM_Base_SetConfig+0xf8>)
 801b1ee:	4293      	cmp	r3, r2
 801b1f0:	d003      	beq.n	801b1fa <TIM_Base_SetConfig+0x8a>
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	4a1d      	ldr	r2, [pc, #116]	; (801b26c <TIM_Base_SetConfig+0xfc>)
 801b1f6:	4293      	cmp	r3, r2
 801b1f8:	d108      	bne.n	801b20c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b1fa:	68fb      	ldr	r3, [r7, #12]
 801b1fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b202:	683b      	ldr	r3, [r7, #0]
 801b204:	68db      	ldr	r3, [r3, #12]
 801b206:	68fa      	ldr	r2, [r7, #12]
 801b208:	4313      	orrs	r3, r2
 801b20a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b20c:	68fb      	ldr	r3, [r7, #12]
 801b20e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b212:	683b      	ldr	r3, [r7, #0]
 801b214:	695b      	ldr	r3, [r3, #20]
 801b216:	4313      	orrs	r3, r2
 801b218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	68fa      	ldr	r2, [r7, #12]
 801b21e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b220:	683b      	ldr	r3, [r7, #0]
 801b222:	689a      	ldr	r2, [r3, #8]
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b228:	683b      	ldr	r3, [r7, #0]
 801b22a:	681a      	ldr	r2, [r3, #0]
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	4a08      	ldr	r2, [pc, #32]	; (801b254 <TIM_Base_SetConfig+0xe4>)
 801b234:	4293      	cmp	r3, r2
 801b236:	d103      	bne.n	801b240 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b238:	683b      	ldr	r3, [r7, #0]
 801b23a:	691a      	ldr	r2, [r3, #16]
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	2201      	movs	r2, #1
 801b244:	615a      	str	r2, [r3, #20]
}
 801b246:	bf00      	nop
 801b248:	3714      	adds	r7, #20
 801b24a:	46bd      	mov	sp, r7
 801b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b250:	4770      	bx	lr
 801b252:	bf00      	nop
 801b254:	40010000 	.word	0x40010000
 801b258:	40000400 	.word	0x40000400
 801b25c:	40000800 	.word	0x40000800
 801b260:	40000c00 	.word	0x40000c00
 801b264:	40014000 	.word	0x40014000
 801b268:	40014400 	.word	0x40014400
 801b26c:	40014800 	.word	0x40014800

0801b270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b270:	b480      	push	{r7}
 801b272:	b087      	sub	sp, #28
 801b274:	af00      	add	r7, sp, #0
 801b276:	6078      	str	r0, [r7, #4]
 801b278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	6a1b      	ldr	r3, [r3, #32]
 801b27e:	f023 0201 	bic.w	r2, r3, #1
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	6a1b      	ldr	r3, [r3, #32]
 801b28a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	685b      	ldr	r3, [r3, #4]
 801b290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	699b      	ldr	r3, [r3, #24]
 801b296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b29e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	f023 0303 	bic.w	r3, r3, #3
 801b2a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b2a8:	683b      	ldr	r3, [r7, #0]
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	68fa      	ldr	r2, [r7, #12]
 801b2ae:	4313      	orrs	r3, r2
 801b2b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801b2b2:	697b      	ldr	r3, [r7, #20]
 801b2b4:	f023 0302 	bic.w	r3, r3, #2
 801b2b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801b2ba:	683b      	ldr	r3, [r7, #0]
 801b2bc:	689b      	ldr	r3, [r3, #8]
 801b2be:	697a      	ldr	r2, [r7, #20]
 801b2c0:	4313      	orrs	r3, r2
 801b2c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	4a1c      	ldr	r2, [pc, #112]	; (801b338 <TIM_OC1_SetConfig+0xc8>)
 801b2c8:	4293      	cmp	r3, r2
 801b2ca:	d10c      	bne.n	801b2e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801b2cc:	697b      	ldr	r3, [r7, #20]
 801b2ce:	f023 0308 	bic.w	r3, r3, #8
 801b2d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801b2d4:	683b      	ldr	r3, [r7, #0]
 801b2d6:	68db      	ldr	r3, [r3, #12]
 801b2d8:	697a      	ldr	r2, [r7, #20]
 801b2da:	4313      	orrs	r3, r2
 801b2dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801b2de:	697b      	ldr	r3, [r7, #20]
 801b2e0:	f023 0304 	bic.w	r3, r3, #4
 801b2e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	4a13      	ldr	r2, [pc, #76]	; (801b338 <TIM_OC1_SetConfig+0xc8>)
 801b2ea:	4293      	cmp	r3, r2
 801b2ec:	d111      	bne.n	801b312 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801b2ee:	693b      	ldr	r3, [r7, #16]
 801b2f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b2f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801b2f6:	693b      	ldr	r3, [r7, #16]
 801b2f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b2fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801b2fe:	683b      	ldr	r3, [r7, #0]
 801b300:	695b      	ldr	r3, [r3, #20]
 801b302:	693a      	ldr	r2, [r7, #16]
 801b304:	4313      	orrs	r3, r2
 801b306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801b308:	683b      	ldr	r3, [r7, #0]
 801b30a:	699b      	ldr	r3, [r3, #24]
 801b30c:	693a      	ldr	r2, [r7, #16]
 801b30e:	4313      	orrs	r3, r2
 801b310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	693a      	ldr	r2, [r7, #16]
 801b316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	68fa      	ldr	r2, [r7, #12]
 801b31c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801b31e:	683b      	ldr	r3, [r7, #0]
 801b320:	685a      	ldr	r2, [r3, #4]
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	697a      	ldr	r2, [r7, #20]
 801b32a:	621a      	str	r2, [r3, #32]
}
 801b32c:	bf00      	nop
 801b32e:	371c      	adds	r7, #28
 801b330:	46bd      	mov	sp, r7
 801b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b336:	4770      	bx	lr
 801b338:	40010000 	.word	0x40010000

0801b33c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b33c:	b480      	push	{r7}
 801b33e:	b087      	sub	sp, #28
 801b340:	af00      	add	r7, sp, #0
 801b342:	6078      	str	r0, [r7, #4]
 801b344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	6a1b      	ldr	r3, [r3, #32]
 801b34a:	f023 0210 	bic.w	r2, r3, #16
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	6a1b      	ldr	r3, [r3, #32]
 801b356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	685b      	ldr	r3, [r3, #4]
 801b35c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	699b      	ldr	r3, [r3, #24]
 801b362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b36c:	68fb      	ldr	r3, [r7, #12]
 801b36e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b374:	683b      	ldr	r3, [r7, #0]
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	021b      	lsls	r3, r3, #8
 801b37a:	68fa      	ldr	r2, [r7, #12]
 801b37c:	4313      	orrs	r3, r2
 801b37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b380:	697b      	ldr	r3, [r7, #20]
 801b382:	f023 0320 	bic.w	r3, r3, #32
 801b386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b388:	683b      	ldr	r3, [r7, #0]
 801b38a:	689b      	ldr	r3, [r3, #8]
 801b38c:	011b      	lsls	r3, r3, #4
 801b38e:	697a      	ldr	r2, [r7, #20]
 801b390:	4313      	orrs	r3, r2
 801b392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	4a1e      	ldr	r2, [pc, #120]	; (801b410 <TIM_OC2_SetConfig+0xd4>)
 801b398:	4293      	cmp	r3, r2
 801b39a:	d10d      	bne.n	801b3b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801b39c:	697b      	ldr	r3, [r7, #20]
 801b39e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b3a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801b3a4:	683b      	ldr	r3, [r7, #0]
 801b3a6:	68db      	ldr	r3, [r3, #12]
 801b3a8:	011b      	lsls	r3, r3, #4
 801b3aa:	697a      	ldr	r2, [r7, #20]
 801b3ac:	4313      	orrs	r3, r2
 801b3ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801b3b0:	697b      	ldr	r3, [r7, #20]
 801b3b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b3b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	4a15      	ldr	r2, [pc, #84]	; (801b410 <TIM_OC2_SetConfig+0xd4>)
 801b3bc:	4293      	cmp	r3, r2
 801b3be:	d113      	bne.n	801b3e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801b3c0:	693b      	ldr	r3, [r7, #16]
 801b3c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b3c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801b3c8:	693b      	ldr	r3, [r7, #16]
 801b3ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b3ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801b3d0:	683b      	ldr	r3, [r7, #0]
 801b3d2:	695b      	ldr	r3, [r3, #20]
 801b3d4:	009b      	lsls	r3, r3, #2
 801b3d6:	693a      	ldr	r2, [r7, #16]
 801b3d8:	4313      	orrs	r3, r2
 801b3da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801b3dc:	683b      	ldr	r3, [r7, #0]
 801b3de:	699b      	ldr	r3, [r3, #24]
 801b3e0:	009b      	lsls	r3, r3, #2
 801b3e2:	693a      	ldr	r2, [r7, #16]
 801b3e4:	4313      	orrs	r3, r2
 801b3e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	693a      	ldr	r2, [r7, #16]
 801b3ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	68fa      	ldr	r2, [r7, #12]
 801b3f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801b3f4:	683b      	ldr	r3, [r7, #0]
 801b3f6:	685a      	ldr	r2, [r3, #4]
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	697a      	ldr	r2, [r7, #20]
 801b400:	621a      	str	r2, [r3, #32]
}
 801b402:	bf00      	nop
 801b404:	371c      	adds	r7, #28
 801b406:	46bd      	mov	sp, r7
 801b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b40c:	4770      	bx	lr
 801b40e:	bf00      	nop
 801b410:	40010000 	.word	0x40010000

0801b414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b414:	b480      	push	{r7}
 801b416:	b087      	sub	sp, #28
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
 801b41c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	6a1b      	ldr	r3, [r3, #32]
 801b422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	6a1b      	ldr	r3, [r3, #32]
 801b42e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	685b      	ldr	r3, [r3, #4]
 801b434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	69db      	ldr	r3, [r3, #28]
 801b43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801b444:	68fb      	ldr	r3, [r7, #12]
 801b446:	f023 0303 	bic.w	r3, r3, #3
 801b44a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b44c:	683b      	ldr	r3, [r7, #0]
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	68fa      	ldr	r2, [r7, #12]
 801b452:	4313      	orrs	r3, r2
 801b454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801b456:	697b      	ldr	r3, [r7, #20]
 801b458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b45c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801b45e:	683b      	ldr	r3, [r7, #0]
 801b460:	689b      	ldr	r3, [r3, #8]
 801b462:	021b      	lsls	r3, r3, #8
 801b464:	697a      	ldr	r2, [r7, #20]
 801b466:	4313      	orrs	r3, r2
 801b468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	4a1d      	ldr	r2, [pc, #116]	; (801b4e4 <TIM_OC3_SetConfig+0xd0>)
 801b46e:	4293      	cmp	r3, r2
 801b470:	d10d      	bne.n	801b48e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801b472:	697b      	ldr	r3, [r7, #20]
 801b474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801b47a:	683b      	ldr	r3, [r7, #0]
 801b47c:	68db      	ldr	r3, [r3, #12]
 801b47e:	021b      	lsls	r3, r3, #8
 801b480:	697a      	ldr	r2, [r7, #20]
 801b482:	4313      	orrs	r3, r2
 801b484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801b486:	697b      	ldr	r3, [r7, #20]
 801b488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b48c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	4a14      	ldr	r2, [pc, #80]	; (801b4e4 <TIM_OC3_SetConfig+0xd0>)
 801b492:	4293      	cmp	r3, r2
 801b494:	d113      	bne.n	801b4be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801b496:	693b      	ldr	r3, [r7, #16]
 801b498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b49c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801b49e:	693b      	ldr	r3, [r7, #16]
 801b4a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b4a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801b4a6:	683b      	ldr	r3, [r7, #0]
 801b4a8:	695b      	ldr	r3, [r3, #20]
 801b4aa:	011b      	lsls	r3, r3, #4
 801b4ac:	693a      	ldr	r2, [r7, #16]
 801b4ae:	4313      	orrs	r3, r2
 801b4b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801b4b2:	683b      	ldr	r3, [r7, #0]
 801b4b4:	699b      	ldr	r3, [r3, #24]
 801b4b6:	011b      	lsls	r3, r3, #4
 801b4b8:	693a      	ldr	r2, [r7, #16]
 801b4ba:	4313      	orrs	r3, r2
 801b4bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	693a      	ldr	r2, [r7, #16]
 801b4c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	68fa      	ldr	r2, [r7, #12]
 801b4c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801b4ca:	683b      	ldr	r3, [r7, #0]
 801b4cc:	685a      	ldr	r2, [r3, #4]
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	697a      	ldr	r2, [r7, #20]
 801b4d6:	621a      	str	r2, [r3, #32]
}
 801b4d8:	bf00      	nop
 801b4da:	371c      	adds	r7, #28
 801b4dc:	46bd      	mov	sp, r7
 801b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4e2:	4770      	bx	lr
 801b4e4:	40010000 	.word	0x40010000

0801b4e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b4e8:	b480      	push	{r7}
 801b4ea:	b087      	sub	sp, #28
 801b4ec:	af00      	add	r7, sp, #0
 801b4ee:	6078      	str	r0, [r7, #4]
 801b4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	6a1b      	ldr	r3, [r3, #32]
 801b4f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	6a1b      	ldr	r3, [r3, #32]
 801b502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	685b      	ldr	r3, [r3, #4]
 801b508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	69db      	ldr	r3, [r3, #28]
 801b50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b51e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	021b      	lsls	r3, r3, #8
 801b526:	68fa      	ldr	r2, [r7, #12]
 801b528:	4313      	orrs	r3, r2
 801b52a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801b52c:	693b      	ldr	r3, [r7, #16]
 801b52e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801b534:	683b      	ldr	r3, [r7, #0]
 801b536:	689b      	ldr	r3, [r3, #8]
 801b538:	031b      	lsls	r3, r3, #12
 801b53a:	693a      	ldr	r2, [r7, #16]
 801b53c:	4313      	orrs	r3, r2
 801b53e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	4a10      	ldr	r2, [pc, #64]	; (801b584 <TIM_OC4_SetConfig+0x9c>)
 801b544:	4293      	cmp	r3, r2
 801b546:	d109      	bne.n	801b55c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801b548:	697b      	ldr	r3, [r7, #20]
 801b54a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b54e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801b550:	683b      	ldr	r3, [r7, #0]
 801b552:	695b      	ldr	r3, [r3, #20]
 801b554:	019b      	lsls	r3, r3, #6
 801b556:	697a      	ldr	r2, [r7, #20]
 801b558:	4313      	orrs	r3, r2
 801b55a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	697a      	ldr	r2, [r7, #20]
 801b560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	68fa      	ldr	r2, [r7, #12]
 801b566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801b568:	683b      	ldr	r3, [r7, #0]
 801b56a:	685a      	ldr	r2, [r3, #4]
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	693a      	ldr	r2, [r7, #16]
 801b574:	621a      	str	r2, [r3, #32]
}
 801b576:	bf00      	nop
 801b578:	371c      	adds	r7, #28
 801b57a:	46bd      	mov	sp, r7
 801b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b580:	4770      	bx	lr
 801b582:	bf00      	nop
 801b584:	40010000 	.word	0x40010000

0801b588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b588:	b480      	push	{r7}
 801b58a:	b087      	sub	sp, #28
 801b58c:	af00      	add	r7, sp, #0
 801b58e:	60f8      	str	r0, [r7, #12]
 801b590:	60b9      	str	r1, [r7, #8]
 801b592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801b594:	68fb      	ldr	r3, [r7, #12]
 801b596:	6a1b      	ldr	r3, [r3, #32]
 801b598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b59a:	68fb      	ldr	r3, [r7, #12]
 801b59c:	6a1b      	ldr	r3, [r3, #32]
 801b59e:	f023 0201 	bic.w	r2, r3, #1
 801b5a2:	68fb      	ldr	r3, [r7, #12]
 801b5a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b5a6:	68fb      	ldr	r3, [r7, #12]
 801b5a8:	699b      	ldr	r3, [r3, #24]
 801b5aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b5ac:	693b      	ldr	r3, [r7, #16]
 801b5ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b5b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	011b      	lsls	r3, r3, #4
 801b5b8:	693a      	ldr	r2, [r7, #16]
 801b5ba:	4313      	orrs	r3, r2
 801b5bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b5be:	697b      	ldr	r3, [r7, #20]
 801b5c0:	f023 030a 	bic.w	r3, r3, #10
 801b5c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801b5c6:	697a      	ldr	r2, [r7, #20]
 801b5c8:	68bb      	ldr	r3, [r7, #8]
 801b5ca:	4313      	orrs	r3, r2
 801b5cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b5ce:	68fb      	ldr	r3, [r7, #12]
 801b5d0:	693a      	ldr	r2, [r7, #16]
 801b5d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b5d4:	68fb      	ldr	r3, [r7, #12]
 801b5d6:	697a      	ldr	r2, [r7, #20]
 801b5d8:	621a      	str	r2, [r3, #32]
}
 801b5da:	bf00      	nop
 801b5dc:	371c      	adds	r7, #28
 801b5de:	46bd      	mov	sp, r7
 801b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5e4:	4770      	bx	lr

0801b5e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b5e6:	b480      	push	{r7}
 801b5e8:	b087      	sub	sp, #28
 801b5ea:	af00      	add	r7, sp, #0
 801b5ec:	60f8      	str	r0, [r7, #12]
 801b5ee:	60b9      	str	r1, [r7, #8]
 801b5f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b5f2:	68fb      	ldr	r3, [r7, #12]
 801b5f4:	6a1b      	ldr	r3, [r3, #32]
 801b5f6:	f023 0210 	bic.w	r2, r3, #16
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b5fe:	68fb      	ldr	r3, [r7, #12]
 801b600:	699b      	ldr	r3, [r3, #24]
 801b602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b604:	68fb      	ldr	r3, [r7, #12]
 801b606:	6a1b      	ldr	r3, [r3, #32]
 801b608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b60a:	697b      	ldr	r3, [r7, #20]
 801b60c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	031b      	lsls	r3, r3, #12
 801b616:	697a      	ldr	r2, [r7, #20]
 801b618:	4313      	orrs	r3, r2
 801b61a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b61c:	693b      	ldr	r3, [r7, #16]
 801b61e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801b622:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801b624:	68bb      	ldr	r3, [r7, #8]
 801b626:	011b      	lsls	r3, r3, #4
 801b628:	693a      	ldr	r2, [r7, #16]
 801b62a:	4313      	orrs	r3, r2
 801b62c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b62e:	68fb      	ldr	r3, [r7, #12]
 801b630:	697a      	ldr	r2, [r7, #20]
 801b632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	693a      	ldr	r2, [r7, #16]
 801b638:	621a      	str	r2, [r3, #32]
}
 801b63a:	bf00      	nop
 801b63c:	371c      	adds	r7, #28
 801b63e:	46bd      	mov	sp, r7
 801b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b644:	4770      	bx	lr

0801b646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801b646:	b480      	push	{r7}
 801b648:	b085      	sub	sp, #20
 801b64a:	af00      	add	r7, sp, #0
 801b64c:	6078      	str	r0, [r7, #4]
 801b64e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	689b      	ldr	r3, [r3, #8]
 801b654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b65c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801b65e:	683a      	ldr	r2, [r7, #0]
 801b660:	68fb      	ldr	r3, [r7, #12]
 801b662:	4313      	orrs	r3, r2
 801b664:	f043 0307 	orr.w	r3, r3, #7
 801b668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	68fa      	ldr	r2, [r7, #12]
 801b66e:	609a      	str	r2, [r3, #8]
}
 801b670:	bf00      	nop
 801b672:	3714      	adds	r7, #20
 801b674:	46bd      	mov	sp, r7
 801b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b67a:	4770      	bx	lr

0801b67c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801b67c:	b480      	push	{r7}
 801b67e:	b087      	sub	sp, #28
 801b680:	af00      	add	r7, sp, #0
 801b682:	60f8      	str	r0, [r7, #12]
 801b684:	60b9      	str	r1, [r7, #8]
 801b686:	607a      	str	r2, [r7, #4]
 801b688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801b68a:	68fb      	ldr	r3, [r7, #12]
 801b68c:	689b      	ldr	r3, [r3, #8]
 801b68e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b690:	697b      	ldr	r3, [r7, #20]
 801b692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801b698:	683b      	ldr	r3, [r7, #0]
 801b69a:	021a      	lsls	r2, r3, #8
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	431a      	orrs	r2, r3
 801b6a0:	68bb      	ldr	r3, [r7, #8]
 801b6a2:	4313      	orrs	r3, r2
 801b6a4:	697a      	ldr	r2, [r7, #20]
 801b6a6:	4313      	orrs	r3, r2
 801b6a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b6aa:	68fb      	ldr	r3, [r7, #12]
 801b6ac:	697a      	ldr	r2, [r7, #20]
 801b6ae:	609a      	str	r2, [r3, #8]
}
 801b6b0:	bf00      	nop
 801b6b2:	371c      	adds	r7, #28
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6ba:	4770      	bx	lr

0801b6bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801b6bc:	b480      	push	{r7}
 801b6be:	b087      	sub	sp, #28
 801b6c0:	af00      	add	r7, sp, #0
 801b6c2:	60f8      	str	r0, [r7, #12]
 801b6c4:	60b9      	str	r1, [r7, #8]
 801b6c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801b6c8:	68bb      	ldr	r3, [r7, #8]
 801b6ca:	f003 031f 	and.w	r3, r3, #31
 801b6ce:	2201      	movs	r2, #1
 801b6d0:	fa02 f303 	lsl.w	r3, r2, r3
 801b6d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801b6d6:	68fb      	ldr	r3, [r7, #12]
 801b6d8:	6a1a      	ldr	r2, [r3, #32]
 801b6da:	697b      	ldr	r3, [r7, #20]
 801b6dc:	43db      	mvns	r3, r3
 801b6de:	401a      	ands	r2, r3
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801b6e4:	68fb      	ldr	r3, [r7, #12]
 801b6e6:	6a1a      	ldr	r2, [r3, #32]
 801b6e8:	68bb      	ldr	r3, [r7, #8]
 801b6ea:	f003 031f 	and.w	r3, r3, #31
 801b6ee:	6879      	ldr	r1, [r7, #4]
 801b6f0:	fa01 f303 	lsl.w	r3, r1, r3
 801b6f4:	431a      	orrs	r2, r3
 801b6f6:	68fb      	ldr	r3, [r7, #12]
 801b6f8:	621a      	str	r2, [r3, #32]
}
 801b6fa:	bf00      	nop
 801b6fc:	371c      	adds	r7, #28
 801b6fe:	46bd      	mov	sp, r7
 801b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b704:	4770      	bx	lr
	...

0801b708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801b708:	b480      	push	{r7}
 801b70a:	b085      	sub	sp, #20
 801b70c:	af00      	add	r7, sp, #0
 801b70e:	6078      	str	r0, [r7, #4]
 801b710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b718:	2b01      	cmp	r3, #1
 801b71a:	d101      	bne.n	801b720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801b71c:	2302      	movs	r3, #2
 801b71e:	e050      	b.n	801b7c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	2201      	movs	r2, #1
 801b724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	2202      	movs	r2, #2
 801b72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	685b      	ldr	r3, [r3, #4]
 801b736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	689b      	ldr	r3, [r3, #8]
 801b73e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801b740:	68fb      	ldr	r3, [r7, #12]
 801b742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801b748:	683b      	ldr	r3, [r7, #0]
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	68fa      	ldr	r2, [r7, #12]
 801b74e:	4313      	orrs	r3, r2
 801b750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	68fa      	ldr	r2, [r7, #12]
 801b758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	681b      	ldr	r3, [r3, #0]
 801b75e:	4a1c      	ldr	r2, [pc, #112]	; (801b7d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801b760:	4293      	cmp	r3, r2
 801b762:	d018      	beq.n	801b796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b76c:	d013      	beq.n	801b796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	681b      	ldr	r3, [r3, #0]
 801b772:	4a18      	ldr	r2, [pc, #96]	; (801b7d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801b774:	4293      	cmp	r3, r2
 801b776:	d00e      	beq.n	801b796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	4a16      	ldr	r2, [pc, #88]	; (801b7d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801b77e:	4293      	cmp	r3, r2
 801b780:	d009      	beq.n	801b796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	4a15      	ldr	r2, [pc, #84]	; (801b7dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801b788:	4293      	cmp	r3, r2
 801b78a:	d004      	beq.n	801b796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	4a13      	ldr	r2, [pc, #76]	; (801b7e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801b792:	4293      	cmp	r3, r2
 801b794:	d10c      	bne.n	801b7b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801b796:	68bb      	ldr	r3, [r7, #8]
 801b798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b79c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801b79e:	683b      	ldr	r3, [r7, #0]
 801b7a0:	685b      	ldr	r3, [r3, #4]
 801b7a2:	68ba      	ldr	r2, [r7, #8]
 801b7a4:	4313      	orrs	r3, r2
 801b7a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	68ba      	ldr	r2, [r7, #8]
 801b7ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	2201      	movs	r2, #1
 801b7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	2200      	movs	r2, #0
 801b7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b7c0:	2300      	movs	r3, #0
}
 801b7c2:	4618      	mov	r0, r3
 801b7c4:	3714      	adds	r7, #20
 801b7c6:	46bd      	mov	sp, r7
 801b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7cc:	4770      	bx	lr
 801b7ce:	bf00      	nop
 801b7d0:	40010000 	.word	0x40010000
 801b7d4:	40000400 	.word	0x40000400
 801b7d8:	40000800 	.word	0x40000800
 801b7dc:	40000c00 	.word	0x40000c00
 801b7e0:	40014000 	.word	0x40014000

0801b7e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801b7e4:	b480      	push	{r7}
 801b7e6:	b083      	sub	sp, #12
 801b7e8:	af00      	add	r7, sp, #0
 801b7ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801b7ec:	bf00      	nop
 801b7ee:	370c      	adds	r7, #12
 801b7f0:	46bd      	mov	sp, r7
 801b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f6:	4770      	bx	lr

0801b7f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801b7f8:	b480      	push	{r7}
 801b7fa:	b083      	sub	sp, #12
 801b7fc:	af00      	add	r7, sp, #0
 801b7fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801b800:	bf00      	nop
 801b802:	370c      	adds	r7, #12
 801b804:	46bd      	mov	sp, r7
 801b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b80a:	4770      	bx	lr

0801b80c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b80c:	b580      	push	{r7, lr}
 801b80e:	b082      	sub	sp, #8
 801b810:	af00      	add	r7, sp, #0
 801b812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	2b00      	cmp	r3, #0
 801b818:	d101      	bne.n	801b81e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b81a:	2301      	movs	r3, #1
 801b81c:	e03f      	b.n	801b89e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b824:	b2db      	uxtb	r3, r3
 801b826:	2b00      	cmp	r3, #0
 801b828:	d106      	bne.n	801b838 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	2200      	movs	r2, #0
 801b82e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801b832:	6878      	ldr	r0, [r7, #4]
 801b834:	f7fa fafe 	bl	8015e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	2224      	movs	r2, #36	; 0x24
 801b83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	68da      	ldr	r2, [r3, #12]
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	681b      	ldr	r3, [r3, #0]
 801b84a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801b84e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801b850:	6878      	ldr	r0, [r7, #4]
 801b852:	f000 ff9b 	bl	801c78c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	691a      	ldr	r2, [r3, #16]
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b864:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	695a      	ldr	r2, [r3, #20]
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b874:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	68da      	ldr	r2, [r3, #12]
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	681b      	ldr	r3, [r3, #0]
 801b880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801b884:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	2200      	movs	r2, #0
 801b88a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	2220      	movs	r2, #32
 801b890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	2220      	movs	r2, #32
 801b898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801b89c:	2300      	movs	r3, #0
}
 801b89e:	4618      	mov	r0, r3
 801b8a0:	3708      	adds	r7, #8
 801b8a2:	46bd      	mov	sp, r7
 801b8a4:	bd80      	pop	{r7, pc}

0801b8a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b8a6:	b580      	push	{r7, lr}
 801b8a8:	b08a      	sub	sp, #40	; 0x28
 801b8aa:	af02      	add	r7, sp, #8
 801b8ac:	60f8      	str	r0, [r7, #12]
 801b8ae:	60b9      	str	r1, [r7, #8]
 801b8b0:	603b      	str	r3, [r7, #0]
 801b8b2:	4613      	mov	r3, r2
 801b8b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801b8b6:	2300      	movs	r3, #0
 801b8b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b8c0:	b2db      	uxtb	r3, r3
 801b8c2:	2b20      	cmp	r3, #32
 801b8c4:	d17c      	bne.n	801b9c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801b8c6:	68bb      	ldr	r3, [r7, #8]
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d002      	beq.n	801b8d2 <HAL_UART_Transmit+0x2c>
 801b8cc:	88fb      	ldrh	r3, [r7, #6]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d101      	bne.n	801b8d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801b8d2:	2301      	movs	r3, #1
 801b8d4:	e075      	b.n	801b9c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801b8d6:	68fb      	ldr	r3, [r7, #12]
 801b8d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b8dc:	2b01      	cmp	r3, #1
 801b8de:	d101      	bne.n	801b8e4 <HAL_UART_Transmit+0x3e>
 801b8e0:	2302      	movs	r3, #2
 801b8e2:	e06e      	b.n	801b9c2 <HAL_UART_Transmit+0x11c>
 801b8e4:	68fb      	ldr	r3, [r7, #12]
 801b8e6:	2201      	movs	r2, #1
 801b8e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b8ec:	68fb      	ldr	r3, [r7, #12]
 801b8ee:	2200      	movs	r2, #0
 801b8f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b8f2:	68fb      	ldr	r3, [r7, #12]
 801b8f4:	2221      	movs	r2, #33	; 0x21
 801b8f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801b8fa:	f7fa fd53 	bl	80163a4 <HAL_GetTick>
 801b8fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801b900:	68fb      	ldr	r3, [r7, #12]
 801b902:	88fa      	ldrh	r2, [r7, #6]
 801b904:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801b906:	68fb      	ldr	r3, [r7, #12]
 801b908:	88fa      	ldrh	r2, [r7, #6]
 801b90a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b90c:	68fb      	ldr	r3, [r7, #12]
 801b90e:	689b      	ldr	r3, [r3, #8]
 801b910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b914:	d108      	bne.n	801b928 <HAL_UART_Transmit+0x82>
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	691b      	ldr	r3, [r3, #16]
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d104      	bne.n	801b928 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801b91e:	2300      	movs	r3, #0
 801b920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801b922:	68bb      	ldr	r3, [r7, #8]
 801b924:	61bb      	str	r3, [r7, #24]
 801b926:	e003      	b.n	801b930 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801b928:	68bb      	ldr	r3, [r7, #8]
 801b92a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801b92c:	2300      	movs	r3, #0
 801b92e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801b930:	68fb      	ldr	r3, [r7, #12]
 801b932:	2200      	movs	r2, #0
 801b934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801b938:	e02a      	b.n	801b990 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b93a:	683b      	ldr	r3, [r7, #0]
 801b93c:	9300      	str	r3, [sp, #0]
 801b93e:	697b      	ldr	r3, [r7, #20]
 801b940:	2200      	movs	r2, #0
 801b942:	2180      	movs	r1, #128	; 0x80
 801b944:	68f8      	ldr	r0, [r7, #12]
 801b946:	f000 fc53 	bl	801c1f0 <UART_WaitOnFlagUntilTimeout>
 801b94a:	4603      	mov	r3, r0
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d001      	beq.n	801b954 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801b950:	2303      	movs	r3, #3
 801b952:	e036      	b.n	801b9c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801b954:	69fb      	ldr	r3, [r7, #28]
 801b956:	2b00      	cmp	r3, #0
 801b958:	d10b      	bne.n	801b972 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801b95a:	69bb      	ldr	r3, [r7, #24]
 801b95c:	881b      	ldrh	r3, [r3, #0]
 801b95e:	461a      	mov	r2, r3
 801b960:	68fb      	ldr	r3, [r7, #12]
 801b962:	681b      	ldr	r3, [r3, #0]
 801b964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b968:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801b96a:	69bb      	ldr	r3, [r7, #24]
 801b96c:	3302      	adds	r3, #2
 801b96e:	61bb      	str	r3, [r7, #24]
 801b970:	e007      	b.n	801b982 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801b972:	69fb      	ldr	r3, [r7, #28]
 801b974:	781a      	ldrb	r2, [r3, #0]
 801b976:	68fb      	ldr	r3, [r7, #12]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801b97c:	69fb      	ldr	r3, [r7, #28]
 801b97e:	3301      	adds	r3, #1
 801b980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801b986:	b29b      	uxth	r3, r3
 801b988:	3b01      	subs	r3, #1
 801b98a:	b29a      	uxth	r2, r3
 801b98c:	68fb      	ldr	r3, [r7, #12]
 801b98e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801b994:	b29b      	uxth	r3, r3
 801b996:	2b00      	cmp	r3, #0
 801b998:	d1cf      	bne.n	801b93a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801b99a:	683b      	ldr	r3, [r7, #0]
 801b99c:	9300      	str	r3, [sp, #0]
 801b99e:	697b      	ldr	r3, [r7, #20]
 801b9a0:	2200      	movs	r2, #0
 801b9a2:	2140      	movs	r1, #64	; 0x40
 801b9a4:	68f8      	ldr	r0, [r7, #12]
 801b9a6:	f000 fc23 	bl	801c1f0 <UART_WaitOnFlagUntilTimeout>
 801b9aa:	4603      	mov	r3, r0
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	d001      	beq.n	801b9b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801b9b0:	2303      	movs	r3, #3
 801b9b2:	e006      	b.n	801b9c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801b9b4:	68fb      	ldr	r3, [r7, #12]
 801b9b6:	2220      	movs	r2, #32
 801b9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801b9bc:	2300      	movs	r3, #0
 801b9be:	e000      	b.n	801b9c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801b9c0:	2302      	movs	r3, #2
  }
}
 801b9c2:	4618      	mov	r0, r3
 801b9c4:	3720      	adds	r7, #32
 801b9c6:	46bd      	mov	sp, r7
 801b9c8:	bd80      	pop	{r7, pc}

0801b9ca <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b9ca:	b580      	push	{r7, lr}
 801b9cc:	b08c      	sub	sp, #48	; 0x30
 801b9ce:	af00      	add	r7, sp, #0
 801b9d0:	60f8      	str	r0, [r7, #12]
 801b9d2:	60b9      	str	r1, [r7, #8]
 801b9d4:	4613      	mov	r3, r2
 801b9d6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801b9d8:	68fb      	ldr	r3, [r7, #12]
 801b9da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801b9de:	b2db      	uxtb	r3, r3
 801b9e0:	2b20      	cmp	r3, #32
 801b9e2:	d152      	bne.n	801ba8a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 801b9e4:	68bb      	ldr	r3, [r7, #8]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d002      	beq.n	801b9f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 801b9ea:	88fb      	ldrh	r3, [r7, #6]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d101      	bne.n	801b9f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801b9f0:	2301      	movs	r3, #1
 801b9f2:	e04b      	b.n	801ba8c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 801b9f4:	68fb      	ldr	r3, [r7, #12]
 801b9f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b9fa:	2b01      	cmp	r3, #1
 801b9fc:	d101      	bne.n	801ba02 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801b9fe:	2302      	movs	r3, #2
 801ba00:	e044      	b.n	801ba8c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 801ba02:	68fb      	ldr	r3, [r7, #12]
 801ba04:	2201      	movs	r2, #1
 801ba06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	2201      	movs	r2, #1
 801ba0e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801ba10:	88fb      	ldrh	r3, [r7, #6]
 801ba12:	461a      	mov	r2, r3
 801ba14:	68b9      	ldr	r1, [r7, #8]
 801ba16:	68f8      	ldr	r0, [r7, #12]
 801ba18:	f000 fc58 	bl	801c2cc <UART_Start_Receive_DMA>
 801ba1c:	4603      	mov	r3, r0
 801ba1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801ba22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d12c      	bne.n	801ba84 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ba2a:	68fb      	ldr	r3, [r7, #12]
 801ba2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba2e:	2b01      	cmp	r3, #1
 801ba30:	d125      	bne.n	801ba7e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801ba32:	2300      	movs	r3, #0
 801ba34:	613b      	str	r3, [r7, #16]
 801ba36:	68fb      	ldr	r3, [r7, #12]
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	613b      	str	r3, [r7, #16]
 801ba3e:	68fb      	ldr	r3, [r7, #12]
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	685b      	ldr	r3, [r3, #4]
 801ba44:	613b      	str	r3, [r7, #16]
 801ba46:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ba48:	68fb      	ldr	r3, [r7, #12]
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	330c      	adds	r3, #12
 801ba4e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba50:	69bb      	ldr	r3, [r7, #24]
 801ba52:	e853 3f00 	ldrex	r3, [r3]
 801ba56:	617b      	str	r3, [r7, #20]
   return(result);
 801ba58:	697b      	ldr	r3, [r7, #20]
 801ba5a:	f043 0310 	orr.w	r3, r3, #16
 801ba5e:	62bb      	str	r3, [r7, #40]	; 0x28
 801ba60:	68fb      	ldr	r3, [r7, #12]
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	330c      	adds	r3, #12
 801ba66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ba68:	627a      	str	r2, [r7, #36]	; 0x24
 801ba6a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba6c:	6a39      	ldr	r1, [r7, #32]
 801ba6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ba70:	e841 2300 	strex	r3, r2, [r1]
 801ba74:	61fb      	str	r3, [r7, #28]
   return(result);
 801ba76:	69fb      	ldr	r3, [r7, #28]
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	d1e5      	bne.n	801ba48 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 801ba7c:	e002      	b.n	801ba84 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801ba7e:	2301      	movs	r3, #1
 801ba80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801ba84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ba88:	e000      	b.n	801ba8c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 801ba8a:	2302      	movs	r3, #2
  }
}
 801ba8c:	4618      	mov	r0, r3
 801ba8e:	3730      	adds	r7, #48	; 0x30
 801ba90:	46bd      	mov	sp, r7
 801ba92:	bd80      	pop	{r7, pc}

0801ba94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801ba94:	b580      	push	{r7, lr}
 801ba96:	b0ba      	sub	sp, #232	; 0xe8
 801ba98:	af00      	add	r7, sp, #0
 801ba9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	68db      	ldr	r3, [r3, #12]
 801baac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	681b      	ldr	r3, [r3, #0]
 801bab4:	695b      	ldr	r3, [r3, #20]
 801bab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801baba:	2300      	movs	r3, #0
 801babc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801bac0:	2300      	movs	r3, #0
 801bac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801bac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801baca:	f003 030f 	and.w	r3, r3, #15
 801bace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801bad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d10f      	bne.n	801bafa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bade:	f003 0320 	and.w	r3, r3, #32
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d009      	beq.n	801bafa <HAL_UART_IRQHandler+0x66>
 801bae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801baea:	f003 0320 	and.w	r3, r3, #32
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d003      	beq.n	801bafa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801baf2:	6878      	ldr	r0, [r7, #4]
 801baf4:	f000 fd8f 	bl	801c616 <UART_Receive_IT>
      return;
 801baf8:	e256      	b.n	801bfa8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801bafa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	f000 80de 	beq.w	801bcc0 <HAL_UART_IRQHandler+0x22c>
 801bb04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bb08:	f003 0301 	and.w	r3, r3, #1
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d106      	bne.n	801bb1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801bb10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bb14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	f000 80d1 	beq.w	801bcc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801bb1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bb22:	f003 0301 	and.w	r3, r3, #1
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d00b      	beq.n	801bb42 <HAL_UART_IRQHandler+0xae>
 801bb2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bb2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d005      	beq.n	801bb42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bb3a:	f043 0201 	orr.w	r2, r3, #1
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bb42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bb46:	f003 0304 	and.w	r3, r3, #4
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	d00b      	beq.n	801bb66 <HAL_UART_IRQHandler+0xd2>
 801bb4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bb52:	f003 0301 	and.w	r3, r3, #1
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d005      	beq.n	801bb66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bb5e:	f043 0202 	orr.w	r2, r3, #2
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bb66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bb6a:	f003 0302 	and.w	r3, r3, #2
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d00b      	beq.n	801bb8a <HAL_UART_IRQHandler+0xf6>
 801bb72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bb76:	f003 0301 	and.w	r3, r3, #1
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	d005      	beq.n	801bb8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bb82:	f043 0204 	orr.w	r2, r3, #4
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801bb8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bb8e:	f003 0308 	and.w	r3, r3, #8
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	d011      	beq.n	801bbba <HAL_UART_IRQHandler+0x126>
 801bb96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bb9a:	f003 0320 	and.w	r3, r3, #32
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d105      	bne.n	801bbae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801bba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bba6:	f003 0301 	and.w	r3, r3, #1
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d005      	beq.n	801bbba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bbb2:	f043 0208 	orr.w	r2, r3, #8
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	f000 81ed 	beq.w	801bf9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bbc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbc8:	f003 0320 	and.w	r3, r3, #32
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	d008      	beq.n	801bbe2 <HAL_UART_IRQHandler+0x14e>
 801bbd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bbd4:	f003 0320 	and.w	r3, r3, #32
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	d002      	beq.n	801bbe2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801bbdc:	6878      	ldr	r0, [r7, #4]
 801bbde:	f000 fd1a 	bl	801c616 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	681b      	ldr	r3, [r3, #0]
 801bbe6:	695b      	ldr	r3, [r3, #20]
 801bbe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bbec:	2b40      	cmp	r3, #64	; 0x40
 801bbee:	bf0c      	ite	eq
 801bbf0:	2301      	moveq	r3, #1
 801bbf2:	2300      	movne	r3, #0
 801bbf4:	b2db      	uxtb	r3, r3
 801bbf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bbfe:	f003 0308 	and.w	r3, r3, #8
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d103      	bne.n	801bc0e <HAL_UART_IRQHandler+0x17a>
 801bc06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d04f      	beq.n	801bcae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801bc0e:	6878      	ldr	r0, [r7, #4]
 801bc10:	f000 fc22 	bl	801c458 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	695b      	ldr	r3, [r3, #20]
 801bc1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bc1e:	2b40      	cmp	r3, #64	; 0x40
 801bc20:	d141      	bne.n	801bca6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	3314      	adds	r3, #20
 801bc28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bc2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bc30:	e853 3f00 	ldrex	r3, [r3]
 801bc34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801bc38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bc3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bc40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	3314      	adds	r3, #20
 801bc4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801bc4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801bc52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bc56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801bc5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801bc5e:	e841 2300 	strex	r3, r2, [r1]
 801bc62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801bc66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d1d9      	bne.n	801bc22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	d013      	beq.n	801bc9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc7a:	4a7d      	ldr	r2, [pc, #500]	; (801be70 <HAL_UART_IRQHandler+0x3dc>)
 801bc7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc82:	4618      	mov	r0, r3
 801bc84:	f7fa fe46 	bl	8016914 <HAL_DMA_Abort_IT>
 801bc88:	4603      	mov	r3, r0
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d016      	beq.n	801bcbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bc94:	687a      	ldr	r2, [r7, #4]
 801bc96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801bc98:	4610      	mov	r0, r2
 801bc9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bc9c:	e00e      	b.n	801bcbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801bc9e:	6878      	ldr	r0, [r7, #4]
 801bca0:	f000 f9a4 	bl	801bfec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bca4:	e00a      	b.n	801bcbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801bca6:	6878      	ldr	r0, [r7, #4]
 801bca8:	f000 f9a0 	bl	801bfec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bcac:	e006      	b.n	801bcbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801bcae:	6878      	ldr	r0, [r7, #4]
 801bcb0:	f000 f99c 	bl	801bfec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	2200      	movs	r2, #0
 801bcb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801bcba:	e170      	b.n	801bf9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bcbc:	bf00      	nop
    return;
 801bcbe:	e16e      	b.n	801bf9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bcc4:	2b01      	cmp	r3, #1
 801bcc6:	f040 814a 	bne.w	801bf5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801bcca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bcce:	f003 0310 	and.w	r3, r3, #16
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	f000 8143 	beq.w	801bf5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801bcd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bcdc:	f003 0310 	and.w	r3, r3, #16
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	f000 813c 	beq.w	801bf5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801bce6:	2300      	movs	r3, #0
 801bce8:	60bb      	str	r3, [r7, #8]
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	60bb      	str	r3, [r7, #8]
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	685b      	ldr	r3, [r3, #4]
 801bcf8:	60bb      	str	r3, [r7, #8]
 801bcfa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	695b      	ldr	r3, [r3, #20]
 801bd02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bd06:	2b40      	cmp	r3, #64	; 0x40
 801bd08:	f040 80b4 	bne.w	801be74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd10:	681b      	ldr	r3, [r3, #0]
 801bd12:	685b      	ldr	r3, [r3, #4]
 801bd14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801bd18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	f000 8140 	beq.w	801bfa2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801bd26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801bd2a:	429a      	cmp	r2, r3
 801bd2c:	f080 8139 	bcs.w	801bfa2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801bd36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd3c:	69db      	ldr	r3, [r3, #28]
 801bd3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bd42:	f000 8088 	beq.w	801be56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	330c      	adds	r3, #12
 801bd4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bd54:	e853 3f00 	ldrex	r3, [r3]
 801bd58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801bd5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801bd60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bd64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	330c      	adds	r3, #12
 801bd6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801bd72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801bd76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801bd7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801bd82:	e841 2300 	strex	r3, r2, [r1]
 801bd86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801bd8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d1d9      	bne.n	801bd46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	681b      	ldr	r3, [r3, #0]
 801bd96:	3314      	adds	r3, #20
 801bd98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bd9c:	e853 3f00 	ldrex	r3, [r3]
 801bda0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801bda2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bda4:	f023 0301 	bic.w	r3, r3, #1
 801bda8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	3314      	adds	r3, #20
 801bdb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801bdb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801bdba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bdbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801bdbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801bdc2:	e841 2300 	strex	r3, r2, [r1]
 801bdc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801bdc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d1e1      	bne.n	801bd92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	3314      	adds	r3, #20
 801bdd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bdd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bdd8:	e853 3f00 	ldrex	r3, [r3]
 801bddc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801bdde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bde0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bde4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	3314      	adds	r3, #20
 801bdee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801bdf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 801bdf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bdf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801bdf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801bdfa:	e841 2300 	strex	r3, r2, [r1]
 801bdfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801be00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801be02:	2b00      	cmp	r3, #0
 801be04:	d1e3      	bne.n	801bdce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	2220      	movs	r2, #32
 801be0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	2200      	movs	r2, #0
 801be12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	681b      	ldr	r3, [r3, #0]
 801be18:	330c      	adds	r3, #12
 801be1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801be1e:	e853 3f00 	ldrex	r3, [r3]
 801be22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801be24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be26:	f023 0310 	bic.w	r3, r3, #16
 801be2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	681b      	ldr	r3, [r3, #0]
 801be32:	330c      	adds	r3, #12
 801be34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801be38:	65ba      	str	r2, [r7, #88]	; 0x58
 801be3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801be3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801be40:	e841 2300 	strex	r3, r2, [r1]
 801be44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801be46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801be48:	2b00      	cmp	r3, #0
 801be4a:	d1e3      	bne.n	801be14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801be50:	4618      	mov	r0, r3
 801be52:	f7fa fcef 	bl	8016834 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801be5e:	b29b      	uxth	r3, r3
 801be60:	1ad3      	subs	r3, r2, r3
 801be62:	b29b      	uxth	r3, r3
 801be64:	4619      	mov	r1, r3
 801be66:	6878      	ldr	r0, [r7, #4]
 801be68:	f7e5 f880 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801be6c:	e099      	b.n	801bfa2 <HAL_UART_IRQHandler+0x50e>
 801be6e:	bf00      	nop
 801be70:	0801c51f 	.word	0x0801c51f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801be7c:	b29b      	uxth	r3, r3
 801be7e:	1ad3      	subs	r3, r2, r3
 801be80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801be88:	b29b      	uxth	r3, r3
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	f000 808b 	beq.w	801bfa6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801be90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801be94:	2b00      	cmp	r3, #0
 801be96:	f000 8086 	beq.w	801bfa6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	330c      	adds	r3, #12
 801bea0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bea4:	e853 3f00 	ldrex	r3, [r3]
 801bea8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801beaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801beac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801beb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	330c      	adds	r3, #12
 801beba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801bebe:	647a      	str	r2, [r7, #68]	; 0x44
 801bec0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bec2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801bec4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bec6:	e841 2300 	strex	r3, r2, [r1]
 801beca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801becc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d1e3      	bne.n	801be9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	3314      	adds	r3, #20
 801bed8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801beda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bedc:	e853 3f00 	ldrex	r3, [r3]
 801bee0:	623b      	str	r3, [r7, #32]
   return(result);
 801bee2:	6a3b      	ldr	r3, [r7, #32]
 801bee4:	f023 0301 	bic.w	r3, r3, #1
 801bee8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	681b      	ldr	r3, [r3, #0]
 801bef0:	3314      	adds	r3, #20
 801bef2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801bef6:	633a      	str	r2, [r7, #48]	; 0x30
 801bef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801befa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801befc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801befe:	e841 2300 	strex	r3, r2, [r1]
 801bf02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801bf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d1e3      	bne.n	801bed2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	2220      	movs	r2, #32
 801bf0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	2200      	movs	r2, #0
 801bf16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	681b      	ldr	r3, [r3, #0]
 801bf1c:	330c      	adds	r3, #12
 801bf1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf20:	693b      	ldr	r3, [r7, #16]
 801bf22:	e853 3f00 	ldrex	r3, [r3]
 801bf26:	60fb      	str	r3, [r7, #12]
   return(result);
 801bf28:	68fb      	ldr	r3, [r7, #12]
 801bf2a:	f023 0310 	bic.w	r3, r3, #16
 801bf2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	330c      	adds	r3, #12
 801bf38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801bf3c:	61fa      	str	r2, [r7, #28]
 801bf3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf40:	69b9      	ldr	r1, [r7, #24]
 801bf42:	69fa      	ldr	r2, [r7, #28]
 801bf44:	e841 2300 	strex	r3, r2, [r1]
 801bf48:	617b      	str	r3, [r7, #20]
   return(result);
 801bf4a:	697b      	ldr	r3, [r7, #20]
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d1e3      	bne.n	801bf18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801bf50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801bf54:	4619      	mov	r1, r3
 801bf56:	6878      	ldr	r0, [r7, #4]
 801bf58:	f7e5 f808 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801bf5c:	e023      	b.n	801bfa6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801bf5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bf62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d009      	beq.n	801bf7e <HAL_UART_IRQHandler+0x4ea>
 801bf6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bf6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d003      	beq.n	801bf7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801bf76:	6878      	ldr	r0, [r7, #4]
 801bf78:	f000 fae5 	bl	801c546 <UART_Transmit_IT>
    return;
 801bf7c:	e014      	b.n	801bfa8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801bf7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bf82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d00e      	beq.n	801bfa8 <HAL_UART_IRQHandler+0x514>
 801bf8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bf8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d008      	beq.n	801bfa8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801bf96:	6878      	ldr	r0, [r7, #4]
 801bf98:	f000 fb25 	bl	801c5e6 <UART_EndTransmit_IT>
    return;
 801bf9c:	e004      	b.n	801bfa8 <HAL_UART_IRQHandler+0x514>
    return;
 801bf9e:	bf00      	nop
 801bfa0:	e002      	b.n	801bfa8 <HAL_UART_IRQHandler+0x514>
      return;
 801bfa2:	bf00      	nop
 801bfa4:	e000      	b.n	801bfa8 <HAL_UART_IRQHandler+0x514>
      return;
 801bfa6:	bf00      	nop
  }
}
 801bfa8:	37e8      	adds	r7, #232	; 0xe8
 801bfaa:	46bd      	mov	sp, r7
 801bfac:	bd80      	pop	{r7, pc}
 801bfae:	bf00      	nop

0801bfb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801bfb0:	b480      	push	{r7}
 801bfb2:	b083      	sub	sp, #12
 801bfb4:	af00      	add	r7, sp, #0
 801bfb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801bfb8:	bf00      	nop
 801bfba:	370c      	adds	r7, #12
 801bfbc:	46bd      	mov	sp, r7
 801bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfc2:	4770      	bx	lr

0801bfc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801bfc4:	b480      	push	{r7}
 801bfc6:	b083      	sub	sp, #12
 801bfc8:	af00      	add	r7, sp, #0
 801bfca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801bfcc:	bf00      	nop
 801bfce:	370c      	adds	r7, #12
 801bfd0:	46bd      	mov	sp, r7
 801bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfd6:	4770      	bx	lr

0801bfd8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801bfd8:	b480      	push	{r7}
 801bfda:	b083      	sub	sp, #12
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801bfe0:	bf00      	nop
 801bfe2:	370c      	adds	r7, #12
 801bfe4:	46bd      	mov	sp, r7
 801bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfea:	4770      	bx	lr

0801bfec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801bfec:	b480      	push	{r7}
 801bfee:	b083      	sub	sp, #12
 801bff0:	af00      	add	r7, sp, #0
 801bff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801bff4:	bf00      	nop
 801bff6:	370c      	adds	r7, #12
 801bff8:	46bd      	mov	sp, r7
 801bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bffe:	4770      	bx	lr

0801c000 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801c000:	b580      	push	{r7, lr}
 801c002:	b09c      	sub	sp, #112	; 0x70
 801c004:	af00      	add	r7, sp, #0
 801c006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c00c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	681b      	ldr	r3, [r3, #0]
 801c012:	681b      	ldr	r3, [r3, #0]
 801c014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d172      	bne.n	801c102 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801c01c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c01e:	2200      	movs	r2, #0
 801c020:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	330c      	adds	r3, #12
 801c028:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c02a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c02c:	e853 3f00 	ldrex	r3, [r3]
 801c030:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c038:	66bb      	str	r3, [r7, #104]	; 0x68
 801c03a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c03c:	681b      	ldr	r3, [r3, #0]
 801c03e:	330c      	adds	r3, #12
 801c040:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c042:	65ba      	str	r2, [r7, #88]	; 0x58
 801c044:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c046:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c04a:	e841 2300 	strex	r3, r2, [r1]
 801c04e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c052:	2b00      	cmp	r3, #0
 801c054:	d1e5      	bne.n	801c022 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c058:	681b      	ldr	r3, [r3, #0]
 801c05a:	3314      	adds	r3, #20
 801c05c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c060:	e853 3f00 	ldrex	r3, [r3]
 801c064:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c068:	f023 0301 	bic.w	r3, r3, #1
 801c06c:	667b      	str	r3, [r7, #100]	; 0x64
 801c06e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c070:	681b      	ldr	r3, [r3, #0]
 801c072:	3314      	adds	r3, #20
 801c074:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c076:	647a      	str	r2, [r7, #68]	; 0x44
 801c078:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c07a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c07c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c07e:	e841 2300 	strex	r3, r2, [r1]
 801c082:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c086:	2b00      	cmp	r3, #0
 801c088:	d1e5      	bne.n	801c056 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c08a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	3314      	adds	r3, #20
 801c090:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c094:	e853 3f00 	ldrex	r3, [r3]
 801c098:	623b      	str	r3, [r7, #32]
   return(result);
 801c09a:	6a3b      	ldr	r3, [r7, #32]
 801c09c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c0a0:	663b      	str	r3, [r7, #96]	; 0x60
 801c0a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	3314      	adds	r3, #20
 801c0a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c0aa:	633a      	str	r2, [r7, #48]	; 0x30
 801c0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c0ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c0b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c0b2:	e841 2300 	strex	r3, r2, [r1]
 801c0b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d1e5      	bne.n	801c08a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801c0be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0c0:	2220      	movs	r2, #32
 801c0c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c0c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0ca:	2b01      	cmp	r3, #1
 801c0cc:	d119      	bne.n	801c102 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c0ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	330c      	adds	r3, #12
 801c0d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c0d6:	693b      	ldr	r3, [r7, #16]
 801c0d8:	e853 3f00 	ldrex	r3, [r3]
 801c0dc:	60fb      	str	r3, [r7, #12]
   return(result);
 801c0de:	68fb      	ldr	r3, [r7, #12]
 801c0e0:	f023 0310 	bic.w	r3, r3, #16
 801c0e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c0e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	330c      	adds	r3, #12
 801c0ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c0ee:	61fa      	str	r2, [r7, #28]
 801c0f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c0f2:	69b9      	ldr	r1, [r7, #24]
 801c0f4:	69fa      	ldr	r2, [r7, #28]
 801c0f6:	e841 2300 	strex	r3, r2, [r1]
 801c0fa:	617b      	str	r3, [r7, #20]
   return(result);
 801c0fc:	697b      	ldr	r3, [r7, #20]
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d1e5      	bne.n	801c0ce <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c106:	2b01      	cmp	r3, #1
 801c108:	d106      	bne.n	801c118 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c10a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c10c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c10e:	4619      	mov	r1, r3
 801c110:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c112:	f7e4 ff2b 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c116:	e002      	b.n	801c11e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801c118:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c11a:	f7ff ff53 	bl	801bfc4 <HAL_UART_RxCpltCallback>
}
 801c11e:	bf00      	nop
 801c120:	3770      	adds	r7, #112	; 0x70
 801c122:	46bd      	mov	sp, r7
 801c124:	bd80      	pop	{r7, pc}

0801c126 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c126:	b580      	push	{r7, lr}
 801c128:	b084      	sub	sp, #16
 801c12a:	af00      	add	r7, sp, #0
 801c12c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c132:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c134:	68fb      	ldr	r3, [r7, #12]
 801c136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c138:	2b01      	cmp	r3, #1
 801c13a:	d108      	bne.n	801c14e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801c13c:	68fb      	ldr	r3, [r7, #12]
 801c13e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c140:	085b      	lsrs	r3, r3, #1
 801c142:	b29b      	uxth	r3, r3
 801c144:	4619      	mov	r1, r3
 801c146:	68f8      	ldr	r0, [r7, #12]
 801c148:	f7e4 ff10 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c14c:	e002      	b.n	801c154 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801c14e:	68f8      	ldr	r0, [r7, #12]
 801c150:	f7ff ff42 	bl	801bfd8 <HAL_UART_RxHalfCpltCallback>
}
 801c154:	bf00      	nop
 801c156:	3710      	adds	r7, #16
 801c158:	46bd      	mov	sp, r7
 801c15a:	bd80      	pop	{r7, pc}

0801c15c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c15c:	b580      	push	{r7, lr}
 801c15e:	b084      	sub	sp, #16
 801c160:	af00      	add	r7, sp, #0
 801c162:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801c164:	2300      	movs	r3, #0
 801c166:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c16c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801c16e:	68bb      	ldr	r3, [r7, #8]
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	695b      	ldr	r3, [r3, #20]
 801c174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c178:	2b80      	cmp	r3, #128	; 0x80
 801c17a:	bf0c      	ite	eq
 801c17c:	2301      	moveq	r3, #1
 801c17e:	2300      	movne	r3, #0
 801c180:	b2db      	uxtb	r3, r3
 801c182:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801c184:	68bb      	ldr	r3, [r7, #8]
 801c186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c18a:	b2db      	uxtb	r3, r3
 801c18c:	2b21      	cmp	r3, #33	; 0x21
 801c18e:	d108      	bne.n	801c1a2 <UART_DMAError+0x46>
 801c190:	68fb      	ldr	r3, [r7, #12]
 801c192:	2b00      	cmp	r3, #0
 801c194:	d005      	beq.n	801c1a2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801c196:	68bb      	ldr	r3, [r7, #8]
 801c198:	2200      	movs	r2, #0
 801c19a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801c19c:	68b8      	ldr	r0, [r7, #8]
 801c19e:	f000 f933 	bl	801c408 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801c1a2:	68bb      	ldr	r3, [r7, #8]
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	695b      	ldr	r3, [r3, #20]
 801c1a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c1ac:	2b40      	cmp	r3, #64	; 0x40
 801c1ae:	bf0c      	ite	eq
 801c1b0:	2301      	moveq	r3, #1
 801c1b2:	2300      	movne	r3, #0
 801c1b4:	b2db      	uxtb	r3, r3
 801c1b6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801c1b8:	68bb      	ldr	r3, [r7, #8]
 801c1ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c1be:	b2db      	uxtb	r3, r3
 801c1c0:	2b22      	cmp	r3, #34	; 0x22
 801c1c2:	d108      	bne.n	801c1d6 <UART_DMAError+0x7a>
 801c1c4:	68fb      	ldr	r3, [r7, #12]
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d005      	beq.n	801c1d6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801c1ca:	68bb      	ldr	r3, [r7, #8]
 801c1cc:	2200      	movs	r2, #0
 801c1ce:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801c1d0:	68b8      	ldr	r0, [r7, #8]
 801c1d2:	f000 f941 	bl	801c458 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c1d6:	68bb      	ldr	r3, [r7, #8]
 801c1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1da:	f043 0210 	orr.w	r2, r3, #16
 801c1de:	68bb      	ldr	r3, [r7, #8]
 801c1e0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c1e2:	68b8      	ldr	r0, [r7, #8]
 801c1e4:	f7ff ff02 	bl	801bfec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c1e8:	bf00      	nop
 801c1ea:	3710      	adds	r7, #16
 801c1ec:	46bd      	mov	sp, r7
 801c1ee:	bd80      	pop	{r7, pc}

0801c1f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801c1f0:	b580      	push	{r7, lr}
 801c1f2:	b090      	sub	sp, #64	; 0x40
 801c1f4:	af00      	add	r7, sp, #0
 801c1f6:	60f8      	str	r0, [r7, #12]
 801c1f8:	60b9      	str	r1, [r7, #8]
 801c1fa:	603b      	str	r3, [r7, #0]
 801c1fc:	4613      	mov	r3, r2
 801c1fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c200:	e050      	b.n	801c2a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c204:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c208:	d04c      	beq.n	801c2a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801c20a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d007      	beq.n	801c220 <UART_WaitOnFlagUntilTimeout+0x30>
 801c210:	f7fa f8c8 	bl	80163a4 <HAL_GetTick>
 801c214:	4602      	mov	r2, r0
 801c216:	683b      	ldr	r3, [r7, #0]
 801c218:	1ad3      	subs	r3, r2, r3
 801c21a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c21c:	429a      	cmp	r2, r3
 801c21e:	d241      	bcs.n	801c2a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	330c      	adds	r3, #12
 801c226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c22a:	e853 3f00 	ldrex	r3, [r3]
 801c22e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c232:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c236:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c238:	68fb      	ldr	r3, [r7, #12]
 801c23a:	681b      	ldr	r3, [r3, #0]
 801c23c:	330c      	adds	r3, #12
 801c23e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c240:	637a      	str	r2, [r7, #52]	; 0x34
 801c242:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c244:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c248:	e841 2300 	strex	r3, r2, [r1]
 801c24c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c250:	2b00      	cmp	r3, #0
 801c252:	d1e5      	bne.n	801c220 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c254:	68fb      	ldr	r3, [r7, #12]
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	3314      	adds	r3, #20
 801c25a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c25c:	697b      	ldr	r3, [r7, #20]
 801c25e:	e853 3f00 	ldrex	r3, [r3]
 801c262:	613b      	str	r3, [r7, #16]
   return(result);
 801c264:	693b      	ldr	r3, [r7, #16]
 801c266:	f023 0301 	bic.w	r3, r3, #1
 801c26a:	63bb      	str	r3, [r7, #56]	; 0x38
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	681b      	ldr	r3, [r3, #0]
 801c270:	3314      	adds	r3, #20
 801c272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c274:	623a      	str	r2, [r7, #32]
 801c276:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c278:	69f9      	ldr	r1, [r7, #28]
 801c27a:	6a3a      	ldr	r2, [r7, #32]
 801c27c:	e841 2300 	strex	r3, r2, [r1]
 801c280:	61bb      	str	r3, [r7, #24]
   return(result);
 801c282:	69bb      	ldr	r3, [r7, #24]
 801c284:	2b00      	cmp	r3, #0
 801c286:	d1e5      	bne.n	801c254 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801c288:	68fb      	ldr	r3, [r7, #12]
 801c28a:	2220      	movs	r2, #32
 801c28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801c290:	68fb      	ldr	r3, [r7, #12]
 801c292:	2220      	movs	r2, #32
 801c294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801c298:	68fb      	ldr	r3, [r7, #12]
 801c29a:	2200      	movs	r2, #0
 801c29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801c2a0:	2303      	movs	r3, #3
 801c2a2:	e00f      	b.n	801c2c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	681a      	ldr	r2, [r3, #0]
 801c2aa:	68bb      	ldr	r3, [r7, #8]
 801c2ac:	4013      	ands	r3, r2
 801c2ae:	68ba      	ldr	r2, [r7, #8]
 801c2b0:	429a      	cmp	r2, r3
 801c2b2:	bf0c      	ite	eq
 801c2b4:	2301      	moveq	r3, #1
 801c2b6:	2300      	movne	r3, #0
 801c2b8:	b2db      	uxtb	r3, r3
 801c2ba:	461a      	mov	r2, r3
 801c2bc:	79fb      	ldrb	r3, [r7, #7]
 801c2be:	429a      	cmp	r2, r3
 801c2c0:	d09f      	beq.n	801c202 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c2c2:	2300      	movs	r3, #0
}
 801c2c4:	4618      	mov	r0, r3
 801c2c6:	3740      	adds	r7, #64	; 0x40
 801c2c8:	46bd      	mov	sp, r7
 801c2ca:	bd80      	pop	{r7, pc}

0801c2cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b098      	sub	sp, #96	; 0x60
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	60f8      	str	r0, [r7, #12]
 801c2d4:	60b9      	str	r1, [r7, #8]
 801c2d6:	4613      	mov	r3, r2
 801c2d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801c2da:	68ba      	ldr	r2, [r7, #8]
 801c2dc:	68fb      	ldr	r3, [r7, #12]
 801c2de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	88fa      	ldrh	r2, [r7, #6]
 801c2e4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	2200      	movs	r2, #0
 801c2ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	2222      	movs	r2, #34	; 0x22
 801c2f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2f8:	4a40      	ldr	r2, [pc, #256]	; (801c3fc <UART_Start_Receive_DMA+0x130>)
 801c2fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801c2fc:	68fb      	ldr	r3, [r7, #12]
 801c2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c300:	4a3f      	ldr	r2, [pc, #252]	; (801c400 <UART_Start_Receive_DMA+0x134>)
 801c302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801c304:	68fb      	ldr	r3, [r7, #12]
 801c306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c308:	4a3e      	ldr	r2, [pc, #248]	; (801c404 <UART_Start_Receive_DMA+0x138>)
 801c30a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801c30c:	68fb      	ldr	r3, [r7, #12]
 801c30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c310:	2200      	movs	r2, #0
 801c312:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801c314:	f107 0308 	add.w	r3, r7, #8
 801c318:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801c31a:	68fb      	ldr	r3, [r7, #12]
 801c31c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c31e:	68fb      	ldr	r3, [r7, #12]
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	3304      	adds	r3, #4
 801c324:	4619      	mov	r1, r3
 801c326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c328:	681a      	ldr	r2, [r3, #0]
 801c32a:	88fb      	ldrh	r3, [r7, #6]
 801c32c:	f7fa fa2a 	bl	8016784 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801c330:	2300      	movs	r3, #0
 801c332:	613b      	str	r3, [r7, #16]
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	681b      	ldr	r3, [r3, #0]
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	613b      	str	r3, [r7, #16]
 801c33c:	68fb      	ldr	r3, [r7, #12]
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	685b      	ldr	r3, [r3, #4]
 801c342:	613b      	str	r3, [r7, #16]
 801c344:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801c346:	68fb      	ldr	r3, [r7, #12]
 801c348:	2200      	movs	r2, #0
 801c34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801c34e:	68fb      	ldr	r3, [r7, #12]
 801c350:	691b      	ldr	r3, [r3, #16]
 801c352:	2b00      	cmp	r3, #0
 801c354:	d019      	beq.n	801c38a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c356:	68fb      	ldr	r3, [r7, #12]
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	330c      	adds	r3, #12
 801c35c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c360:	e853 3f00 	ldrex	r3, [r3]
 801c364:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c36c:	65bb      	str	r3, [r7, #88]	; 0x58
 801c36e:	68fb      	ldr	r3, [r7, #12]
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	330c      	adds	r3, #12
 801c374:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c376:	64fa      	str	r2, [r7, #76]	; 0x4c
 801c378:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c37a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801c37c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c37e:	e841 2300 	strex	r3, r2, [r1]
 801c382:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801c384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c386:	2b00      	cmp	r3, #0
 801c388:	d1e5      	bne.n	801c356 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c38a:	68fb      	ldr	r3, [r7, #12]
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	3314      	adds	r3, #20
 801c390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c394:	e853 3f00 	ldrex	r3, [r3]
 801c398:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c39c:	f043 0301 	orr.w	r3, r3, #1
 801c3a0:	657b      	str	r3, [r7, #84]	; 0x54
 801c3a2:	68fb      	ldr	r3, [r7, #12]
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	3314      	adds	r3, #20
 801c3a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c3aa:	63ba      	str	r2, [r7, #56]	; 0x38
 801c3ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c3b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c3b2:	e841 2300 	strex	r3, r2, [r1]
 801c3b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d1e5      	bne.n	801c38a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	3314      	adds	r3, #20
 801c3c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c3c6:	69bb      	ldr	r3, [r7, #24]
 801c3c8:	e853 3f00 	ldrex	r3, [r3]
 801c3cc:	617b      	str	r3, [r7, #20]
   return(result);
 801c3ce:	697b      	ldr	r3, [r7, #20]
 801c3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c3d4:	653b      	str	r3, [r7, #80]	; 0x50
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	3314      	adds	r3, #20
 801c3dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c3de:	627a      	str	r2, [r7, #36]	; 0x24
 801c3e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3e2:	6a39      	ldr	r1, [r7, #32]
 801c3e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c3e6:	e841 2300 	strex	r3, r2, [r1]
 801c3ea:	61fb      	str	r3, [r7, #28]
   return(result);
 801c3ec:	69fb      	ldr	r3, [r7, #28]
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d1e5      	bne.n	801c3be <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 801c3f2:	2300      	movs	r3, #0
}
 801c3f4:	4618      	mov	r0, r3
 801c3f6:	3760      	adds	r7, #96	; 0x60
 801c3f8:	46bd      	mov	sp, r7
 801c3fa:	bd80      	pop	{r7, pc}
 801c3fc:	0801c001 	.word	0x0801c001
 801c400:	0801c127 	.word	0x0801c127
 801c404:	0801c15d 	.word	0x0801c15d

0801c408 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c408:	b480      	push	{r7}
 801c40a:	b089      	sub	sp, #36	; 0x24
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	330c      	adds	r3, #12
 801c416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c418:	68fb      	ldr	r3, [r7, #12]
 801c41a:	e853 3f00 	ldrex	r3, [r3]
 801c41e:	60bb      	str	r3, [r7, #8]
   return(result);
 801c420:	68bb      	ldr	r3, [r7, #8]
 801c422:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801c426:	61fb      	str	r3, [r7, #28]
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	681b      	ldr	r3, [r3, #0]
 801c42c:	330c      	adds	r3, #12
 801c42e:	69fa      	ldr	r2, [r7, #28]
 801c430:	61ba      	str	r2, [r7, #24]
 801c432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c434:	6979      	ldr	r1, [r7, #20]
 801c436:	69ba      	ldr	r2, [r7, #24]
 801c438:	e841 2300 	strex	r3, r2, [r1]
 801c43c:	613b      	str	r3, [r7, #16]
   return(result);
 801c43e:	693b      	ldr	r3, [r7, #16]
 801c440:	2b00      	cmp	r3, #0
 801c442:	d1e5      	bne.n	801c410 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	2220      	movs	r2, #32
 801c448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801c44c:	bf00      	nop
 801c44e:	3724      	adds	r7, #36	; 0x24
 801c450:	46bd      	mov	sp, r7
 801c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c456:	4770      	bx	lr

0801c458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c458:	b480      	push	{r7}
 801c45a:	b095      	sub	sp, #84	; 0x54
 801c45c:	af00      	add	r7, sp, #0
 801c45e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	330c      	adds	r3, #12
 801c466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c46a:	e853 3f00 	ldrex	r3, [r3]
 801c46e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c476:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	330c      	adds	r3, #12
 801c47e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c480:	643a      	str	r2, [r7, #64]	; 0x40
 801c482:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c488:	e841 2300 	strex	r3, r2, [r1]
 801c48c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c490:	2b00      	cmp	r3, #0
 801c492:	d1e5      	bne.n	801c460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	3314      	adds	r3, #20
 801c49a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c49c:	6a3b      	ldr	r3, [r7, #32]
 801c49e:	e853 3f00 	ldrex	r3, [r3]
 801c4a2:	61fb      	str	r3, [r7, #28]
   return(result);
 801c4a4:	69fb      	ldr	r3, [r7, #28]
 801c4a6:	f023 0301 	bic.w	r3, r3, #1
 801c4aa:	64bb      	str	r3, [r7, #72]	; 0x48
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	3314      	adds	r3, #20
 801c4b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c4b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c4b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c4ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c4bc:	e841 2300 	strex	r3, r2, [r1]
 801c4c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d1e5      	bne.n	801c494 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c4cc:	2b01      	cmp	r3, #1
 801c4ce:	d119      	bne.n	801c504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	330c      	adds	r3, #12
 801c4d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4d8:	68fb      	ldr	r3, [r7, #12]
 801c4da:	e853 3f00 	ldrex	r3, [r3]
 801c4de:	60bb      	str	r3, [r7, #8]
   return(result);
 801c4e0:	68bb      	ldr	r3, [r7, #8]
 801c4e2:	f023 0310 	bic.w	r3, r3, #16
 801c4e6:	647b      	str	r3, [r7, #68]	; 0x44
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	330c      	adds	r3, #12
 801c4ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c4f0:	61ba      	str	r2, [r7, #24]
 801c4f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4f4:	6979      	ldr	r1, [r7, #20]
 801c4f6:	69ba      	ldr	r2, [r7, #24]
 801c4f8:	e841 2300 	strex	r3, r2, [r1]
 801c4fc:	613b      	str	r3, [r7, #16]
   return(result);
 801c4fe:	693b      	ldr	r3, [r7, #16]
 801c500:	2b00      	cmp	r3, #0
 801c502:	d1e5      	bne.n	801c4d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	2220      	movs	r2, #32
 801c508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	2200      	movs	r2, #0
 801c510:	631a      	str	r2, [r3, #48]	; 0x30
}
 801c512:	bf00      	nop
 801c514:	3754      	adds	r7, #84	; 0x54
 801c516:	46bd      	mov	sp, r7
 801c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c51c:	4770      	bx	lr

0801c51e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c51e:	b580      	push	{r7, lr}
 801c520:	b084      	sub	sp, #16
 801c522:	af00      	add	r7, sp, #0
 801c524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c52a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	2200      	movs	r2, #0
 801c530:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801c532:	68fb      	ldr	r3, [r7, #12]
 801c534:	2200      	movs	r2, #0
 801c536:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c538:	68f8      	ldr	r0, [r7, #12]
 801c53a:	f7ff fd57 	bl	801bfec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c53e:	bf00      	nop
 801c540:	3710      	adds	r7, #16
 801c542:	46bd      	mov	sp, r7
 801c544:	bd80      	pop	{r7, pc}

0801c546 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801c546:	b480      	push	{r7}
 801c548:	b085      	sub	sp, #20
 801c54a:	af00      	add	r7, sp, #0
 801c54c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c554:	b2db      	uxtb	r3, r3
 801c556:	2b21      	cmp	r3, #33	; 0x21
 801c558:	d13e      	bne.n	801c5d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	689b      	ldr	r3, [r3, #8]
 801c55e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c562:	d114      	bne.n	801c58e <UART_Transmit_IT+0x48>
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	691b      	ldr	r3, [r3, #16]
 801c568:	2b00      	cmp	r3, #0
 801c56a:	d110      	bne.n	801c58e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	6a1b      	ldr	r3, [r3, #32]
 801c570:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801c572:	68fb      	ldr	r3, [r7, #12]
 801c574:	881b      	ldrh	r3, [r3, #0]
 801c576:	461a      	mov	r2, r3
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c580:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	6a1b      	ldr	r3, [r3, #32]
 801c586:	1c9a      	adds	r2, r3, #2
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	621a      	str	r2, [r3, #32]
 801c58c:	e008      	b.n	801c5a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	6a1b      	ldr	r3, [r3, #32]
 801c592:	1c59      	adds	r1, r3, #1
 801c594:	687a      	ldr	r2, [r7, #4]
 801c596:	6211      	str	r1, [r2, #32]
 801c598:	781a      	ldrb	r2, [r3, #0]
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c5a4:	b29b      	uxth	r3, r3
 801c5a6:	3b01      	subs	r3, #1
 801c5a8:	b29b      	uxth	r3, r3
 801c5aa:	687a      	ldr	r2, [r7, #4]
 801c5ac:	4619      	mov	r1, r3
 801c5ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d10f      	bne.n	801c5d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	68da      	ldr	r2, [r3, #12]
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	681b      	ldr	r3, [r3, #0]
 801c5be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c5c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	68da      	ldr	r2, [r3, #12]
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c5d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	e000      	b.n	801c5da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801c5d8:	2302      	movs	r3, #2
  }
}
 801c5da:	4618      	mov	r0, r3
 801c5dc:	3714      	adds	r7, #20
 801c5de:	46bd      	mov	sp, r7
 801c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5e4:	4770      	bx	lr

0801c5e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c5e6:	b580      	push	{r7, lr}
 801c5e8:	b082      	sub	sp, #8
 801c5ea:	af00      	add	r7, sp, #0
 801c5ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	68da      	ldr	r2, [r3, #12]
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c5fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	2220      	movs	r2, #32
 801c602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801c606:	6878      	ldr	r0, [r7, #4]
 801c608:	f7ff fcd2 	bl	801bfb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801c60c:	2300      	movs	r3, #0
}
 801c60e:	4618      	mov	r0, r3
 801c610:	3708      	adds	r7, #8
 801c612:	46bd      	mov	sp, r7
 801c614:	bd80      	pop	{r7, pc}

0801c616 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801c616:	b580      	push	{r7, lr}
 801c618:	b08c      	sub	sp, #48	; 0x30
 801c61a:	af00      	add	r7, sp, #0
 801c61c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c624:	b2db      	uxtb	r3, r3
 801c626:	2b22      	cmp	r3, #34	; 0x22
 801c628:	f040 80ab 	bne.w	801c782 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	689b      	ldr	r3, [r3, #8]
 801c630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c634:	d117      	bne.n	801c666 <UART_Receive_IT+0x50>
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	691b      	ldr	r3, [r3, #16]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d113      	bne.n	801c666 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801c63e:	2300      	movs	r3, #0
 801c640:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c646:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	685b      	ldr	r3, [r3, #4]
 801c64e:	b29b      	uxth	r3, r3
 801c650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c654:	b29a      	uxth	r2, r3
 801c656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c658:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c65e:	1c9a      	adds	r2, r3, #2
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	629a      	str	r2, [r3, #40]	; 0x28
 801c664:	e026      	b.n	801c6b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c66a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801c66c:	2300      	movs	r3, #0
 801c66e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	689b      	ldr	r3, [r3, #8]
 801c674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c678:	d007      	beq.n	801c68a <UART_Receive_IT+0x74>
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	689b      	ldr	r3, [r3, #8]
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d10a      	bne.n	801c698 <UART_Receive_IT+0x82>
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	691b      	ldr	r3, [r3, #16]
 801c686:	2b00      	cmp	r3, #0
 801c688:	d106      	bne.n	801c698 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	685b      	ldr	r3, [r3, #4]
 801c690:	b2da      	uxtb	r2, r3
 801c692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c694:	701a      	strb	r2, [r3, #0]
 801c696:	e008      	b.n	801c6aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	685b      	ldr	r3, [r3, #4]
 801c69e:	b2db      	uxtb	r3, r3
 801c6a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c6a4:	b2da      	uxtb	r2, r3
 801c6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6ae:	1c5a      	adds	r2, r3, #1
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c6b8:	b29b      	uxth	r3, r3
 801c6ba:	3b01      	subs	r3, #1
 801c6bc:	b29b      	uxth	r3, r3
 801c6be:	687a      	ldr	r2, [r7, #4]
 801c6c0:	4619      	mov	r1, r3
 801c6c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d15a      	bne.n	801c77e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	68da      	ldr	r2, [r3, #12]
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	f022 0220 	bic.w	r2, r2, #32
 801c6d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	68da      	ldr	r2, [r3, #12]
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	681b      	ldr	r3, [r3, #0]
 801c6e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c6e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	695a      	ldr	r2, [r3, #20]
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	681b      	ldr	r3, [r3, #0]
 801c6f2:	f022 0201 	bic.w	r2, r2, #1
 801c6f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	2220      	movs	r2, #32
 801c6fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c704:	2b01      	cmp	r3, #1
 801c706:	d135      	bne.n	801c774 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	2200      	movs	r2, #0
 801c70c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	681b      	ldr	r3, [r3, #0]
 801c712:	330c      	adds	r3, #12
 801c714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c716:	697b      	ldr	r3, [r7, #20]
 801c718:	e853 3f00 	ldrex	r3, [r3]
 801c71c:	613b      	str	r3, [r7, #16]
   return(result);
 801c71e:	693b      	ldr	r3, [r7, #16]
 801c720:	f023 0310 	bic.w	r3, r3, #16
 801c724:	627b      	str	r3, [r7, #36]	; 0x24
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	330c      	adds	r3, #12
 801c72c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c72e:	623a      	str	r2, [r7, #32]
 801c730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c732:	69f9      	ldr	r1, [r7, #28]
 801c734:	6a3a      	ldr	r2, [r7, #32]
 801c736:	e841 2300 	strex	r3, r2, [r1]
 801c73a:	61bb      	str	r3, [r7, #24]
   return(result);
 801c73c:	69bb      	ldr	r3, [r7, #24]
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d1e5      	bne.n	801c70e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	681b      	ldr	r3, [r3, #0]
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	f003 0310 	and.w	r3, r3, #16
 801c74c:	2b10      	cmp	r3, #16
 801c74e:	d10a      	bne.n	801c766 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801c750:	2300      	movs	r3, #0
 801c752:	60fb      	str	r3, [r7, #12]
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	60fb      	str	r3, [r7, #12]
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	685b      	ldr	r3, [r3, #4]
 801c762:	60fb      	str	r3, [r7, #12]
 801c764:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c76a:	4619      	mov	r1, r3
 801c76c:	6878      	ldr	r0, [r7, #4]
 801c76e:	f7e4 fbfd 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
 801c772:	e002      	b.n	801c77a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801c774:	6878      	ldr	r0, [r7, #4]
 801c776:	f7ff fc25 	bl	801bfc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801c77a:	2300      	movs	r3, #0
 801c77c:	e002      	b.n	801c784 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801c77e:	2300      	movs	r3, #0
 801c780:	e000      	b.n	801c784 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801c782:	2302      	movs	r3, #2
  }
}
 801c784:	4618      	mov	r0, r3
 801c786:	3730      	adds	r7, #48	; 0x30
 801c788:	46bd      	mov	sp, r7
 801c78a:	bd80      	pop	{r7, pc}

0801c78c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801c78c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c790:	b0c0      	sub	sp, #256	; 0x100
 801c792:	af00      	add	r7, sp, #0
 801c794:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801c798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	691b      	ldr	r3, [r3, #16]
 801c7a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801c7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c7a8:	68d9      	ldr	r1, [r3, #12]
 801c7aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c7ae:	681a      	ldr	r2, [r3, #0]
 801c7b0:	ea40 0301 	orr.w	r3, r0, r1
 801c7b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801c7b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c7ba:	689a      	ldr	r2, [r3, #8]
 801c7bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c7c0:	691b      	ldr	r3, [r3, #16]
 801c7c2:	431a      	orrs	r2, r3
 801c7c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c7c8:	695b      	ldr	r3, [r3, #20]
 801c7ca:	431a      	orrs	r2, r3
 801c7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c7d0:	69db      	ldr	r3, [r3, #28]
 801c7d2:	4313      	orrs	r3, r2
 801c7d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801c7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	68db      	ldr	r3, [r3, #12]
 801c7e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801c7e4:	f021 010c 	bic.w	r1, r1, #12
 801c7e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c7ec:	681a      	ldr	r2, [r3, #0]
 801c7ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801c7f2:	430b      	orrs	r3, r1
 801c7f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801c7f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	695b      	ldr	r3, [r3, #20]
 801c7fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801c802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c806:	6999      	ldr	r1, [r3, #24]
 801c808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c80c:	681a      	ldr	r2, [r3, #0]
 801c80e:	ea40 0301 	orr.w	r3, r0, r1
 801c812:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801c814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c818:	681a      	ldr	r2, [r3, #0]
 801c81a:	4b8f      	ldr	r3, [pc, #572]	; (801ca58 <UART_SetConfig+0x2cc>)
 801c81c:	429a      	cmp	r2, r3
 801c81e:	d005      	beq.n	801c82c <UART_SetConfig+0xa0>
 801c820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c824:	681a      	ldr	r2, [r3, #0]
 801c826:	4b8d      	ldr	r3, [pc, #564]	; (801ca5c <UART_SetConfig+0x2d0>)
 801c828:	429a      	cmp	r2, r3
 801c82a:	d104      	bne.n	801c836 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801c82c:	f7fd ffbc 	bl	801a7a8 <HAL_RCC_GetPCLK2Freq>
 801c830:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801c834:	e003      	b.n	801c83e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801c836:	f7fd ffa3 	bl	801a780 <HAL_RCC_GetPCLK1Freq>
 801c83a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c83e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c842:	69db      	ldr	r3, [r3, #28]
 801c844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c848:	f040 810c 	bne.w	801ca64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801c84c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c850:	2200      	movs	r2, #0
 801c852:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801c856:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801c85a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801c85e:	4622      	mov	r2, r4
 801c860:	462b      	mov	r3, r5
 801c862:	1891      	adds	r1, r2, r2
 801c864:	65b9      	str	r1, [r7, #88]	; 0x58
 801c866:	415b      	adcs	r3, r3
 801c868:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c86a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801c86e:	4621      	mov	r1, r4
 801c870:	eb12 0801 	adds.w	r8, r2, r1
 801c874:	4629      	mov	r1, r5
 801c876:	eb43 0901 	adc.w	r9, r3, r1
 801c87a:	f04f 0200 	mov.w	r2, #0
 801c87e:	f04f 0300 	mov.w	r3, #0
 801c882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801c886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801c88a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801c88e:	4690      	mov	r8, r2
 801c890:	4699      	mov	r9, r3
 801c892:	4623      	mov	r3, r4
 801c894:	eb18 0303 	adds.w	r3, r8, r3
 801c898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c89c:	462b      	mov	r3, r5
 801c89e:	eb49 0303 	adc.w	r3, r9, r3
 801c8a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801c8a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8aa:	685b      	ldr	r3, [r3, #4]
 801c8ac:	2200      	movs	r2, #0
 801c8ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801c8b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c8b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801c8ba:	460b      	mov	r3, r1
 801c8bc:	18db      	adds	r3, r3, r3
 801c8be:	653b      	str	r3, [r7, #80]	; 0x50
 801c8c0:	4613      	mov	r3, r2
 801c8c2:	eb42 0303 	adc.w	r3, r2, r3
 801c8c6:	657b      	str	r3, [r7, #84]	; 0x54
 801c8c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801c8cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c8d0:	f7e4 f992 	bl	8000bf8 <__aeabi_uldivmod>
 801c8d4:	4602      	mov	r2, r0
 801c8d6:	460b      	mov	r3, r1
 801c8d8:	4b61      	ldr	r3, [pc, #388]	; (801ca60 <UART_SetConfig+0x2d4>)
 801c8da:	fba3 2302 	umull	r2, r3, r3, r2
 801c8de:	095b      	lsrs	r3, r3, #5
 801c8e0:	011c      	lsls	r4, r3, #4
 801c8e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c8e6:	2200      	movs	r2, #0
 801c8e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c8ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801c8f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801c8f4:	4642      	mov	r2, r8
 801c8f6:	464b      	mov	r3, r9
 801c8f8:	1891      	adds	r1, r2, r2
 801c8fa:	64b9      	str	r1, [r7, #72]	; 0x48
 801c8fc:	415b      	adcs	r3, r3
 801c8fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c900:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801c904:	4641      	mov	r1, r8
 801c906:	eb12 0a01 	adds.w	sl, r2, r1
 801c90a:	4649      	mov	r1, r9
 801c90c:	eb43 0b01 	adc.w	fp, r3, r1
 801c910:	f04f 0200 	mov.w	r2, #0
 801c914:	f04f 0300 	mov.w	r3, #0
 801c918:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801c91c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801c920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801c924:	4692      	mov	sl, r2
 801c926:	469b      	mov	fp, r3
 801c928:	4643      	mov	r3, r8
 801c92a:	eb1a 0303 	adds.w	r3, sl, r3
 801c92e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c932:	464b      	mov	r3, r9
 801c934:	eb4b 0303 	adc.w	r3, fp, r3
 801c938:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c93c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c940:	685b      	ldr	r3, [r3, #4]
 801c942:	2200      	movs	r2, #0
 801c944:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c948:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801c94c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801c950:	460b      	mov	r3, r1
 801c952:	18db      	adds	r3, r3, r3
 801c954:	643b      	str	r3, [r7, #64]	; 0x40
 801c956:	4613      	mov	r3, r2
 801c958:	eb42 0303 	adc.w	r3, r2, r3
 801c95c:	647b      	str	r3, [r7, #68]	; 0x44
 801c95e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c962:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801c966:	f7e4 f947 	bl	8000bf8 <__aeabi_uldivmod>
 801c96a:	4602      	mov	r2, r0
 801c96c:	460b      	mov	r3, r1
 801c96e:	4611      	mov	r1, r2
 801c970:	4b3b      	ldr	r3, [pc, #236]	; (801ca60 <UART_SetConfig+0x2d4>)
 801c972:	fba3 2301 	umull	r2, r3, r3, r1
 801c976:	095b      	lsrs	r3, r3, #5
 801c978:	2264      	movs	r2, #100	; 0x64
 801c97a:	fb02 f303 	mul.w	r3, r2, r3
 801c97e:	1acb      	subs	r3, r1, r3
 801c980:	00db      	lsls	r3, r3, #3
 801c982:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801c986:	4b36      	ldr	r3, [pc, #216]	; (801ca60 <UART_SetConfig+0x2d4>)
 801c988:	fba3 2302 	umull	r2, r3, r3, r2
 801c98c:	095b      	lsrs	r3, r3, #5
 801c98e:	005b      	lsls	r3, r3, #1
 801c990:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801c994:	441c      	add	r4, r3
 801c996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c99a:	2200      	movs	r2, #0
 801c99c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c9a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801c9a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801c9a8:	4642      	mov	r2, r8
 801c9aa:	464b      	mov	r3, r9
 801c9ac:	1891      	adds	r1, r2, r2
 801c9ae:	63b9      	str	r1, [r7, #56]	; 0x38
 801c9b0:	415b      	adcs	r3, r3
 801c9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c9b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801c9b8:	4641      	mov	r1, r8
 801c9ba:	1851      	adds	r1, r2, r1
 801c9bc:	6339      	str	r1, [r7, #48]	; 0x30
 801c9be:	4649      	mov	r1, r9
 801c9c0:	414b      	adcs	r3, r1
 801c9c2:	637b      	str	r3, [r7, #52]	; 0x34
 801c9c4:	f04f 0200 	mov.w	r2, #0
 801c9c8:	f04f 0300 	mov.w	r3, #0
 801c9cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801c9d0:	4659      	mov	r1, fp
 801c9d2:	00cb      	lsls	r3, r1, #3
 801c9d4:	4651      	mov	r1, sl
 801c9d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801c9da:	4651      	mov	r1, sl
 801c9dc:	00ca      	lsls	r2, r1, #3
 801c9de:	4610      	mov	r0, r2
 801c9e0:	4619      	mov	r1, r3
 801c9e2:	4603      	mov	r3, r0
 801c9e4:	4642      	mov	r2, r8
 801c9e6:	189b      	adds	r3, r3, r2
 801c9e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c9ec:	464b      	mov	r3, r9
 801c9ee:	460a      	mov	r2, r1
 801c9f0:	eb42 0303 	adc.w	r3, r2, r3
 801c9f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c9f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c9fc:	685b      	ldr	r3, [r3, #4]
 801c9fe:	2200      	movs	r2, #0
 801ca00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801ca04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801ca08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801ca0c:	460b      	mov	r3, r1
 801ca0e:	18db      	adds	r3, r3, r3
 801ca10:	62bb      	str	r3, [r7, #40]	; 0x28
 801ca12:	4613      	mov	r3, r2
 801ca14:	eb42 0303 	adc.w	r3, r2, r3
 801ca18:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ca1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801ca1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801ca22:	f7e4 f8e9 	bl	8000bf8 <__aeabi_uldivmod>
 801ca26:	4602      	mov	r2, r0
 801ca28:	460b      	mov	r3, r1
 801ca2a:	4b0d      	ldr	r3, [pc, #52]	; (801ca60 <UART_SetConfig+0x2d4>)
 801ca2c:	fba3 1302 	umull	r1, r3, r3, r2
 801ca30:	095b      	lsrs	r3, r3, #5
 801ca32:	2164      	movs	r1, #100	; 0x64
 801ca34:	fb01 f303 	mul.w	r3, r1, r3
 801ca38:	1ad3      	subs	r3, r2, r3
 801ca3a:	00db      	lsls	r3, r3, #3
 801ca3c:	3332      	adds	r3, #50	; 0x32
 801ca3e:	4a08      	ldr	r2, [pc, #32]	; (801ca60 <UART_SetConfig+0x2d4>)
 801ca40:	fba2 2303 	umull	r2, r3, r2, r3
 801ca44:	095b      	lsrs	r3, r3, #5
 801ca46:	f003 0207 	and.w	r2, r3, #7
 801ca4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	4422      	add	r2, r4
 801ca52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801ca54:	e105      	b.n	801cc62 <UART_SetConfig+0x4d6>
 801ca56:	bf00      	nop
 801ca58:	40011000 	.word	0x40011000
 801ca5c:	40011400 	.word	0x40011400
 801ca60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801ca64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ca68:	2200      	movs	r2, #0
 801ca6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801ca6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801ca72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801ca76:	4642      	mov	r2, r8
 801ca78:	464b      	mov	r3, r9
 801ca7a:	1891      	adds	r1, r2, r2
 801ca7c:	6239      	str	r1, [r7, #32]
 801ca7e:	415b      	adcs	r3, r3
 801ca80:	627b      	str	r3, [r7, #36]	; 0x24
 801ca82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801ca86:	4641      	mov	r1, r8
 801ca88:	1854      	adds	r4, r2, r1
 801ca8a:	4649      	mov	r1, r9
 801ca8c:	eb43 0501 	adc.w	r5, r3, r1
 801ca90:	f04f 0200 	mov.w	r2, #0
 801ca94:	f04f 0300 	mov.w	r3, #0
 801ca98:	00eb      	lsls	r3, r5, #3
 801ca9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801ca9e:	00e2      	lsls	r2, r4, #3
 801caa0:	4614      	mov	r4, r2
 801caa2:	461d      	mov	r5, r3
 801caa4:	4643      	mov	r3, r8
 801caa6:	18e3      	adds	r3, r4, r3
 801caa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801caac:	464b      	mov	r3, r9
 801caae:	eb45 0303 	adc.w	r3, r5, r3
 801cab2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801cab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801caba:	685b      	ldr	r3, [r3, #4]
 801cabc:	2200      	movs	r2, #0
 801cabe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cac2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801cac6:	f04f 0200 	mov.w	r2, #0
 801caca:	f04f 0300 	mov.w	r3, #0
 801cace:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801cad2:	4629      	mov	r1, r5
 801cad4:	008b      	lsls	r3, r1, #2
 801cad6:	4621      	mov	r1, r4
 801cad8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cadc:	4621      	mov	r1, r4
 801cade:	008a      	lsls	r2, r1, #2
 801cae0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801cae4:	f7e4 f888 	bl	8000bf8 <__aeabi_uldivmod>
 801cae8:	4602      	mov	r2, r0
 801caea:	460b      	mov	r3, r1
 801caec:	4b60      	ldr	r3, [pc, #384]	; (801cc70 <UART_SetConfig+0x4e4>)
 801caee:	fba3 2302 	umull	r2, r3, r3, r2
 801caf2:	095b      	lsrs	r3, r3, #5
 801caf4:	011c      	lsls	r4, r3, #4
 801caf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cafa:	2200      	movs	r2, #0
 801cafc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801cb00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801cb04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801cb08:	4642      	mov	r2, r8
 801cb0a:	464b      	mov	r3, r9
 801cb0c:	1891      	adds	r1, r2, r2
 801cb0e:	61b9      	str	r1, [r7, #24]
 801cb10:	415b      	adcs	r3, r3
 801cb12:	61fb      	str	r3, [r7, #28]
 801cb14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801cb18:	4641      	mov	r1, r8
 801cb1a:	1851      	adds	r1, r2, r1
 801cb1c:	6139      	str	r1, [r7, #16]
 801cb1e:	4649      	mov	r1, r9
 801cb20:	414b      	adcs	r3, r1
 801cb22:	617b      	str	r3, [r7, #20]
 801cb24:	f04f 0200 	mov.w	r2, #0
 801cb28:	f04f 0300 	mov.w	r3, #0
 801cb2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801cb30:	4659      	mov	r1, fp
 801cb32:	00cb      	lsls	r3, r1, #3
 801cb34:	4651      	mov	r1, sl
 801cb36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cb3a:	4651      	mov	r1, sl
 801cb3c:	00ca      	lsls	r2, r1, #3
 801cb3e:	4610      	mov	r0, r2
 801cb40:	4619      	mov	r1, r3
 801cb42:	4603      	mov	r3, r0
 801cb44:	4642      	mov	r2, r8
 801cb46:	189b      	adds	r3, r3, r2
 801cb48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801cb4c:	464b      	mov	r3, r9
 801cb4e:	460a      	mov	r2, r1
 801cb50:	eb42 0303 	adc.w	r3, r2, r3
 801cb54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cb58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb5c:	685b      	ldr	r3, [r3, #4]
 801cb5e:	2200      	movs	r2, #0
 801cb60:	67bb      	str	r3, [r7, #120]	; 0x78
 801cb62:	67fa      	str	r2, [r7, #124]	; 0x7c
 801cb64:	f04f 0200 	mov.w	r2, #0
 801cb68:	f04f 0300 	mov.w	r3, #0
 801cb6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801cb70:	4649      	mov	r1, r9
 801cb72:	008b      	lsls	r3, r1, #2
 801cb74:	4641      	mov	r1, r8
 801cb76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cb7a:	4641      	mov	r1, r8
 801cb7c:	008a      	lsls	r2, r1, #2
 801cb7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801cb82:	f7e4 f839 	bl	8000bf8 <__aeabi_uldivmod>
 801cb86:	4602      	mov	r2, r0
 801cb88:	460b      	mov	r3, r1
 801cb8a:	4b39      	ldr	r3, [pc, #228]	; (801cc70 <UART_SetConfig+0x4e4>)
 801cb8c:	fba3 1302 	umull	r1, r3, r3, r2
 801cb90:	095b      	lsrs	r3, r3, #5
 801cb92:	2164      	movs	r1, #100	; 0x64
 801cb94:	fb01 f303 	mul.w	r3, r1, r3
 801cb98:	1ad3      	subs	r3, r2, r3
 801cb9a:	011b      	lsls	r3, r3, #4
 801cb9c:	3332      	adds	r3, #50	; 0x32
 801cb9e:	4a34      	ldr	r2, [pc, #208]	; (801cc70 <UART_SetConfig+0x4e4>)
 801cba0:	fba2 2303 	umull	r2, r3, r2, r3
 801cba4:	095b      	lsrs	r3, r3, #5
 801cba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cbaa:	441c      	add	r4, r3
 801cbac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cbb0:	2200      	movs	r2, #0
 801cbb2:	673b      	str	r3, [r7, #112]	; 0x70
 801cbb4:	677a      	str	r2, [r7, #116]	; 0x74
 801cbb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801cbba:	4642      	mov	r2, r8
 801cbbc:	464b      	mov	r3, r9
 801cbbe:	1891      	adds	r1, r2, r2
 801cbc0:	60b9      	str	r1, [r7, #8]
 801cbc2:	415b      	adcs	r3, r3
 801cbc4:	60fb      	str	r3, [r7, #12]
 801cbc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cbca:	4641      	mov	r1, r8
 801cbcc:	1851      	adds	r1, r2, r1
 801cbce:	6039      	str	r1, [r7, #0]
 801cbd0:	4649      	mov	r1, r9
 801cbd2:	414b      	adcs	r3, r1
 801cbd4:	607b      	str	r3, [r7, #4]
 801cbd6:	f04f 0200 	mov.w	r2, #0
 801cbda:	f04f 0300 	mov.w	r3, #0
 801cbde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801cbe2:	4659      	mov	r1, fp
 801cbe4:	00cb      	lsls	r3, r1, #3
 801cbe6:	4651      	mov	r1, sl
 801cbe8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cbec:	4651      	mov	r1, sl
 801cbee:	00ca      	lsls	r2, r1, #3
 801cbf0:	4610      	mov	r0, r2
 801cbf2:	4619      	mov	r1, r3
 801cbf4:	4603      	mov	r3, r0
 801cbf6:	4642      	mov	r2, r8
 801cbf8:	189b      	adds	r3, r3, r2
 801cbfa:	66bb      	str	r3, [r7, #104]	; 0x68
 801cbfc:	464b      	mov	r3, r9
 801cbfe:	460a      	mov	r2, r1
 801cc00:	eb42 0303 	adc.w	r3, r2, r3
 801cc04:	66fb      	str	r3, [r7, #108]	; 0x6c
 801cc06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cc0a:	685b      	ldr	r3, [r3, #4]
 801cc0c:	2200      	movs	r2, #0
 801cc0e:	663b      	str	r3, [r7, #96]	; 0x60
 801cc10:	667a      	str	r2, [r7, #100]	; 0x64
 801cc12:	f04f 0200 	mov.w	r2, #0
 801cc16:	f04f 0300 	mov.w	r3, #0
 801cc1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801cc1e:	4649      	mov	r1, r9
 801cc20:	008b      	lsls	r3, r1, #2
 801cc22:	4641      	mov	r1, r8
 801cc24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cc28:	4641      	mov	r1, r8
 801cc2a:	008a      	lsls	r2, r1, #2
 801cc2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801cc30:	f7e3 ffe2 	bl	8000bf8 <__aeabi_uldivmod>
 801cc34:	4602      	mov	r2, r0
 801cc36:	460b      	mov	r3, r1
 801cc38:	4b0d      	ldr	r3, [pc, #52]	; (801cc70 <UART_SetConfig+0x4e4>)
 801cc3a:	fba3 1302 	umull	r1, r3, r3, r2
 801cc3e:	095b      	lsrs	r3, r3, #5
 801cc40:	2164      	movs	r1, #100	; 0x64
 801cc42:	fb01 f303 	mul.w	r3, r1, r3
 801cc46:	1ad3      	subs	r3, r2, r3
 801cc48:	011b      	lsls	r3, r3, #4
 801cc4a:	3332      	adds	r3, #50	; 0x32
 801cc4c:	4a08      	ldr	r2, [pc, #32]	; (801cc70 <UART_SetConfig+0x4e4>)
 801cc4e:	fba2 2303 	umull	r2, r3, r2, r3
 801cc52:	095b      	lsrs	r3, r3, #5
 801cc54:	f003 020f 	and.w	r2, r3, #15
 801cc58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	4422      	add	r2, r4
 801cc60:	609a      	str	r2, [r3, #8]
}
 801cc62:	bf00      	nop
 801cc64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801cc68:	46bd      	mov	sp, r7
 801cc6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801cc6e:	bf00      	nop
 801cc70:	51eb851f 	.word	0x51eb851f

0801cc74 <pow>:
 801cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc76:	ed2d 8b02 	vpush	{d8}
 801cc7a:	eeb0 8a40 	vmov.f32	s16, s0
 801cc7e:	eef0 8a60 	vmov.f32	s17, s1
 801cc82:	ec55 4b11 	vmov	r4, r5, d1
 801cc86:	f000 f883 	bl	801cd90 <__ieee754_pow>
 801cc8a:	4622      	mov	r2, r4
 801cc8c:	462b      	mov	r3, r5
 801cc8e:	4620      	mov	r0, r4
 801cc90:	4629      	mov	r1, r5
 801cc92:	ec57 6b10 	vmov	r6, r7, d0
 801cc96:	f7e3 ff49 	bl	8000b2c <__aeabi_dcmpun>
 801cc9a:	2800      	cmp	r0, #0
 801cc9c:	d13b      	bne.n	801cd16 <pow+0xa2>
 801cc9e:	ec51 0b18 	vmov	r0, r1, d8
 801cca2:	2200      	movs	r2, #0
 801cca4:	2300      	movs	r3, #0
 801cca6:	f7e3 ff0f 	bl	8000ac8 <__aeabi_dcmpeq>
 801ccaa:	b1b8      	cbz	r0, 801ccdc <pow+0x68>
 801ccac:	2200      	movs	r2, #0
 801ccae:	2300      	movs	r3, #0
 801ccb0:	4620      	mov	r0, r4
 801ccb2:	4629      	mov	r1, r5
 801ccb4:	f7e3 ff08 	bl	8000ac8 <__aeabi_dcmpeq>
 801ccb8:	2800      	cmp	r0, #0
 801ccba:	d146      	bne.n	801cd4a <pow+0xd6>
 801ccbc:	ec45 4b10 	vmov	d0, r4, r5
 801ccc0:	f000 fe82 	bl	801d9c8 <finite>
 801ccc4:	b338      	cbz	r0, 801cd16 <pow+0xa2>
 801ccc6:	2200      	movs	r2, #0
 801ccc8:	2300      	movs	r3, #0
 801ccca:	4620      	mov	r0, r4
 801cccc:	4629      	mov	r1, r5
 801ccce:	f7e3 ff05 	bl	8000adc <__aeabi_dcmplt>
 801ccd2:	b300      	cbz	r0, 801cd16 <pow+0xa2>
 801ccd4:	f000 ff28 	bl	801db28 <__errno>
 801ccd8:	2322      	movs	r3, #34	; 0x22
 801ccda:	e01b      	b.n	801cd14 <pow+0xa0>
 801ccdc:	ec47 6b10 	vmov	d0, r6, r7
 801cce0:	f000 fe72 	bl	801d9c8 <finite>
 801cce4:	b9e0      	cbnz	r0, 801cd20 <pow+0xac>
 801cce6:	eeb0 0a48 	vmov.f32	s0, s16
 801ccea:	eef0 0a68 	vmov.f32	s1, s17
 801ccee:	f000 fe6b 	bl	801d9c8 <finite>
 801ccf2:	b1a8      	cbz	r0, 801cd20 <pow+0xac>
 801ccf4:	ec45 4b10 	vmov	d0, r4, r5
 801ccf8:	f000 fe66 	bl	801d9c8 <finite>
 801ccfc:	b180      	cbz	r0, 801cd20 <pow+0xac>
 801ccfe:	4632      	mov	r2, r6
 801cd00:	463b      	mov	r3, r7
 801cd02:	4630      	mov	r0, r6
 801cd04:	4639      	mov	r1, r7
 801cd06:	f7e3 ff11 	bl	8000b2c <__aeabi_dcmpun>
 801cd0a:	2800      	cmp	r0, #0
 801cd0c:	d0e2      	beq.n	801ccd4 <pow+0x60>
 801cd0e:	f000 ff0b 	bl	801db28 <__errno>
 801cd12:	2321      	movs	r3, #33	; 0x21
 801cd14:	6003      	str	r3, [r0, #0]
 801cd16:	ecbd 8b02 	vpop	{d8}
 801cd1a:	ec47 6b10 	vmov	d0, r6, r7
 801cd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd20:	2200      	movs	r2, #0
 801cd22:	2300      	movs	r3, #0
 801cd24:	4630      	mov	r0, r6
 801cd26:	4639      	mov	r1, r7
 801cd28:	f7e3 fece 	bl	8000ac8 <__aeabi_dcmpeq>
 801cd2c:	2800      	cmp	r0, #0
 801cd2e:	d0f2      	beq.n	801cd16 <pow+0xa2>
 801cd30:	eeb0 0a48 	vmov.f32	s0, s16
 801cd34:	eef0 0a68 	vmov.f32	s1, s17
 801cd38:	f000 fe46 	bl	801d9c8 <finite>
 801cd3c:	2800      	cmp	r0, #0
 801cd3e:	d0ea      	beq.n	801cd16 <pow+0xa2>
 801cd40:	ec45 4b10 	vmov	d0, r4, r5
 801cd44:	f000 fe40 	bl	801d9c8 <finite>
 801cd48:	e7c3      	b.n	801ccd2 <pow+0x5e>
 801cd4a:	4f01      	ldr	r7, [pc, #4]	; (801cd50 <pow+0xdc>)
 801cd4c:	2600      	movs	r6, #0
 801cd4e:	e7e2      	b.n	801cd16 <pow+0xa2>
 801cd50:	3ff00000 	.word	0x3ff00000

0801cd54 <sqrtf>:
 801cd54:	b508      	push	{r3, lr}
 801cd56:	ed2d 8b02 	vpush	{d8}
 801cd5a:	eeb0 8a40 	vmov.f32	s16, s0
 801cd5e:	f000 fdf7 	bl	801d950 <__ieee754_sqrtf>
 801cd62:	eeb4 8a48 	vcmp.f32	s16, s16
 801cd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd6a:	d60c      	bvs.n	801cd86 <sqrtf+0x32>
 801cd6c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801cd8c <sqrtf+0x38>
 801cd70:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801cd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd78:	d505      	bpl.n	801cd86 <sqrtf+0x32>
 801cd7a:	f000 fed5 	bl	801db28 <__errno>
 801cd7e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801cd82:	2321      	movs	r3, #33	; 0x21
 801cd84:	6003      	str	r3, [r0, #0]
 801cd86:	ecbd 8b02 	vpop	{d8}
 801cd8a:	bd08      	pop	{r3, pc}
 801cd8c:	00000000 	.word	0x00000000

0801cd90 <__ieee754_pow>:
 801cd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd94:	ed2d 8b06 	vpush	{d8-d10}
 801cd98:	b089      	sub	sp, #36	; 0x24
 801cd9a:	ed8d 1b00 	vstr	d1, [sp]
 801cd9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801cda2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801cda6:	ea58 0102 	orrs.w	r1, r8, r2
 801cdaa:	ec57 6b10 	vmov	r6, r7, d0
 801cdae:	d115      	bne.n	801cddc <__ieee754_pow+0x4c>
 801cdb0:	19b3      	adds	r3, r6, r6
 801cdb2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801cdb6:	4152      	adcs	r2, r2
 801cdb8:	4299      	cmp	r1, r3
 801cdba:	4b89      	ldr	r3, [pc, #548]	; (801cfe0 <__ieee754_pow+0x250>)
 801cdbc:	4193      	sbcs	r3, r2
 801cdbe:	f080 84d2 	bcs.w	801d766 <__ieee754_pow+0x9d6>
 801cdc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cdc6:	4630      	mov	r0, r6
 801cdc8:	4639      	mov	r1, r7
 801cdca:	f7e3 fa5f 	bl	800028c <__adddf3>
 801cdce:	ec41 0b10 	vmov	d0, r0, r1
 801cdd2:	b009      	add	sp, #36	; 0x24
 801cdd4:	ecbd 8b06 	vpop	{d8-d10}
 801cdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cddc:	4b81      	ldr	r3, [pc, #516]	; (801cfe4 <__ieee754_pow+0x254>)
 801cdde:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801cde2:	429c      	cmp	r4, r3
 801cde4:	ee10 aa10 	vmov	sl, s0
 801cde8:	463d      	mov	r5, r7
 801cdea:	dc06      	bgt.n	801cdfa <__ieee754_pow+0x6a>
 801cdec:	d101      	bne.n	801cdf2 <__ieee754_pow+0x62>
 801cdee:	2e00      	cmp	r6, #0
 801cdf0:	d1e7      	bne.n	801cdc2 <__ieee754_pow+0x32>
 801cdf2:	4598      	cmp	r8, r3
 801cdf4:	dc01      	bgt.n	801cdfa <__ieee754_pow+0x6a>
 801cdf6:	d10f      	bne.n	801ce18 <__ieee754_pow+0x88>
 801cdf8:	b172      	cbz	r2, 801ce18 <__ieee754_pow+0x88>
 801cdfa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801cdfe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801ce02:	ea55 050a 	orrs.w	r5, r5, sl
 801ce06:	d1dc      	bne.n	801cdc2 <__ieee754_pow+0x32>
 801ce08:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ce0c:	18db      	adds	r3, r3, r3
 801ce0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801ce12:	4152      	adcs	r2, r2
 801ce14:	429d      	cmp	r5, r3
 801ce16:	e7d0      	b.n	801cdba <__ieee754_pow+0x2a>
 801ce18:	2d00      	cmp	r5, #0
 801ce1a:	da3b      	bge.n	801ce94 <__ieee754_pow+0x104>
 801ce1c:	4b72      	ldr	r3, [pc, #456]	; (801cfe8 <__ieee754_pow+0x258>)
 801ce1e:	4598      	cmp	r8, r3
 801ce20:	dc51      	bgt.n	801cec6 <__ieee754_pow+0x136>
 801ce22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801ce26:	4598      	cmp	r8, r3
 801ce28:	f340 84ac 	ble.w	801d784 <__ieee754_pow+0x9f4>
 801ce2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801ce30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ce34:	2b14      	cmp	r3, #20
 801ce36:	dd0f      	ble.n	801ce58 <__ieee754_pow+0xc8>
 801ce38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801ce3c:	fa22 f103 	lsr.w	r1, r2, r3
 801ce40:	fa01 f303 	lsl.w	r3, r1, r3
 801ce44:	4293      	cmp	r3, r2
 801ce46:	f040 849d 	bne.w	801d784 <__ieee754_pow+0x9f4>
 801ce4a:	f001 0101 	and.w	r1, r1, #1
 801ce4e:	f1c1 0302 	rsb	r3, r1, #2
 801ce52:	9304      	str	r3, [sp, #16]
 801ce54:	b182      	cbz	r2, 801ce78 <__ieee754_pow+0xe8>
 801ce56:	e05f      	b.n	801cf18 <__ieee754_pow+0x188>
 801ce58:	2a00      	cmp	r2, #0
 801ce5a:	d15b      	bne.n	801cf14 <__ieee754_pow+0x184>
 801ce5c:	f1c3 0314 	rsb	r3, r3, #20
 801ce60:	fa48 f103 	asr.w	r1, r8, r3
 801ce64:	fa01 f303 	lsl.w	r3, r1, r3
 801ce68:	4543      	cmp	r3, r8
 801ce6a:	f040 8488 	bne.w	801d77e <__ieee754_pow+0x9ee>
 801ce6e:	f001 0101 	and.w	r1, r1, #1
 801ce72:	f1c1 0302 	rsb	r3, r1, #2
 801ce76:	9304      	str	r3, [sp, #16]
 801ce78:	4b5c      	ldr	r3, [pc, #368]	; (801cfec <__ieee754_pow+0x25c>)
 801ce7a:	4598      	cmp	r8, r3
 801ce7c:	d132      	bne.n	801cee4 <__ieee754_pow+0x154>
 801ce7e:	f1b9 0f00 	cmp.w	r9, #0
 801ce82:	f280 8478 	bge.w	801d776 <__ieee754_pow+0x9e6>
 801ce86:	4959      	ldr	r1, [pc, #356]	; (801cfec <__ieee754_pow+0x25c>)
 801ce88:	4632      	mov	r2, r6
 801ce8a:	463b      	mov	r3, r7
 801ce8c:	2000      	movs	r0, #0
 801ce8e:	f7e3 fcdd 	bl	800084c <__aeabi_ddiv>
 801ce92:	e79c      	b.n	801cdce <__ieee754_pow+0x3e>
 801ce94:	2300      	movs	r3, #0
 801ce96:	9304      	str	r3, [sp, #16]
 801ce98:	2a00      	cmp	r2, #0
 801ce9a:	d13d      	bne.n	801cf18 <__ieee754_pow+0x188>
 801ce9c:	4b51      	ldr	r3, [pc, #324]	; (801cfe4 <__ieee754_pow+0x254>)
 801ce9e:	4598      	cmp	r8, r3
 801cea0:	d1ea      	bne.n	801ce78 <__ieee754_pow+0xe8>
 801cea2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801cea6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801ceaa:	ea53 030a 	orrs.w	r3, r3, sl
 801ceae:	f000 845a 	beq.w	801d766 <__ieee754_pow+0x9d6>
 801ceb2:	4b4f      	ldr	r3, [pc, #316]	; (801cff0 <__ieee754_pow+0x260>)
 801ceb4:	429c      	cmp	r4, r3
 801ceb6:	dd08      	ble.n	801ceca <__ieee754_pow+0x13a>
 801ceb8:	f1b9 0f00 	cmp.w	r9, #0
 801cebc:	f2c0 8457 	blt.w	801d76e <__ieee754_pow+0x9de>
 801cec0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cec4:	e783      	b.n	801cdce <__ieee754_pow+0x3e>
 801cec6:	2302      	movs	r3, #2
 801cec8:	e7e5      	b.n	801ce96 <__ieee754_pow+0x106>
 801ceca:	f1b9 0f00 	cmp.w	r9, #0
 801cece:	f04f 0000 	mov.w	r0, #0
 801ced2:	f04f 0100 	mov.w	r1, #0
 801ced6:	f6bf af7a 	bge.w	801cdce <__ieee754_pow+0x3e>
 801ceda:	e9dd 0300 	ldrd	r0, r3, [sp]
 801cede:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801cee2:	e774      	b.n	801cdce <__ieee754_pow+0x3e>
 801cee4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801cee8:	d106      	bne.n	801cef8 <__ieee754_pow+0x168>
 801ceea:	4632      	mov	r2, r6
 801ceec:	463b      	mov	r3, r7
 801ceee:	4630      	mov	r0, r6
 801cef0:	4639      	mov	r1, r7
 801cef2:	f7e3 fb81 	bl	80005f8 <__aeabi_dmul>
 801cef6:	e76a      	b.n	801cdce <__ieee754_pow+0x3e>
 801cef8:	4b3e      	ldr	r3, [pc, #248]	; (801cff4 <__ieee754_pow+0x264>)
 801cefa:	4599      	cmp	r9, r3
 801cefc:	d10c      	bne.n	801cf18 <__ieee754_pow+0x188>
 801cefe:	2d00      	cmp	r5, #0
 801cf00:	db0a      	blt.n	801cf18 <__ieee754_pow+0x188>
 801cf02:	ec47 6b10 	vmov	d0, r6, r7
 801cf06:	b009      	add	sp, #36	; 0x24
 801cf08:	ecbd 8b06 	vpop	{d8-d10}
 801cf0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf10:	f000 bc6c 	b.w	801d7ec <__ieee754_sqrt>
 801cf14:	2300      	movs	r3, #0
 801cf16:	9304      	str	r3, [sp, #16]
 801cf18:	ec47 6b10 	vmov	d0, r6, r7
 801cf1c:	f000 fd4b 	bl	801d9b6 <fabs>
 801cf20:	ec51 0b10 	vmov	r0, r1, d0
 801cf24:	f1ba 0f00 	cmp.w	sl, #0
 801cf28:	d129      	bne.n	801cf7e <__ieee754_pow+0x1ee>
 801cf2a:	b124      	cbz	r4, 801cf36 <__ieee754_pow+0x1a6>
 801cf2c:	4b2f      	ldr	r3, [pc, #188]	; (801cfec <__ieee754_pow+0x25c>)
 801cf2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801cf32:	429a      	cmp	r2, r3
 801cf34:	d123      	bne.n	801cf7e <__ieee754_pow+0x1ee>
 801cf36:	f1b9 0f00 	cmp.w	r9, #0
 801cf3a:	da05      	bge.n	801cf48 <__ieee754_pow+0x1b8>
 801cf3c:	4602      	mov	r2, r0
 801cf3e:	460b      	mov	r3, r1
 801cf40:	2000      	movs	r0, #0
 801cf42:	492a      	ldr	r1, [pc, #168]	; (801cfec <__ieee754_pow+0x25c>)
 801cf44:	f7e3 fc82 	bl	800084c <__aeabi_ddiv>
 801cf48:	2d00      	cmp	r5, #0
 801cf4a:	f6bf af40 	bge.w	801cdce <__ieee754_pow+0x3e>
 801cf4e:	9b04      	ldr	r3, [sp, #16]
 801cf50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801cf54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801cf58:	4323      	orrs	r3, r4
 801cf5a:	d108      	bne.n	801cf6e <__ieee754_pow+0x1de>
 801cf5c:	4602      	mov	r2, r0
 801cf5e:	460b      	mov	r3, r1
 801cf60:	4610      	mov	r0, r2
 801cf62:	4619      	mov	r1, r3
 801cf64:	f7e3 f990 	bl	8000288 <__aeabi_dsub>
 801cf68:	4602      	mov	r2, r0
 801cf6a:	460b      	mov	r3, r1
 801cf6c:	e78f      	b.n	801ce8e <__ieee754_pow+0xfe>
 801cf6e:	9b04      	ldr	r3, [sp, #16]
 801cf70:	2b01      	cmp	r3, #1
 801cf72:	f47f af2c 	bne.w	801cdce <__ieee754_pow+0x3e>
 801cf76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cf7a:	4619      	mov	r1, r3
 801cf7c:	e727      	b.n	801cdce <__ieee754_pow+0x3e>
 801cf7e:	0feb      	lsrs	r3, r5, #31
 801cf80:	3b01      	subs	r3, #1
 801cf82:	9306      	str	r3, [sp, #24]
 801cf84:	9a06      	ldr	r2, [sp, #24]
 801cf86:	9b04      	ldr	r3, [sp, #16]
 801cf88:	4313      	orrs	r3, r2
 801cf8a:	d102      	bne.n	801cf92 <__ieee754_pow+0x202>
 801cf8c:	4632      	mov	r2, r6
 801cf8e:	463b      	mov	r3, r7
 801cf90:	e7e6      	b.n	801cf60 <__ieee754_pow+0x1d0>
 801cf92:	4b19      	ldr	r3, [pc, #100]	; (801cff8 <__ieee754_pow+0x268>)
 801cf94:	4598      	cmp	r8, r3
 801cf96:	f340 80fb 	ble.w	801d190 <__ieee754_pow+0x400>
 801cf9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801cf9e:	4598      	cmp	r8, r3
 801cfa0:	4b13      	ldr	r3, [pc, #76]	; (801cff0 <__ieee754_pow+0x260>)
 801cfa2:	dd0c      	ble.n	801cfbe <__ieee754_pow+0x22e>
 801cfa4:	429c      	cmp	r4, r3
 801cfa6:	dc0f      	bgt.n	801cfc8 <__ieee754_pow+0x238>
 801cfa8:	f1b9 0f00 	cmp.w	r9, #0
 801cfac:	da0f      	bge.n	801cfce <__ieee754_pow+0x23e>
 801cfae:	2000      	movs	r0, #0
 801cfb0:	b009      	add	sp, #36	; 0x24
 801cfb2:	ecbd 8b06 	vpop	{d8-d10}
 801cfb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfba:	f000 bcf3 	b.w	801d9a4 <__math_oflow>
 801cfbe:	429c      	cmp	r4, r3
 801cfc0:	dbf2      	blt.n	801cfa8 <__ieee754_pow+0x218>
 801cfc2:	4b0a      	ldr	r3, [pc, #40]	; (801cfec <__ieee754_pow+0x25c>)
 801cfc4:	429c      	cmp	r4, r3
 801cfc6:	dd19      	ble.n	801cffc <__ieee754_pow+0x26c>
 801cfc8:	f1b9 0f00 	cmp.w	r9, #0
 801cfcc:	dcef      	bgt.n	801cfae <__ieee754_pow+0x21e>
 801cfce:	2000      	movs	r0, #0
 801cfd0:	b009      	add	sp, #36	; 0x24
 801cfd2:	ecbd 8b06 	vpop	{d8-d10}
 801cfd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfda:	f000 bcda 	b.w	801d992 <__math_uflow>
 801cfde:	bf00      	nop
 801cfe0:	fff00000 	.word	0xfff00000
 801cfe4:	7ff00000 	.word	0x7ff00000
 801cfe8:	433fffff 	.word	0x433fffff
 801cfec:	3ff00000 	.word	0x3ff00000
 801cff0:	3fefffff 	.word	0x3fefffff
 801cff4:	3fe00000 	.word	0x3fe00000
 801cff8:	41e00000 	.word	0x41e00000
 801cffc:	4b60      	ldr	r3, [pc, #384]	; (801d180 <__ieee754_pow+0x3f0>)
 801cffe:	2200      	movs	r2, #0
 801d000:	f7e3 f942 	bl	8000288 <__aeabi_dsub>
 801d004:	a354      	add	r3, pc, #336	; (adr r3, 801d158 <__ieee754_pow+0x3c8>)
 801d006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d00a:	4604      	mov	r4, r0
 801d00c:	460d      	mov	r5, r1
 801d00e:	f7e3 faf3 	bl	80005f8 <__aeabi_dmul>
 801d012:	a353      	add	r3, pc, #332	; (adr r3, 801d160 <__ieee754_pow+0x3d0>)
 801d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d018:	4606      	mov	r6, r0
 801d01a:	460f      	mov	r7, r1
 801d01c:	4620      	mov	r0, r4
 801d01e:	4629      	mov	r1, r5
 801d020:	f7e3 faea 	bl	80005f8 <__aeabi_dmul>
 801d024:	4b57      	ldr	r3, [pc, #348]	; (801d184 <__ieee754_pow+0x3f4>)
 801d026:	4682      	mov	sl, r0
 801d028:	468b      	mov	fp, r1
 801d02a:	2200      	movs	r2, #0
 801d02c:	4620      	mov	r0, r4
 801d02e:	4629      	mov	r1, r5
 801d030:	f7e3 fae2 	bl	80005f8 <__aeabi_dmul>
 801d034:	4602      	mov	r2, r0
 801d036:	460b      	mov	r3, r1
 801d038:	a14b      	add	r1, pc, #300	; (adr r1, 801d168 <__ieee754_pow+0x3d8>)
 801d03a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d03e:	f7e3 f923 	bl	8000288 <__aeabi_dsub>
 801d042:	4622      	mov	r2, r4
 801d044:	462b      	mov	r3, r5
 801d046:	f7e3 fad7 	bl	80005f8 <__aeabi_dmul>
 801d04a:	4602      	mov	r2, r0
 801d04c:	460b      	mov	r3, r1
 801d04e:	2000      	movs	r0, #0
 801d050:	494d      	ldr	r1, [pc, #308]	; (801d188 <__ieee754_pow+0x3f8>)
 801d052:	f7e3 f919 	bl	8000288 <__aeabi_dsub>
 801d056:	4622      	mov	r2, r4
 801d058:	4680      	mov	r8, r0
 801d05a:	4689      	mov	r9, r1
 801d05c:	462b      	mov	r3, r5
 801d05e:	4620      	mov	r0, r4
 801d060:	4629      	mov	r1, r5
 801d062:	f7e3 fac9 	bl	80005f8 <__aeabi_dmul>
 801d066:	4602      	mov	r2, r0
 801d068:	460b      	mov	r3, r1
 801d06a:	4640      	mov	r0, r8
 801d06c:	4649      	mov	r1, r9
 801d06e:	f7e3 fac3 	bl	80005f8 <__aeabi_dmul>
 801d072:	a33f      	add	r3, pc, #252	; (adr r3, 801d170 <__ieee754_pow+0x3e0>)
 801d074:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d078:	f7e3 fabe 	bl	80005f8 <__aeabi_dmul>
 801d07c:	4602      	mov	r2, r0
 801d07e:	460b      	mov	r3, r1
 801d080:	4650      	mov	r0, sl
 801d082:	4659      	mov	r1, fp
 801d084:	f7e3 f900 	bl	8000288 <__aeabi_dsub>
 801d088:	4602      	mov	r2, r0
 801d08a:	460b      	mov	r3, r1
 801d08c:	4680      	mov	r8, r0
 801d08e:	4689      	mov	r9, r1
 801d090:	4630      	mov	r0, r6
 801d092:	4639      	mov	r1, r7
 801d094:	f7e3 f8fa 	bl	800028c <__adddf3>
 801d098:	2000      	movs	r0, #0
 801d09a:	4632      	mov	r2, r6
 801d09c:	463b      	mov	r3, r7
 801d09e:	4604      	mov	r4, r0
 801d0a0:	460d      	mov	r5, r1
 801d0a2:	f7e3 f8f1 	bl	8000288 <__aeabi_dsub>
 801d0a6:	4602      	mov	r2, r0
 801d0a8:	460b      	mov	r3, r1
 801d0aa:	4640      	mov	r0, r8
 801d0ac:	4649      	mov	r1, r9
 801d0ae:	f7e3 f8eb 	bl	8000288 <__aeabi_dsub>
 801d0b2:	9b04      	ldr	r3, [sp, #16]
 801d0b4:	9a06      	ldr	r2, [sp, #24]
 801d0b6:	3b01      	subs	r3, #1
 801d0b8:	4313      	orrs	r3, r2
 801d0ba:	4682      	mov	sl, r0
 801d0bc:	468b      	mov	fp, r1
 801d0be:	f040 81e7 	bne.w	801d490 <__ieee754_pow+0x700>
 801d0c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801d178 <__ieee754_pow+0x3e8>
 801d0c6:	eeb0 8a47 	vmov.f32	s16, s14
 801d0ca:	eef0 8a67 	vmov.f32	s17, s15
 801d0ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d0d2:	2600      	movs	r6, #0
 801d0d4:	4632      	mov	r2, r6
 801d0d6:	463b      	mov	r3, r7
 801d0d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d0dc:	f7e3 f8d4 	bl	8000288 <__aeabi_dsub>
 801d0e0:	4622      	mov	r2, r4
 801d0e2:	462b      	mov	r3, r5
 801d0e4:	f7e3 fa88 	bl	80005f8 <__aeabi_dmul>
 801d0e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d0ec:	4680      	mov	r8, r0
 801d0ee:	4689      	mov	r9, r1
 801d0f0:	4650      	mov	r0, sl
 801d0f2:	4659      	mov	r1, fp
 801d0f4:	f7e3 fa80 	bl	80005f8 <__aeabi_dmul>
 801d0f8:	4602      	mov	r2, r0
 801d0fa:	460b      	mov	r3, r1
 801d0fc:	4640      	mov	r0, r8
 801d0fe:	4649      	mov	r1, r9
 801d100:	f7e3 f8c4 	bl	800028c <__adddf3>
 801d104:	4632      	mov	r2, r6
 801d106:	463b      	mov	r3, r7
 801d108:	4680      	mov	r8, r0
 801d10a:	4689      	mov	r9, r1
 801d10c:	4620      	mov	r0, r4
 801d10e:	4629      	mov	r1, r5
 801d110:	f7e3 fa72 	bl	80005f8 <__aeabi_dmul>
 801d114:	460b      	mov	r3, r1
 801d116:	4604      	mov	r4, r0
 801d118:	460d      	mov	r5, r1
 801d11a:	4602      	mov	r2, r0
 801d11c:	4649      	mov	r1, r9
 801d11e:	4640      	mov	r0, r8
 801d120:	f7e3 f8b4 	bl	800028c <__adddf3>
 801d124:	4b19      	ldr	r3, [pc, #100]	; (801d18c <__ieee754_pow+0x3fc>)
 801d126:	4299      	cmp	r1, r3
 801d128:	ec45 4b19 	vmov	d9, r4, r5
 801d12c:	4606      	mov	r6, r0
 801d12e:	460f      	mov	r7, r1
 801d130:	468b      	mov	fp, r1
 801d132:	f340 82f1 	ble.w	801d718 <__ieee754_pow+0x988>
 801d136:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801d13a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801d13e:	4303      	orrs	r3, r0
 801d140:	f000 81e4 	beq.w	801d50c <__ieee754_pow+0x77c>
 801d144:	ec51 0b18 	vmov	r0, r1, d8
 801d148:	2200      	movs	r2, #0
 801d14a:	2300      	movs	r3, #0
 801d14c:	f7e3 fcc6 	bl	8000adc <__aeabi_dcmplt>
 801d150:	3800      	subs	r0, #0
 801d152:	bf18      	it	ne
 801d154:	2001      	movne	r0, #1
 801d156:	e72b      	b.n	801cfb0 <__ieee754_pow+0x220>
 801d158:	60000000 	.word	0x60000000
 801d15c:	3ff71547 	.word	0x3ff71547
 801d160:	f85ddf44 	.word	0xf85ddf44
 801d164:	3e54ae0b 	.word	0x3e54ae0b
 801d168:	55555555 	.word	0x55555555
 801d16c:	3fd55555 	.word	0x3fd55555
 801d170:	652b82fe 	.word	0x652b82fe
 801d174:	3ff71547 	.word	0x3ff71547
 801d178:	00000000 	.word	0x00000000
 801d17c:	bff00000 	.word	0xbff00000
 801d180:	3ff00000 	.word	0x3ff00000
 801d184:	3fd00000 	.word	0x3fd00000
 801d188:	3fe00000 	.word	0x3fe00000
 801d18c:	408fffff 	.word	0x408fffff
 801d190:	4bd5      	ldr	r3, [pc, #852]	; (801d4e8 <__ieee754_pow+0x758>)
 801d192:	402b      	ands	r3, r5
 801d194:	2200      	movs	r2, #0
 801d196:	b92b      	cbnz	r3, 801d1a4 <__ieee754_pow+0x414>
 801d198:	4bd4      	ldr	r3, [pc, #848]	; (801d4ec <__ieee754_pow+0x75c>)
 801d19a:	f7e3 fa2d 	bl	80005f8 <__aeabi_dmul>
 801d19e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801d1a2:	460c      	mov	r4, r1
 801d1a4:	1523      	asrs	r3, r4, #20
 801d1a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d1aa:	4413      	add	r3, r2
 801d1ac:	9305      	str	r3, [sp, #20]
 801d1ae:	4bd0      	ldr	r3, [pc, #832]	; (801d4f0 <__ieee754_pow+0x760>)
 801d1b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d1b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801d1b8:	429c      	cmp	r4, r3
 801d1ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d1be:	dd08      	ble.n	801d1d2 <__ieee754_pow+0x442>
 801d1c0:	4bcc      	ldr	r3, [pc, #816]	; (801d4f4 <__ieee754_pow+0x764>)
 801d1c2:	429c      	cmp	r4, r3
 801d1c4:	f340 8162 	ble.w	801d48c <__ieee754_pow+0x6fc>
 801d1c8:	9b05      	ldr	r3, [sp, #20]
 801d1ca:	3301      	adds	r3, #1
 801d1cc:	9305      	str	r3, [sp, #20]
 801d1ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801d1d2:	2400      	movs	r4, #0
 801d1d4:	00e3      	lsls	r3, r4, #3
 801d1d6:	9307      	str	r3, [sp, #28]
 801d1d8:	4bc7      	ldr	r3, [pc, #796]	; (801d4f8 <__ieee754_pow+0x768>)
 801d1da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d1de:	ed93 7b00 	vldr	d7, [r3]
 801d1e2:	4629      	mov	r1, r5
 801d1e4:	ec53 2b17 	vmov	r2, r3, d7
 801d1e8:	eeb0 9a47 	vmov.f32	s18, s14
 801d1ec:	eef0 9a67 	vmov.f32	s19, s15
 801d1f0:	4682      	mov	sl, r0
 801d1f2:	f7e3 f849 	bl	8000288 <__aeabi_dsub>
 801d1f6:	4652      	mov	r2, sl
 801d1f8:	4606      	mov	r6, r0
 801d1fa:	460f      	mov	r7, r1
 801d1fc:	462b      	mov	r3, r5
 801d1fe:	ec51 0b19 	vmov	r0, r1, d9
 801d202:	f7e3 f843 	bl	800028c <__adddf3>
 801d206:	4602      	mov	r2, r0
 801d208:	460b      	mov	r3, r1
 801d20a:	2000      	movs	r0, #0
 801d20c:	49bb      	ldr	r1, [pc, #748]	; (801d4fc <__ieee754_pow+0x76c>)
 801d20e:	f7e3 fb1d 	bl	800084c <__aeabi_ddiv>
 801d212:	ec41 0b1a 	vmov	d10, r0, r1
 801d216:	4602      	mov	r2, r0
 801d218:	460b      	mov	r3, r1
 801d21a:	4630      	mov	r0, r6
 801d21c:	4639      	mov	r1, r7
 801d21e:	f7e3 f9eb 	bl	80005f8 <__aeabi_dmul>
 801d222:	2300      	movs	r3, #0
 801d224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d228:	9302      	str	r3, [sp, #8]
 801d22a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d22e:	46ab      	mov	fp, r5
 801d230:	106d      	asrs	r5, r5, #1
 801d232:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801d236:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801d23a:	ec41 0b18 	vmov	d8, r0, r1
 801d23e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801d242:	2200      	movs	r2, #0
 801d244:	4640      	mov	r0, r8
 801d246:	4649      	mov	r1, r9
 801d248:	4614      	mov	r4, r2
 801d24a:	461d      	mov	r5, r3
 801d24c:	f7e3 f9d4 	bl	80005f8 <__aeabi_dmul>
 801d250:	4602      	mov	r2, r0
 801d252:	460b      	mov	r3, r1
 801d254:	4630      	mov	r0, r6
 801d256:	4639      	mov	r1, r7
 801d258:	f7e3 f816 	bl	8000288 <__aeabi_dsub>
 801d25c:	ec53 2b19 	vmov	r2, r3, d9
 801d260:	4606      	mov	r6, r0
 801d262:	460f      	mov	r7, r1
 801d264:	4620      	mov	r0, r4
 801d266:	4629      	mov	r1, r5
 801d268:	f7e3 f80e 	bl	8000288 <__aeabi_dsub>
 801d26c:	4602      	mov	r2, r0
 801d26e:	460b      	mov	r3, r1
 801d270:	4650      	mov	r0, sl
 801d272:	4659      	mov	r1, fp
 801d274:	f7e3 f808 	bl	8000288 <__aeabi_dsub>
 801d278:	4642      	mov	r2, r8
 801d27a:	464b      	mov	r3, r9
 801d27c:	f7e3 f9bc 	bl	80005f8 <__aeabi_dmul>
 801d280:	4602      	mov	r2, r0
 801d282:	460b      	mov	r3, r1
 801d284:	4630      	mov	r0, r6
 801d286:	4639      	mov	r1, r7
 801d288:	f7e2 fffe 	bl	8000288 <__aeabi_dsub>
 801d28c:	ec53 2b1a 	vmov	r2, r3, d10
 801d290:	f7e3 f9b2 	bl	80005f8 <__aeabi_dmul>
 801d294:	ec53 2b18 	vmov	r2, r3, d8
 801d298:	ec41 0b19 	vmov	d9, r0, r1
 801d29c:	ec51 0b18 	vmov	r0, r1, d8
 801d2a0:	f7e3 f9aa 	bl	80005f8 <__aeabi_dmul>
 801d2a4:	a37c      	add	r3, pc, #496	; (adr r3, 801d498 <__ieee754_pow+0x708>)
 801d2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2aa:	4604      	mov	r4, r0
 801d2ac:	460d      	mov	r5, r1
 801d2ae:	f7e3 f9a3 	bl	80005f8 <__aeabi_dmul>
 801d2b2:	a37b      	add	r3, pc, #492	; (adr r3, 801d4a0 <__ieee754_pow+0x710>)
 801d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2b8:	f7e2 ffe8 	bl	800028c <__adddf3>
 801d2bc:	4622      	mov	r2, r4
 801d2be:	462b      	mov	r3, r5
 801d2c0:	f7e3 f99a 	bl	80005f8 <__aeabi_dmul>
 801d2c4:	a378      	add	r3, pc, #480	; (adr r3, 801d4a8 <__ieee754_pow+0x718>)
 801d2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2ca:	f7e2 ffdf 	bl	800028c <__adddf3>
 801d2ce:	4622      	mov	r2, r4
 801d2d0:	462b      	mov	r3, r5
 801d2d2:	f7e3 f991 	bl	80005f8 <__aeabi_dmul>
 801d2d6:	a376      	add	r3, pc, #472	; (adr r3, 801d4b0 <__ieee754_pow+0x720>)
 801d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2dc:	f7e2 ffd6 	bl	800028c <__adddf3>
 801d2e0:	4622      	mov	r2, r4
 801d2e2:	462b      	mov	r3, r5
 801d2e4:	f7e3 f988 	bl	80005f8 <__aeabi_dmul>
 801d2e8:	a373      	add	r3, pc, #460	; (adr r3, 801d4b8 <__ieee754_pow+0x728>)
 801d2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2ee:	f7e2 ffcd 	bl	800028c <__adddf3>
 801d2f2:	4622      	mov	r2, r4
 801d2f4:	462b      	mov	r3, r5
 801d2f6:	f7e3 f97f 	bl	80005f8 <__aeabi_dmul>
 801d2fa:	a371      	add	r3, pc, #452	; (adr r3, 801d4c0 <__ieee754_pow+0x730>)
 801d2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d300:	f7e2 ffc4 	bl	800028c <__adddf3>
 801d304:	4622      	mov	r2, r4
 801d306:	4606      	mov	r6, r0
 801d308:	460f      	mov	r7, r1
 801d30a:	462b      	mov	r3, r5
 801d30c:	4620      	mov	r0, r4
 801d30e:	4629      	mov	r1, r5
 801d310:	f7e3 f972 	bl	80005f8 <__aeabi_dmul>
 801d314:	4602      	mov	r2, r0
 801d316:	460b      	mov	r3, r1
 801d318:	4630      	mov	r0, r6
 801d31a:	4639      	mov	r1, r7
 801d31c:	f7e3 f96c 	bl	80005f8 <__aeabi_dmul>
 801d320:	4642      	mov	r2, r8
 801d322:	4604      	mov	r4, r0
 801d324:	460d      	mov	r5, r1
 801d326:	464b      	mov	r3, r9
 801d328:	ec51 0b18 	vmov	r0, r1, d8
 801d32c:	f7e2 ffae 	bl	800028c <__adddf3>
 801d330:	ec53 2b19 	vmov	r2, r3, d9
 801d334:	f7e3 f960 	bl	80005f8 <__aeabi_dmul>
 801d338:	4622      	mov	r2, r4
 801d33a:	462b      	mov	r3, r5
 801d33c:	f7e2 ffa6 	bl	800028c <__adddf3>
 801d340:	4642      	mov	r2, r8
 801d342:	4682      	mov	sl, r0
 801d344:	468b      	mov	fp, r1
 801d346:	464b      	mov	r3, r9
 801d348:	4640      	mov	r0, r8
 801d34a:	4649      	mov	r1, r9
 801d34c:	f7e3 f954 	bl	80005f8 <__aeabi_dmul>
 801d350:	4b6b      	ldr	r3, [pc, #428]	; (801d500 <__ieee754_pow+0x770>)
 801d352:	2200      	movs	r2, #0
 801d354:	4606      	mov	r6, r0
 801d356:	460f      	mov	r7, r1
 801d358:	f7e2 ff98 	bl	800028c <__adddf3>
 801d35c:	4652      	mov	r2, sl
 801d35e:	465b      	mov	r3, fp
 801d360:	f7e2 ff94 	bl	800028c <__adddf3>
 801d364:	2000      	movs	r0, #0
 801d366:	4604      	mov	r4, r0
 801d368:	460d      	mov	r5, r1
 801d36a:	4602      	mov	r2, r0
 801d36c:	460b      	mov	r3, r1
 801d36e:	4640      	mov	r0, r8
 801d370:	4649      	mov	r1, r9
 801d372:	f7e3 f941 	bl	80005f8 <__aeabi_dmul>
 801d376:	4b62      	ldr	r3, [pc, #392]	; (801d500 <__ieee754_pow+0x770>)
 801d378:	4680      	mov	r8, r0
 801d37a:	4689      	mov	r9, r1
 801d37c:	2200      	movs	r2, #0
 801d37e:	4620      	mov	r0, r4
 801d380:	4629      	mov	r1, r5
 801d382:	f7e2 ff81 	bl	8000288 <__aeabi_dsub>
 801d386:	4632      	mov	r2, r6
 801d388:	463b      	mov	r3, r7
 801d38a:	f7e2 ff7d 	bl	8000288 <__aeabi_dsub>
 801d38e:	4602      	mov	r2, r0
 801d390:	460b      	mov	r3, r1
 801d392:	4650      	mov	r0, sl
 801d394:	4659      	mov	r1, fp
 801d396:	f7e2 ff77 	bl	8000288 <__aeabi_dsub>
 801d39a:	ec53 2b18 	vmov	r2, r3, d8
 801d39e:	f7e3 f92b 	bl	80005f8 <__aeabi_dmul>
 801d3a2:	4622      	mov	r2, r4
 801d3a4:	4606      	mov	r6, r0
 801d3a6:	460f      	mov	r7, r1
 801d3a8:	462b      	mov	r3, r5
 801d3aa:	ec51 0b19 	vmov	r0, r1, d9
 801d3ae:	f7e3 f923 	bl	80005f8 <__aeabi_dmul>
 801d3b2:	4602      	mov	r2, r0
 801d3b4:	460b      	mov	r3, r1
 801d3b6:	4630      	mov	r0, r6
 801d3b8:	4639      	mov	r1, r7
 801d3ba:	f7e2 ff67 	bl	800028c <__adddf3>
 801d3be:	4606      	mov	r6, r0
 801d3c0:	460f      	mov	r7, r1
 801d3c2:	4602      	mov	r2, r0
 801d3c4:	460b      	mov	r3, r1
 801d3c6:	4640      	mov	r0, r8
 801d3c8:	4649      	mov	r1, r9
 801d3ca:	f7e2 ff5f 	bl	800028c <__adddf3>
 801d3ce:	a33e      	add	r3, pc, #248	; (adr r3, 801d4c8 <__ieee754_pow+0x738>)
 801d3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3d4:	2000      	movs	r0, #0
 801d3d6:	4604      	mov	r4, r0
 801d3d8:	460d      	mov	r5, r1
 801d3da:	f7e3 f90d 	bl	80005f8 <__aeabi_dmul>
 801d3de:	4642      	mov	r2, r8
 801d3e0:	ec41 0b18 	vmov	d8, r0, r1
 801d3e4:	464b      	mov	r3, r9
 801d3e6:	4620      	mov	r0, r4
 801d3e8:	4629      	mov	r1, r5
 801d3ea:	f7e2 ff4d 	bl	8000288 <__aeabi_dsub>
 801d3ee:	4602      	mov	r2, r0
 801d3f0:	460b      	mov	r3, r1
 801d3f2:	4630      	mov	r0, r6
 801d3f4:	4639      	mov	r1, r7
 801d3f6:	f7e2 ff47 	bl	8000288 <__aeabi_dsub>
 801d3fa:	a335      	add	r3, pc, #212	; (adr r3, 801d4d0 <__ieee754_pow+0x740>)
 801d3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d400:	f7e3 f8fa 	bl	80005f8 <__aeabi_dmul>
 801d404:	a334      	add	r3, pc, #208	; (adr r3, 801d4d8 <__ieee754_pow+0x748>)
 801d406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d40a:	4606      	mov	r6, r0
 801d40c:	460f      	mov	r7, r1
 801d40e:	4620      	mov	r0, r4
 801d410:	4629      	mov	r1, r5
 801d412:	f7e3 f8f1 	bl	80005f8 <__aeabi_dmul>
 801d416:	4602      	mov	r2, r0
 801d418:	460b      	mov	r3, r1
 801d41a:	4630      	mov	r0, r6
 801d41c:	4639      	mov	r1, r7
 801d41e:	f7e2 ff35 	bl	800028c <__adddf3>
 801d422:	9a07      	ldr	r2, [sp, #28]
 801d424:	4b37      	ldr	r3, [pc, #220]	; (801d504 <__ieee754_pow+0x774>)
 801d426:	4413      	add	r3, r2
 801d428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d42c:	f7e2 ff2e 	bl	800028c <__adddf3>
 801d430:	4682      	mov	sl, r0
 801d432:	9805      	ldr	r0, [sp, #20]
 801d434:	468b      	mov	fp, r1
 801d436:	f7e3 f875 	bl	8000524 <__aeabi_i2d>
 801d43a:	9a07      	ldr	r2, [sp, #28]
 801d43c:	4b32      	ldr	r3, [pc, #200]	; (801d508 <__ieee754_pow+0x778>)
 801d43e:	4413      	add	r3, r2
 801d440:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d444:	4606      	mov	r6, r0
 801d446:	460f      	mov	r7, r1
 801d448:	4652      	mov	r2, sl
 801d44a:	465b      	mov	r3, fp
 801d44c:	ec51 0b18 	vmov	r0, r1, d8
 801d450:	f7e2 ff1c 	bl	800028c <__adddf3>
 801d454:	4642      	mov	r2, r8
 801d456:	464b      	mov	r3, r9
 801d458:	f7e2 ff18 	bl	800028c <__adddf3>
 801d45c:	4632      	mov	r2, r6
 801d45e:	463b      	mov	r3, r7
 801d460:	f7e2 ff14 	bl	800028c <__adddf3>
 801d464:	2000      	movs	r0, #0
 801d466:	4632      	mov	r2, r6
 801d468:	463b      	mov	r3, r7
 801d46a:	4604      	mov	r4, r0
 801d46c:	460d      	mov	r5, r1
 801d46e:	f7e2 ff0b 	bl	8000288 <__aeabi_dsub>
 801d472:	4642      	mov	r2, r8
 801d474:	464b      	mov	r3, r9
 801d476:	f7e2 ff07 	bl	8000288 <__aeabi_dsub>
 801d47a:	ec53 2b18 	vmov	r2, r3, d8
 801d47e:	f7e2 ff03 	bl	8000288 <__aeabi_dsub>
 801d482:	4602      	mov	r2, r0
 801d484:	460b      	mov	r3, r1
 801d486:	4650      	mov	r0, sl
 801d488:	4659      	mov	r1, fp
 801d48a:	e610      	b.n	801d0ae <__ieee754_pow+0x31e>
 801d48c:	2401      	movs	r4, #1
 801d48e:	e6a1      	b.n	801d1d4 <__ieee754_pow+0x444>
 801d490:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801d4e0 <__ieee754_pow+0x750>
 801d494:	e617      	b.n	801d0c6 <__ieee754_pow+0x336>
 801d496:	bf00      	nop
 801d498:	4a454eef 	.word	0x4a454eef
 801d49c:	3fca7e28 	.word	0x3fca7e28
 801d4a0:	93c9db65 	.word	0x93c9db65
 801d4a4:	3fcd864a 	.word	0x3fcd864a
 801d4a8:	a91d4101 	.word	0xa91d4101
 801d4ac:	3fd17460 	.word	0x3fd17460
 801d4b0:	518f264d 	.word	0x518f264d
 801d4b4:	3fd55555 	.word	0x3fd55555
 801d4b8:	db6fabff 	.word	0xdb6fabff
 801d4bc:	3fdb6db6 	.word	0x3fdb6db6
 801d4c0:	33333303 	.word	0x33333303
 801d4c4:	3fe33333 	.word	0x3fe33333
 801d4c8:	e0000000 	.word	0xe0000000
 801d4cc:	3feec709 	.word	0x3feec709
 801d4d0:	dc3a03fd 	.word	0xdc3a03fd
 801d4d4:	3feec709 	.word	0x3feec709
 801d4d8:	145b01f5 	.word	0x145b01f5
 801d4dc:	be3e2fe0 	.word	0xbe3e2fe0
 801d4e0:	00000000 	.word	0x00000000
 801d4e4:	3ff00000 	.word	0x3ff00000
 801d4e8:	7ff00000 	.word	0x7ff00000
 801d4ec:	43400000 	.word	0x43400000
 801d4f0:	0003988e 	.word	0x0003988e
 801d4f4:	000bb679 	.word	0x000bb679
 801d4f8:	08029b68 	.word	0x08029b68
 801d4fc:	3ff00000 	.word	0x3ff00000
 801d500:	40080000 	.word	0x40080000
 801d504:	08029b88 	.word	0x08029b88
 801d508:	08029b78 	.word	0x08029b78
 801d50c:	a3b5      	add	r3, pc, #724	; (adr r3, 801d7e4 <__ieee754_pow+0xa54>)
 801d50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d512:	4640      	mov	r0, r8
 801d514:	4649      	mov	r1, r9
 801d516:	f7e2 feb9 	bl	800028c <__adddf3>
 801d51a:	4622      	mov	r2, r4
 801d51c:	ec41 0b1a 	vmov	d10, r0, r1
 801d520:	462b      	mov	r3, r5
 801d522:	4630      	mov	r0, r6
 801d524:	4639      	mov	r1, r7
 801d526:	f7e2 feaf 	bl	8000288 <__aeabi_dsub>
 801d52a:	4602      	mov	r2, r0
 801d52c:	460b      	mov	r3, r1
 801d52e:	ec51 0b1a 	vmov	r0, r1, d10
 801d532:	f7e3 faf1 	bl	8000b18 <__aeabi_dcmpgt>
 801d536:	2800      	cmp	r0, #0
 801d538:	f47f ae04 	bne.w	801d144 <__ieee754_pow+0x3b4>
 801d53c:	4aa4      	ldr	r2, [pc, #656]	; (801d7d0 <__ieee754_pow+0xa40>)
 801d53e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d542:	4293      	cmp	r3, r2
 801d544:	f340 8108 	ble.w	801d758 <__ieee754_pow+0x9c8>
 801d548:	151b      	asrs	r3, r3, #20
 801d54a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801d54e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801d552:	fa4a f303 	asr.w	r3, sl, r3
 801d556:	445b      	add	r3, fp
 801d558:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801d55c:	4e9d      	ldr	r6, [pc, #628]	; (801d7d4 <__ieee754_pow+0xa44>)
 801d55e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801d562:	4116      	asrs	r6, r2
 801d564:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801d568:	2000      	movs	r0, #0
 801d56a:	ea23 0106 	bic.w	r1, r3, r6
 801d56e:	f1c2 0214 	rsb	r2, r2, #20
 801d572:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801d576:	fa4a fa02 	asr.w	sl, sl, r2
 801d57a:	f1bb 0f00 	cmp.w	fp, #0
 801d57e:	4602      	mov	r2, r0
 801d580:	460b      	mov	r3, r1
 801d582:	4620      	mov	r0, r4
 801d584:	4629      	mov	r1, r5
 801d586:	bfb8      	it	lt
 801d588:	f1ca 0a00 	rsblt	sl, sl, #0
 801d58c:	f7e2 fe7c 	bl	8000288 <__aeabi_dsub>
 801d590:	ec41 0b19 	vmov	d9, r0, r1
 801d594:	4642      	mov	r2, r8
 801d596:	464b      	mov	r3, r9
 801d598:	ec51 0b19 	vmov	r0, r1, d9
 801d59c:	f7e2 fe76 	bl	800028c <__adddf3>
 801d5a0:	a37b      	add	r3, pc, #492	; (adr r3, 801d790 <__ieee754_pow+0xa00>)
 801d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5a6:	2000      	movs	r0, #0
 801d5a8:	4604      	mov	r4, r0
 801d5aa:	460d      	mov	r5, r1
 801d5ac:	f7e3 f824 	bl	80005f8 <__aeabi_dmul>
 801d5b0:	ec53 2b19 	vmov	r2, r3, d9
 801d5b4:	4606      	mov	r6, r0
 801d5b6:	460f      	mov	r7, r1
 801d5b8:	4620      	mov	r0, r4
 801d5ba:	4629      	mov	r1, r5
 801d5bc:	f7e2 fe64 	bl	8000288 <__aeabi_dsub>
 801d5c0:	4602      	mov	r2, r0
 801d5c2:	460b      	mov	r3, r1
 801d5c4:	4640      	mov	r0, r8
 801d5c6:	4649      	mov	r1, r9
 801d5c8:	f7e2 fe5e 	bl	8000288 <__aeabi_dsub>
 801d5cc:	a372      	add	r3, pc, #456	; (adr r3, 801d798 <__ieee754_pow+0xa08>)
 801d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5d2:	f7e3 f811 	bl	80005f8 <__aeabi_dmul>
 801d5d6:	a372      	add	r3, pc, #456	; (adr r3, 801d7a0 <__ieee754_pow+0xa10>)
 801d5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5dc:	4680      	mov	r8, r0
 801d5de:	4689      	mov	r9, r1
 801d5e0:	4620      	mov	r0, r4
 801d5e2:	4629      	mov	r1, r5
 801d5e4:	f7e3 f808 	bl	80005f8 <__aeabi_dmul>
 801d5e8:	4602      	mov	r2, r0
 801d5ea:	460b      	mov	r3, r1
 801d5ec:	4640      	mov	r0, r8
 801d5ee:	4649      	mov	r1, r9
 801d5f0:	f7e2 fe4c 	bl	800028c <__adddf3>
 801d5f4:	4604      	mov	r4, r0
 801d5f6:	460d      	mov	r5, r1
 801d5f8:	4602      	mov	r2, r0
 801d5fa:	460b      	mov	r3, r1
 801d5fc:	4630      	mov	r0, r6
 801d5fe:	4639      	mov	r1, r7
 801d600:	f7e2 fe44 	bl	800028c <__adddf3>
 801d604:	4632      	mov	r2, r6
 801d606:	463b      	mov	r3, r7
 801d608:	4680      	mov	r8, r0
 801d60a:	4689      	mov	r9, r1
 801d60c:	f7e2 fe3c 	bl	8000288 <__aeabi_dsub>
 801d610:	4602      	mov	r2, r0
 801d612:	460b      	mov	r3, r1
 801d614:	4620      	mov	r0, r4
 801d616:	4629      	mov	r1, r5
 801d618:	f7e2 fe36 	bl	8000288 <__aeabi_dsub>
 801d61c:	4642      	mov	r2, r8
 801d61e:	4606      	mov	r6, r0
 801d620:	460f      	mov	r7, r1
 801d622:	464b      	mov	r3, r9
 801d624:	4640      	mov	r0, r8
 801d626:	4649      	mov	r1, r9
 801d628:	f7e2 ffe6 	bl	80005f8 <__aeabi_dmul>
 801d62c:	a35e      	add	r3, pc, #376	; (adr r3, 801d7a8 <__ieee754_pow+0xa18>)
 801d62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d632:	4604      	mov	r4, r0
 801d634:	460d      	mov	r5, r1
 801d636:	f7e2 ffdf 	bl	80005f8 <__aeabi_dmul>
 801d63a:	a35d      	add	r3, pc, #372	; (adr r3, 801d7b0 <__ieee754_pow+0xa20>)
 801d63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d640:	f7e2 fe22 	bl	8000288 <__aeabi_dsub>
 801d644:	4622      	mov	r2, r4
 801d646:	462b      	mov	r3, r5
 801d648:	f7e2 ffd6 	bl	80005f8 <__aeabi_dmul>
 801d64c:	a35a      	add	r3, pc, #360	; (adr r3, 801d7b8 <__ieee754_pow+0xa28>)
 801d64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d652:	f7e2 fe1b 	bl	800028c <__adddf3>
 801d656:	4622      	mov	r2, r4
 801d658:	462b      	mov	r3, r5
 801d65a:	f7e2 ffcd 	bl	80005f8 <__aeabi_dmul>
 801d65e:	a358      	add	r3, pc, #352	; (adr r3, 801d7c0 <__ieee754_pow+0xa30>)
 801d660:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d664:	f7e2 fe10 	bl	8000288 <__aeabi_dsub>
 801d668:	4622      	mov	r2, r4
 801d66a:	462b      	mov	r3, r5
 801d66c:	f7e2 ffc4 	bl	80005f8 <__aeabi_dmul>
 801d670:	a355      	add	r3, pc, #340	; (adr r3, 801d7c8 <__ieee754_pow+0xa38>)
 801d672:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d676:	f7e2 fe09 	bl	800028c <__adddf3>
 801d67a:	4622      	mov	r2, r4
 801d67c:	462b      	mov	r3, r5
 801d67e:	f7e2 ffbb 	bl	80005f8 <__aeabi_dmul>
 801d682:	4602      	mov	r2, r0
 801d684:	460b      	mov	r3, r1
 801d686:	4640      	mov	r0, r8
 801d688:	4649      	mov	r1, r9
 801d68a:	f7e2 fdfd 	bl	8000288 <__aeabi_dsub>
 801d68e:	4604      	mov	r4, r0
 801d690:	460d      	mov	r5, r1
 801d692:	4602      	mov	r2, r0
 801d694:	460b      	mov	r3, r1
 801d696:	4640      	mov	r0, r8
 801d698:	4649      	mov	r1, r9
 801d69a:	f7e2 ffad 	bl	80005f8 <__aeabi_dmul>
 801d69e:	2200      	movs	r2, #0
 801d6a0:	ec41 0b19 	vmov	d9, r0, r1
 801d6a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d6a8:	4620      	mov	r0, r4
 801d6aa:	4629      	mov	r1, r5
 801d6ac:	f7e2 fdec 	bl	8000288 <__aeabi_dsub>
 801d6b0:	4602      	mov	r2, r0
 801d6b2:	460b      	mov	r3, r1
 801d6b4:	ec51 0b19 	vmov	r0, r1, d9
 801d6b8:	f7e3 f8c8 	bl	800084c <__aeabi_ddiv>
 801d6bc:	4632      	mov	r2, r6
 801d6be:	4604      	mov	r4, r0
 801d6c0:	460d      	mov	r5, r1
 801d6c2:	463b      	mov	r3, r7
 801d6c4:	4640      	mov	r0, r8
 801d6c6:	4649      	mov	r1, r9
 801d6c8:	f7e2 ff96 	bl	80005f8 <__aeabi_dmul>
 801d6cc:	4632      	mov	r2, r6
 801d6ce:	463b      	mov	r3, r7
 801d6d0:	f7e2 fddc 	bl	800028c <__adddf3>
 801d6d4:	4602      	mov	r2, r0
 801d6d6:	460b      	mov	r3, r1
 801d6d8:	4620      	mov	r0, r4
 801d6da:	4629      	mov	r1, r5
 801d6dc:	f7e2 fdd4 	bl	8000288 <__aeabi_dsub>
 801d6e0:	4642      	mov	r2, r8
 801d6e2:	464b      	mov	r3, r9
 801d6e4:	f7e2 fdd0 	bl	8000288 <__aeabi_dsub>
 801d6e8:	460b      	mov	r3, r1
 801d6ea:	4602      	mov	r2, r0
 801d6ec:	493a      	ldr	r1, [pc, #232]	; (801d7d8 <__ieee754_pow+0xa48>)
 801d6ee:	2000      	movs	r0, #0
 801d6f0:	f7e2 fdca 	bl	8000288 <__aeabi_dsub>
 801d6f4:	ec41 0b10 	vmov	d0, r0, r1
 801d6f8:	ee10 3a90 	vmov	r3, s1
 801d6fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801d700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d704:	da2b      	bge.n	801d75e <__ieee754_pow+0x9ce>
 801d706:	4650      	mov	r0, sl
 801d708:	f000 f96a 	bl	801d9e0 <scalbn>
 801d70c:	ec51 0b10 	vmov	r0, r1, d0
 801d710:	ec53 2b18 	vmov	r2, r3, d8
 801d714:	f7ff bbed 	b.w	801cef2 <__ieee754_pow+0x162>
 801d718:	4b30      	ldr	r3, [pc, #192]	; (801d7dc <__ieee754_pow+0xa4c>)
 801d71a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801d71e:	429e      	cmp	r6, r3
 801d720:	f77f af0c 	ble.w	801d53c <__ieee754_pow+0x7ac>
 801d724:	4b2e      	ldr	r3, [pc, #184]	; (801d7e0 <__ieee754_pow+0xa50>)
 801d726:	440b      	add	r3, r1
 801d728:	4303      	orrs	r3, r0
 801d72a:	d009      	beq.n	801d740 <__ieee754_pow+0x9b0>
 801d72c:	ec51 0b18 	vmov	r0, r1, d8
 801d730:	2200      	movs	r2, #0
 801d732:	2300      	movs	r3, #0
 801d734:	f7e3 f9d2 	bl	8000adc <__aeabi_dcmplt>
 801d738:	3800      	subs	r0, #0
 801d73a:	bf18      	it	ne
 801d73c:	2001      	movne	r0, #1
 801d73e:	e447      	b.n	801cfd0 <__ieee754_pow+0x240>
 801d740:	4622      	mov	r2, r4
 801d742:	462b      	mov	r3, r5
 801d744:	f7e2 fda0 	bl	8000288 <__aeabi_dsub>
 801d748:	4642      	mov	r2, r8
 801d74a:	464b      	mov	r3, r9
 801d74c:	f7e3 f9da 	bl	8000b04 <__aeabi_dcmpge>
 801d750:	2800      	cmp	r0, #0
 801d752:	f43f aef3 	beq.w	801d53c <__ieee754_pow+0x7ac>
 801d756:	e7e9      	b.n	801d72c <__ieee754_pow+0x99c>
 801d758:	f04f 0a00 	mov.w	sl, #0
 801d75c:	e71a      	b.n	801d594 <__ieee754_pow+0x804>
 801d75e:	ec51 0b10 	vmov	r0, r1, d0
 801d762:	4619      	mov	r1, r3
 801d764:	e7d4      	b.n	801d710 <__ieee754_pow+0x980>
 801d766:	491c      	ldr	r1, [pc, #112]	; (801d7d8 <__ieee754_pow+0xa48>)
 801d768:	2000      	movs	r0, #0
 801d76a:	f7ff bb30 	b.w	801cdce <__ieee754_pow+0x3e>
 801d76e:	2000      	movs	r0, #0
 801d770:	2100      	movs	r1, #0
 801d772:	f7ff bb2c 	b.w	801cdce <__ieee754_pow+0x3e>
 801d776:	4630      	mov	r0, r6
 801d778:	4639      	mov	r1, r7
 801d77a:	f7ff bb28 	b.w	801cdce <__ieee754_pow+0x3e>
 801d77e:	9204      	str	r2, [sp, #16]
 801d780:	f7ff bb7a 	b.w	801ce78 <__ieee754_pow+0xe8>
 801d784:	2300      	movs	r3, #0
 801d786:	f7ff bb64 	b.w	801ce52 <__ieee754_pow+0xc2>
 801d78a:	bf00      	nop
 801d78c:	f3af 8000 	nop.w
 801d790:	00000000 	.word	0x00000000
 801d794:	3fe62e43 	.word	0x3fe62e43
 801d798:	fefa39ef 	.word	0xfefa39ef
 801d79c:	3fe62e42 	.word	0x3fe62e42
 801d7a0:	0ca86c39 	.word	0x0ca86c39
 801d7a4:	be205c61 	.word	0xbe205c61
 801d7a8:	72bea4d0 	.word	0x72bea4d0
 801d7ac:	3e663769 	.word	0x3e663769
 801d7b0:	c5d26bf1 	.word	0xc5d26bf1
 801d7b4:	3ebbbd41 	.word	0x3ebbbd41
 801d7b8:	af25de2c 	.word	0xaf25de2c
 801d7bc:	3f11566a 	.word	0x3f11566a
 801d7c0:	16bebd93 	.word	0x16bebd93
 801d7c4:	3f66c16c 	.word	0x3f66c16c
 801d7c8:	5555553e 	.word	0x5555553e
 801d7cc:	3fc55555 	.word	0x3fc55555
 801d7d0:	3fe00000 	.word	0x3fe00000
 801d7d4:	000fffff 	.word	0x000fffff
 801d7d8:	3ff00000 	.word	0x3ff00000
 801d7dc:	4090cbff 	.word	0x4090cbff
 801d7e0:	3f6f3400 	.word	0x3f6f3400
 801d7e4:	652b82fe 	.word	0x652b82fe
 801d7e8:	3c971547 	.word	0x3c971547

0801d7ec <__ieee754_sqrt>:
 801d7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7f0:	ec55 4b10 	vmov	r4, r5, d0
 801d7f4:	4e55      	ldr	r6, [pc, #340]	; (801d94c <__ieee754_sqrt+0x160>)
 801d7f6:	43ae      	bics	r6, r5
 801d7f8:	ee10 0a10 	vmov	r0, s0
 801d7fc:	ee10 3a10 	vmov	r3, s0
 801d800:	462a      	mov	r2, r5
 801d802:	4629      	mov	r1, r5
 801d804:	d110      	bne.n	801d828 <__ieee754_sqrt+0x3c>
 801d806:	ee10 2a10 	vmov	r2, s0
 801d80a:	462b      	mov	r3, r5
 801d80c:	f7e2 fef4 	bl	80005f8 <__aeabi_dmul>
 801d810:	4602      	mov	r2, r0
 801d812:	460b      	mov	r3, r1
 801d814:	4620      	mov	r0, r4
 801d816:	4629      	mov	r1, r5
 801d818:	f7e2 fd38 	bl	800028c <__adddf3>
 801d81c:	4604      	mov	r4, r0
 801d81e:	460d      	mov	r5, r1
 801d820:	ec45 4b10 	vmov	d0, r4, r5
 801d824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d828:	2d00      	cmp	r5, #0
 801d82a:	dc10      	bgt.n	801d84e <__ieee754_sqrt+0x62>
 801d82c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d830:	4330      	orrs	r0, r6
 801d832:	d0f5      	beq.n	801d820 <__ieee754_sqrt+0x34>
 801d834:	b15d      	cbz	r5, 801d84e <__ieee754_sqrt+0x62>
 801d836:	ee10 2a10 	vmov	r2, s0
 801d83a:	462b      	mov	r3, r5
 801d83c:	ee10 0a10 	vmov	r0, s0
 801d840:	f7e2 fd22 	bl	8000288 <__aeabi_dsub>
 801d844:	4602      	mov	r2, r0
 801d846:	460b      	mov	r3, r1
 801d848:	f7e3 f800 	bl	800084c <__aeabi_ddiv>
 801d84c:	e7e6      	b.n	801d81c <__ieee754_sqrt+0x30>
 801d84e:	1512      	asrs	r2, r2, #20
 801d850:	d074      	beq.n	801d93c <__ieee754_sqrt+0x150>
 801d852:	07d4      	lsls	r4, r2, #31
 801d854:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801d858:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801d85c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801d860:	bf5e      	ittt	pl
 801d862:	0fda      	lsrpl	r2, r3, #31
 801d864:	005b      	lslpl	r3, r3, #1
 801d866:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801d86a:	2400      	movs	r4, #0
 801d86c:	0fda      	lsrs	r2, r3, #31
 801d86e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801d872:	107f      	asrs	r7, r7, #1
 801d874:	005b      	lsls	r3, r3, #1
 801d876:	2516      	movs	r5, #22
 801d878:	4620      	mov	r0, r4
 801d87a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801d87e:	1886      	adds	r6, r0, r2
 801d880:	428e      	cmp	r6, r1
 801d882:	bfde      	ittt	le
 801d884:	1b89      	suble	r1, r1, r6
 801d886:	18b0      	addle	r0, r6, r2
 801d888:	18a4      	addle	r4, r4, r2
 801d88a:	0049      	lsls	r1, r1, #1
 801d88c:	3d01      	subs	r5, #1
 801d88e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801d892:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801d896:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d89a:	d1f0      	bne.n	801d87e <__ieee754_sqrt+0x92>
 801d89c:	462a      	mov	r2, r5
 801d89e:	f04f 0e20 	mov.w	lr, #32
 801d8a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801d8a6:	4281      	cmp	r1, r0
 801d8a8:	eb06 0c05 	add.w	ip, r6, r5
 801d8ac:	dc02      	bgt.n	801d8b4 <__ieee754_sqrt+0xc8>
 801d8ae:	d113      	bne.n	801d8d8 <__ieee754_sqrt+0xec>
 801d8b0:	459c      	cmp	ip, r3
 801d8b2:	d811      	bhi.n	801d8d8 <__ieee754_sqrt+0xec>
 801d8b4:	f1bc 0f00 	cmp.w	ip, #0
 801d8b8:	eb0c 0506 	add.w	r5, ip, r6
 801d8bc:	da43      	bge.n	801d946 <__ieee754_sqrt+0x15a>
 801d8be:	2d00      	cmp	r5, #0
 801d8c0:	db41      	blt.n	801d946 <__ieee754_sqrt+0x15a>
 801d8c2:	f100 0801 	add.w	r8, r0, #1
 801d8c6:	1a09      	subs	r1, r1, r0
 801d8c8:	459c      	cmp	ip, r3
 801d8ca:	bf88      	it	hi
 801d8cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801d8d0:	eba3 030c 	sub.w	r3, r3, ip
 801d8d4:	4432      	add	r2, r6
 801d8d6:	4640      	mov	r0, r8
 801d8d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801d8dc:	f1be 0e01 	subs.w	lr, lr, #1
 801d8e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801d8e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d8e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d8ec:	d1db      	bne.n	801d8a6 <__ieee754_sqrt+0xba>
 801d8ee:	430b      	orrs	r3, r1
 801d8f0:	d006      	beq.n	801d900 <__ieee754_sqrt+0x114>
 801d8f2:	1c50      	adds	r0, r2, #1
 801d8f4:	bf13      	iteet	ne
 801d8f6:	3201      	addne	r2, #1
 801d8f8:	3401      	addeq	r4, #1
 801d8fa:	4672      	moveq	r2, lr
 801d8fc:	f022 0201 	bicne.w	r2, r2, #1
 801d900:	1063      	asrs	r3, r4, #1
 801d902:	0852      	lsrs	r2, r2, #1
 801d904:	07e1      	lsls	r1, r4, #31
 801d906:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801d90a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801d90e:	bf48      	it	mi
 801d910:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801d914:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801d918:	4614      	mov	r4, r2
 801d91a:	e781      	b.n	801d820 <__ieee754_sqrt+0x34>
 801d91c:	0ad9      	lsrs	r1, r3, #11
 801d91e:	3815      	subs	r0, #21
 801d920:	055b      	lsls	r3, r3, #21
 801d922:	2900      	cmp	r1, #0
 801d924:	d0fa      	beq.n	801d91c <__ieee754_sqrt+0x130>
 801d926:	02cd      	lsls	r5, r1, #11
 801d928:	d50a      	bpl.n	801d940 <__ieee754_sqrt+0x154>
 801d92a:	f1c2 0420 	rsb	r4, r2, #32
 801d92e:	fa23 f404 	lsr.w	r4, r3, r4
 801d932:	1e55      	subs	r5, r2, #1
 801d934:	4093      	lsls	r3, r2
 801d936:	4321      	orrs	r1, r4
 801d938:	1b42      	subs	r2, r0, r5
 801d93a:	e78a      	b.n	801d852 <__ieee754_sqrt+0x66>
 801d93c:	4610      	mov	r0, r2
 801d93e:	e7f0      	b.n	801d922 <__ieee754_sqrt+0x136>
 801d940:	0049      	lsls	r1, r1, #1
 801d942:	3201      	adds	r2, #1
 801d944:	e7ef      	b.n	801d926 <__ieee754_sqrt+0x13a>
 801d946:	4680      	mov	r8, r0
 801d948:	e7bd      	b.n	801d8c6 <__ieee754_sqrt+0xda>
 801d94a:	bf00      	nop
 801d94c:	7ff00000 	.word	0x7ff00000

0801d950 <__ieee754_sqrtf>:
 801d950:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801d954:	4770      	bx	lr

0801d956 <with_errno>:
 801d956:	b570      	push	{r4, r5, r6, lr}
 801d958:	4604      	mov	r4, r0
 801d95a:	460d      	mov	r5, r1
 801d95c:	4616      	mov	r6, r2
 801d95e:	f000 f8e3 	bl	801db28 <__errno>
 801d962:	4629      	mov	r1, r5
 801d964:	6006      	str	r6, [r0, #0]
 801d966:	4620      	mov	r0, r4
 801d968:	bd70      	pop	{r4, r5, r6, pc}

0801d96a <xflow>:
 801d96a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d96c:	4614      	mov	r4, r2
 801d96e:	461d      	mov	r5, r3
 801d970:	b108      	cbz	r0, 801d976 <xflow+0xc>
 801d972:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d976:	e9cd 2300 	strd	r2, r3, [sp]
 801d97a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d97e:	4620      	mov	r0, r4
 801d980:	4629      	mov	r1, r5
 801d982:	f7e2 fe39 	bl	80005f8 <__aeabi_dmul>
 801d986:	2222      	movs	r2, #34	; 0x22
 801d988:	b003      	add	sp, #12
 801d98a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d98e:	f7ff bfe2 	b.w	801d956 <with_errno>

0801d992 <__math_uflow>:
 801d992:	b508      	push	{r3, lr}
 801d994:	2200      	movs	r2, #0
 801d996:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801d99a:	f7ff ffe6 	bl	801d96a <xflow>
 801d99e:	ec41 0b10 	vmov	d0, r0, r1
 801d9a2:	bd08      	pop	{r3, pc}

0801d9a4 <__math_oflow>:
 801d9a4:	b508      	push	{r3, lr}
 801d9a6:	2200      	movs	r2, #0
 801d9a8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801d9ac:	f7ff ffdd 	bl	801d96a <xflow>
 801d9b0:	ec41 0b10 	vmov	d0, r0, r1
 801d9b4:	bd08      	pop	{r3, pc}

0801d9b6 <fabs>:
 801d9b6:	ec51 0b10 	vmov	r0, r1, d0
 801d9ba:	ee10 2a10 	vmov	r2, s0
 801d9be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d9c2:	ec43 2b10 	vmov	d0, r2, r3
 801d9c6:	4770      	bx	lr

0801d9c8 <finite>:
 801d9c8:	b082      	sub	sp, #8
 801d9ca:	ed8d 0b00 	vstr	d0, [sp]
 801d9ce:	9801      	ldr	r0, [sp, #4]
 801d9d0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801d9d4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801d9d8:	0fc0      	lsrs	r0, r0, #31
 801d9da:	b002      	add	sp, #8
 801d9dc:	4770      	bx	lr
	...

0801d9e0 <scalbn>:
 801d9e0:	b570      	push	{r4, r5, r6, lr}
 801d9e2:	ec55 4b10 	vmov	r4, r5, d0
 801d9e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801d9ea:	4606      	mov	r6, r0
 801d9ec:	462b      	mov	r3, r5
 801d9ee:	b99a      	cbnz	r2, 801da18 <scalbn+0x38>
 801d9f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d9f4:	4323      	orrs	r3, r4
 801d9f6:	d036      	beq.n	801da66 <scalbn+0x86>
 801d9f8:	4b39      	ldr	r3, [pc, #228]	; (801dae0 <scalbn+0x100>)
 801d9fa:	4629      	mov	r1, r5
 801d9fc:	ee10 0a10 	vmov	r0, s0
 801da00:	2200      	movs	r2, #0
 801da02:	f7e2 fdf9 	bl	80005f8 <__aeabi_dmul>
 801da06:	4b37      	ldr	r3, [pc, #220]	; (801dae4 <scalbn+0x104>)
 801da08:	429e      	cmp	r6, r3
 801da0a:	4604      	mov	r4, r0
 801da0c:	460d      	mov	r5, r1
 801da0e:	da10      	bge.n	801da32 <scalbn+0x52>
 801da10:	a32b      	add	r3, pc, #172	; (adr r3, 801dac0 <scalbn+0xe0>)
 801da12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da16:	e03a      	b.n	801da8e <scalbn+0xae>
 801da18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801da1c:	428a      	cmp	r2, r1
 801da1e:	d10c      	bne.n	801da3a <scalbn+0x5a>
 801da20:	ee10 2a10 	vmov	r2, s0
 801da24:	4620      	mov	r0, r4
 801da26:	4629      	mov	r1, r5
 801da28:	f7e2 fc30 	bl	800028c <__adddf3>
 801da2c:	4604      	mov	r4, r0
 801da2e:	460d      	mov	r5, r1
 801da30:	e019      	b.n	801da66 <scalbn+0x86>
 801da32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801da36:	460b      	mov	r3, r1
 801da38:	3a36      	subs	r2, #54	; 0x36
 801da3a:	4432      	add	r2, r6
 801da3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801da40:	428a      	cmp	r2, r1
 801da42:	dd08      	ble.n	801da56 <scalbn+0x76>
 801da44:	2d00      	cmp	r5, #0
 801da46:	a120      	add	r1, pc, #128	; (adr r1, 801dac8 <scalbn+0xe8>)
 801da48:	e9d1 0100 	ldrd	r0, r1, [r1]
 801da4c:	da1c      	bge.n	801da88 <scalbn+0xa8>
 801da4e:	a120      	add	r1, pc, #128	; (adr r1, 801dad0 <scalbn+0xf0>)
 801da50:	e9d1 0100 	ldrd	r0, r1, [r1]
 801da54:	e018      	b.n	801da88 <scalbn+0xa8>
 801da56:	2a00      	cmp	r2, #0
 801da58:	dd08      	ble.n	801da6c <scalbn+0x8c>
 801da5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801da5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801da62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801da66:	ec45 4b10 	vmov	d0, r4, r5
 801da6a:	bd70      	pop	{r4, r5, r6, pc}
 801da6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801da70:	da19      	bge.n	801daa6 <scalbn+0xc6>
 801da72:	f24c 3350 	movw	r3, #50000	; 0xc350
 801da76:	429e      	cmp	r6, r3
 801da78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801da7c:	dd0a      	ble.n	801da94 <scalbn+0xb4>
 801da7e:	a112      	add	r1, pc, #72	; (adr r1, 801dac8 <scalbn+0xe8>)
 801da80:	e9d1 0100 	ldrd	r0, r1, [r1]
 801da84:	2b00      	cmp	r3, #0
 801da86:	d1e2      	bne.n	801da4e <scalbn+0x6e>
 801da88:	a30f      	add	r3, pc, #60	; (adr r3, 801dac8 <scalbn+0xe8>)
 801da8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da8e:	f7e2 fdb3 	bl	80005f8 <__aeabi_dmul>
 801da92:	e7cb      	b.n	801da2c <scalbn+0x4c>
 801da94:	a10a      	add	r1, pc, #40	; (adr r1, 801dac0 <scalbn+0xe0>)
 801da96:	e9d1 0100 	ldrd	r0, r1, [r1]
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d0b8      	beq.n	801da10 <scalbn+0x30>
 801da9e:	a10e      	add	r1, pc, #56	; (adr r1, 801dad8 <scalbn+0xf8>)
 801daa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801daa4:	e7b4      	b.n	801da10 <scalbn+0x30>
 801daa6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801daaa:	3236      	adds	r2, #54	; 0x36
 801daac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801dab0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801dab4:	4620      	mov	r0, r4
 801dab6:	4b0c      	ldr	r3, [pc, #48]	; (801dae8 <scalbn+0x108>)
 801dab8:	2200      	movs	r2, #0
 801daba:	e7e8      	b.n	801da8e <scalbn+0xae>
 801dabc:	f3af 8000 	nop.w
 801dac0:	c2f8f359 	.word	0xc2f8f359
 801dac4:	01a56e1f 	.word	0x01a56e1f
 801dac8:	8800759c 	.word	0x8800759c
 801dacc:	7e37e43c 	.word	0x7e37e43c
 801dad0:	8800759c 	.word	0x8800759c
 801dad4:	fe37e43c 	.word	0xfe37e43c
 801dad8:	c2f8f359 	.word	0xc2f8f359
 801dadc:	81a56e1f 	.word	0x81a56e1f
 801dae0:	43500000 	.word	0x43500000
 801dae4:	ffff3cb0 	.word	0xffff3cb0
 801dae8:	3c900000 	.word	0x3c900000

0801daec <__assert_func>:
 801daec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801daee:	4614      	mov	r4, r2
 801daf0:	461a      	mov	r2, r3
 801daf2:	4b09      	ldr	r3, [pc, #36]	; (801db18 <__assert_func+0x2c>)
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	4605      	mov	r5, r0
 801daf8:	68d8      	ldr	r0, [r3, #12]
 801dafa:	b14c      	cbz	r4, 801db10 <__assert_func+0x24>
 801dafc:	4b07      	ldr	r3, [pc, #28]	; (801db1c <__assert_func+0x30>)
 801dafe:	9100      	str	r1, [sp, #0]
 801db00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801db04:	4906      	ldr	r1, [pc, #24]	; (801db20 <__assert_func+0x34>)
 801db06:	462b      	mov	r3, r5
 801db08:	f000 f814 	bl	801db34 <fiprintf>
 801db0c:	f000 fc0c 	bl	801e328 <abort>
 801db10:	4b04      	ldr	r3, [pc, #16]	; (801db24 <__assert_func+0x38>)
 801db12:	461c      	mov	r4, r3
 801db14:	e7f3      	b.n	801dafe <__assert_func+0x12>
 801db16:	bf00      	nop
 801db18:	200001e8 	.word	0x200001e8
 801db1c:	08029b98 	.word	0x08029b98
 801db20:	08029ba5 	.word	0x08029ba5
 801db24:	08029bd3 	.word	0x08029bd3

0801db28 <__errno>:
 801db28:	4b01      	ldr	r3, [pc, #4]	; (801db30 <__errno+0x8>)
 801db2a:	6818      	ldr	r0, [r3, #0]
 801db2c:	4770      	bx	lr
 801db2e:	bf00      	nop
 801db30:	200001e8 	.word	0x200001e8

0801db34 <fiprintf>:
 801db34:	b40e      	push	{r1, r2, r3}
 801db36:	b503      	push	{r0, r1, lr}
 801db38:	4601      	mov	r1, r0
 801db3a:	ab03      	add	r3, sp, #12
 801db3c:	4805      	ldr	r0, [pc, #20]	; (801db54 <fiprintf+0x20>)
 801db3e:	f853 2b04 	ldr.w	r2, [r3], #4
 801db42:	6800      	ldr	r0, [r0, #0]
 801db44:	9301      	str	r3, [sp, #4]
 801db46:	f000 f86b 	bl	801dc20 <_vfiprintf_r>
 801db4a:	b002      	add	sp, #8
 801db4c:	f85d eb04 	ldr.w	lr, [sp], #4
 801db50:	b003      	add	sp, #12
 801db52:	4770      	bx	lr
 801db54:	200001e8 	.word	0x200001e8

0801db58 <__libc_init_array>:
 801db58:	b570      	push	{r4, r5, r6, lr}
 801db5a:	4d0d      	ldr	r5, [pc, #52]	; (801db90 <__libc_init_array+0x38>)
 801db5c:	4c0d      	ldr	r4, [pc, #52]	; (801db94 <__libc_init_array+0x3c>)
 801db5e:	1b64      	subs	r4, r4, r5
 801db60:	10a4      	asrs	r4, r4, #2
 801db62:	2600      	movs	r6, #0
 801db64:	42a6      	cmp	r6, r4
 801db66:	d109      	bne.n	801db7c <__libc_init_array+0x24>
 801db68:	4d0b      	ldr	r5, [pc, #44]	; (801db98 <__libc_init_array+0x40>)
 801db6a:	4c0c      	ldr	r4, [pc, #48]	; (801db9c <__libc_init_array+0x44>)
 801db6c:	f000 fff0 	bl	801eb50 <_init>
 801db70:	1b64      	subs	r4, r4, r5
 801db72:	10a4      	asrs	r4, r4, #2
 801db74:	2600      	movs	r6, #0
 801db76:	42a6      	cmp	r6, r4
 801db78:	d105      	bne.n	801db86 <__libc_init_array+0x2e>
 801db7a:	bd70      	pop	{r4, r5, r6, pc}
 801db7c:	f855 3b04 	ldr.w	r3, [r5], #4
 801db80:	4798      	blx	r3
 801db82:	3601      	adds	r6, #1
 801db84:	e7ee      	b.n	801db64 <__libc_init_array+0xc>
 801db86:	f855 3b04 	ldr.w	r3, [r5], #4
 801db8a:	4798      	blx	r3
 801db8c:	3601      	adds	r6, #1
 801db8e:	e7f2      	b.n	801db76 <__libc_init_array+0x1e>
 801db90:	08029c74 	.word	0x08029c74
 801db94:	08029c74 	.word	0x08029c74
 801db98:	08029c74 	.word	0x08029c74
 801db9c:	08029c7c 	.word	0x08029c7c

0801dba0 <memcpy>:
 801dba0:	440a      	add	r2, r1
 801dba2:	4291      	cmp	r1, r2
 801dba4:	f100 33ff 	add.w	r3, r0, #4294967295
 801dba8:	d100      	bne.n	801dbac <memcpy+0xc>
 801dbaa:	4770      	bx	lr
 801dbac:	b510      	push	{r4, lr}
 801dbae:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dbb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dbb6:	4291      	cmp	r1, r2
 801dbb8:	d1f9      	bne.n	801dbae <memcpy+0xe>
 801dbba:	bd10      	pop	{r4, pc}

0801dbbc <memset>:
 801dbbc:	4402      	add	r2, r0
 801dbbe:	4603      	mov	r3, r0
 801dbc0:	4293      	cmp	r3, r2
 801dbc2:	d100      	bne.n	801dbc6 <memset+0xa>
 801dbc4:	4770      	bx	lr
 801dbc6:	f803 1b01 	strb.w	r1, [r3], #1
 801dbca:	e7f9      	b.n	801dbc0 <memset+0x4>

0801dbcc <__sfputc_r>:
 801dbcc:	6893      	ldr	r3, [r2, #8]
 801dbce:	3b01      	subs	r3, #1
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	b410      	push	{r4}
 801dbd4:	6093      	str	r3, [r2, #8]
 801dbd6:	da08      	bge.n	801dbea <__sfputc_r+0x1e>
 801dbd8:	6994      	ldr	r4, [r2, #24]
 801dbda:	42a3      	cmp	r3, r4
 801dbdc:	db01      	blt.n	801dbe2 <__sfputc_r+0x16>
 801dbde:	290a      	cmp	r1, #10
 801dbe0:	d103      	bne.n	801dbea <__sfputc_r+0x1e>
 801dbe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dbe6:	f000 badf 	b.w	801e1a8 <__swbuf_r>
 801dbea:	6813      	ldr	r3, [r2, #0]
 801dbec:	1c58      	adds	r0, r3, #1
 801dbee:	6010      	str	r0, [r2, #0]
 801dbf0:	7019      	strb	r1, [r3, #0]
 801dbf2:	4608      	mov	r0, r1
 801dbf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dbf8:	4770      	bx	lr

0801dbfa <__sfputs_r>:
 801dbfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dbfc:	4606      	mov	r6, r0
 801dbfe:	460f      	mov	r7, r1
 801dc00:	4614      	mov	r4, r2
 801dc02:	18d5      	adds	r5, r2, r3
 801dc04:	42ac      	cmp	r4, r5
 801dc06:	d101      	bne.n	801dc0c <__sfputs_r+0x12>
 801dc08:	2000      	movs	r0, #0
 801dc0a:	e007      	b.n	801dc1c <__sfputs_r+0x22>
 801dc0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc10:	463a      	mov	r2, r7
 801dc12:	4630      	mov	r0, r6
 801dc14:	f7ff ffda 	bl	801dbcc <__sfputc_r>
 801dc18:	1c43      	adds	r3, r0, #1
 801dc1a:	d1f3      	bne.n	801dc04 <__sfputs_r+0xa>
 801dc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dc20 <_vfiprintf_r>:
 801dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc24:	460d      	mov	r5, r1
 801dc26:	b09d      	sub	sp, #116	; 0x74
 801dc28:	4614      	mov	r4, r2
 801dc2a:	4698      	mov	r8, r3
 801dc2c:	4606      	mov	r6, r0
 801dc2e:	b118      	cbz	r0, 801dc38 <_vfiprintf_r+0x18>
 801dc30:	6983      	ldr	r3, [r0, #24]
 801dc32:	b90b      	cbnz	r3, 801dc38 <_vfiprintf_r+0x18>
 801dc34:	f000 fc9a 	bl	801e56c <__sinit>
 801dc38:	4b89      	ldr	r3, [pc, #548]	; (801de60 <_vfiprintf_r+0x240>)
 801dc3a:	429d      	cmp	r5, r3
 801dc3c:	d11b      	bne.n	801dc76 <_vfiprintf_r+0x56>
 801dc3e:	6875      	ldr	r5, [r6, #4]
 801dc40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dc42:	07d9      	lsls	r1, r3, #31
 801dc44:	d405      	bmi.n	801dc52 <_vfiprintf_r+0x32>
 801dc46:	89ab      	ldrh	r3, [r5, #12]
 801dc48:	059a      	lsls	r2, r3, #22
 801dc4a:	d402      	bmi.n	801dc52 <_vfiprintf_r+0x32>
 801dc4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dc4e:	f000 fd2b 	bl	801e6a8 <__retarget_lock_acquire_recursive>
 801dc52:	89ab      	ldrh	r3, [r5, #12]
 801dc54:	071b      	lsls	r3, r3, #28
 801dc56:	d501      	bpl.n	801dc5c <_vfiprintf_r+0x3c>
 801dc58:	692b      	ldr	r3, [r5, #16]
 801dc5a:	b9eb      	cbnz	r3, 801dc98 <_vfiprintf_r+0x78>
 801dc5c:	4629      	mov	r1, r5
 801dc5e:	4630      	mov	r0, r6
 801dc60:	f000 faf4 	bl	801e24c <__swsetup_r>
 801dc64:	b1c0      	cbz	r0, 801dc98 <_vfiprintf_r+0x78>
 801dc66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dc68:	07dc      	lsls	r4, r3, #31
 801dc6a:	d50e      	bpl.n	801dc8a <_vfiprintf_r+0x6a>
 801dc6c:	f04f 30ff 	mov.w	r0, #4294967295
 801dc70:	b01d      	add	sp, #116	; 0x74
 801dc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc76:	4b7b      	ldr	r3, [pc, #492]	; (801de64 <_vfiprintf_r+0x244>)
 801dc78:	429d      	cmp	r5, r3
 801dc7a:	d101      	bne.n	801dc80 <_vfiprintf_r+0x60>
 801dc7c:	68b5      	ldr	r5, [r6, #8]
 801dc7e:	e7df      	b.n	801dc40 <_vfiprintf_r+0x20>
 801dc80:	4b79      	ldr	r3, [pc, #484]	; (801de68 <_vfiprintf_r+0x248>)
 801dc82:	429d      	cmp	r5, r3
 801dc84:	bf08      	it	eq
 801dc86:	68f5      	ldreq	r5, [r6, #12]
 801dc88:	e7da      	b.n	801dc40 <_vfiprintf_r+0x20>
 801dc8a:	89ab      	ldrh	r3, [r5, #12]
 801dc8c:	0598      	lsls	r0, r3, #22
 801dc8e:	d4ed      	bmi.n	801dc6c <_vfiprintf_r+0x4c>
 801dc90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dc92:	f000 fd0a 	bl	801e6aa <__retarget_lock_release_recursive>
 801dc96:	e7e9      	b.n	801dc6c <_vfiprintf_r+0x4c>
 801dc98:	2300      	movs	r3, #0
 801dc9a:	9309      	str	r3, [sp, #36]	; 0x24
 801dc9c:	2320      	movs	r3, #32
 801dc9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dca2:	f8cd 800c 	str.w	r8, [sp, #12]
 801dca6:	2330      	movs	r3, #48	; 0x30
 801dca8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801de6c <_vfiprintf_r+0x24c>
 801dcac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dcb0:	f04f 0901 	mov.w	r9, #1
 801dcb4:	4623      	mov	r3, r4
 801dcb6:	469a      	mov	sl, r3
 801dcb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dcbc:	b10a      	cbz	r2, 801dcc2 <_vfiprintf_r+0xa2>
 801dcbe:	2a25      	cmp	r2, #37	; 0x25
 801dcc0:	d1f9      	bne.n	801dcb6 <_vfiprintf_r+0x96>
 801dcc2:	ebba 0b04 	subs.w	fp, sl, r4
 801dcc6:	d00b      	beq.n	801dce0 <_vfiprintf_r+0xc0>
 801dcc8:	465b      	mov	r3, fp
 801dcca:	4622      	mov	r2, r4
 801dccc:	4629      	mov	r1, r5
 801dcce:	4630      	mov	r0, r6
 801dcd0:	f7ff ff93 	bl	801dbfa <__sfputs_r>
 801dcd4:	3001      	adds	r0, #1
 801dcd6:	f000 80aa 	beq.w	801de2e <_vfiprintf_r+0x20e>
 801dcda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dcdc:	445a      	add	r2, fp
 801dcde:	9209      	str	r2, [sp, #36]	; 0x24
 801dce0:	f89a 3000 	ldrb.w	r3, [sl]
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	f000 80a2 	beq.w	801de2e <_vfiprintf_r+0x20e>
 801dcea:	2300      	movs	r3, #0
 801dcec:	f04f 32ff 	mov.w	r2, #4294967295
 801dcf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dcf4:	f10a 0a01 	add.w	sl, sl, #1
 801dcf8:	9304      	str	r3, [sp, #16]
 801dcfa:	9307      	str	r3, [sp, #28]
 801dcfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dd00:	931a      	str	r3, [sp, #104]	; 0x68
 801dd02:	4654      	mov	r4, sl
 801dd04:	2205      	movs	r2, #5
 801dd06:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd0a:	4858      	ldr	r0, [pc, #352]	; (801de6c <_vfiprintf_r+0x24c>)
 801dd0c:	f7e2 fa68 	bl	80001e0 <memchr>
 801dd10:	9a04      	ldr	r2, [sp, #16]
 801dd12:	b9d8      	cbnz	r0, 801dd4c <_vfiprintf_r+0x12c>
 801dd14:	06d1      	lsls	r1, r2, #27
 801dd16:	bf44      	itt	mi
 801dd18:	2320      	movmi	r3, #32
 801dd1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dd1e:	0713      	lsls	r3, r2, #28
 801dd20:	bf44      	itt	mi
 801dd22:	232b      	movmi	r3, #43	; 0x2b
 801dd24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dd28:	f89a 3000 	ldrb.w	r3, [sl]
 801dd2c:	2b2a      	cmp	r3, #42	; 0x2a
 801dd2e:	d015      	beq.n	801dd5c <_vfiprintf_r+0x13c>
 801dd30:	9a07      	ldr	r2, [sp, #28]
 801dd32:	4654      	mov	r4, sl
 801dd34:	2000      	movs	r0, #0
 801dd36:	f04f 0c0a 	mov.w	ip, #10
 801dd3a:	4621      	mov	r1, r4
 801dd3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dd40:	3b30      	subs	r3, #48	; 0x30
 801dd42:	2b09      	cmp	r3, #9
 801dd44:	d94e      	bls.n	801dde4 <_vfiprintf_r+0x1c4>
 801dd46:	b1b0      	cbz	r0, 801dd76 <_vfiprintf_r+0x156>
 801dd48:	9207      	str	r2, [sp, #28]
 801dd4a:	e014      	b.n	801dd76 <_vfiprintf_r+0x156>
 801dd4c:	eba0 0308 	sub.w	r3, r0, r8
 801dd50:	fa09 f303 	lsl.w	r3, r9, r3
 801dd54:	4313      	orrs	r3, r2
 801dd56:	9304      	str	r3, [sp, #16]
 801dd58:	46a2      	mov	sl, r4
 801dd5a:	e7d2      	b.n	801dd02 <_vfiprintf_r+0xe2>
 801dd5c:	9b03      	ldr	r3, [sp, #12]
 801dd5e:	1d19      	adds	r1, r3, #4
 801dd60:	681b      	ldr	r3, [r3, #0]
 801dd62:	9103      	str	r1, [sp, #12]
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	bfbb      	ittet	lt
 801dd68:	425b      	neglt	r3, r3
 801dd6a:	f042 0202 	orrlt.w	r2, r2, #2
 801dd6e:	9307      	strge	r3, [sp, #28]
 801dd70:	9307      	strlt	r3, [sp, #28]
 801dd72:	bfb8      	it	lt
 801dd74:	9204      	strlt	r2, [sp, #16]
 801dd76:	7823      	ldrb	r3, [r4, #0]
 801dd78:	2b2e      	cmp	r3, #46	; 0x2e
 801dd7a:	d10c      	bne.n	801dd96 <_vfiprintf_r+0x176>
 801dd7c:	7863      	ldrb	r3, [r4, #1]
 801dd7e:	2b2a      	cmp	r3, #42	; 0x2a
 801dd80:	d135      	bne.n	801ddee <_vfiprintf_r+0x1ce>
 801dd82:	9b03      	ldr	r3, [sp, #12]
 801dd84:	1d1a      	adds	r2, r3, #4
 801dd86:	681b      	ldr	r3, [r3, #0]
 801dd88:	9203      	str	r2, [sp, #12]
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	bfb8      	it	lt
 801dd8e:	f04f 33ff 	movlt.w	r3, #4294967295
 801dd92:	3402      	adds	r4, #2
 801dd94:	9305      	str	r3, [sp, #20]
 801dd96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801de7c <_vfiprintf_r+0x25c>
 801dd9a:	7821      	ldrb	r1, [r4, #0]
 801dd9c:	2203      	movs	r2, #3
 801dd9e:	4650      	mov	r0, sl
 801dda0:	f7e2 fa1e 	bl	80001e0 <memchr>
 801dda4:	b140      	cbz	r0, 801ddb8 <_vfiprintf_r+0x198>
 801dda6:	2340      	movs	r3, #64	; 0x40
 801dda8:	eba0 000a 	sub.w	r0, r0, sl
 801ddac:	fa03 f000 	lsl.w	r0, r3, r0
 801ddb0:	9b04      	ldr	r3, [sp, #16]
 801ddb2:	4303      	orrs	r3, r0
 801ddb4:	3401      	adds	r4, #1
 801ddb6:	9304      	str	r3, [sp, #16]
 801ddb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ddbc:	482c      	ldr	r0, [pc, #176]	; (801de70 <_vfiprintf_r+0x250>)
 801ddbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ddc2:	2206      	movs	r2, #6
 801ddc4:	f7e2 fa0c 	bl	80001e0 <memchr>
 801ddc8:	2800      	cmp	r0, #0
 801ddca:	d03f      	beq.n	801de4c <_vfiprintf_r+0x22c>
 801ddcc:	4b29      	ldr	r3, [pc, #164]	; (801de74 <_vfiprintf_r+0x254>)
 801ddce:	bb1b      	cbnz	r3, 801de18 <_vfiprintf_r+0x1f8>
 801ddd0:	9b03      	ldr	r3, [sp, #12]
 801ddd2:	3307      	adds	r3, #7
 801ddd4:	f023 0307 	bic.w	r3, r3, #7
 801ddd8:	3308      	adds	r3, #8
 801ddda:	9303      	str	r3, [sp, #12]
 801dddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ddde:	443b      	add	r3, r7
 801dde0:	9309      	str	r3, [sp, #36]	; 0x24
 801dde2:	e767      	b.n	801dcb4 <_vfiprintf_r+0x94>
 801dde4:	fb0c 3202 	mla	r2, ip, r2, r3
 801dde8:	460c      	mov	r4, r1
 801ddea:	2001      	movs	r0, #1
 801ddec:	e7a5      	b.n	801dd3a <_vfiprintf_r+0x11a>
 801ddee:	2300      	movs	r3, #0
 801ddf0:	3401      	adds	r4, #1
 801ddf2:	9305      	str	r3, [sp, #20]
 801ddf4:	4619      	mov	r1, r3
 801ddf6:	f04f 0c0a 	mov.w	ip, #10
 801ddfa:	4620      	mov	r0, r4
 801ddfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801de00:	3a30      	subs	r2, #48	; 0x30
 801de02:	2a09      	cmp	r2, #9
 801de04:	d903      	bls.n	801de0e <_vfiprintf_r+0x1ee>
 801de06:	2b00      	cmp	r3, #0
 801de08:	d0c5      	beq.n	801dd96 <_vfiprintf_r+0x176>
 801de0a:	9105      	str	r1, [sp, #20]
 801de0c:	e7c3      	b.n	801dd96 <_vfiprintf_r+0x176>
 801de0e:	fb0c 2101 	mla	r1, ip, r1, r2
 801de12:	4604      	mov	r4, r0
 801de14:	2301      	movs	r3, #1
 801de16:	e7f0      	b.n	801ddfa <_vfiprintf_r+0x1da>
 801de18:	ab03      	add	r3, sp, #12
 801de1a:	9300      	str	r3, [sp, #0]
 801de1c:	462a      	mov	r2, r5
 801de1e:	4b16      	ldr	r3, [pc, #88]	; (801de78 <_vfiprintf_r+0x258>)
 801de20:	a904      	add	r1, sp, #16
 801de22:	4630      	mov	r0, r6
 801de24:	f3af 8000 	nop.w
 801de28:	4607      	mov	r7, r0
 801de2a:	1c78      	adds	r0, r7, #1
 801de2c:	d1d6      	bne.n	801dddc <_vfiprintf_r+0x1bc>
 801de2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801de30:	07d9      	lsls	r1, r3, #31
 801de32:	d405      	bmi.n	801de40 <_vfiprintf_r+0x220>
 801de34:	89ab      	ldrh	r3, [r5, #12]
 801de36:	059a      	lsls	r2, r3, #22
 801de38:	d402      	bmi.n	801de40 <_vfiprintf_r+0x220>
 801de3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801de3c:	f000 fc35 	bl	801e6aa <__retarget_lock_release_recursive>
 801de40:	89ab      	ldrh	r3, [r5, #12]
 801de42:	065b      	lsls	r3, r3, #25
 801de44:	f53f af12 	bmi.w	801dc6c <_vfiprintf_r+0x4c>
 801de48:	9809      	ldr	r0, [sp, #36]	; 0x24
 801de4a:	e711      	b.n	801dc70 <_vfiprintf_r+0x50>
 801de4c:	ab03      	add	r3, sp, #12
 801de4e:	9300      	str	r3, [sp, #0]
 801de50:	462a      	mov	r2, r5
 801de52:	4b09      	ldr	r3, [pc, #36]	; (801de78 <_vfiprintf_r+0x258>)
 801de54:	a904      	add	r1, sp, #16
 801de56:	4630      	mov	r0, r6
 801de58:	f000 f880 	bl	801df5c <_printf_i>
 801de5c:	e7e4      	b.n	801de28 <_vfiprintf_r+0x208>
 801de5e:	bf00      	nop
 801de60:	08029c2c 	.word	0x08029c2c
 801de64:	08029c4c 	.word	0x08029c4c
 801de68:	08029c0c 	.word	0x08029c0c
 801de6c:	08029bd8 	.word	0x08029bd8
 801de70:	08029be2 	.word	0x08029be2
 801de74:	00000000 	.word	0x00000000
 801de78:	0801dbfb 	.word	0x0801dbfb
 801de7c:	08029bde 	.word	0x08029bde

0801de80 <_printf_common>:
 801de80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de84:	4616      	mov	r6, r2
 801de86:	4699      	mov	r9, r3
 801de88:	688a      	ldr	r2, [r1, #8]
 801de8a:	690b      	ldr	r3, [r1, #16]
 801de8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801de90:	4293      	cmp	r3, r2
 801de92:	bfb8      	it	lt
 801de94:	4613      	movlt	r3, r2
 801de96:	6033      	str	r3, [r6, #0]
 801de98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801de9c:	4607      	mov	r7, r0
 801de9e:	460c      	mov	r4, r1
 801dea0:	b10a      	cbz	r2, 801dea6 <_printf_common+0x26>
 801dea2:	3301      	adds	r3, #1
 801dea4:	6033      	str	r3, [r6, #0]
 801dea6:	6823      	ldr	r3, [r4, #0]
 801dea8:	0699      	lsls	r1, r3, #26
 801deaa:	bf42      	ittt	mi
 801deac:	6833      	ldrmi	r3, [r6, #0]
 801deae:	3302      	addmi	r3, #2
 801deb0:	6033      	strmi	r3, [r6, #0]
 801deb2:	6825      	ldr	r5, [r4, #0]
 801deb4:	f015 0506 	ands.w	r5, r5, #6
 801deb8:	d106      	bne.n	801dec8 <_printf_common+0x48>
 801deba:	f104 0a19 	add.w	sl, r4, #25
 801debe:	68e3      	ldr	r3, [r4, #12]
 801dec0:	6832      	ldr	r2, [r6, #0]
 801dec2:	1a9b      	subs	r3, r3, r2
 801dec4:	42ab      	cmp	r3, r5
 801dec6:	dc26      	bgt.n	801df16 <_printf_common+0x96>
 801dec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801decc:	1e13      	subs	r3, r2, #0
 801dece:	6822      	ldr	r2, [r4, #0]
 801ded0:	bf18      	it	ne
 801ded2:	2301      	movne	r3, #1
 801ded4:	0692      	lsls	r2, r2, #26
 801ded6:	d42b      	bmi.n	801df30 <_printf_common+0xb0>
 801ded8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801dedc:	4649      	mov	r1, r9
 801dede:	4638      	mov	r0, r7
 801dee0:	47c0      	blx	r8
 801dee2:	3001      	adds	r0, #1
 801dee4:	d01e      	beq.n	801df24 <_printf_common+0xa4>
 801dee6:	6823      	ldr	r3, [r4, #0]
 801dee8:	68e5      	ldr	r5, [r4, #12]
 801deea:	6832      	ldr	r2, [r6, #0]
 801deec:	f003 0306 	and.w	r3, r3, #6
 801def0:	2b04      	cmp	r3, #4
 801def2:	bf08      	it	eq
 801def4:	1aad      	subeq	r5, r5, r2
 801def6:	68a3      	ldr	r3, [r4, #8]
 801def8:	6922      	ldr	r2, [r4, #16]
 801defa:	bf0c      	ite	eq
 801defc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801df00:	2500      	movne	r5, #0
 801df02:	4293      	cmp	r3, r2
 801df04:	bfc4      	itt	gt
 801df06:	1a9b      	subgt	r3, r3, r2
 801df08:	18ed      	addgt	r5, r5, r3
 801df0a:	2600      	movs	r6, #0
 801df0c:	341a      	adds	r4, #26
 801df0e:	42b5      	cmp	r5, r6
 801df10:	d11a      	bne.n	801df48 <_printf_common+0xc8>
 801df12:	2000      	movs	r0, #0
 801df14:	e008      	b.n	801df28 <_printf_common+0xa8>
 801df16:	2301      	movs	r3, #1
 801df18:	4652      	mov	r2, sl
 801df1a:	4649      	mov	r1, r9
 801df1c:	4638      	mov	r0, r7
 801df1e:	47c0      	blx	r8
 801df20:	3001      	adds	r0, #1
 801df22:	d103      	bne.n	801df2c <_printf_common+0xac>
 801df24:	f04f 30ff 	mov.w	r0, #4294967295
 801df28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df2c:	3501      	adds	r5, #1
 801df2e:	e7c6      	b.n	801debe <_printf_common+0x3e>
 801df30:	18e1      	adds	r1, r4, r3
 801df32:	1c5a      	adds	r2, r3, #1
 801df34:	2030      	movs	r0, #48	; 0x30
 801df36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801df3a:	4422      	add	r2, r4
 801df3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801df40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801df44:	3302      	adds	r3, #2
 801df46:	e7c7      	b.n	801ded8 <_printf_common+0x58>
 801df48:	2301      	movs	r3, #1
 801df4a:	4622      	mov	r2, r4
 801df4c:	4649      	mov	r1, r9
 801df4e:	4638      	mov	r0, r7
 801df50:	47c0      	blx	r8
 801df52:	3001      	adds	r0, #1
 801df54:	d0e6      	beq.n	801df24 <_printf_common+0xa4>
 801df56:	3601      	adds	r6, #1
 801df58:	e7d9      	b.n	801df0e <_printf_common+0x8e>
	...

0801df5c <_printf_i>:
 801df5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801df60:	7e0f      	ldrb	r7, [r1, #24]
 801df62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801df64:	2f78      	cmp	r7, #120	; 0x78
 801df66:	4691      	mov	r9, r2
 801df68:	4680      	mov	r8, r0
 801df6a:	460c      	mov	r4, r1
 801df6c:	469a      	mov	sl, r3
 801df6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801df72:	d807      	bhi.n	801df84 <_printf_i+0x28>
 801df74:	2f62      	cmp	r7, #98	; 0x62
 801df76:	d80a      	bhi.n	801df8e <_printf_i+0x32>
 801df78:	2f00      	cmp	r7, #0
 801df7a:	f000 80d8 	beq.w	801e12e <_printf_i+0x1d2>
 801df7e:	2f58      	cmp	r7, #88	; 0x58
 801df80:	f000 80a3 	beq.w	801e0ca <_printf_i+0x16e>
 801df84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801df88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801df8c:	e03a      	b.n	801e004 <_printf_i+0xa8>
 801df8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801df92:	2b15      	cmp	r3, #21
 801df94:	d8f6      	bhi.n	801df84 <_printf_i+0x28>
 801df96:	a101      	add	r1, pc, #4	; (adr r1, 801df9c <_printf_i+0x40>)
 801df98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801df9c:	0801dff5 	.word	0x0801dff5
 801dfa0:	0801e009 	.word	0x0801e009
 801dfa4:	0801df85 	.word	0x0801df85
 801dfa8:	0801df85 	.word	0x0801df85
 801dfac:	0801df85 	.word	0x0801df85
 801dfb0:	0801df85 	.word	0x0801df85
 801dfb4:	0801e009 	.word	0x0801e009
 801dfb8:	0801df85 	.word	0x0801df85
 801dfbc:	0801df85 	.word	0x0801df85
 801dfc0:	0801df85 	.word	0x0801df85
 801dfc4:	0801df85 	.word	0x0801df85
 801dfc8:	0801e115 	.word	0x0801e115
 801dfcc:	0801e039 	.word	0x0801e039
 801dfd0:	0801e0f7 	.word	0x0801e0f7
 801dfd4:	0801df85 	.word	0x0801df85
 801dfd8:	0801df85 	.word	0x0801df85
 801dfdc:	0801e137 	.word	0x0801e137
 801dfe0:	0801df85 	.word	0x0801df85
 801dfe4:	0801e039 	.word	0x0801e039
 801dfe8:	0801df85 	.word	0x0801df85
 801dfec:	0801df85 	.word	0x0801df85
 801dff0:	0801e0ff 	.word	0x0801e0ff
 801dff4:	682b      	ldr	r3, [r5, #0]
 801dff6:	1d1a      	adds	r2, r3, #4
 801dff8:	681b      	ldr	r3, [r3, #0]
 801dffa:	602a      	str	r2, [r5, #0]
 801dffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e000:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e004:	2301      	movs	r3, #1
 801e006:	e0a3      	b.n	801e150 <_printf_i+0x1f4>
 801e008:	6820      	ldr	r0, [r4, #0]
 801e00a:	6829      	ldr	r1, [r5, #0]
 801e00c:	0606      	lsls	r6, r0, #24
 801e00e:	f101 0304 	add.w	r3, r1, #4
 801e012:	d50a      	bpl.n	801e02a <_printf_i+0xce>
 801e014:	680e      	ldr	r6, [r1, #0]
 801e016:	602b      	str	r3, [r5, #0]
 801e018:	2e00      	cmp	r6, #0
 801e01a:	da03      	bge.n	801e024 <_printf_i+0xc8>
 801e01c:	232d      	movs	r3, #45	; 0x2d
 801e01e:	4276      	negs	r6, r6
 801e020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e024:	485e      	ldr	r0, [pc, #376]	; (801e1a0 <_printf_i+0x244>)
 801e026:	230a      	movs	r3, #10
 801e028:	e019      	b.n	801e05e <_printf_i+0x102>
 801e02a:	680e      	ldr	r6, [r1, #0]
 801e02c:	602b      	str	r3, [r5, #0]
 801e02e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e032:	bf18      	it	ne
 801e034:	b236      	sxthne	r6, r6
 801e036:	e7ef      	b.n	801e018 <_printf_i+0xbc>
 801e038:	682b      	ldr	r3, [r5, #0]
 801e03a:	6820      	ldr	r0, [r4, #0]
 801e03c:	1d19      	adds	r1, r3, #4
 801e03e:	6029      	str	r1, [r5, #0]
 801e040:	0601      	lsls	r1, r0, #24
 801e042:	d501      	bpl.n	801e048 <_printf_i+0xec>
 801e044:	681e      	ldr	r6, [r3, #0]
 801e046:	e002      	b.n	801e04e <_printf_i+0xf2>
 801e048:	0646      	lsls	r6, r0, #25
 801e04a:	d5fb      	bpl.n	801e044 <_printf_i+0xe8>
 801e04c:	881e      	ldrh	r6, [r3, #0]
 801e04e:	4854      	ldr	r0, [pc, #336]	; (801e1a0 <_printf_i+0x244>)
 801e050:	2f6f      	cmp	r7, #111	; 0x6f
 801e052:	bf0c      	ite	eq
 801e054:	2308      	moveq	r3, #8
 801e056:	230a      	movne	r3, #10
 801e058:	2100      	movs	r1, #0
 801e05a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e05e:	6865      	ldr	r5, [r4, #4]
 801e060:	60a5      	str	r5, [r4, #8]
 801e062:	2d00      	cmp	r5, #0
 801e064:	bfa2      	ittt	ge
 801e066:	6821      	ldrge	r1, [r4, #0]
 801e068:	f021 0104 	bicge.w	r1, r1, #4
 801e06c:	6021      	strge	r1, [r4, #0]
 801e06e:	b90e      	cbnz	r6, 801e074 <_printf_i+0x118>
 801e070:	2d00      	cmp	r5, #0
 801e072:	d04d      	beq.n	801e110 <_printf_i+0x1b4>
 801e074:	4615      	mov	r5, r2
 801e076:	fbb6 f1f3 	udiv	r1, r6, r3
 801e07a:	fb03 6711 	mls	r7, r3, r1, r6
 801e07e:	5dc7      	ldrb	r7, [r0, r7]
 801e080:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e084:	4637      	mov	r7, r6
 801e086:	42bb      	cmp	r3, r7
 801e088:	460e      	mov	r6, r1
 801e08a:	d9f4      	bls.n	801e076 <_printf_i+0x11a>
 801e08c:	2b08      	cmp	r3, #8
 801e08e:	d10b      	bne.n	801e0a8 <_printf_i+0x14c>
 801e090:	6823      	ldr	r3, [r4, #0]
 801e092:	07de      	lsls	r6, r3, #31
 801e094:	d508      	bpl.n	801e0a8 <_printf_i+0x14c>
 801e096:	6923      	ldr	r3, [r4, #16]
 801e098:	6861      	ldr	r1, [r4, #4]
 801e09a:	4299      	cmp	r1, r3
 801e09c:	bfde      	ittt	le
 801e09e:	2330      	movle	r3, #48	; 0x30
 801e0a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e0a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e0a8:	1b52      	subs	r2, r2, r5
 801e0aa:	6122      	str	r2, [r4, #16]
 801e0ac:	f8cd a000 	str.w	sl, [sp]
 801e0b0:	464b      	mov	r3, r9
 801e0b2:	aa03      	add	r2, sp, #12
 801e0b4:	4621      	mov	r1, r4
 801e0b6:	4640      	mov	r0, r8
 801e0b8:	f7ff fee2 	bl	801de80 <_printf_common>
 801e0bc:	3001      	adds	r0, #1
 801e0be:	d14c      	bne.n	801e15a <_printf_i+0x1fe>
 801e0c0:	f04f 30ff 	mov.w	r0, #4294967295
 801e0c4:	b004      	add	sp, #16
 801e0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e0ca:	4835      	ldr	r0, [pc, #212]	; (801e1a0 <_printf_i+0x244>)
 801e0cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e0d0:	6829      	ldr	r1, [r5, #0]
 801e0d2:	6823      	ldr	r3, [r4, #0]
 801e0d4:	f851 6b04 	ldr.w	r6, [r1], #4
 801e0d8:	6029      	str	r1, [r5, #0]
 801e0da:	061d      	lsls	r5, r3, #24
 801e0dc:	d514      	bpl.n	801e108 <_printf_i+0x1ac>
 801e0de:	07df      	lsls	r7, r3, #31
 801e0e0:	bf44      	itt	mi
 801e0e2:	f043 0320 	orrmi.w	r3, r3, #32
 801e0e6:	6023      	strmi	r3, [r4, #0]
 801e0e8:	b91e      	cbnz	r6, 801e0f2 <_printf_i+0x196>
 801e0ea:	6823      	ldr	r3, [r4, #0]
 801e0ec:	f023 0320 	bic.w	r3, r3, #32
 801e0f0:	6023      	str	r3, [r4, #0]
 801e0f2:	2310      	movs	r3, #16
 801e0f4:	e7b0      	b.n	801e058 <_printf_i+0xfc>
 801e0f6:	6823      	ldr	r3, [r4, #0]
 801e0f8:	f043 0320 	orr.w	r3, r3, #32
 801e0fc:	6023      	str	r3, [r4, #0]
 801e0fe:	2378      	movs	r3, #120	; 0x78
 801e100:	4828      	ldr	r0, [pc, #160]	; (801e1a4 <_printf_i+0x248>)
 801e102:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e106:	e7e3      	b.n	801e0d0 <_printf_i+0x174>
 801e108:	0659      	lsls	r1, r3, #25
 801e10a:	bf48      	it	mi
 801e10c:	b2b6      	uxthmi	r6, r6
 801e10e:	e7e6      	b.n	801e0de <_printf_i+0x182>
 801e110:	4615      	mov	r5, r2
 801e112:	e7bb      	b.n	801e08c <_printf_i+0x130>
 801e114:	682b      	ldr	r3, [r5, #0]
 801e116:	6826      	ldr	r6, [r4, #0]
 801e118:	6961      	ldr	r1, [r4, #20]
 801e11a:	1d18      	adds	r0, r3, #4
 801e11c:	6028      	str	r0, [r5, #0]
 801e11e:	0635      	lsls	r5, r6, #24
 801e120:	681b      	ldr	r3, [r3, #0]
 801e122:	d501      	bpl.n	801e128 <_printf_i+0x1cc>
 801e124:	6019      	str	r1, [r3, #0]
 801e126:	e002      	b.n	801e12e <_printf_i+0x1d2>
 801e128:	0670      	lsls	r0, r6, #25
 801e12a:	d5fb      	bpl.n	801e124 <_printf_i+0x1c8>
 801e12c:	8019      	strh	r1, [r3, #0]
 801e12e:	2300      	movs	r3, #0
 801e130:	6123      	str	r3, [r4, #16]
 801e132:	4615      	mov	r5, r2
 801e134:	e7ba      	b.n	801e0ac <_printf_i+0x150>
 801e136:	682b      	ldr	r3, [r5, #0]
 801e138:	1d1a      	adds	r2, r3, #4
 801e13a:	602a      	str	r2, [r5, #0]
 801e13c:	681d      	ldr	r5, [r3, #0]
 801e13e:	6862      	ldr	r2, [r4, #4]
 801e140:	2100      	movs	r1, #0
 801e142:	4628      	mov	r0, r5
 801e144:	f7e2 f84c 	bl	80001e0 <memchr>
 801e148:	b108      	cbz	r0, 801e14e <_printf_i+0x1f2>
 801e14a:	1b40      	subs	r0, r0, r5
 801e14c:	6060      	str	r0, [r4, #4]
 801e14e:	6863      	ldr	r3, [r4, #4]
 801e150:	6123      	str	r3, [r4, #16]
 801e152:	2300      	movs	r3, #0
 801e154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e158:	e7a8      	b.n	801e0ac <_printf_i+0x150>
 801e15a:	6923      	ldr	r3, [r4, #16]
 801e15c:	462a      	mov	r2, r5
 801e15e:	4649      	mov	r1, r9
 801e160:	4640      	mov	r0, r8
 801e162:	47d0      	blx	sl
 801e164:	3001      	adds	r0, #1
 801e166:	d0ab      	beq.n	801e0c0 <_printf_i+0x164>
 801e168:	6823      	ldr	r3, [r4, #0]
 801e16a:	079b      	lsls	r3, r3, #30
 801e16c:	d413      	bmi.n	801e196 <_printf_i+0x23a>
 801e16e:	68e0      	ldr	r0, [r4, #12]
 801e170:	9b03      	ldr	r3, [sp, #12]
 801e172:	4298      	cmp	r0, r3
 801e174:	bfb8      	it	lt
 801e176:	4618      	movlt	r0, r3
 801e178:	e7a4      	b.n	801e0c4 <_printf_i+0x168>
 801e17a:	2301      	movs	r3, #1
 801e17c:	4632      	mov	r2, r6
 801e17e:	4649      	mov	r1, r9
 801e180:	4640      	mov	r0, r8
 801e182:	47d0      	blx	sl
 801e184:	3001      	adds	r0, #1
 801e186:	d09b      	beq.n	801e0c0 <_printf_i+0x164>
 801e188:	3501      	adds	r5, #1
 801e18a:	68e3      	ldr	r3, [r4, #12]
 801e18c:	9903      	ldr	r1, [sp, #12]
 801e18e:	1a5b      	subs	r3, r3, r1
 801e190:	42ab      	cmp	r3, r5
 801e192:	dcf2      	bgt.n	801e17a <_printf_i+0x21e>
 801e194:	e7eb      	b.n	801e16e <_printf_i+0x212>
 801e196:	2500      	movs	r5, #0
 801e198:	f104 0619 	add.w	r6, r4, #25
 801e19c:	e7f5      	b.n	801e18a <_printf_i+0x22e>
 801e19e:	bf00      	nop
 801e1a0:	08029be9 	.word	0x08029be9
 801e1a4:	08029bfa 	.word	0x08029bfa

0801e1a8 <__swbuf_r>:
 801e1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1aa:	460e      	mov	r6, r1
 801e1ac:	4614      	mov	r4, r2
 801e1ae:	4605      	mov	r5, r0
 801e1b0:	b118      	cbz	r0, 801e1ba <__swbuf_r+0x12>
 801e1b2:	6983      	ldr	r3, [r0, #24]
 801e1b4:	b90b      	cbnz	r3, 801e1ba <__swbuf_r+0x12>
 801e1b6:	f000 f9d9 	bl	801e56c <__sinit>
 801e1ba:	4b21      	ldr	r3, [pc, #132]	; (801e240 <__swbuf_r+0x98>)
 801e1bc:	429c      	cmp	r4, r3
 801e1be:	d12b      	bne.n	801e218 <__swbuf_r+0x70>
 801e1c0:	686c      	ldr	r4, [r5, #4]
 801e1c2:	69a3      	ldr	r3, [r4, #24]
 801e1c4:	60a3      	str	r3, [r4, #8]
 801e1c6:	89a3      	ldrh	r3, [r4, #12]
 801e1c8:	071a      	lsls	r2, r3, #28
 801e1ca:	d52f      	bpl.n	801e22c <__swbuf_r+0x84>
 801e1cc:	6923      	ldr	r3, [r4, #16]
 801e1ce:	b36b      	cbz	r3, 801e22c <__swbuf_r+0x84>
 801e1d0:	6923      	ldr	r3, [r4, #16]
 801e1d2:	6820      	ldr	r0, [r4, #0]
 801e1d4:	1ac0      	subs	r0, r0, r3
 801e1d6:	6963      	ldr	r3, [r4, #20]
 801e1d8:	b2f6      	uxtb	r6, r6
 801e1da:	4283      	cmp	r3, r0
 801e1dc:	4637      	mov	r7, r6
 801e1de:	dc04      	bgt.n	801e1ea <__swbuf_r+0x42>
 801e1e0:	4621      	mov	r1, r4
 801e1e2:	4628      	mov	r0, r5
 801e1e4:	f000 f92e 	bl	801e444 <_fflush_r>
 801e1e8:	bb30      	cbnz	r0, 801e238 <__swbuf_r+0x90>
 801e1ea:	68a3      	ldr	r3, [r4, #8]
 801e1ec:	3b01      	subs	r3, #1
 801e1ee:	60a3      	str	r3, [r4, #8]
 801e1f0:	6823      	ldr	r3, [r4, #0]
 801e1f2:	1c5a      	adds	r2, r3, #1
 801e1f4:	6022      	str	r2, [r4, #0]
 801e1f6:	701e      	strb	r6, [r3, #0]
 801e1f8:	6963      	ldr	r3, [r4, #20]
 801e1fa:	3001      	adds	r0, #1
 801e1fc:	4283      	cmp	r3, r0
 801e1fe:	d004      	beq.n	801e20a <__swbuf_r+0x62>
 801e200:	89a3      	ldrh	r3, [r4, #12]
 801e202:	07db      	lsls	r3, r3, #31
 801e204:	d506      	bpl.n	801e214 <__swbuf_r+0x6c>
 801e206:	2e0a      	cmp	r6, #10
 801e208:	d104      	bne.n	801e214 <__swbuf_r+0x6c>
 801e20a:	4621      	mov	r1, r4
 801e20c:	4628      	mov	r0, r5
 801e20e:	f000 f919 	bl	801e444 <_fflush_r>
 801e212:	b988      	cbnz	r0, 801e238 <__swbuf_r+0x90>
 801e214:	4638      	mov	r0, r7
 801e216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e218:	4b0a      	ldr	r3, [pc, #40]	; (801e244 <__swbuf_r+0x9c>)
 801e21a:	429c      	cmp	r4, r3
 801e21c:	d101      	bne.n	801e222 <__swbuf_r+0x7a>
 801e21e:	68ac      	ldr	r4, [r5, #8]
 801e220:	e7cf      	b.n	801e1c2 <__swbuf_r+0x1a>
 801e222:	4b09      	ldr	r3, [pc, #36]	; (801e248 <__swbuf_r+0xa0>)
 801e224:	429c      	cmp	r4, r3
 801e226:	bf08      	it	eq
 801e228:	68ec      	ldreq	r4, [r5, #12]
 801e22a:	e7ca      	b.n	801e1c2 <__swbuf_r+0x1a>
 801e22c:	4621      	mov	r1, r4
 801e22e:	4628      	mov	r0, r5
 801e230:	f000 f80c 	bl	801e24c <__swsetup_r>
 801e234:	2800      	cmp	r0, #0
 801e236:	d0cb      	beq.n	801e1d0 <__swbuf_r+0x28>
 801e238:	f04f 37ff 	mov.w	r7, #4294967295
 801e23c:	e7ea      	b.n	801e214 <__swbuf_r+0x6c>
 801e23e:	bf00      	nop
 801e240:	08029c2c 	.word	0x08029c2c
 801e244:	08029c4c 	.word	0x08029c4c
 801e248:	08029c0c 	.word	0x08029c0c

0801e24c <__swsetup_r>:
 801e24c:	4b32      	ldr	r3, [pc, #200]	; (801e318 <__swsetup_r+0xcc>)
 801e24e:	b570      	push	{r4, r5, r6, lr}
 801e250:	681d      	ldr	r5, [r3, #0]
 801e252:	4606      	mov	r6, r0
 801e254:	460c      	mov	r4, r1
 801e256:	b125      	cbz	r5, 801e262 <__swsetup_r+0x16>
 801e258:	69ab      	ldr	r3, [r5, #24]
 801e25a:	b913      	cbnz	r3, 801e262 <__swsetup_r+0x16>
 801e25c:	4628      	mov	r0, r5
 801e25e:	f000 f985 	bl	801e56c <__sinit>
 801e262:	4b2e      	ldr	r3, [pc, #184]	; (801e31c <__swsetup_r+0xd0>)
 801e264:	429c      	cmp	r4, r3
 801e266:	d10f      	bne.n	801e288 <__swsetup_r+0x3c>
 801e268:	686c      	ldr	r4, [r5, #4]
 801e26a:	89a3      	ldrh	r3, [r4, #12]
 801e26c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e270:	0719      	lsls	r1, r3, #28
 801e272:	d42c      	bmi.n	801e2ce <__swsetup_r+0x82>
 801e274:	06dd      	lsls	r5, r3, #27
 801e276:	d411      	bmi.n	801e29c <__swsetup_r+0x50>
 801e278:	2309      	movs	r3, #9
 801e27a:	6033      	str	r3, [r6, #0]
 801e27c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e280:	81a3      	strh	r3, [r4, #12]
 801e282:	f04f 30ff 	mov.w	r0, #4294967295
 801e286:	e03e      	b.n	801e306 <__swsetup_r+0xba>
 801e288:	4b25      	ldr	r3, [pc, #148]	; (801e320 <__swsetup_r+0xd4>)
 801e28a:	429c      	cmp	r4, r3
 801e28c:	d101      	bne.n	801e292 <__swsetup_r+0x46>
 801e28e:	68ac      	ldr	r4, [r5, #8]
 801e290:	e7eb      	b.n	801e26a <__swsetup_r+0x1e>
 801e292:	4b24      	ldr	r3, [pc, #144]	; (801e324 <__swsetup_r+0xd8>)
 801e294:	429c      	cmp	r4, r3
 801e296:	bf08      	it	eq
 801e298:	68ec      	ldreq	r4, [r5, #12]
 801e29a:	e7e6      	b.n	801e26a <__swsetup_r+0x1e>
 801e29c:	0758      	lsls	r0, r3, #29
 801e29e:	d512      	bpl.n	801e2c6 <__swsetup_r+0x7a>
 801e2a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e2a2:	b141      	cbz	r1, 801e2b6 <__swsetup_r+0x6a>
 801e2a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e2a8:	4299      	cmp	r1, r3
 801e2aa:	d002      	beq.n	801e2b2 <__swsetup_r+0x66>
 801e2ac:	4630      	mov	r0, r6
 801e2ae:	f000 fa63 	bl	801e778 <_free_r>
 801e2b2:	2300      	movs	r3, #0
 801e2b4:	6363      	str	r3, [r4, #52]	; 0x34
 801e2b6:	89a3      	ldrh	r3, [r4, #12]
 801e2b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e2bc:	81a3      	strh	r3, [r4, #12]
 801e2be:	2300      	movs	r3, #0
 801e2c0:	6063      	str	r3, [r4, #4]
 801e2c2:	6923      	ldr	r3, [r4, #16]
 801e2c4:	6023      	str	r3, [r4, #0]
 801e2c6:	89a3      	ldrh	r3, [r4, #12]
 801e2c8:	f043 0308 	orr.w	r3, r3, #8
 801e2cc:	81a3      	strh	r3, [r4, #12]
 801e2ce:	6923      	ldr	r3, [r4, #16]
 801e2d0:	b94b      	cbnz	r3, 801e2e6 <__swsetup_r+0x9a>
 801e2d2:	89a3      	ldrh	r3, [r4, #12]
 801e2d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e2d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e2dc:	d003      	beq.n	801e2e6 <__swsetup_r+0x9a>
 801e2de:	4621      	mov	r1, r4
 801e2e0:	4630      	mov	r0, r6
 801e2e2:	f000 fa09 	bl	801e6f8 <__smakebuf_r>
 801e2e6:	89a0      	ldrh	r0, [r4, #12]
 801e2e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e2ec:	f010 0301 	ands.w	r3, r0, #1
 801e2f0:	d00a      	beq.n	801e308 <__swsetup_r+0xbc>
 801e2f2:	2300      	movs	r3, #0
 801e2f4:	60a3      	str	r3, [r4, #8]
 801e2f6:	6963      	ldr	r3, [r4, #20]
 801e2f8:	425b      	negs	r3, r3
 801e2fa:	61a3      	str	r3, [r4, #24]
 801e2fc:	6923      	ldr	r3, [r4, #16]
 801e2fe:	b943      	cbnz	r3, 801e312 <__swsetup_r+0xc6>
 801e300:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e304:	d1ba      	bne.n	801e27c <__swsetup_r+0x30>
 801e306:	bd70      	pop	{r4, r5, r6, pc}
 801e308:	0781      	lsls	r1, r0, #30
 801e30a:	bf58      	it	pl
 801e30c:	6963      	ldrpl	r3, [r4, #20]
 801e30e:	60a3      	str	r3, [r4, #8]
 801e310:	e7f4      	b.n	801e2fc <__swsetup_r+0xb0>
 801e312:	2000      	movs	r0, #0
 801e314:	e7f7      	b.n	801e306 <__swsetup_r+0xba>
 801e316:	bf00      	nop
 801e318:	200001e8 	.word	0x200001e8
 801e31c:	08029c2c 	.word	0x08029c2c
 801e320:	08029c4c 	.word	0x08029c4c
 801e324:	08029c0c 	.word	0x08029c0c

0801e328 <abort>:
 801e328:	b508      	push	{r3, lr}
 801e32a:	2006      	movs	r0, #6
 801e32c:	f000 fb3c 	bl	801e9a8 <raise>
 801e330:	2001      	movs	r0, #1
 801e332:	f7f7 fee7 	bl	8016104 <_exit>
	...

0801e338 <__sflush_r>:
 801e338:	898a      	ldrh	r2, [r1, #12]
 801e33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e33e:	4605      	mov	r5, r0
 801e340:	0710      	lsls	r0, r2, #28
 801e342:	460c      	mov	r4, r1
 801e344:	d458      	bmi.n	801e3f8 <__sflush_r+0xc0>
 801e346:	684b      	ldr	r3, [r1, #4]
 801e348:	2b00      	cmp	r3, #0
 801e34a:	dc05      	bgt.n	801e358 <__sflush_r+0x20>
 801e34c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e34e:	2b00      	cmp	r3, #0
 801e350:	dc02      	bgt.n	801e358 <__sflush_r+0x20>
 801e352:	2000      	movs	r0, #0
 801e354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e35a:	2e00      	cmp	r6, #0
 801e35c:	d0f9      	beq.n	801e352 <__sflush_r+0x1a>
 801e35e:	2300      	movs	r3, #0
 801e360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e364:	682f      	ldr	r7, [r5, #0]
 801e366:	602b      	str	r3, [r5, #0]
 801e368:	d032      	beq.n	801e3d0 <__sflush_r+0x98>
 801e36a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e36c:	89a3      	ldrh	r3, [r4, #12]
 801e36e:	075a      	lsls	r2, r3, #29
 801e370:	d505      	bpl.n	801e37e <__sflush_r+0x46>
 801e372:	6863      	ldr	r3, [r4, #4]
 801e374:	1ac0      	subs	r0, r0, r3
 801e376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e378:	b10b      	cbz	r3, 801e37e <__sflush_r+0x46>
 801e37a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e37c:	1ac0      	subs	r0, r0, r3
 801e37e:	2300      	movs	r3, #0
 801e380:	4602      	mov	r2, r0
 801e382:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e384:	6a21      	ldr	r1, [r4, #32]
 801e386:	4628      	mov	r0, r5
 801e388:	47b0      	blx	r6
 801e38a:	1c43      	adds	r3, r0, #1
 801e38c:	89a3      	ldrh	r3, [r4, #12]
 801e38e:	d106      	bne.n	801e39e <__sflush_r+0x66>
 801e390:	6829      	ldr	r1, [r5, #0]
 801e392:	291d      	cmp	r1, #29
 801e394:	d82c      	bhi.n	801e3f0 <__sflush_r+0xb8>
 801e396:	4a2a      	ldr	r2, [pc, #168]	; (801e440 <__sflush_r+0x108>)
 801e398:	40ca      	lsrs	r2, r1
 801e39a:	07d6      	lsls	r6, r2, #31
 801e39c:	d528      	bpl.n	801e3f0 <__sflush_r+0xb8>
 801e39e:	2200      	movs	r2, #0
 801e3a0:	6062      	str	r2, [r4, #4]
 801e3a2:	04d9      	lsls	r1, r3, #19
 801e3a4:	6922      	ldr	r2, [r4, #16]
 801e3a6:	6022      	str	r2, [r4, #0]
 801e3a8:	d504      	bpl.n	801e3b4 <__sflush_r+0x7c>
 801e3aa:	1c42      	adds	r2, r0, #1
 801e3ac:	d101      	bne.n	801e3b2 <__sflush_r+0x7a>
 801e3ae:	682b      	ldr	r3, [r5, #0]
 801e3b0:	b903      	cbnz	r3, 801e3b4 <__sflush_r+0x7c>
 801e3b2:	6560      	str	r0, [r4, #84]	; 0x54
 801e3b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e3b6:	602f      	str	r7, [r5, #0]
 801e3b8:	2900      	cmp	r1, #0
 801e3ba:	d0ca      	beq.n	801e352 <__sflush_r+0x1a>
 801e3bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e3c0:	4299      	cmp	r1, r3
 801e3c2:	d002      	beq.n	801e3ca <__sflush_r+0x92>
 801e3c4:	4628      	mov	r0, r5
 801e3c6:	f000 f9d7 	bl	801e778 <_free_r>
 801e3ca:	2000      	movs	r0, #0
 801e3cc:	6360      	str	r0, [r4, #52]	; 0x34
 801e3ce:	e7c1      	b.n	801e354 <__sflush_r+0x1c>
 801e3d0:	6a21      	ldr	r1, [r4, #32]
 801e3d2:	2301      	movs	r3, #1
 801e3d4:	4628      	mov	r0, r5
 801e3d6:	47b0      	blx	r6
 801e3d8:	1c41      	adds	r1, r0, #1
 801e3da:	d1c7      	bne.n	801e36c <__sflush_r+0x34>
 801e3dc:	682b      	ldr	r3, [r5, #0]
 801e3de:	2b00      	cmp	r3, #0
 801e3e0:	d0c4      	beq.n	801e36c <__sflush_r+0x34>
 801e3e2:	2b1d      	cmp	r3, #29
 801e3e4:	d001      	beq.n	801e3ea <__sflush_r+0xb2>
 801e3e6:	2b16      	cmp	r3, #22
 801e3e8:	d101      	bne.n	801e3ee <__sflush_r+0xb6>
 801e3ea:	602f      	str	r7, [r5, #0]
 801e3ec:	e7b1      	b.n	801e352 <__sflush_r+0x1a>
 801e3ee:	89a3      	ldrh	r3, [r4, #12]
 801e3f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e3f4:	81a3      	strh	r3, [r4, #12]
 801e3f6:	e7ad      	b.n	801e354 <__sflush_r+0x1c>
 801e3f8:	690f      	ldr	r7, [r1, #16]
 801e3fa:	2f00      	cmp	r7, #0
 801e3fc:	d0a9      	beq.n	801e352 <__sflush_r+0x1a>
 801e3fe:	0793      	lsls	r3, r2, #30
 801e400:	680e      	ldr	r6, [r1, #0]
 801e402:	bf08      	it	eq
 801e404:	694b      	ldreq	r3, [r1, #20]
 801e406:	600f      	str	r7, [r1, #0]
 801e408:	bf18      	it	ne
 801e40a:	2300      	movne	r3, #0
 801e40c:	eba6 0807 	sub.w	r8, r6, r7
 801e410:	608b      	str	r3, [r1, #8]
 801e412:	f1b8 0f00 	cmp.w	r8, #0
 801e416:	dd9c      	ble.n	801e352 <__sflush_r+0x1a>
 801e418:	6a21      	ldr	r1, [r4, #32]
 801e41a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e41c:	4643      	mov	r3, r8
 801e41e:	463a      	mov	r2, r7
 801e420:	4628      	mov	r0, r5
 801e422:	47b0      	blx	r6
 801e424:	2800      	cmp	r0, #0
 801e426:	dc06      	bgt.n	801e436 <__sflush_r+0xfe>
 801e428:	89a3      	ldrh	r3, [r4, #12]
 801e42a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e42e:	81a3      	strh	r3, [r4, #12]
 801e430:	f04f 30ff 	mov.w	r0, #4294967295
 801e434:	e78e      	b.n	801e354 <__sflush_r+0x1c>
 801e436:	4407      	add	r7, r0
 801e438:	eba8 0800 	sub.w	r8, r8, r0
 801e43c:	e7e9      	b.n	801e412 <__sflush_r+0xda>
 801e43e:	bf00      	nop
 801e440:	20400001 	.word	0x20400001

0801e444 <_fflush_r>:
 801e444:	b538      	push	{r3, r4, r5, lr}
 801e446:	690b      	ldr	r3, [r1, #16]
 801e448:	4605      	mov	r5, r0
 801e44a:	460c      	mov	r4, r1
 801e44c:	b913      	cbnz	r3, 801e454 <_fflush_r+0x10>
 801e44e:	2500      	movs	r5, #0
 801e450:	4628      	mov	r0, r5
 801e452:	bd38      	pop	{r3, r4, r5, pc}
 801e454:	b118      	cbz	r0, 801e45e <_fflush_r+0x1a>
 801e456:	6983      	ldr	r3, [r0, #24]
 801e458:	b90b      	cbnz	r3, 801e45e <_fflush_r+0x1a>
 801e45a:	f000 f887 	bl	801e56c <__sinit>
 801e45e:	4b14      	ldr	r3, [pc, #80]	; (801e4b0 <_fflush_r+0x6c>)
 801e460:	429c      	cmp	r4, r3
 801e462:	d11b      	bne.n	801e49c <_fflush_r+0x58>
 801e464:	686c      	ldr	r4, [r5, #4]
 801e466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	d0ef      	beq.n	801e44e <_fflush_r+0xa>
 801e46e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e470:	07d0      	lsls	r0, r2, #31
 801e472:	d404      	bmi.n	801e47e <_fflush_r+0x3a>
 801e474:	0599      	lsls	r1, r3, #22
 801e476:	d402      	bmi.n	801e47e <_fflush_r+0x3a>
 801e478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e47a:	f000 f915 	bl	801e6a8 <__retarget_lock_acquire_recursive>
 801e47e:	4628      	mov	r0, r5
 801e480:	4621      	mov	r1, r4
 801e482:	f7ff ff59 	bl	801e338 <__sflush_r>
 801e486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e488:	07da      	lsls	r2, r3, #31
 801e48a:	4605      	mov	r5, r0
 801e48c:	d4e0      	bmi.n	801e450 <_fflush_r+0xc>
 801e48e:	89a3      	ldrh	r3, [r4, #12]
 801e490:	059b      	lsls	r3, r3, #22
 801e492:	d4dd      	bmi.n	801e450 <_fflush_r+0xc>
 801e494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e496:	f000 f908 	bl	801e6aa <__retarget_lock_release_recursive>
 801e49a:	e7d9      	b.n	801e450 <_fflush_r+0xc>
 801e49c:	4b05      	ldr	r3, [pc, #20]	; (801e4b4 <_fflush_r+0x70>)
 801e49e:	429c      	cmp	r4, r3
 801e4a0:	d101      	bne.n	801e4a6 <_fflush_r+0x62>
 801e4a2:	68ac      	ldr	r4, [r5, #8]
 801e4a4:	e7df      	b.n	801e466 <_fflush_r+0x22>
 801e4a6:	4b04      	ldr	r3, [pc, #16]	; (801e4b8 <_fflush_r+0x74>)
 801e4a8:	429c      	cmp	r4, r3
 801e4aa:	bf08      	it	eq
 801e4ac:	68ec      	ldreq	r4, [r5, #12]
 801e4ae:	e7da      	b.n	801e466 <_fflush_r+0x22>
 801e4b0:	08029c2c 	.word	0x08029c2c
 801e4b4:	08029c4c 	.word	0x08029c4c
 801e4b8:	08029c0c 	.word	0x08029c0c

0801e4bc <std>:
 801e4bc:	2300      	movs	r3, #0
 801e4be:	b510      	push	{r4, lr}
 801e4c0:	4604      	mov	r4, r0
 801e4c2:	e9c0 3300 	strd	r3, r3, [r0]
 801e4c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e4ca:	6083      	str	r3, [r0, #8]
 801e4cc:	8181      	strh	r1, [r0, #12]
 801e4ce:	6643      	str	r3, [r0, #100]	; 0x64
 801e4d0:	81c2      	strh	r2, [r0, #14]
 801e4d2:	6183      	str	r3, [r0, #24]
 801e4d4:	4619      	mov	r1, r3
 801e4d6:	2208      	movs	r2, #8
 801e4d8:	305c      	adds	r0, #92	; 0x5c
 801e4da:	f7ff fb6f 	bl	801dbbc <memset>
 801e4de:	4b05      	ldr	r3, [pc, #20]	; (801e4f4 <std+0x38>)
 801e4e0:	6263      	str	r3, [r4, #36]	; 0x24
 801e4e2:	4b05      	ldr	r3, [pc, #20]	; (801e4f8 <std+0x3c>)
 801e4e4:	62a3      	str	r3, [r4, #40]	; 0x28
 801e4e6:	4b05      	ldr	r3, [pc, #20]	; (801e4fc <std+0x40>)
 801e4e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e4ea:	4b05      	ldr	r3, [pc, #20]	; (801e500 <std+0x44>)
 801e4ec:	6224      	str	r4, [r4, #32]
 801e4ee:	6323      	str	r3, [r4, #48]	; 0x30
 801e4f0:	bd10      	pop	{r4, pc}
 801e4f2:	bf00      	nop
 801e4f4:	0801e9e1 	.word	0x0801e9e1
 801e4f8:	0801ea03 	.word	0x0801ea03
 801e4fc:	0801ea3b 	.word	0x0801ea3b
 801e500:	0801ea5f 	.word	0x0801ea5f

0801e504 <_cleanup_r>:
 801e504:	4901      	ldr	r1, [pc, #4]	; (801e50c <_cleanup_r+0x8>)
 801e506:	f000 b8af 	b.w	801e668 <_fwalk_reent>
 801e50a:	bf00      	nop
 801e50c:	0801e445 	.word	0x0801e445

0801e510 <__sfmoreglue>:
 801e510:	b570      	push	{r4, r5, r6, lr}
 801e512:	2268      	movs	r2, #104	; 0x68
 801e514:	1e4d      	subs	r5, r1, #1
 801e516:	4355      	muls	r5, r2
 801e518:	460e      	mov	r6, r1
 801e51a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e51e:	f000 f997 	bl	801e850 <_malloc_r>
 801e522:	4604      	mov	r4, r0
 801e524:	b140      	cbz	r0, 801e538 <__sfmoreglue+0x28>
 801e526:	2100      	movs	r1, #0
 801e528:	e9c0 1600 	strd	r1, r6, [r0]
 801e52c:	300c      	adds	r0, #12
 801e52e:	60a0      	str	r0, [r4, #8]
 801e530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e534:	f7ff fb42 	bl	801dbbc <memset>
 801e538:	4620      	mov	r0, r4
 801e53a:	bd70      	pop	{r4, r5, r6, pc}

0801e53c <__sfp_lock_acquire>:
 801e53c:	4801      	ldr	r0, [pc, #4]	; (801e544 <__sfp_lock_acquire+0x8>)
 801e53e:	f000 b8b3 	b.w	801e6a8 <__retarget_lock_acquire_recursive>
 801e542:	bf00      	nop
 801e544:	200007f5 	.word	0x200007f5

0801e548 <__sfp_lock_release>:
 801e548:	4801      	ldr	r0, [pc, #4]	; (801e550 <__sfp_lock_release+0x8>)
 801e54a:	f000 b8ae 	b.w	801e6aa <__retarget_lock_release_recursive>
 801e54e:	bf00      	nop
 801e550:	200007f5 	.word	0x200007f5

0801e554 <__sinit_lock_acquire>:
 801e554:	4801      	ldr	r0, [pc, #4]	; (801e55c <__sinit_lock_acquire+0x8>)
 801e556:	f000 b8a7 	b.w	801e6a8 <__retarget_lock_acquire_recursive>
 801e55a:	bf00      	nop
 801e55c:	200007f6 	.word	0x200007f6

0801e560 <__sinit_lock_release>:
 801e560:	4801      	ldr	r0, [pc, #4]	; (801e568 <__sinit_lock_release+0x8>)
 801e562:	f000 b8a2 	b.w	801e6aa <__retarget_lock_release_recursive>
 801e566:	bf00      	nop
 801e568:	200007f6 	.word	0x200007f6

0801e56c <__sinit>:
 801e56c:	b510      	push	{r4, lr}
 801e56e:	4604      	mov	r4, r0
 801e570:	f7ff fff0 	bl	801e554 <__sinit_lock_acquire>
 801e574:	69a3      	ldr	r3, [r4, #24]
 801e576:	b11b      	cbz	r3, 801e580 <__sinit+0x14>
 801e578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e57c:	f7ff bff0 	b.w	801e560 <__sinit_lock_release>
 801e580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e584:	6523      	str	r3, [r4, #80]	; 0x50
 801e586:	4b13      	ldr	r3, [pc, #76]	; (801e5d4 <__sinit+0x68>)
 801e588:	4a13      	ldr	r2, [pc, #76]	; (801e5d8 <__sinit+0x6c>)
 801e58a:	681b      	ldr	r3, [r3, #0]
 801e58c:	62a2      	str	r2, [r4, #40]	; 0x28
 801e58e:	42a3      	cmp	r3, r4
 801e590:	bf04      	itt	eq
 801e592:	2301      	moveq	r3, #1
 801e594:	61a3      	streq	r3, [r4, #24]
 801e596:	4620      	mov	r0, r4
 801e598:	f000 f820 	bl	801e5dc <__sfp>
 801e59c:	6060      	str	r0, [r4, #4]
 801e59e:	4620      	mov	r0, r4
 801e5a0:	f000 f81c 	bl	801e5dc <__sfp>
 801e5a4:	60a0      	str	r0, [r4, #8]
 801e5a6:	4620      	mov	r0, r4
 801e5a8:	f000 f818 	bl	801e5dc <__sfp>
 801e5ac:	2200      	movs	r2, #0
 801e5ae:	60e0      	str	r0, [r4, #12]
 801e5b0:	2104      	movs	r1, #4
 801e5b2:	6860      	ldr	r0, [r4, #4]
 801e5b4:	f7ff ff82 	bl	801e4bc <std>
 801e5b8:	68a0      	ldr	r0, [r4, #8]
 801e5ba:	2201      	movs	r2, #1
 801e5bc:	2109      	movs	r1, #9
 801e5be:	f7ff ff7d 	bl	801e4bc <std>
 801e5c2:	68e0      	ldr	r0, [r4, #12]
 801e5c4:	2202      	movs	r2, #2
 801e5c6:	2112      	movs	r1, #18
 801e5c8:	f7ff ff78 	bl	801e4bc <std>
 801e5cc:	2301      	movs	r3, #1
 801e5ce:	61a3      	str	r3, [r4, #24]
 801e5d0:	e7d2      	b.n	801e578 <__sinit+0xc>
 801e5d2:	bf00      	nop
 801e5d4:	08029bd4 	.word	0x08029bd4
 801e5d8:	0801e505 	.word	0x0801e505

0801e5dc <__sfp>:
 801e5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5de:	4607      	mov	r7, r0
 801e5e0:	f7ff ffac 	bl	801e53c <__sfp_lock_acquire>
 801e5e4:	4b1e      	ldr	r3, [pc, #120]	; (801e660 <__sfp+0x84>)
 801e5e6:	681e      	ldr	r6, [r3, #0]
 801e5e8:	69b3      	ldr	r3, [r6, #24]
 801e5ea:	b913      	cbnz	r3, 801e5f2 <__sfp+0x16>
 801e5ec:	4630      	mov	r0, r6
 801e5ee:	f7ff ffbd 	bl	801e56c <__sinit>
 801e5f2:	3648      	adds	r6, #72	; 0x48
 801e5f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e5f8:	3b01      	subs	r3, #1
 801e5fa:	d503      	bpl.n	801e604 <__sfp+0x28>
 801e5fc:	6833      	ldr	r3, [r6, #0]
 801e5fe:	b30b      	cbz	r3, 801e644 <__sfp+0x68>
 801e600:	6836      	ldr	r6, [r6, #0]
 801e602:	e7f7      	b.n	801e5f4 <__sfp+0x18>
 801e604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e608:	b9d5      	cbnz	r5, 801e640 <__sfp+0x64>
 801e60a:	4b16      	ldr	r3, [pc, #88]	; (801e664 <__sfp+0x88>)
 801e60c:	60e3      	str	r3, [r4, #12]
 801e60e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e612:	6665      	str	r5, [r4, #100]	; 0x64
 801e614:	f000 f847 	bl	801e6a6 <__retarget_lock_init_recursive>
 801e618:	f7ff ff96 	bl	801e548 <__sfp_lock_release>
 801e61c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e620:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e624:	6025      	str	r5, [r4, #0]
 801e626:	61a5      	str	r5, [r4, #24]
 801e628:	2208      	movs	r2, #8
 801e62a:	4629      	mov	r1, r5
 801e62c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e630:	f7ff fac4 	bl	801dbbc <memset>
 801e634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e63c:	4620      	mov	r0, r4
 801e63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e640:	3468      	adds	r4, #104	; 0x68
 801e642:	e7d9      	b.n	801e5f8 <__sfp+0x1c>
 801e644:	2104      	movs	r1, #4
 801e646:	4638      	mov	r0, r7
 801e648:	f7ff ff62 	bl	801e510 <__sfmoreglue>
 801e64c:	4604      	mov	r4, r0
 801e64e:	6030      	str	r0, [r6, #0]
 801e650:	2800      	cmp	r0, #0
 801e652:	d1d5      	bne.n	801e600 <__sfp+0x24>
 801e654:	f7ff ff78 	bl	801e548 <__sfp_lock_release>
 801e658:	230c      	movs	r3, #12
 801e65a:	603b      	str	r3, [r7, #0]
 801e65c:	e7ee      	b.n	801e63c <__sfp+0x60>
 801e65e:	bf00      	nop
 801e660:	08029bd4 	.word	0x08029bd4
 801e664:	ffff0001 	.word	0xffff0001

0801e668 <_fwalk_reent>:
 801e668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e66c:	4606      	mov	r6, r0
 801e66e:	4688      	mov	r8, r1
 801e670:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e674:	2700      	movs	r7, #0
 801e676:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e67a:	f1b9 0901 	subs.w	r9, r9, #1
 801e67e:	d505      	bpl.n	801e68c <_fwalk_reent+0x24>
 801e680:	6824      	ldr	r4, [r4, #0]
 801e682:	2c00      	cmp	r4, #0
 801e684:	d1f7      	bne.n	801e676 <_fwalk_reent+0xe>
 801e686:	4638      	mov	r0, r7
 801e688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e68c:	89ab      	ldrh	r3, [r5, #12]
 801e68e:	2b01      	cmp	r3, #1
 801e690:	d907      	bls.n	801e6a2 <_fwalk_reent+0x3a>
 801e692:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e696:	3301      	adds	r3, #1
 801e698:	d003      	beq.n	801e6a2 <_fwalk_reent+0x3a>
 801e69a:	4629      	mov	r1, r5
 801e69c:	4630      	mov	r0, r6
 801e69e:	47c0      	blx	r8
 801e6a0:	4307      	orrs	r7, r0
 801e6a2:	3568      	adds	r5, #104	; 0x68
 801e6a4:	e7e9      	b.n	801e67a <_fwalk_reent+0x12>

0801e6a6 <__retarget_lock_init_recursive>:
 801e6a6:	4770      	bx	lr

0801e6a8 <__retarget_lock_acquire_recursive>:
 801e6a8:	4770      	bx	lr

0801e6aa <__retarget_lock_release_recursive>:
 801e6aa:	4770      	bx	lr

0801e6ac <__swhatbuf_r>:
 801e6ac:	b570      	push	{r4, r5, r6, lr}
 801e6ae:	460e      	mov	r6, r1
 801e6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e6b4:	2900      	cmp	r1, #0
 801e6b6:	b096      	sub	sp, #88	; 0x58
 801e6b8:	4614      	mov	r4, r2
 801e6ba:	461d      	mov	r5, r3
 801e6bc:	da08      	bge.n	801e6d0 <__swhatbuf_r+0x24>
 801e6be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e6c2:	2200      	movs	r2, #0
 801e6c4:	602a      	str	r2, [r5, #0]
 801e6c6:	061a      	lsls	r2, r3, #24
 801e6c8:	d410      	bmi.n	801e6ec <__swhatbuf_r+0x40>
 801e6ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e6ce:	e00e      	b.n	801e6ee <__swhatbuf_r+0x42>
 801e6d0:	466a      	mov	r2, sp
 801e6d2:	f000 f9eb 	bl	801eaac <_fstat_r>
 801e6d6:	2800      	cmp	r0, #0
 801e6d8:	dbf1      	blt.n	801e6be <__swhatbuf_r+0x12>
 801e6da:	9a01      	ldr	r2, [sp, #4]
 801e6dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e6e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e6e4:	425a      	negs	r2, r3
 801e6e6:	415a      	adcs	r2, r3
 801e6e8:	602a      	str	r2, [r5, #0]
 801e6ea:	e7ee      	b.n	801e6ca <__swhatbuf_r+0x1e>
 801e6ec:	2340      	movs	r3, #64	; 0x40
 801e6ee:	2000      	movs	r0, #0
 801e6f0:	6023      	str	r3, [r4, #0]
 801e6f2:	b016      	add	sp, #88	; 0x58
 801e6f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e6f8 <__smakebuf_r>:
 801e6f8:	898b      	ldrh	r3, [r1, #12]
 801e6fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e6fc:	079d      	lsls	r5, r3, #30
 801e6fe:	4606      	mov	r6, r0
 801e700:	460c      	mov	r4, r1
 801e702:	d507      	bpl.n	801e714 <__smakebuf_r+0x1c>
 801e704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e708:	6023      	str	r3, [r4, #0]
 801e70a:	6123      	str	r3, [r4, #16]
 801e70c:	2301      	movs	r3, #1
 801e70e:	6163      	str	r3, [r4, #20]
 801e710:	b002      	add	sp, #8
 801e712:	bd70      	pop	{r4, r5, r6, pc}
 801e714:	ab01      	add	r3, sp, #4
 801e716:	466a      	mov	r2, sp
 801e718:	f7ff ffc8 	bl	801e6ac <__swhatbuf_r>
 801e71c:	9900      	ldr	r1, [sp, #0]
 801e71e:	4605      	mov	r5, r0
 801e720:	4630      	mov	r0, r6
 801e722:	f000 f895 	bl	801e850 <_malloc_r>
 801e726:	b948      	cbnz	r0, 801e73c <__smakebuf_r+0x44>
 801e728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e72c:	059a      	lsls	r2, r3, #22
 801e72e:	d4ef      	bmi.n	801e710 <__smakebuf_r+0x18>
 801e730:	f023 0303 	bic.w	r3, r3, #3
 801e734:	f043 0302 	orr.w	r3, r3, #2
 801e738:	81a3      	strh	r3, [r4, #12]
 801e73a:	e7e3      	b.n	801e704 <__smakebuf_r+0xc>
 801e73c:	4b0d      	ldr	r3, [pc, #52]	; (801e774 <__smakebuf_r+0x7c>)
 801e73e:	62b3      	str	r3, [r6, #40]	; 0x28
 801e740:	89a3      	ldrh	r3, [r4, #12]
 801e742:	6020      	str	r0, [r4, #0]
 801e744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e748:	81a3      	strh	r3, [r4, #12]
 801e74a:	9b00      	ldr	r3, [sp, #0]
 801e74c:	6163      	str	r3, [r4, #20]
 801e74e:	9b01      	ldr	r3, [sp, #4]
 801e750:	6120      	str	r0, [r4, #16]
 801e752:	b15b      	cbz	r3, 801e76c <__smakebuf_r+0x74>
 801e754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e758:	4630      	mov	r0, r6
 801e75a:	f000 f9b9 	bl	801ead0 <_isatty_r>
 801e75e:	b128      	cbz	r0, 801e76c <__smakebuf_r+0x74>
 801e760:	89a3      	ldrh	r3, [r4, #12]
 801e762:	f023 0303 	bic.w	r3, r3, #3
 801e766:	f043 0301 	orr.w	r3, r3, #1
 801e76a:	81a3      	strh	r3, [r4, #12]
 801e76c:	89a0      	ldrh	r0, [r4, #12]
 801e76e:	4305      	orrs	r5, r0
 801e770:	81a5      	strh	r5, [r4, #12]
 801e772:	e7cd      	b.n	801e710 <__smakebuf_r+0x18>
 801e774:	0801e505 	.word	0x0801e505

0801e778 <_free_r>:
 801e778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e77a:	2900      	cmp	r1, #0
 801e77c:	d044      	beq.n	801e808 <_free_r+0x90>
 801e77e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e782:	9001      	str	r0, [sp, #4]
 801e784:	2b00      	cmp	r3, #0
 801e786:	f1a1 0404 	sub.w	r4, r1, #4
 801e78a:	bfb8      	it	lt
 801e78c:	18e4      	addlt	r4, r4, r3
 801e78e:	f000 f9c1 	bl	801eb14 <__malloc_lock>
 801e792:	4a1e      	ldr	r2, [pc, #120]	; (801e80c <_free_r+0x94>)
 801e794:	9801      	ldr	r0, [sp, #4]
 801e796:	6813      	ldr	r3, [r2, #0]
 801e798:	b933      	cbnz	r3, 801e7a8 <_free_r+0x30>
 801e79a:	6063      	str	r3, [r4, #4]
 801e79c:	6014      	str	r4, [r2, #0]
 801e79e:	b003      	add	sp, #12
 801e7a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e7a4:	f000 b9bc 	b.w	801eb20 <__malloc_unlock>
 801e7a8:	42a3      	cmp	r3, r4
 801e7aa:	d908      	bls.n	801e7be <_free_r+0x46>
 801e7ac:	6825      	ldr	r5, [r4, #0]
 801e7ae:	1961      	adds	r1, r4, r5
 801e7b0:	428b      	cmp	r3, r1
 801e7b2:	bf01      	itttt	eq
 801e7b4:	6819      	ldreq	r1, [r3, #0]
 801e7b6:	685b      	ldreq	r3, [r3, #4]
 801e7b8:	1949      	addeq	r1, r1, r5
 801e7ba:	6021      	streq	r1, [r4, #0]
 801e7bc:	e7ed      	b.n	801e79a <_free_r+0x22>
 801e7be:	461a      	mov	r2, r3
 801e7c0:	685b      	ldr	r3, [r3, #4]
 801e7c2:	b10b      	cbz	r3, 801e7c8 <_free_r+0x50>
 801e7c4:	42a3      	cmp	r3, r4
 801e7c6:	d9fa      	bls.n	801e7be <_free_r+0x46>
 801e7c8:	6811      	ldr	r1, [r2, #0]
 801e7ca:	1855      	adds	r5, r2, r1
 801e7cc:	42a5      	cmp	r5, r4
 801e7ce:	d10b      	bne.n	801e7e8 <_free_r+0x70>
 801e7d0:	6824      	ldr	r4, [r4, #0]
 801e7d2:	4421      	add	r1, r4
 801e7d4:	1854      	adds	r4, r2, r1
 801e7d6:	42a3      	cmp	r3, r4
 801e7d8:	6011      	str	r1, [r2, #0]
 801e7da:	d1e0      	bne.n	801e79e <_free_r+0x26>
 801e7dc:	681c      	ldr	r4, [r3, #0]
 801e7de:	685b      	ldr	r3, [r3, #4]
 801e7e0:	6053      	str	r3, [r2, #4]
 801e7e2:	4421      	add	r1, r4
 801e7e4:	6011      	str	r1, [r2, #0]
 801e7e6:	e7da      	b.n	801e79e <_free_r+0x26>
 801e7e8:	d902      	bls.n	801e7f0 <_free_r+0x78>
 801e7ea:	230c      	movs	r3, #12
 801e7ec:	6003      	str	r3, [r0, #0]
 801e7ee:	e7d6      	b.n	801e79e <_free_r+0x26>
 801e7f0:	6825      	ldr	r5, [r4, #0]
 801e7f2:	1961      	adds	r1, r4, r5
 801e7f4:	428b      	cmp	r3, r1
 801e7f6:	bf04      	itt	eq
 801e7f8:	6819      	ldreq	r1, [r3, #0]
 801e7fa:	685b      	ldreq	r3, [r3, #4]
 801e7fc:	6063      	str	r3, [r4, #4]
 801e7fe:	bf04      	itt	eq
 801e800:	1949      	addeq	r1, r1, r5
 801e802:	6021      	streq	r1, [r4, #0]
 801e804:	6054      	str	r4, [r2, #4]
 801e806:	e7ca      	b.n	801e79e <_free_r+0x26>
 801e808:	b003      	add	sp, #12
 801e80a:	bd30      	pop	{r4, r5, pc}
 801e80c:	200007f8 	.word	0x200007f8

0801e810 <sbrk_aligned>:
 801e810:	b570      	push	{r4, r5, r6, lr}
 801e812:	4e0e      	ldr	r6, [pc, #56]	; (801e84c <sbrk_aligned+0x3c>)
 801e814:	460c      	mov	r4, r1
 801e816:	6831      	ldr	r1, [r6, #0]
 801e818:	4605      	mov	r5, r0
 801e81a:	b911      	cbnz	r1, 801e822 <sbrk_aligned+0x12>
 801e81c:	f000 f88c 	bl	801e938 <_sbrk_r>
 801e820:	6030      	str	r0, [r6, #0]
 801e822:	4621      	mov	r1, r4
 801e824:	4628      	mov	r0, r5
 801e826:	f000 f887 	bl	801e938 <_sbrk_r>
 801e82a:	1c43      	adds	r3, r0, #1
 801e82c:	d00a      	beq.n	801e844 <sbrk_aligned+0x34>
 801e82e:	1cc4      	adds	r4, r0, #3
 801e830:	f024 0403 	bic.w	r4, r4, #3
 801e834:	42a0      	cmp	r0, r4
 801e836:	d007      	beq.n	801e848 <sbrk_aligned+0x38>
 801e838:	1a21      	subs	r1, r4, r0
 801e83a:	4628      	mov	r0, r5
 801e83c:	f000 f87c 	bl	801e938 <_sbrk_r>
 801e840:	3001      	adds	r0, #1
 801e842:	d101      	bne.n	801e848 <sbrk_aligned+0x38>
 801e844:	f04f 34ff 	mov.w	r4, #4294967295
 801e848:	4620      	mov	r0, r4
 801e84a:	bd70      	pop	{r4, r5, r6, pc}
 801e84c:	200007fc 	.word	0x200007fc

0801e850 <_malloc_r>:
 801e850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e854:	1ccd      	adds	r5, r1, #3
 801e856:	f025 0503 	bic.w	r5, r5, #3
 801e85a:	3508      	adds	r5, #8
 801e85c:	2d0c      	cmp	r5, #12
 801e85e:	bf38      	it	cc
 801e860:	250c      	movcc	r5, #12
 801e862:	2d00      	cmp	r5, #0
 801e864:	4607      	mov	r7, r0
 801e866:	db01      	blt.n	801e86c <_malloc_r+0x1c>
 801e868:	42a9      	cmp	r1, r5
 801e86a:	d905      	bls.n	801e878 <_malloc_r+0x28>
 801e86c:	230c      	movs	r3, #12
 801e86e:	603b      	str	r3, [r7, #0]
 801e870:	2600      	movs	r6, #0
 801e872:	4630      	mov	r0, r6
 801e874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e878:	4e2e      	ldr	r6, [pc, #184]	; (801e934 <_malloc_r+0xe4>)
 801e87a:	f000 f94b 	bl	801eb14 <__malloc_lock>
 801e87e:	6833      	ldr	r3, [r6, #0]
 801e880:	461c      	mov	r4, r3
 801e882:	bb34      	cbnz	r4, 801e8d2 <_malloc_r+0x82>
 801e884:	4629      	mov	r1, r5
 801e886:	4638      	mov	r0, r7
 801e888:	f7ff ffc2 	bl	801e810 <sbrk_aligned>
 801e88c:	1c43      	adds	r3, r0, #1
 801e88e:	4604      	mov	r4, r0
 801e890:	d14d      	bne.n	801e92e <_malloc_r+0xde>
 801e892:	6834      	ldr	r4, [r6, #0]
 801e894:	4626      	mov	r6, r4
 801e896:	2e00      	cmp	r6, #0
 801e898:	d140      	bne.n	801e91c <_malloc_r+0xcc>
 801e89a:	6823      	ldr	r3, [r4, #0]
 801e89c:	4631      	mov	r1, r6
 801e89e:	4638      	mov	r0, r7
 801e8a0:	eb04 0803 	add.w	r8, r4, r3
 801e8a4:	f000 f848 	bl	801e938 <_sbrk_r>
 801e8a8:	4580      	cmp	r8, r0
 801e8aa:	d13a      	bne.n	801e922 <_malloc_r+0xd2>
 801e8ac:	6821      	ldr	r1, [r4, #0]
 801e8ae:	3503      	adds	r5, #3
 801e8b0:	1a6d      	subs	r5, r5, r1
 801e8b2:	f025 0503 	bic.w	r5, r5, #3
 801e8b6:	3508      	adds	r5, #8
 801e8b8:	2d0c      	cmp	r5, #12
 801e8ba:	bf38      	it	cc
 801e8bc:	250c      	movcc	r5, #12
 801e8be:	4629      	mov	r1, r5
 801e8c0:	4638      	mov	r0, r7
 801e8c2:	f7ff ffa5 	bl	801e810 <sbrk_aligned>
 801e8c6:	3001      	adds	r0, #1
 801e8c8:	d02b      	beq.n	801e922 <_malloc_r+0xd2>
 801e8ca:	6823      	ldr	r3, [r4, #0]
 801e8cc:	442b      	add	r3, r5
 801e8ce:	6023      	str	r3, [r4, #0]
 801e8d0:	e00e      	b.n	801e8f0 <_malloc_r+0xa0>
 801e8d2:	6822      	ldr	r2, [r4, #0]
 801e8d4:	1b52      	subs	r2, r2, r5
 801e8d6:	d41e      	bmi.n	801e916 <_malloc_r+0xc6>
 801e8d8:	2a0b      	cmp	r2, #11
 801e8da:	d916      	bls.n	801e90a <_malloc_r+0xba>
 801e8dc:	1961      	adds	r1, r4, r5
 801e8de:	42a3      	cmp	r3, r4
 801e8e0:	6025      	str	r5, [r4, #0]
 801e8e2:	bf18      	it	ne
 801e8e4:	6059      	strne	r1, [r3, #4]
 801e8e6:	6863      	ldr	r3, [r4, #4]
 801e8e8:	bf08      	it	eq
 801e8ea:	6031      	streq	r1, [r6, #0]
 801e8ec:	5162      	str	r2, [r4, r5]
 801e8ee:	604b      	str	r3, [r1, #4]
 801e8f0:	4638      	mov	r0, r7
 801e8f2:	f104 060b 	add.w	r6, r4, #11
 801e8f6:	f000 f913 	bl	801eb20 <__malloc_unlock>
 801e8fa:	f026 0607 	bic.w	r6, r6, #7
 801e8fe:	1d23      	adds	r3, r4, #4
 801e900:	1af2      	subs	r2, r6, r3
 801e902:	d0b6      	beq.n	801e872 <_malloc_r+0x22>
 801e904:	1b9b      	subs	r3, r3, r6
 801e906:	50a3      	str	r3, [r4, r2]
 801e908:	e7b3      	b.n	801e872 <_malloc_r+0x22>
 801e90a:	6862      	ldr	r2, [r4, #4]
 801e90c:	42a3      	cmp	r3, r4
 801e90e:	bf0c      	ite	eq
 801e910:	6032      	streq	r2, [r6, #0]
 801e912:	605a      	strne	r2, [r3, #4]
 801e914:	e7ec      	b.n	801e8f0 <_malloc_r+0xa0>
 801e916:	4623      	mov	r3, r4
 801e918:	6864      	ldr	r4, [r4, #4]
 801e91a:	e7b2      	b.n	801e882 <_malloc_r+0x32>
 801e91c:	4634      	mov	r4, r6
 801e91e:	6876      	ldr	r6, [r6, #4]
 801e920:	e7b9      	b.n	801e896 <_malloc_r+0x46>
 801e922:	230c      	movs	r3, #12
 801e924:	603b      	str	r3, [r7, #0]
 801e926:	4638      	mov	r0, r7
 801e928:	f000 f8fa 	bl	801eb20 <__malloc_unlock>
 801e92c:	e7a1      	b.n	801e872 <_malloc_r+0x22>
 801e92e:	6025      	str	r5, [r4, #0]
 801e930:	e7de      	b.n	801e8f0 <_malloc_r+0xa0>
 801e932:	bf00      	nop
 801e934:	200007f8 	.word	0x200007f8

0801e938 <_sbrk_r>:
 801e938:	b538      	push	{r3, r4, r5, lr}
 801e93a:	4d06      	ldr	r5, [pc, #24]	; (801e954 <_sbrk_r+0x1c>)
 801e93c:	2300      	movs	r3, #0
 801e93e:	4604      	mov	r4, r0
 801e940:	4608      	mov	r0, r1
 801e942:	602b      	str	r3, [r5, #0]
 801e944:	f7f7 fc56 	bl	80161f4 <_sbrk>
 801e948:	1c43      	adds	r3, r0, #1
 801e94a:	d102      	bne.n	801e952 <_sbrk_r+0x1a>
 801e94c:	682b      	ldr	r3, [r5, #0]
 801e94e:	b103      	cbz	r3, 801e952 <_sbrk_r+0x1a>
 801e950:	6023      	str	r3, [r4, #0]
 801e952:	bd38      	pop	{r3, r4, r5, pc}
 801e954:	20000800 	.word	0x20000800

0801e958 <_raise_r>:
 801e958:	291f      	cmp	r1, #31
 801e95a:	b538      	push	{r3, r4, r5, lr}
 801e95c:	4604      	mov	r4, r0
 801e95e:	460d      	mov	r5, r1
 801e960:	d904      	bls.n	801e96c <_raise_r+0x14>
 801e962:	2316      	movs	r3, #22
 801e964:	6003      	str	r3, [r0, #0]
 801e966:	f04f 30ff 	mov.w	r0, #4294967295
 801e96a:	bd38      	pop	{r3, r4, r5, pc}
 801e96c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e96e:	b112      	cbz	r2, 801e976 <_raise_r+0x1e>
 801e970:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e974:	b94b      	cbnz	r3, 801e98a <_raise_r+0x32>
 801e976:	4620      	mov	r0, r4
 801e978:	f000 f830 	bl	801e9dc <_getpid_r>
 801e97c:	462a      	mov	r2, r5
 801e97e:	4601      	mov	r1, r0
 801e980:	4620      	mov	r0, r4
 801e982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e986:	f000 b817 	b.w	801e9b8 <_kill_r>
 801e98a:	2b01      	cmp	r3, #1
 801e98c:	d00a      	beq.n	801e9a4 <_raise_r+0x4c>
 801e98e:	1c59      	adds	r1, r3, #1
 801e990:	d103      	bne.n	801e99a <_raise_r+0x42>
 801e992:	2316      	movs	r3, #22
 801e994:	6003      	str	r3, [r0, #0]
 801e996:	2001      	movs	r0, #1
 801e998:	e7e7      	b.n	801e96a <_raise_r+0x12>
 801e99a:	2400      	movs	r4, #0
 801e99c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e9a0:	4628      	mov	r0, r5
 801e9a2:	4798      	blx	r3
 801e9a4:	2000      	movs	r0, #0
 801e9a6:	e7e0      	b.n	801e96a <_raise_r+0x12>

0801e9a8 <raise>:
 801e9a8:	4b02      	ldr	r3, [pc, #8]	; (801e9b4 <raise+0xc>)
 801e9aa:	4601      	mov	r1, r0
 801e9ac:	6818      	ldr	r0, [r3, #0]
 801e9ae:	f7ff bfd3 	b.w	801e958 <_raise_r>
 801e9b2:	bf00      	nop
 801e9b4:	200001e8 	.word	0x200001e8

0801e9b8 <_kill_r>:
 801e9b8:	b538      	push	{r3, r4, r5, lr}
 801e9ba:	4d07      	ldr	r5, [pc, #28]	; (801e9d8 <_kill_r+0x20>)
 801e9bc:	2300      	movs	r3, #0
 801e9be:	4604      	mov	r4, r0
 801e9c0:	4608      	mov	r0, r1
 801e9c2:	4611      	mov	r1, r2
 801e9c4:	602b      	str	r3, [r5, #0]
 801e9c6:	f7f7 fb8d 	bl	80160e4 <_kill>
 801e9ca:	1c43      	adds	r3, r0, #1
 801e9cc:	d102      	bne.n	801e9d4 <_kill_r+0x1c>
 801e9ce:	682b      	ldr	r3, [r5, #0]
 801e9d0:	b103      	cbz	r3, 801e9d4 <_kill_r+0x1c>
 801e9d2:	6023      	str	r3, [r4, #0]
 801e9d4:	bd38      	pop	{r3, r4, r5, pc}
 801e9d6:	bf00      	nop
 801e9d8:	20000800 	.word	0x20000800

0801e9dc <_getpid_r>:
 801e9dc:	f7f7 bb7a 	b.w	80160d4 <_getpid>

0801e9e0 <__sread>:
 801e9e0:	b510      	push	{r4, lr}
 801e9e2:	460c      	mov	r4, r1
 801e9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e9e8:	f000 f8a0 	bl	801eb2c <_read_r>
 801e9ec:	2800      	cmp	r0, #0
 801e9ee:	bfab      	itete	ge
 801e9f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e9f2:	89a3      	ldrhlt	r3, [r4, #12]
 801e9f4:	181b      	addge	r3, r3, r0
 801e9f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e9fa:	bfac      	ite	ge
 801e9fc:	6563      	strge	r3, [r4, #84]	; 0x54
 801e9fe:	81a3      	strhlt	r3, [r4, #12]
 801ea00:	bd10      	pop	{r4, pc}

0801ea02 <__swrite>:
 801ea02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea06:	461f      	mov	r7, r3
 801ea08:	898b      	ldrh	r3, [r1, #12]
 801ea0a:	05db      	lsls	r3, r3, #23
 801ea0c:	4605      	mov	r5, r0
 801ea0e:	460c      	mov	r4, r1
 801ea10:	4616      	mov	r6, r2
 801ea12:	d505      	bpl.n	801ea20 <__swrite+0x1e>
 801ea14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea18:	2302      	movs	r3, #2
 801ea1a:	2200      	movs	r2, #0
 801ea1c:	f000 f868 	bl	801eaf0 <_lseek_r>
 801ea20:	89a3      	ldrh	r3, [r4, #12]
 801ea22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ea26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ea2a:	81a3      	strh	r3, [r4, #12]
 801ea2c:	4632      	mov	r2, r6
 801ea2e:	463b      	mov	r3, r7
 801ea30:	4628      	mov	r0, r5
 801ea32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ea36:	f000 b817 	b.w	801ea68 <_write_r>

0801ea3a <__sseek>:
 801ea3a:	b510      	push	{r4, lr}
 801ea3c:	460c      	mov	r4, r1
 801ea3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea42:	f000 f855 	bl	801eaf0 <_lseek_r>
 801ea46:	1c43      	adds	r3, r0, #1
 801ea48:	89a3      	ldrh	r3, [r4, #12]
 801ea4a:	bf15      	itete	ne
 801ea4c:	6560      	strne	r0, [r4, #84]	; 0x54
 801ea4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ea52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ea56:	81a3      	strheq	r3, [r4, #12]
 801ea58:	bf18      	it	ne
 801ea5a:	81a3      	strhne	r3, [r4, #12]
 801ea5c:	bd10      	pop	{r4, pc}

0801ea5e <__sclose>:
 801ea5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea62:	f000 b813 	b.w	801ea8c <_close_r>
	...

0801ea68 <_write_r>:
 801ea68:	b538      	push	{r3, r4, r5, lr}
 801ea6a:	4d07      	ldr	r5, [pc, #28]	; (801ea88 <_write_r+0x20>)
 801ea6c:	4604      	mov	r4, r0
 801ea6e:	4608      	mov	r0, r1
 801ea70:	4611      	mov	r1, r2
 801ea72:	2200      	movs	r2, #0
 801ea74:	602a      	str	r2, [r5, #0]
 801ea76:	461a      	mov	r2, r3
 801ea78:	f7f7 fb6b 	bl	8016152 <_write>
 801ea7c:	1c43      	adds	r3, r0, #1
 801ea7e:	d102      	bne.n	801ea86 <_write_r+0x1e>
 801ea80:	682b      	ldr	r3, [r5, #0]
 801ea82:	b103      	cbz	r3, 801ea86 <_write_r+0x1e>
 801ea84:	6023      	str	r3, [r4, #0]
 801ea86:	bd38      	pop	{r3, r4, r5, pc}
 801ea88:	20000800 	.word	0x20000800

0801ea8c <_close_r>:
 801ea8c:	b538      	push	{r3, r4, r5, lr}
 801ea8e:	4d06      	ldr	r5, [pc, #24]	; (801eaa8 <_close_r+0x1c>)
 801ea90:	2300      	movs	r3, #0
 801ea92:	4604      	mov	r4, r0
 801ea94:	4608      	mov	r0, r1
 801ea96:	602b      	str	r3, [r5, #0]
 801ea98:	f7f7 fb77 	bl	801618a <_close>
 801ea9c:	1c43      	adds	r3, r0, #1
 801ea9e:	d102      	bne.n	801eaa6 <_close_r+0x1a>
 801eaa0:	682b      	ldr	r3, [r5, #0]
 801eaa2:	b103      	cbz	r3, 801eaa6 <_close_r+0x1a>
 801eaa4:	6023      	str	r3, [r4, #0]
 801eaa6:	bd38      	pop	{r3, r4, r5, pc}
 801eaa8:	20000800 	.word	0x20000800

0801eaac <_fstat_r>:
 801eaac:	b538      	push	{r3, r4, r5, lr}
 801eaae:	4d07      	ldr	r5, [pc, #28]	; (801eacc <_fstat_r+0x20>)
 801eab0:	2300      	movs	r3, #0
 801eab2:	4604      	mov	r4, r0
 801eab4:	4608      	mov	r0, r1
 801eab6:	4611      	mov	r1, r2
 801eab8:	602b      	str	r3, [r5, #0]
 801eaba:	f7f7 fb72 	bl	80161a2 <_fstat>
 801eabe:	1c43      	adds	r3, r0, #1
 801eac0:	d102      	bne.n	801eac8 <_fstat_r+0x1c>
 801eac2:	682b      	ldr	r3, [r5, #0]
 801eac4:	b103      	cbz	r3, 801eac8 <_fstat_r+0x1c>
 801eac6:	6023      	str	r3, [r4, #0]
 801eac8:	bd38      	pop	{r3, r4, r5, pc}
 801eaca:	bf00      	nop
 801eacc:	20000800 	.word	0x20000800

0801ead0 <_isatty_r>:
 801ead0:	b538      	push	{r3, r4, r5, lr}
 801ead2:	4d06      	ldr	r5, [pc, #24]	; (801eaec <_isatty_r+0x1c>)
 801ead4:	2300      	movs	r3, #0
 801ead6:	4604      	mov	r4, r0
 801ead8:	4608      	mov	r0, r1
 801eada:	602b      	str	r3, [r5, #0]
 801eadc:	f7f7 fb71 	bl	80161c2 <_isatty>
 801eae0:	1c43      	adds	r3, r0, #1
 801eae2:	d102      	bne.n	801eaea <_isatty_r+0x1a>
 801eae4:	682b      	ldr	r3, [r5, #0]
 801eae6:	b103      	cbz	r3, 801eaea <_isatty_r+0x1a>
 801eae8:	6023      	str	r3, [r4, #0]
 801eaea:	bd38      	pop	{r3, r4, r5, pc}
 801eaec:	20000800 	.word	0x20000800

0801eaf0 <_lseek_r>:
 801eaf0:	b538      	push	{r3, r4, r5, lr}
 801eaf2:	4d07      	ldr	r5, [pc, #28]	; (801eb10 <_lseek_r+0x20>)
 801eaf4:	4604      	mov	r4, r0
 801eaf6:	4608      	mov	r0, r1
 801eaf8:	4611      	mov	r1, r2
 801eafa:	2200      	movs	r2, #0
 801eafc:	602a      	str	r2, [r5, #0]
 801eafe:	461a      	mov	r2, r3
 801eb00:	f7f7 fb6a 	bl	80161d8 <_lseek>
 801eb04:	1c43      	adds	r3, r0, #1
 801eb06:	d102      	bne.n	801eb0e <_lseek_r+0x1e>
 801eb08:	682b      	ldr	r3, [r5, #0]
 801eb0a:	b103      	cbz	r3, 801eb0e <_lseek_r+0x1e>
 801eb0c:	6023      	str	r3, [r4, #0]
 801eb0e:	bd38      	pop	{r3, r4, r5, pc}
 801eb10:	20000800 	.word	0x20000800

0801eb14 <__malloc_lock>:
 801eb14:	4801      	ldr	r0, [pc, #4]	; (801eb1c <__malloc_lock+0x8>)
 801eb16:	f7ff bdc7 	b.w	801e6a8 <__retarget_lock_acquire_recursive>
 801eb1a:	bf00      	nop
 801eb1c:	200007f4 	.word	0x200007f4

0801eb20 <__malloc_unlock>:
 801eb20:	4801      	ldr	r0, [pc, #4]	; (801eb28 <__malloc_unlock+0x8>)
 801eb22:	f7ff bdc2 	b.w	801e6aa <__retarget_lock_release_recursive>
 801eb26:	bf00      	nop
 801eb28:	200007f4 	.word	0x200007f4

0801eb2c <_read_r>:
 801eb2c:	b538      	push	{r3, r4, r5, lr}
 801eb2e:	4d07      	ldr	r5, [pc, #28]	; (801eb4c <_read_r+0x20>)
 801eb30:	4604      	mov	r4, r0
 801eb32:	4608      	mov	r0, r1
 801eb34:	4611      	mov	r1, r2
 801eb36:	2200      	movs	r2, #0
 801eb38:	602a      	str	r2, [r5, #0]
 801eb3a:	461a      	mov	r2, r3
 801eb3c:	f7f7 faec 	bl	8016118 <_read>
 801eb40:	1c43      	adds	r3, r0, #1
 801eb42:	d102      	bne.n	801eb4a <_read_r+0x1e>
 801eb44:	682b      	ldr	r3, [r5, #0]
 801eb46:	b103      	cbz	r3, 801eb4a <_read_r+0x1e>
 801eb48:	6023      	str	r3, [r4, #0]
 801eb4a:	bd38      	pop	{r3, r4, r5, pc}
 801eb4c:	20000800 	.word	0x20000800

0801eb50 <_init>:
 801eb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb52:	bf00      	nop
 801eb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb56:	bc08      	pop	{r3}
 801eb58:	469e      	mov	lr, r3
 801eb5a:	4770      	bx	lr

0801eb5c <_fini>:
 801eb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb5e:	bf00      	nop
 801eb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb62:	bc08      	pop	{r3}
 801eb64:	469e      	mov	lr, r3
 801eb66:	4770      	bx	lr
