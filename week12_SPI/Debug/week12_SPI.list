
week12_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f2c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080060c8  080060c8  000160c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062c0  080062c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080062c0  080062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062c8  080062c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062c8  080062c8  000162c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080062d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000010  080062e0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  080062e0  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011884  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229d  00000000  00000000  000318c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00033b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00034b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017adf  00000000  00000000  00035a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119b2  00000000  00000000  0004d51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b209  00000000  00000000  0005eed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa0da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004718  00000000  00000000  000fa12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080060ac 	.word	0x080060ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080060ac 	.word	0x080060ac

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2iz>:
 80008b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008bc:	d215      	bcs.n	80008ea <__aeabi_d2iz+0x36>
 80008be:	d511      	bpl.n	80008e4 <__aeabi_d2iz+0x30>
 80008c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c8:	d912      	bls.n	80008f0 <__aeabi_d2iz+0x3c>
 80008ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008da:	fa23 f002 	lsr.w	r0, r3, r2
 80008de:	bf18      	it	ne
 80008e0:	4240      	negne	r0, r0
 80008e2:	4770      	bx	lr
 80008e4:	f04f 0000 	mov.w	r0, #0
 80008e8:	4770      	bx	lr
 80008ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ee:	d105      	bne.n	80008fc <__aeabi_d2iz+0x48>
 80008f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008f4:	bf08      	it	eq
 80008f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008fa:	4770      	bx	lr
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop

08000904 <__aeabi_uldivmod>:
 8000904:	b953      	cbnz	r3, 800091c <__aeabi_uldivmod+0x18>
 8000906:	b94a      	cbnz	r2, 800091c <__aeabi_uldivmod+0x18>
 8000908:	2900      	cmp	r1, #0
 800090a:	bf08      	it	eq
 800090c:	2800      	cmpeq	r0, #0
 800090e:	bf1c      	itt	ne
 8000910:	f04f 31ff 	movne.w	r1, #4294967295
 8000914:	f04f 30ff 	movne.w	r0, #4294967295
 8000918:	f000 b974 	b.w	8000c04 <__aeabi_idiv0>
 800091c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000920:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000924:	f000 f806 	bl	8000934 <__udivmoddi4>
 8000928:	f8dd e004 	ldr.w	lr, [sp, #4]
 800092c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000930:	b004      	add	sp, #16
 8000932:	4770      	bx	lr

08000934 <__udivmoddi4>:
 8000934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000938:	9d08      	ldr	r5, [sp, #32]
 800093a:	4604      	mov	r4, r0
 800093c:	468e      	mov	lr, r1
 800093e:	2b00      	cmp	r3, #0
 8000940:	d14d      	bne.n	80009de <__udivmoddi4+0xaa>
 8000942:	428a      	cmp	r2, r1
 8000944:	4694      	mov	ip, r2
 8000946:	d969      	bls.n	8000a1c <__udivmoddi4+0xe8>
 8000948:	fab2 f282 	clz	r2, r2
 800094c:	b152      	cbz	r2, 8000964 <__udivmoddi4+0x30>
 800094e:	fa01 f302 	lsl.w	r3, r1, r2
 8000952:	f1c2 0120 	rsb	r1, r2, #32
 8000956:	fa20 f101 	lsr.w	r1, r0, r1
 800095a:	fa0c fc02 	lsl.w	ip, ip, r2
 800095e:	ea41 0e03 	orr.w	lr, r1, r3
 8000962:	4094      	lsls	r4, r2
 8000964:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000968:	0c21      	lsrs	r1, r4, #16
 800096a:	fbbe f6f8 	udiv	r6, lr, r8
 800096e:	fa1f f78c 	uxth.w	r7, ip
 8000972:	fb08 e316 	mls	r3, r8, r6, lr
 8000976:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800097a:	fb06 f107 	mul.w	r1, r6, r7
 800097e:	4299      	cmp	r1, r3
 8000980:	d90a      	bls.n	8000998 <__udivmoddi4+0x64>
 8000982:	eb1c 0303 	adds.w	r3, ip, r3
 8000986:	f106 30ff 	add.w	r0, r6, #4294967295
 800098a:	f080 811f 	bcs.w	8000bcc <__udivmoddi4+0x298>
 800098e:	4299      	cmp	r1, r3
 8000990:	f240 811c 	bls.w	8000bcc <__udivmoddi4+0x298>
 8000994:	3e02      	subs	r6, #2
 8000996:	4463      	add	r3, ip
 8000998:	1a5b      	subs	r3, r3, r1
 800099a:	b2a4      	uxth	r4, r4
 800099c:	fbb3 f0f8 	udiv	r0, r3, r8
 80009a0:	fb08 3310 	mls	r3, r8, r0, r3
 80009a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009a8:	fb00 f707 	mul.w	r7, r0, r7
 80009ac:	42a7      	cmp	r7, r4
 80009ae:	d90a      	bls.n	80009c6 <__udivmoddi4+0x92>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009b8:	f080 810a 	bcs.w	8000bd0 <__udivmoddi4+0x29c>
 80009bc:	42a7      	cmp	r7, r4
 80009be:	f240 8107 	bls.w	8000bd0 <__udivmoddi4+0x29c>
 80009c2:	4464      	add	r4, ip
 80009c4:	3802      	subs	r0, #2
 80009c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ca:	1be4      	subs	r4, r4, r7
 80009cc:	2600      	movs	r6, #0
 80009ce:	b11d      	cbz	r5, 80009d8 <__udivmoddi4+0xa4>
 80009d0:	40d4      	lsrs	r4, r2
 80009d2:	2300      	movs	r3, #0
 80009d4:	e9c5 4300 	strd	r4, r3, [r5]
 80009d8:	4631      	mov	r1, r6
 80009da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009de:	428b      	cmp	r3, r1
 80009e0:	d909      	bls.n	80009f6 <__udivmoddi4+0xc2>
 80009e2:	2d00      	cmp	r5, #0
 80009e4:	f000 80ef 	beq.w	8000bc6 <__udivmoddi4+0x292>
 80009e8:	2600      	movs	r6, #0
 80009ea:	e9c5 0100 	strd	r0, r1, [r5]
 80009ee:	4630      	mov	r0, r6
 80009f0:	4631      	mov	r1, r6
 80009f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f6:	fab3 f683 	clz	r6, r3
 80009fa:	2e00      	cmp	r6, #0
 80009fc:	d14a      	bne.n	8000a94 <__udivmoddi4+0x160>
 80009fe:	428b      	cmp	r3, r1
 8000a00:	d302      	bcc.n	8000a08 <__udivmoddi4+0xd4>
 8000a02:	4282      	cmp	r2, r0
 8000a04:	f200 80f9 	bhi.w	8000bfa <__udivmoddi4+0x2c6>
 8000a08:	1a84      	subs	r4, r0, r2
 8000a0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a0e:	2001      	movs	r0, #1
 8000a10:	469e      	mov	lr, r3
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	d0e0      	beq.n	80009d8 <__udivmoddi4+0xa4>
 8000a16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a1a:	e7dd      	b.n	80009d8 <__udivmoddi4+0xa4>
 8000a1c:	b902      	cbnz	r2, 8000a20 <__udivmoddi4+0xec>
 8000a1e:	deff      	udf	#255	; 0xff
 8000a20:	fab2 f282 	clz	r2, r2
 8000a24:	2a00      	cmp	r2, #0
 8000a26:	f040 8092 	bne.w	8000b4e <__udivmoddi4+0x21a>
 8000a2a:	eba1 010c 	sub.w	r1, r1, ip
 8000a2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a32:	fa1f fe8c 	uxth.w	lr, ip
 8000a36:	2601      	movs	r6, #1
 8000a38:	0c20      	lsrs	r0, r4, #16
 8000a3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a46:	fb0e f003 	mul.w	r0, lr, r3
 8000a4a:	4288      	cmp	r0, r1
 8000a4c:	d908      	bls.n	8000a60 <__udivmoddi4+0x12c>
 8000a4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a56:	d202      	bcs.n	8000a5e <__udivmoddi4+0x12a>
 8000a58:	4288      	cmp	r0, r1
 8000a5a:	f200 80cb 	bhi.w	8000bf4 <__udivmoddi4+0x2c0>
 8000a5e:	4643      	mov	r3, r8
 8000a60:	1a09      	subs	r1, r1, r0
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a68:	fb07 1110 	mls	r1, r7, r0, r1
 8000a6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a70:	fb0e fe00 	mul.w	lr, lr, r0
 8000a74:	45a6      	cmp	lr, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x156>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a80:	d202      	bcs.n	8000a88 <__udivmoddi4+0x154>
 8000a82:	45a6      	cmp	lr, r4
 8000a84:	f200 80bb 	bhi.w	8000bfe <__udivmoddi4+0x2ca>
 8000a88:	4608      	mov	r0, r1
 8000a8a:	eba4 040e 	sub.w	r4, r4, lr
 8000a8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a92:	e79c      	b.n	80009ce <__udivmoddi4+0x9a>
 8000a94:	f1c6 0720 	rsb	r7, r6, #32
 8000a98:	40b3      	lsls	r3, r6
 8000a9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aa2:	fa20 f407 	lsr.w	r4, r0, r7
 8000aa6:	fa01 f306 	lsl.w	r3, r1, r6
 8000aaa:	431c      	orrs	r4, r3
 8000aac:	40f9      	lsrs	r1, r7
 8000aae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ab2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ab6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000aba:	0c20      	lsrs	r0, r4, #16
 8000abc:	fa1f fe8c 	uxth.w	lr, ip
 8000ac0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ac4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ac8:	fb08 f00e 	mul.w	r0, r8, lr
 8000acc:	4288      	cmp	r0, r1
 8000ace:	fa02 f206 	lsl.w	r2, r2, r6
 8000ad2:	d90b      	bls.n	8000aec <__udivmoddi4+0x1b8>
 8000ad4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000adc:	f080 8088 	bcs.w	8000bf0 <__udivmoddi4+0x2bc>
 8000ae0:	4288      	cmp	r0, r1
 8000ae2:	f240 8085 	bls.w	8000bf0 <__udivmoddi4+0x2bc>
 8000ae6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aea:	4461      	add	r1, ip
 8000aec:	1a09      	subs	r1, r1, r0
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000af4:	fb09 1110 	mls	r1, r9, r0, r1
 8000af8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	458e      	cmp	lr, r1
 8000b02:	d908      	bls.n	8000b16 <__udivmoddi4+0x1e2>
 8000b04:	eb1c 0101 	adds.w	r1, ip, r1
 8000b08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b0c:	d26c      	bcs.n	8000be8 <__udivmoddi4+0x2b4>
 8000b0e:	458e      	cmp	lr, r1
 8000b10:	d96a      	bls.n	8000be8 <__udivmoddi4+0x2b4>
 8000b12:	3802      	subs	r0, #2
 8000b14:	4461      	add	r1, ip
 8000b16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b1e:	eba1 010e 	sub.w	r1, r1, lr
 8000b22:	42a1      	cmp	r1, r4
 8000b24:	46c8      	mov	r8, r9
 8000b26:	46a6      	mov	lr, r4
 8000b28:	d356      	bcc.n	8000bd8 <__udivmoddi4+0x2a4>
 8000b2a:	d053      	beq.n	8000bd4 <__udivmoddi4+0x2a0>
 8000b2c:	b15d      	cbz	r5, 8000b46 <__udivmoddi4+0x212>
 8000b2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b32:	eb61 010e 	sbc.w	r1, r1, lr
 8000b36:	fa01 f707 	lsl.w	r7, r1, r7
 8000b3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b3e:	40f1      	lsrs	r1, r6
 8000b40:	431f      	orrs	r7, r3
 8000b42:	e9c5 7100 	strd	r7, r1, [r5]
 8000b46:	2600      	movs	r6, #0
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	f1c2 0320 	rsb	r3, r2, #32
 8000b52:	40d8      	lsrs	r0, r3
 8000b54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b58:	fa21 f303 	lsr.w	r3, r1, r3
 8000b5c:	4091      	lsls	r1, r2
 8000b5e:	4301      	orrs	r1, r0
 8000b60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b64:	fa1f fe8c 	uxth.w	lr, ip
 8000b68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000b70:	0c0b      	lsrs	r3, r1, #16
 8000b72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b76:	fb00 f60e 	mul.w	r6, r0, lr
 8000b7a:	429e      	cmp	r6, r3
 8000b7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x260>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b8a:	d22f      	bcs.n	8000bec <__udivmoddi4+0x2b8>
 8000b8c:	429e      	cmp	r6, r3
 8000b8e:	d92d      	bls.n	8000bec <__udivmoddi4+0x2b8>
 8000b90:	3802      	subs	r0, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	1b9b      	subs	r3, r3, r6
 8000b96:	b289      	uxth	r1, r1
 8000b98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ba0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ba8:	428b      	cmp	r3, r1
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x28a>
 8000bac:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bb4:	d216      	bcs.n	8000be4 <__udivmoddi4+0x2b0>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d914      	bls.n	8000be4 <__udivmoddi4+0x2b0>
 8000bba:	3e02      	subs	r6, #2
 8000bbc:	4461      	add	r1, ip
 8000bbe:	1ac9      	subs	r1, r1, r3
 8000bc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bc4:	e738      	b.n	8000a38 <__udivmoddi4+0x104>
 8000bc6:	462e      	mov	r6, r5
 8000bc8:	4628      	mov	r0, r5
 8000bca:	e705      	b.n	80009d8 <__udivmoddi4+0xa4>
 8000bcc:	4606      	mov	r6, r0
 8000bce:	e6e3      	b.n	8000998 <__udivmoddi4+0x64>
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	e6f8      	b.n	80009c6 <__udivmoddi4+0x92>
 8000bd4:	454b      	cmp	r3, r9
 8000bd6:	d2a9      	bcs.n	8000b2c <__udivmoddi4+0x1f8>
 8000bd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000be0:	3801      	subs	r0, #1
 8000be2:	e7a3      	b.n	8000b2c <__udivmoddi4+0x1f8>
 8000be4:	4646      	mov	r6, r8
 8000be6:	e7ea      	b.n	8000bbe <__udivmoddi4+0x28a>
 8000be8:	4620      	mov	r0, r4
 8000bea:	e794      	b.n	8000b16 <__udivmoddi4+0x1e2>
 8000bec:	4640      	mov	r0, r8
 8000bee:	e7d1      	b.n	8000b94 <__udivmoddi4+0x260>
 8000bf0:	46d0      	mov	r8, sl
 8000bf2:	e77b      	b.n	8000aec <__udivmoddi4+0x1b8>
 8000bf4:	3b02      	subs	r3, #2
 8000bf6:	4461      	add	r1, ip
 8000bf8:	e732      	b.n	8000a60 <__udivmoddi4+0x12c>
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	e709      	b.n	8000a12 <__udivmoddi4+0xde>
 8000bfe:	4464      	add	r4, ip
 8000c00:	3802      	subs	r0, #2
 8000c02:	e742      	b.n	8000a8a <__udivmoddi4+0x156>

08000c04 <__aeabi_idiv0>:
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b5b0      	push	{r4, r5, r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0c:	f000 fe40 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c10:	f000 f86c 	bl	8000cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c14:	f000 fa18 	bl	8001048 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c18:	f000 f9f6 	bl	8001008 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c1c:	f000 f8ce 	bl	8000dbc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000c20:	f000 f9c8 	bl	8000fb4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000c24:	f000 f91c 	bl	8000e60 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000c28:	f000 f952 	bl	8000ed0 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000c2c:	f000 f99e 	bl	8000f6c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1); //
 8000c30:	2201      	movs	r2, #1
 8000c32:	4923      	ldr	r1, [pc, #140]	; (8000cc0 <main+0xb8>)
 8000c34:	4823      	ldr	r0, [pc, #140]	; (8000cc4 <main+0xbc>)
 8000c36:	f001 f821 	bl	8001c7c <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start_IT(&htim3);
 8000c3a:	4823      	ldr	r0, [pc, #140]	; (8000cc8 <main+0xc0>)
 8000c3c:	f003 fb08 	bl	8004250 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim11);
 8000c40:	4822      	ldr	r0, [pc, #136]	; (8000ccc <main+0xc4>)
 8000c42:	f003 fb05 	bl	8004250 <HAL_TIM_Base_Start_IT>

  	// config 0 to enable internal register (similar to latch clk)
  	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c4c:	4820      	ldr	r0, [pc, #128]	; (8000cd0 <main+0xc8>)
 8000c4e:	f002 fa27 	bl	80030a0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint64_t timestamp = 0;
	  		if (micros() - timestamp > 10) // 10msec
 8000c52:	f000 fbd7 	bl	8001404 <micros>
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <main+0xcc>)
 8000c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0503 	sbc.w	r5, r1, r3
 8000c62:	2c0b      	cmp	r4, #11
 8000c64:	f175 0300 	sbcs.w	r3, r5, #0
 8000c68:	d3f3      	bcc.n	8000c52 <main+0x4a>
	  		{
	  			timestamp = micros();
 8000c6a:	f000 fbcb 	bl	8001404 <micros>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	460b      	mov	r3, r1
 8000c72:	4918      	ldr	r1, [pc, #96]	; (8000cd4 <main+0xcc>)
 8000c74:	e9c1 2300 	strd	r2, r3, [r1]

	  			SignalGen();
 8000c78:	f000 fab6 	bl	80011e8 <SignalGen>

	  			//shutdown test
	  			if(shdntg == 1){DACConfig = 0b0010;}
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <main+0xd0>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d103      	bne.n	8000c8c <main+0x84>
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <main+0xd4>)
 8000c86:	2202      	movs	r2, #2
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <main+0x8a>
	  			else{DACConfig = 0b0011;}
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <main+0xd4>)
 8000c8e:	2203      	movs	r2, #3
 8000c90:	701a      	strb	r2, [r3, #0]
	  			// sawtooth
	  			//dataOut++;
	  			//dataOut %= 4096; // overflow 12 bit
	  			// sawtootth

	  			if (hspi3.State == HAL_SPI_STATE_READY
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <main+0xd8>)
 8000c94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d1d9      	bne.n	8000c52 <main+0x4a>
	  					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8000c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca2:	4810      	ldr	r0, [pc, #64]	; (8000ce4 <main+0xdc>)
 8000ca4:	f002 f9e4 	bl	8003070 <HAL_GPIO_ReadPin>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d1d1      	bne.n	8000c52 <main+0x4a>
	  							== GPIO_PIN_SET)
	  				// chip select set, prevent unfinished previous task
	  			{
	  				MCP4922SetOutput(DACConfig, dataOut);
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <main+0xd4>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <main+0xe0>)
 8000cb4:	8812      	ldrh	r2, [r2, #0]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fa6d 	bl	8001198 <MCP4922SetOutput>
  {
 8000cbe:	e7c8      	b.n	8000c52 <main+0x4a>
 8000cc0:	20000200 	.word	0x20000200
 8000cc4:	2000002c 	.word	0x2000002c
 8000cc8:	2000012c 	.word	0x2000012c
 8000ccc:	20000174 	.word	0x20000174
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	20000218 	.word	0x20000218
 8000cd8:	20000210 	.word	0x20000210
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	200000d4 	.word	0x200000d4
 8000ce4:	40020400 	.word	0x40020400
 8000ce8:	20000202 	.word	0x20000202

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b094      	sub	sp, #80	; 0x50
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	2230      	movs	r2, #48	; 0x30
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 f984 	bl	8005008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <SystemClock_Config+0xc8>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	4a26      	ldr	r2, [pc, #152]	; (8000db4 <SystemClock_Config+0xc8>)
 8000d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <SystemClock_Config+0xc8>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <SystemClock_Config+0xcc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a20      	ldr	r2, [pc, #128]	; (8000db8 <SystemClock_Config+0xcc>)
 8000d36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <SystemClock_Config+0xcc>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d50:	2310      	movs	r3, #16
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d54:	2302      	movs	r3, #2
 8000d56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d60:	2364      	movs	r3, #100	; 0x64
 8000d62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 f9e1 	bl	8003138 <HAL_RCC_OscConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d7c:	f000 fb5c 	bl	8001438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d80:	230f      	movs	r3, #15
 8000d82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d84:	2302      	movs	r3, #2
 8000d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2103      	movs	r1, #3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 fc43 	bl	8003628 <HAL_RCC_ClockConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000da8:	f000 fb46 	bl	8001438 <Error_Handler>
  }
}
 8000dac:	bf00      	nop
 8000dae:	3750      	adds	r7, #80	; 0x50
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40007000 	.word	0x40007000

08000dbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dce:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000dd0:	4a22      	ldr	r2, [pc, #136]	; (8000e5c <MX_ADC1_Init+0xa0>)
 8000dd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000dd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000e00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000e22:	f000 fda7 	bl	8001974 <HAL_ADC_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000e2c:	f000 fb04 	bl	8001438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000e42:	f001 f833 	bl	8001eac <HAL_ADC_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e4c:	f000 faf4 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000002c 	.word	0x2000002c
 8000e5c:	40012000 	.word	0x40012000

08000e60 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_SPI3_Init+0x68>)
 8000e66:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <MX_SPI3_Init+0x6c>)
 8000e68:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_SPI3_Init+0x68>)
 8000e6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e70:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_SPI3_Init+0x68>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_SPI3_Init+0x68>)
 8000e7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e7e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_SPI3_Init+0x68>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_SPI3_Init+0x68>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_SPI3_Init+0x68>)
 8000e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e92:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_SPI3_Init+0x68>)
 8000e96:	2220      	movs	r2, #32
 8000e98:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_SPI3_Init+0x68>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_SPI3_Init+0x68>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_SPI3_Init+0x68>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_SPI3_Init+0x68>)
 8000eae:	220a      	movs	r2, #10
 8000eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_SPI3_Init+0x68>)
 8000eb4:	f002 fdd8 	bl	8003a68 <HAL_SPI_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8000ebe:	f000 fabb 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000d4 	.word	0x200000d4
 8000ecc:	40003c00 	.word	0x40003c00

08000ed0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <MX_TIM3_Init+0x98>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f14:	4813      	ldr	r0, [pc, #76]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f16:	f003 f94b 	bl	80041b0 <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f20:	f000 fa8a 	bl	8001438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f32:	f003 faf7 	bl	8004524 <HAL_TIM_ConfigClockSource>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f3c:	f000 fa7c 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f40:	2320      	movs	r3, #32
 8000f42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f4e:	f003 fcf3 	bl	8004938 <HAL_TIMEx_MasterConfigSynchronization>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f58:	f000 fa6e 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000012c 	.word	0x2000012c
 8000f68:	40000400 	.word	0x40000400

08000f6c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_TIM11_Init+0x40>)
 8000f72:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <MX_TIM11_Init+0x44>)
 8000f74:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <MX_TIM11_Init+0x40>)
 8000f78:	2263      	movs	r2, #99	; 0x63
 8000f7a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_TIM11_Init+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <MX_TIM11_Init+0x40>)
 8000f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f88:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_TIM11_Init+0x40>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_TIM11_Init+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_TIM11_Init+0x40>)
 8000f98:	f003 f90a 	bl	80041b0 <HAL_TIM_Base_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000fa2:	f000 fa49 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000174 	.word	0x20000174
 8000fb0:	40014800 	.word	0x40014800

08000fb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <MX_USART2_UART_Init+0x50>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fec:	f003 fd26 	bl	8004a3c <HAL_UART_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ff6:	f000 fa1f 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200001bc 	.word	0x200001bc
 8001004:	40004400 	.word	0x40004400

08001008 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_DMA_Init+0x3c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <MX_DMA_Init+0x3c>)
 8001018:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_DMA_Init+0x3c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2038      	movs	r0, #56	; 0x38
 8001030:	f001 fad1 	bl	80025d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001034:	2038      	movs	r0, #56	; 0x38
 8001036:	f001 faea 	bl	800260e <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b49      	ldr	r3, [pc, #292]	; (8001188 <MX_GPIO_Init+0x140>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a48      	ldr	r2, [pc, #288]	; (8001188 <MX_GPIO_Init+0x140>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b46      	ldr	r3, [pc, #280]	; (8001188 <MX_GPIO_Init+0x140>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b42      	ldr	r3, [pc, #264]	; (8001188 <MX_GPIO_Init+0x140>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a41      	ldr	r2, [pc, #260]	; (8001188 <MX_GPIO_Init+0x140>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b3f      	ldr	r3, [pc, #252]	; (8001188 <MX_GPIO_Init+0x140>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <MX_GPIO_Init+0x140>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a3a      	ldr	r2, [pc, #232]	; (8001188 <MX_GPIO_Init+0x140>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b38      	ldr	r3, [pc, #224]	; (8001188 <MX_GPIO_Init+0x140>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <MX_GPIO_Init+0x140>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a33      	ldr	r2, [pc, #204]	; (8001188 <MX_GPIO_Init+0x140>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b31      	ldr	r3, [pc, #196]	; (8001188 <MX_GPIO_Init+0x140>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2120      	movs	r1, #32
 80010d2:	482e      	ldr	r0, [pc, #184]	; (800118c <MX_GPIO_Init+0x144>)
 80010d4:	f001 ffe4 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010de:	482c      	ldr	r0, [pc, #176]	; (8001190 <MX_GPIO_Init+0x148>)
 80010e0:	f001 ffde 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2180      	movs	r1, #128	; 0x80
 80010e8:	482a      	ldr	r0, [pc, #168]	; (8001194 <MX_GPIO_Init+0x14c>)
 80010ea:	f001 ffd9 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f4:	4825      	ldr	r0, [pc, #148]	; (800118c <MX_GPIO_Init+0x144>)
 80010f6:	f001 ffd3 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001100:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4820      	ldr	r0, [pc, #128]	; (8001194 <MX_GPIO_Init+0x14c>)
 8001112:	f001 fe29 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8001116:	f44f 7308 	mov.w	r3, #544	; 0x220
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	4817      	ldr	r0, [pc, #92]	; (800118c <MX_GPIO_Init+0x144>)
 8001130:	f001 fe1a 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4810      	ldr	r0, [pc, #64]	; (8001190 <MX_GPIO_Init+0x148>)
 800114e:	f001 fe0b 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <MX_GPIO_Init+0x14c>)
 800116a:	f001 fdfd 	bl	8002d68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2028      	movs	r0, #40	; 0x28
 8001174:	f001 fa2f 	bl	80025d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001178:	2028      	movs	r0, #40	; 0x28
 800117a:	f001 fa48 	bl	800260e <HAL_NVIC_EnableIRQ>

}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020400 	.word	0x40020400
 8001194:	40020800 	.word	0x40020800

08001198 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	460a      	mov	r2, r1
 80011a2:	71fb      	strb	r3, [r7, #7]
 80011a4:	4613      	mov	r3, r2
 80011a6:	80bb      	strh	r3, [r7, #4]
	// & 0x0fff -> get only 12 bit
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12); // merge config & data
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	031b      	lsls	r3, r3, #12
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
	// write cs => 0 to say chip is worked
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011be:	4807      	ldr	r0, [pc, #28]	; (80011dc <MCP4922SetOutput+0x44>)
 80011c0:	f001 ff6e 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2201      	movs	r2, #1
 80011ca:	4619      	mov	r1, r3
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MCP4922SetOutput+0x48>)
 80011ce:	f002 fcd5 	bl	8003b7c <HAL_SPI_Transmit_IT>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40020400 	.word	0x40020400
 80011e0:	200000d4 	.word	0x200000d4
 80011e4:	00000000 	.word	0x00000000

080011e8 <SignalGen>:

void SignalGen(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
	switch(sigstate){
 80011ee:	4b54      	ldr	r3, [pc, #336]	; (8001340 <SignalGen+0x158>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d056      	beq.n	80012a4 <SignalGen+0xbc>
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	dc03      	bgt.n	8001202 <SignalGen+0x1a>
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d00f      	beq.n	800121e <SignalGen+0x36>
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d028      	beq.n	8001254 <SignalGen+0x6c>
	default:
	case 0:
		// sawtooth
		dataOut++;
 8001202:	4b50      	ldr	r3, [pc, #320]	; (8001344 <SignalGen+0x15c>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b4e      	ldr	r3, [pc, #312]	; (8001344 <SignalGen+0x15c>)
 800120c:	801a      	strh	r2, [r3, #0]
		dataOut %= 4096; // overflow 12 bit
 800120e:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <SignalGen+0x15c>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <SignalGen+0x15c>)
 800121a:	801a      	strh	r2, [r3, #0]
	break;
 800121c:	e082      	b.n	8001324 <SignalGen+0x13c>

	case 1:
		// square wave
		sqcounter++;
 800121e:	4b4a      	ldr	r3, [pc, #296]	; (8001348 <SignalGen+0x160>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b48      	ldr	r3, [pc, #288]	; (8001348 <SignalGen+0x160>)
 8001228:	801a      	strh	r2, [r3, #0]
		sqcounter %= 4096;
 800122a:	4b47      	ldr	r3, [pc, #284]	; (8001348 <SignalGen+0x160>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b44      	ldr	r3, [pc, #272]	; (8001348 <SignalGen+0x160>)
 8001236:	801a      	strh	r2, [r3, #0]
		if (sqcounter >= 2048) //(int)((50/100)*4096)
 8001238:	4b43      	ldr	r3, [pc, #268]	; (8001348 <SignalGen+0x160>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001240:	d304      	bcc.n	800124c <SignalGen+0x64>
		{dataOut = 4095;}
 8001242:	4b40      	ldr	r3, [pc, #256]	; (8001344 <SignalGen+0x15c>)
 8001244:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001248:	801a      	strh	r2, [r3, #0]
		else{dataOut = 0;}
	break;
 800124a:	e06b      	b.n	8001324 <SignalGen+0x13c>
		else{dataOut = 0;}
 800124c:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <SignalGen+0x15c>)
 800124e:	2200      	movs	r2, #0
 8001250:	801a      	strh	r2, [r3, #0]
	break;
 8001252:	e067      	b.n	8001324 <SignalGen+0x13c>

	case 2:
		if(updown == 1){dataOut++;}
 8001254:	4b3d      	ldr	r3, [pc, #244]	; (800134c <SignalGen+0x164>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d106      	bne.n	800126a <SignalGen+0x82>
 800125c:	4b39      	ldr	r3, [pc, #228]	; (8001344 <SignalGen+0x15c>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b37      	ldr	r3, [pc, #220]	; (8001344 <SignalGen+0x15c>)
 8001266:	801a      	strh	r2, [r3, #0]
 8001268:	e005      	b.n	8001276 <SignalGen+0x8e>
		else{dataOut = dataOut - 1;}
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <SignalGen+0x15c>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	3b01      	subs	r3, #1
 8001270:	b29a      	uxth	r2, r3
 8001272:	4b34      	ldr	r3, [pc, #208]	; (8001344 <SignalGen+0x15c>)
 8001274:	801a      	strh	r2, [r3, #0]

		if(dataOut <= 0){updown = 1;}
 8001276:	4b33      	ldr	r3, [pc, #204]	; (8001344 <SignalGen+0x15c>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d103      	bne.n	8001286 <SignalGen+0x9e>
 800127e:	4b33      	ldr	r3, [pc, #204]	; (800134c <SignalGen+0x164>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
		else if (dataOut >= 4095) {updown = 0;}
		else{updown = updown;}
	break;
 8001284:	e04e      	b.n	8001324 <SignalGen+0x13c>
		else if (dataOut >= 4095) {updown = 0;}
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <SignalGen+0x15c>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800128e:	4293      	cmp	r3, r2
 8001290:	d903      	bls.n	800129a <SignalGen+0xb2>
 8001292:	4b2e      	ldr	r3, [pc, #184]	; (800134c <SignalGen+0x164>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
	break;
 8001298:	e044      	b.n	8001324 <SignalGen+0x13c>
		else{updown = updown;}
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <SignalGen+0x164>)
 800129c:	781a      	ldrb	r2, [r3, #0]
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <SignalGen+0x164>)
 80012a0:	701a      	strb	r2, [r3, #0]
	break;
 80012a2:	e03f      	b.n	8001324 <SignalGen+0x13c>

	case 3:
	// sin
	sincounter++;
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <SignalGen+0x168>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <SignalGen+0x168>)
 80012ae:	801a      	strh	r2, [r3, #0]
	sincounter %= 360;
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <SignalGen+0x168>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	08da      	lsrs	r2, r3, #3
 80012b6:	4927      	ldr	r1, [pc, #156]	; (8001354 <SignalGen+0x16c>)
 80012b8:	fba1 1202 	umull	r1, r2, r1, r2
 80012bc:	0892      	lsrs	r2, r2, #2
 80012be:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80012c2:	fb01 f202 	mul.w	r2, r1, r2
 80012c6:	1a9b      	subs	r3, r3, r2
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b21      	ldr	r3, [pc, #132]	; (8001350 <SignalGen+0x168>)
 80012cc:	801a      	strh	r2, [r3, #0]

	double sindata = sin(sincounter*(PI/180));
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <SignalGen+0x168>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f9fc 	bl	80006d0 <__aeabi_i2d>
 80012d8:	a315      	add	r3, pc, #84	; (adr r3, 8001330 <SignalGen+0x148>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7fe ff7b 	bl	80001d8 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	ec43 2b17 	vmov	d7, r2, r3
 80012ea:	eeb0 0a47 	vmov.f32	s0, s14
 80012ee:	eef0 0a67 	vmov.f32	s1, s15
 80012f2:	f003 fe91 	bl	8005018 <sin>
 80012f6:	ed87 0b00 	vstr	d0, [r7]
	dataOut = (int)(sindata*2047) + 2048;//
 80012fa:	a30f      	add	r3, pc, #60	; (adr r3, 8001338 <SignalGen+0x150>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001304:	f7fe ff68 	bl	80001d8 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fad0 	bl	80008b4 <__aeabi_d2iz>
 8001314:	4603      	mov	r3, r0
 8001316:	b29b      	uxth	r3, r3
 8001318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <SignalGen+0x15c>)
 8001320:	801a      	strh	r2, [r3, #0]
	break;
 8001322:	bf00      	nop
	}
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	f3af 8000 	nop.w
 8001330:	a1fae712 	.word	0xa1fae712
 8001334:	3f91df46 	.word	0x3f91df46
 8001338:	00000000 	.word	0x00000000
 800133c:	409ffc00 	.word	0x409ffc00
 8001340:	20000211 	.word	0x20000211
 8001344:	20000202 	.word	0x20000202
 8001348:	20000212 	.word	0x20000212
 800134c:	20000001 	.word	0x20000001
 8001350:	20000214 	.word	0x20000214
 8001354:	16c16c17 	.word	0x16c16c17

08001358 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001368:	d111      	bne.n	800138e <HAL_GPIO_EXTI_Callback+0x36>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800136a:	2120      	movs	r1, #32
 800136c:	480a      	ldr	r0, [pc, #40]	; (8001398 <HAL_GPIO_EXTI_Callback+0x40>)
 800136e:	f001 feb0 	bl	80030d2 <HAL_GPIO_TogglePin>
		if(sigstate >= 4){sigstate = 0;}
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_GPIO_EXTI_Callback+0x44>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d903      	bls.n	8001382 <HAL_GPIO_EXTI_Callback+0x2a>
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_GPIO_EXTI_Callback+0x44>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
		else{sigstate++;}

	}
}
 8001380:	e005      	b.n	800138e <HAL_GPIO_EXTI_Callback+0x36>
		else{sigstate++;}
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_GPIO_EXTI_Callback+0x44>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <HAL_GPIO_EXTI_Callback+0x44>)
 800138c:	701a      	strb	r2, [r3, #0]
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40020000 	.word	0x40020000
 800139c:	20000211 	.word	0x20000211

080013a0 <HAL_SPI_TxCpltCallback>:
// call when transmit finished
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_SPI_TxCpltCallback+0x24>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d105      	bne.n	80013bc <HAL_SPI_TxCpltCallback+0x1c>
	{
		// set cs back to 1, finished
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b6:	4804      	ldr	r0, [pc, #16]	; (80013c8 <HAL_SPI_TxCpltCallback+0x28>)
 80013b8:	f001 fe72 	bl	80030a0 <HAL_GPIO_WritePin>
	}
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200000d4 	.word	0x200000d4
 80013c8:	40020400 	.word	0x40020400

080013cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013cc:	b4b0      	push	{r4, r5, r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a09      	ldr	r2, [pc, #36]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d10a      	bne.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x26>
	{_micro += 65535;}
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013e6:	1854      	adds	r4, r2, r1
 80013e8:	f143 0500 	adc.w	r5, r3, #0
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80013ee:	e9c3 4500 	strd	r4, r5, [r3]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bcb0      	pop	{r4, r5, r7}
 80013fa:	4770      	bx	lr
 80013fc:	20000174 	.word	0x20000174
 8001400:	20000208 	.word	0x20000208

08001404 <micros>:
inline uint64_t micros()
{
 8001404:	b4b0      	push	{r4, r5, r7}
 8001406:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <micros+0x2c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	2200      	movs	r2, #0
 8001410:	4618      	mov	r0, r3
 8001412:	4611      	mov	r1, r2
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <micros+0x30>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	1884      	adds	r4, r0, r2
 800141c:	eb41 0503 	adc.w	r5, r1, r3
 8001420:	4622      	mov	r2, r4
 8001422:	462b      	mov	r3, r5
}
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	bcb0      	pop	{r4, r5, r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000174 	.word	0x20000174
 8001434:	20000208 	.word	0x20000208

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001440:	e7fe      	b.n	8001440 <Error_Handler+0x8>
	...

08001444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_MspInit+0x4c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <HAL_MspInit+0x4c>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <HAL_MspInit+0x4c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_MspInit+0x4c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_MspInit+0x4c>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001482:	2007      	movs	r0, #7
 8001484:	f001 f89c 	bl	80025c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800

08001494 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a33      	ldr	r2, [pc, #204]	; (8001580 <HAL_ADC_MspInit+0xec>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d160      	bne.n	8001578 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b32      	ldr	r3, [pc, #200]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a31      	ldr	r2, [pc, #196]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ee:	2301      	movs	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f2:	2303      	movs	r3, #3
 80014f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4821      	ldr	r0, [pc, #132]	; (8001588 <HAL_ADC_MspInit+0xf4>)
 8001502:	f001 fc31 	bl	8002d68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_ADC_MspInit+0xf8>)
 8001508:	4a21      	ldr	r2, [pc, #132]	; (8001590 <HAL_ADC_MspInit+0xfc>)
 800150a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_ADC_MspInit+0xf8>)
 800150e:	2200      	movs	r2, #0
 8001510:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_ADC_MspInit+0xf8>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_ADC_MspInit+0xf8>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_ADC_MspInit+0xf8>)
 8001520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001524:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_ADC_MspInit+0xf8>)
 8001528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800152c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <HAL_ADC_MspInit+0xf8>)
 8001530:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001534:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_ADC_MspInit+0xf8>)
 8001538:	f44f 7280 	mov.w	r2, #256	; 0x100
 800153c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_ADC_MspInit+0xf8>)
 8001540:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001544:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_ADC_MspInit+0xf8>)
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800154c:	480f      	ldr	r0, [pc, #60]	; (800158c <HAL_ADC_MspInit+0xf8>)
 800154e:	f001 f879 	bl	8002644 <HAL_DMA_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001558:	f7ff ff6e 	bl	8001438 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <HAL_ADC_MspInit+0xf8>)
 8001560:	639a      	str	r2, [r3, #56]	; 0x38
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_ADC_MspInit+0xf8>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	2012      	movs	r0, #18
 800156e:	f001 f832 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001572:	2012      	movs	r0, #18
 8001574:	f001 f84b 	bl	800260e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	; 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40012000 	.word	0x40012000
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000
 800158c:	20000074 	.word	0x20000074
 8001590:	40026410 	.word	0x40026410

08001594 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_SPI_MspInit+0x94>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d133      	bne.n	800161e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_SPI_MspInit+0x98>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a1b      	ldr	r2, [pc, #108]	; (800162c <HAL_SPI_MspInit+0x98>)
 80015c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_SPI_MspInit+0x98>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_SPI_MspInit+0x98>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <HAL_SPI_MspInit+0x98>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_SPI_MspInit+0x98>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80015ee:	2338      	movs	r3, #56	; 0x38
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015fe:	2306      	movs	r3, #6
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4809      	ldr	r0, [pc, #36]	; (8001630 <HAL_SPI_MspInit+0x9c>)
 800160a:	f001 fbad 	bl	8002d68 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2033      	movs	r0, #51	; 0x33
 8001614:	f000 ffdf 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001618:	2033      	movs	r0, #51	; 0x33
 800161a:	f000 fff8 	bl	800260e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40003c00 	.word	0x40003c00
 800162c:	40023800 	.word	0x40023800
 8001630:	40020400 	.word	0x40020400

08001634 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <HAL_TIM_Base_MspInit+0x80>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d116      	bne.n	8001674 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_TIM_Base_MspInit+0x84>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <HAL_TIM_Base_MspInit+0x84>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_TIM_Base_MspInit+0x84>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	201d      	movs	r0, #29
 8001668:	f000 ffb5 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800166c:	201d      	movs	r0, #29
 800166e:	f000 ffce 	bl	800260e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001672:	e01a      	b.n	80016aa <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_TIM_Base_MspInit+0x88>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d115      	bne.n	80016aa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_TIM_Base_MspInit+0x84>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <HAL_TIM_Base_MspInit+0x84>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_TIM_Base_MspInit+0x84>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	201a      	movs	r0, #26
 80016a0:	f000 ff99 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016a4:	201a      	movs	r0, #26
 80016a6:	f000 ffb2 	bl	800260e <HAL_NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40000400 	.word	0x40000400
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40014800 	.word	0x40014800

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a19      	ldr	r2, [pc, #100]	; (8001744 <HAL_UART_MspInit+0x84>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d12b      	bne.n	800173a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_UART_MspInit+0x88>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a17      	ldr	r2, [pc, #92]	; (8001748 <HAL_UART_MspInit+0x88>)
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_UART_MspInit+0x88>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_UART_MspInit+0x88>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <HAL_UART_MspInit+0x88>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_UART_MspInit+0x88>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800171a:	230c      	movs	r3, #12
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172a:	2307      	movs	r3, #7
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <HAL_UART_MspInit+0x8c>)
 8001736:	f001 fb17 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	; 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40004400 	.word	0x40004400
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <NMI_Handler+0x4>

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 f8ca 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <ADC_IRQHandler+0x10>)
 80017aa:	f000 f926 	bl	80019fa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000002c 	.word	0x2000002c

080017b8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80017be:	f002 fda9 	bl	8004314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000174 	.word	0x20000174

080017cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <TIM3_IRQHandler+0x10>)
 80017d2:	f002 fd9f 	bl	8004314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000012c 	.word	0x2000012c

080017e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017e8:	f001 fc8e 	bl	8003108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <SPI3_IRQHandler+0x10>)
 80017f6:	f002 fa4b 	bl	8003c90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200000d4 	.word	0x200000d4

08001804 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <DMA2_Stream0_IRQHandler+0x10>)
 800180a:	f001 f843 	bl	8002894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000074 	.word	0x20000074

08001818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001840:	480d      	ldr	r0, [pc, #52]	; (8001878 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001842:	490e      	ldr	r1, [pc, #56]	; (800187c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001844:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001848:	e002      	b.n	8001850 <LoopCopyDataInit>

0800184a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800184c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184e:	3304      	adds	r3, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001854:	d3f9      	bcc.n	800184a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001858:	4c0b      	ldr	r4, [pc, #44]	; (8001888 <LoopFillZerobss+0x26>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800185c:	e001      	b.n	8001862 <LoopFillZerobss>

0800185e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001860:	3204      	adds	r2, #4

08001862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001864:	d3fb      	bcc.n	800185e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001866:	f7ff ffd7 	bl	8001818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186a:	f003 fba9 	bl	8004fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7ff f9cb 	bl	8000c08 <main>
  bx  lr    
 8001872:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001880:	080062d0 	.word	0x080062d0
  ldr r2, =_sbss
 8001884:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001888:	20000224 	.word	0x20000224

0800188c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <DMA1_Stream0_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <HAL_Init+0x40>)
 800189a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_Init+0x40>)
 80018a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_Init+0x40>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 fe81 	bl	80025c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 f808 	bl	80018d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff fdbe 	bl	8001444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x54>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x58>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fe99 	bl	800262a <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f000 fe61 	bl	80025d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <HAL_InitTick+0x5c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000004 	.word	0x20000004
 800192c:	2000000c 	.word	0x2000000c
 8001930:	20000008 	.word	0x20000008

08001934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x20>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x24>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_IncTick+0x24>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	2000000c 	.word	0x2000000c
 8001958:	20000220 	.word	0x20000220

0800195c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_GetTick+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000220 	.word	0x20000220

08001974 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e033      	b.n	80019f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fd7e 	bl	8001494 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d118      	bne.n	80019e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ba:	f023 0302 	bic.w	r3, r3, #2
 80019be:	f043 0202 	orr.w	r2, r3, #2
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fba2 	bl	8002110 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f023 0303 	bic.w	r3, r3, #3
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
 80019e2:	e001      	b.n	80019e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0320 	and.w	r3, r3, #32
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	bf0c      	ite	eq
 8001a2e:	2301      	moveq	r3, #1
 8001a30:	2300      	movne	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d049      	beq.n	8001ad0 <HAL_ADC_IRQHandler+0xd6>
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d046      	beq.n	8001ad0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d105      	bne.n	8001a5a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d12b      	bne.n	8001ac0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d127      	bne.n	8001ac0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d006      	beq.n	8001a8c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d119      	bne.n	8001ac0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0220 	bic.w	r2, r2, #32
 8001a9a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	f043 0201 	orr.w	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f9cb 	bl	8001e5c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f06f 0212 	mvn.w	r2, #18
 8001ace:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af0:	2b80      	cmp	r3, #128	; 0x80
 8001af2:	bf0c      	ite	eq
 8001af4:	2301      	moveq	r3, #1
 8001af6:	2300      	movne	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d057      	beq.n	8001bb2 <HAL_ADC_IRQHandler+0x1b8>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d054      	beq.n	8001bb2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d105      	bne.n	8001b20 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d139      	bne.n	8001ba2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d12b      	bne.n	8001ba2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d124      	bne.n	8001ba2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d11d      	bne.n	8001ba2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d119      	bne.n	8001ba2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b7c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d105      	bne.n	8001ba2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f043 0201 	orr.w	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fc32 	bl	800240c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 020c 	mvn.w	r2, #12
 8001bb0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd2:	2b40      	cmp	r3, #64	; 0x40
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2301      	moveq	r3, #1
 8001bd8:	2300      	movne	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d017      	beq.n	8001c14 <HAL_ADC_IRQHandler+0x21a>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d014      	beq.n	8001c14 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d10d      	bne.n	8001c14 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f93d 	bl	8001e84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f06f 0201 	mvn.w	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	bf0c      	ite	eq
 8001c22:	2301      	moveq	r3, #1
 8001c24:	2300      	movne	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c38:	bf0c      	ite	eq
 8001c3a:	2301      	moveq	r3, #1
 8001c3c:	2300      	movne	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d015      	beq.n	8001c74 <HAL_ADC_IRQHandler+0x27a>
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d012      	beq.n	8001c74 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f043 0202 	orr.w	r2, r3, #2
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f06f 0220 	mvn.w	r2, #32
 8001c62:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f917 	bl	8001e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f06f 0220 	mvn.w	r2, #32
 8001c72:	601a      	str	r2, [r3, #0]
  }
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_Start_DMA+0x1e>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e0ce      	b.n	8001e38 <HAL_ADC_Start_DMA+0x1bc>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d018      	beq.n	8001ce2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cc0:	4b5f      	ldr	r3, [pc, #380]	; (8001e40 <HAL_ADC_Start_DMA+0x1c4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a5f      	ldr	r2, [pc, #380]	; (8001e44 <HAL_ADC_Start_DMA+0x1c8>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	0c9a      	lsrs	r2, r3, #18
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001cd4:	e002      	b.n	8001cdc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f9      	bne.n	8001cd6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cf0:	d107      	bne.n	8001d02 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d00:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	f040 8086 	bne.w	8001e1e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d50:	d106      	bne.n	8001d60 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f023 0206 	bic.w	r2, r3, #6
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
 8001d5e:	e002      	b.n	8001d66 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d6e:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <HAL_ADC_Start_DMA+0x1cc>)
 8001d70:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d76:	4a35      	ldr	r2, [pc, #212]	; (8001e4c <HAL_ADC_Start_DMA+0x1d0>)
 8001d78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7e:	4a34      	ldr	r2, [pc, #208]	; (8001e50 <HAL_ADC_Start_DMA+0x1d4>)
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d86:	4a33      	ldr	r2, [pc, #204]	; (8001e54 <HAL_ADC_Start_DMA+0x1d8>)
 8001d88:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001da2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001db2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	334c      	adds	r3, #76	; 0x4c
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f000 fcec 	bl	80027a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10f      	bne.n	8001df4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d129      	bne.n	8001e36 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	e020      	b.n	8001e36 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_ADC_Start_DMA+0x1dc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d11b      	bne.n	8001e36 <HAL_ADC_Start_DMA+0x1ba>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d114      	bne.n	8001e36 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	e00b      	b.n	8001e36 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f043 0210 	orr.w	r2, r3, #16
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f043 0201 	orr.w	r2, r3, #1
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000004 	.word	0x20000004
 8001e44:	431bde83 	.word	0x431bde83
 8001e48:	40012300 	.word	0x40012300
 8001e4c:	08002309 	.word	0x08002309
 8001e50:	080023c3 	.word	0x080023c3
 8001e54:	080023df 	.word	0x080023df
 8001e58:	40012000 	.word	0x40012000

08001e5c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x1c>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e113      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x244>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b09      	cmp	r3, #9
 8001ed6:	d925      	bls.n	8001f24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68d9      	ldr	r1, [r3, #12]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	3b1e      	subs	r3, #30
 8001eee:	2207      	movs	r2, #7
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	400a      	ands	r2, r1
 8001efc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68d9      	ldr	r1, [r3, #12]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	4603      	mov	r3, r0
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4403      	add	r3, r0
 8001f16:	3b1e      	subs	r3, #30
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	e022      	b.n	8001f6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6919      	ldr	r1, [r3, #16]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	2207      	movs	r2, #7
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	400a      	ands	r2, r1
 8001f46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6919      	ldr	r1, [r3, #16]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4403      	add	r3, r0
 8001f60:	409a      	lsls	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d824      	bhi.n	8001fbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	3b05      	subs	r3, #5
 8001f84:	221f      	movs	r2, #31
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	400a      	ands	r2, r1
 8001f92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	3b05      	subs	r3, #5
 8001fae:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fba:	e04c      	b.n	8002056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b0c      	cmp	r3, #12
 8001fc2:	d824      	bhi.n	800200e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3b23      	subs	r3, #35	; 0x23
 8001fd6:	221f      	movs	r2, #31
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43da      	mvns	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3b23      	subs	r3, #35	; 0x23
 8002000:	fa00 f203 	lsl.w	r2, r0, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
 800200c:	e023      	b.n	8002056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	3b41      	subs	r3, #65	; 0x41
 8002020:	221f      	movs	r2, #31
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	400a      	ands	r2, r1
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	4618      	mov	r0, r3
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	3b41      	subs	r3, #65	; 0x41
 800204a:	fa00 f203 	lsl.w	r2, r0, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002056:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_ADC_ConfigChannel+0x250>)
 8002058:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a28      	ldr	r2, [pc, #160]	; (8002100 <HAL_ADC_ConfigChannel+0x254>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d10f      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x1d8>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b12      	cmp	r3, #18
 800206a:	d10b      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <HAL_ADC_ConfigChannel+0x254>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d12b      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x23a>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1c      	ldr	r2, [pc, #112]	; (8002104 <HAL_ADC_ConfigChannel+0x258>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d003      	beq.n	80020a0 <HAL_ADC_ConfigChannel+0x1f4>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b11      	cmp	r3, #17
 800209e:	d122      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <HAL_ADC_ConfigChannel+0x258>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d111      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_ADC_ConfigChannel+0x25c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a11      	ldr	r2, [pc, #68]	; (800210c <HAL_ADC_ConfigChannel+0x260>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	0c9a      	lsrs	r2, r3, #18
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020d8:	e002      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	3b01      	subs	r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f9      	bne.n	80020da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40012300 	.word	0x40012300
 8002100:	40012000 	.word	0x40012000
 8002104:	10000012 	.word	0x10000012
 8002108:	20000004 	.word	0x20000004
 800210c:	431bde83 	.word	0x431bde83

08002110 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002118:	4b79      	ldr	r3, [pc, #484]	; (8002300 <ADC_Init+0x1f0>)
 800211a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	431a      	orrs	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002144:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	021a      	lsls	r2, r3, #8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002168:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6859      	ldr	r1, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800218a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6899      	ldr	r1, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	4a58      	ldr	r2, [pc, #352]	; (8002304 <ADC_Init+0x1f4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d022      	beq.n	80021ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6899      	ldr	r1, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6899      	ldr	r1, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	e00f      	b.n	800220e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800220c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0202 	bic.w	r2, r2, #2
 800221c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6899      	ldr	r1, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	7e1b      	ldrb	r3, [r3, #24]
 8002228:	005a      	lsls	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01b      	beq.n	8002274 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800224a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800225a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	3b01      	subs	r3, #1
 8002268:	035a      	lsls	r2, r3, #13
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	e007      	b.n	8002284 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002282:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	3b01      	subs	r3, #1
 80022a0:	051a      	lsls	r2, r3, #20
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6899      	ldr	r1, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022c6:	025a      	lsls	r2, r3, #9
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6899      	ldr	r1, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	029a      	lsls	r2, r3, #10
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	609a      	str	r2, [r3, #8]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40012300 	.word	0x40012300
 8002304:	0f000001 	.word	0x0f000001

08002308 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002314:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800231e:	2b00      	cmp	r3, #0
 8002320:	d13c      	bne.n	800239c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d12b      	bne.n	8002394 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002340:	2b00      	cmp	r3, #0
 8002342:	d127      	bne.n	8002394 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800235c:	2b00      	cmp	r3, #0
 800235e:	d119      	bne.n	8002394 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0220 	bic.w	r2, r2, #32
 800236e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d105      	bne.n	8002394 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f7ff fd61 	bl	8001e5c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800239a:	e00e      	b.n	80023ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff fd75 	bl	8001e98 <HAL_ADC_ErrorCallback>
}
 80023ae:	e004      	b.n	80023ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4798      	blx	r3
}
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f7ff fd4d 	bl	8001e70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2240      	movs	r2, #64	; 0x40
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f043 0204 	orr.w	r2, r3, #4
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f7ff fd4a 	bl	8001e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800243c:	4013      	ands	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800244c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002452:	4a04      	ldr	r2, [pc, #16]	; (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	60d3      	str	r3, [r2, #12]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <__NVIC_GetPriorityGrouping+0x18>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	f003 0307 	and.w	r3, r3, #7
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db0b      	blt.n	80024ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	4907      	ldr	r1, [pc, #28]	; (80024bc <__NVIC_EnableIRQ+0x38>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2001      	movs	r0, #1
 80024a6:	fa00 f202 	lsl.w	r2, r0, r2
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	6039      	str	r1, [r7, #0]
 80024ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db0a      	blt.n	80024ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	490c      	ldr	r1, [pc, #48]	; (800250c <__NVIC_SetPriority+0x4c>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	440b      	add	r3, r1
 80024e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e8:	e00a      	b.n	8002500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	; (8002510 <__NVIC_SetPriority+0x50>)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3b04      	subs	r3, #4
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	440b      	add	r3, r1
 80024fe:	761a      	strb	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f1c3 0307 	rsb	r3, r3, #7
 800252e:	2b04      	cmp	r3, #4
 8002530:	bf28      	it	cs
 8002532:	2304      	movcs	r3, #4
 8002534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3304      	adds	r3, #4
 800253a:	2b06      	cmp	r3, #6
 800253c:	d902      	bls.n	8002544 <NVIC_EncodePriority+0x30>
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3b03      	subs	r3, #3
 8002542:	e000      	b.n	8002546 <NVIC_EncodePriority+0x32>
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	401a      	ands	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43d9      	mvns	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	4313      	orrs	r3, r2
         );
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	; 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800258c:	d301      	bcc.n	8002592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258e:	2301      	movs	r3, #1
 8002590:	e00f      	b.n	80025b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002592:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <SysTick_Config+0x40>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259a:	210f      	movs	r1, #15
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	f7ff ff8e 	bl	80024c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <SysTick_Config+0x40>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <SysTick_Config+0x40>)
 80025ac:	2207      	movs	r2, #7
 80025ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	e000e010 	.word	0xe000e010

080025c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff29 	bl	8002420 <__NVIC_SetPriorityGrouping>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e8:	f7ff ff3e 	bl	8002468 <__NVIC_GetPriorityGrouping>
 80025ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	6978      	ldr	r0, [r7, #20]
 80025f4:	f7ff ff8e 	bl	8002514 <NVIC_EncodePriority>
 80025f8:	4602      	mov	r2, r0
 80025fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff5d 	bl	80024c0 <__NVIC_SetPriority>
}
 8002606:	bf00      	nop
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff31 	bl	8002484 <__NVIC_EnableIRQ>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ffa2 	bl	800257c <SysTick_Config>
 8002638:	4603      	mov	r3, r0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002650:	f7ff f984 	bl	800195c <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e099      	b.n	8002794 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002680:	e00f      	b.n	80026a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002682:	f7ff f96b 	bl	800195c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b05      	cmp	r3, #5
 800268e:	d908      	bls.n	80026a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2203      	movs	r2, #3
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e078      	b.n	8002794 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1e8      	bne.n	8002682 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4b38      	ldr	r3, [pc, #224]	; (800279c <HAL_DMA_Init+0x158>)
 80026bc:	4013      	ands	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d107      	bne.n	800270c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4313      	orrs	r3, r2
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f023 0307 	bic.w	r3, r3, #7
 8002722:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	2b04      	cmp	r3, #4
 8002734:	d117      	bne.n	8002766 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00e      	beq.n	8002766 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fa91 	bl	8002c70 <DMA_CheckFifoParam>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2240      	movs	r2, #64	; 0x40
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002762:	2301      	movs	r3, #1
 8002764:	e016      	b.n	8002794 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fa48 	bl	8002c04 <DMA_CalcBaseAndBitshift>
 8002774:	4603      	mov	r3, r0
 8002776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277c:	223f      	movs	r2, #63	; 0x3f
 800277e:	409a      	lsls	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	f010803f 	.word	0xf010803f

080027a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_DMA_Start_IT+0x26>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e040      	b.n	8002848 <HAL_DMA_Start_IT+0xa8>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d12f      	bne.n	800283a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2202      	movs	r2, #2
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f9da 	bl	8002ba8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	223f      	movs	r2, #63	; 0x3f
 80027fa:	409a      	lsls	r2, r3
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0216 	orr.w	r2, r2, #22
 800280e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0208 	orr.w	r2, r2, #8
 8002826:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e005      	b.n	8002846 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002842:	2302      	movs	r3, #2
 8002844:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002846:	7dfb      	ldrb	r3, [r7, #23]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d004      	beq.n	800286e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2280      	movs	r2, #128	; 0x80
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00c      	b.n	8002888 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2205      	movs	r2, #5
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028a0:	4b8e      	ldr	r3, [pc, #568]	; (8002adc <HAL_DMA_IRQHandler+0x248>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a8e      	ldr	r2, [pc, #568]	; (8002ae0 <HAL_DMA_IRQHandler+0x24c>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0a9b      	lsrs	r3, r3, #10
 80028ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	2208      	movs	r2, #8
 80028c0:	409a      	lsls	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01a      	beq.n	8002900 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d013      	beq.n	8002900 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0204 	bic.w	r2, r2, #4
 80028e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	2208      	movs	r2, #8
 80028ee:	409a      	lsls	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f8:	f043 0201 	orr.w	r2, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	2201      	movs	r2, #1
 8002906:	409a      	lsls	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d012      	beq.n	8002936 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002922:	2201      	movs	r2, #1
 8002924:	409a      	lsls	r2, r3
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292e:	f043 0202 	orr.w	r2, r3, #2
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	2204      	movs	r2, #4
 800293c:	409a      	lsls	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d012      	beq.n	800296c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00b      	beq.n	800296c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	2204      	movs	r2, #4
 800295a:	409a      	lsls	r2, r3
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	f043 0204 	orr.w	r2, r3, #4
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	2210      	movs	r2, #16
 8002972:	409a      	lsls	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d043      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d03c      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	2210      	movs	r2, #16
 8002990:	409a      	lsls	r2, r3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d018      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d108      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d024      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
 80029c2:	e01f      	b.n	8002a04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01b      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
 80029d4:	e016      	b.n	8002a04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d107      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0208 	bic.w	r2, r2, #8
 80029f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a08:	2220      	movs	r2, #32
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 808f 	beq.w	8002b34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8087 	beq.w	8002b34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d136      	bne.n	8002aac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0216 	bic.w	r2, r2, #22
 8002a4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d103      	bne.n	8002a6e <HAL_DMA_IRQHandler+0x1da>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d007      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0208 	bic.w	r2, r2, #8
 8002a7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	223f      	movs	r2, #63	; 0x3f
 8002a84:	409a      	lsls	r2, r3
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d07e      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
        }
        return;
 8002aaa:	e079      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01d      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10d      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d031      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
 8002ad8:	e02c      	b.n	8002b34 <HAL_DMA_IRQHandler+0x2a0>
 8002ada:	bf00      	nop
 8002adc:	20000004 	.word	0x20000004
 8002ae0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d023      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
 8002af4:	e01e      	b.n	8002b34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10f      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0210 	bic.w	r2, r2, #16
 8002b12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d032      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d022      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2205      	movs	r2, #5
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	3301      	adds	r3, #1
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d307      	bcc.n	8002b7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f2      	bne.n	8002b60 <HAL_DMA_IRQHandler+0x2cc>
 8002b7a:	e000      	b.n	8002b7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	4798      	blx	r3
 8002b9e:	e000      	b.n	8002ba2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ba0:	bf00      	nop
    }
  }
}
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	d108      	bne.n	8002be8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002be6:	e007      	b.n	8002bf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	60da      	str	r2, [r3, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	3b10      	subs	r3, #16
 8002c14:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <DMA_CalcBaseAndBitshift+0x64>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c1e:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <DMA_CalcBaseAndBitshift+0x68>)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d909      	bls.n	8002c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	1d1a      	adds	r2, r3, #4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	659a      	str	r2, [r3, #88]	; 0x58
 8002c44:	e007      	b.n	8002c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	aaaaaaab 	.word	0xaaaaaaab
 8002c6c:	080060e0 	.word	0x080060e0

08002c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d11f      	bne.n	8002cca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d856      	bhi.n	8002d3e <DMA_CheckFifoParam+0xce>
 8002c90:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <DMA_CheckFifoParam+0x28>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002cbb 	.word	0x08002cbb
 8002ca0:	08002ca9 	.word	0x08002ca9
 8002ca4:	08002d3f 	.word	0x08002d3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d046      	beq.n	8002d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb8:	e043      	b.n	8002d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cc2:	d140      	bne.n	8002d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc8:	e03d      	b.n	8002d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd2:	d121      	bne.n	8002d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d837      	bhi.n	8002d4a <DMA_CheckFifoParam+0xda>
 8002cda:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <DMA_CheckFifoParam+0x70>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002cf1 	.word	0x08002cf1
 8002ce4:	08002cf7 	.word	0x08002cf7
 8002ce8:	08002cf1 	.word	0x08002cf1
 8002cec:	08002d09 	.word	0x08002d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf4:	e030      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d025      	beq.n	8002d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d06:	e022      	b.n	8002d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d10:	d11f      	bne.n	8002d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d16:	e01c      	b.n	8002d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d903      	bls.n	8002d26 <DMA_CheckFifoParam+0xb6>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d003      	beq.n	8002d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d24:	e018      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2a:	e015      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00e      	beq.n	8002d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3c:	e00b      	b.n	8002d56 <DMA_CheckFifoParam+0xe6>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e00a      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d42:	bf00      	nop
 8002d44:	e008      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d46:	bf00      	nop
 8002d48:	e006      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e004      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e002      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d52:	bf00      	nop
 8002d54:	e000      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d56:	bf00      	nop
    }
  } 
  
  return status; 
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	; 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	e159      	b.n	8003038 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	f040 8148 	bne.w	8003032 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d005      	beq.n	8002dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d130      	bne.n	8002e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 0201 	and.w	r2, r3, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d017      	beq.n	8002e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d123      	bne.n	8002eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	08da      	lsrs	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3208      	adds	r2, #8
 8002e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0203 	and.w	r2, r3, #3
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80a2 	beq.w	8003032 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b57      	ldr	r3, [pc, #348]	; (8003050 <HAL_GPIO_Init+0x2e8>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	4a56      	ldr	r2, [pc, #344]	; (8003050 <HAL_GPIO_Init+0x2e8>)
 8002ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002efc:	6453      	str	r3, [r2, #68]	; 0x44
 8002efe:	4b54      	ldr	r3, [pc, #336]	; (8003050 <HAL_GPIO_Init+0x2e8>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f0a:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_GPIO_Init+0x2ec>)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	3302      	adds	r3, #2
 8002f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	220f      	movs	r2, #15
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a49      	ldr	r2, [pc, #292]	; (8003058 <HAL_GPIO_Init+0x2f0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d019      	beq.n	8002f6a <HAL_GPIO_Init+0x202>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a48      	ldr	r2, [pc, #288]	; (800305c <HAL_GPIO_Init+0x2f4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <HAL_GPIO_Init+0x1fe>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a47      	ldr	r2, [pc, #284]	; (8003060 <HAL_GPIO_Init+0x2f8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00d      	beq.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a46      	ldr	r2, [pc, #280]	; (8003064 <HAL_GPIO_Init+0x2fc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <HAL_GPIO_Init+0x1f6>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a45      	ldr	r2, [pc, #276]	; (8003068 <HAL_GPIO_Init+0x300>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <HAL_GPIO_Init+0x1f2>
 8002f56:	2304      	movs	r3, #4
 8002f58:	e008      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	e006      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e004      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	f002 0203 	and.w	r2, r2, #3
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4093      	lsls	r3, r2
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f7c:	4935      	ldr	r1, [pc, #212]	; (8003054 <HAL_GPIO_Init+0x2ec>)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f8a:	4b38      	ldr	r3, [pc, #224]	; (800306c <HAL_GPIO_Init+0x304>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fae:	4a2f      	ldr	r2, [pc, #188]	; (800306c <HAL_GPIO_Init+0x304>)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_GPIO_Init+0x304>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fd8:	4a24      	ldr	r2, [pc, #144]	; (800306c <HAL_GPIO_Init+0x304>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fde:	4b23      	ldr	r3, [pc, #140]	; (800306c <HAL_GPIO_Init+0x304>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003002:	4a1a      	ldr	r2, [pc, #104]	; (800306c <HAL_GPIO_Init+0x304>)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003008:	4b18      	ldr	r3, [pc, #96]	; (800306c <HAL_GPIO_Init+0x304>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800302c:	4a0f      	ldr	r2, [pc, #60]	; (800306c <HAL_GPIO_Init+0x304>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3301      	adds	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	f67f aea2 	bls.w	8002d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3724      	adds	r7, #36	; 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	40013800 	.word	0x40013800
 8003058:	40020000 	.word	0x40020000
 800305c:	40020400 	.word	0x40020400
 8003060:	40020800 	.word	0x40020800
 8003064:	40020c00 	.word	0x40020c00
 8003068:	40021000 	.word	0x40021000
 800306c:	40013c00 	.word	0x40013c00

08003070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	887b      	ldrh	r3, [r7, #2]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	e001      	b.n	8003092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b0:	787b      	ldrb	r3, [r7, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030bc:	e003      	b.n	80030c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	041a      	lsls	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	619a      	str	r2, [r3, #24]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030e4:	887a      	ldrh	r2, [r7, #2]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4013      	ands	r3, r2
 80030ea:	041a      	lsls	r2, r3, #16
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	887b      	ldrh	r3, [r7, #2]
 80030f2:	400b      	ands	r3, r1
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	619a      	str	r2, [r3, #24]
}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800311e:	4a05      	ldr	r2, [pc, #20]	; (8003134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe f916 	bl	8001358 <HAL_GPIO_EXTI_Callback>
  }
}
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40013c00 	.word	0x40013c00

08003138 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e267      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d075      	beq.n	8003242 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003156:	4b88      	ldr	r3, [pc, #544]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b04      	cmp	r3, #4
 8003160:	d00c      	beq.n	800317c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003162:	4b85      	ldr	r3, [pc, #532]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800316a:	2b08      	cmp	r3, #8
 800316c:	d112      	bne.n	8003194 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316e:	4b82      	ldr	r3, [pc, #520]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800317a:	d10b      	bne.n	8003194 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317c:	4b7e      	ldr	r3, [pc, #504]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d05b      	beq.n	8003240 <HAL_RCC_OscConfig+0x108>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d157      	bne.n	8003240 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e242      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d106      	bne.n	80031ac <HAL_RCC_OscConfig+0x74>
 800319e:	4b76      	ldr	r3, [pc, #472]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a75      	ldr	r2, [pc, #468]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e01d      	b.n	80031e8 <HAL_RCC_OscConfig+0xb0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x98>
 80031b6:	4b70      	ldr	r3, [pc, #448]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6f      	ldr	r2, [pc, #444]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4b6d      	ldr	r3, [pc, #436]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6c      	ldr	r2, [pc, #432]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e00b      	b.n	80031e8 <HAL_RCC_OscConfig+0xb0>
 80031d0:	4b69      	ldr	r3, [pc, #420]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a68      	ldr	r2, [pc, #416]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b66      	ldr	r3, [pc, #408]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a65      	ldr	r2, [pc, #404]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7fe fbb4 	bl	800195c <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f8:	f7fe fbb0 	bl	800195c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e207      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	4b5b      	ldr	r3, [pc, #364]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0xc0>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fe fba0 	bl	800195c <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003220:	f7fe fb9c 	bl	800195c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e1f3      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003232:	4b51      	ldr	r3, [pc, #324]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0xe8>
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d063      	beq.n	8003316 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800324e:	4b4a      	ldr	r3, [pc, #296]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325a:	4b47      	ldr	r3, [pc, #284]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003262:	2b08      	cmp	r3, #8
 8003264:	d11c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b44      	ldr	r3, [pc, #272]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d116      	bne.n	80032a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	4b41      	ldr	r3, [pc, #260]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_RCC_OscConfig+0x152>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e1c7      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328a:	4b3b      	ldr	r3, [pc, #236]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4937      	ldr	r1, [pc, #220]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329e:	e03a      	b.n	8003316 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a8:	4b34      	ldr	r3, [pc, #208]	; (800337c <HAL_RCC_OscConfig+0x244>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7fe fb55 	bl	800195c <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b6:	f7fe fb51 	bl	800195c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e1a8      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c8:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d4:	4b28      	ldr	r3, [pc, #160]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4925      	ldr	r1, [pc, #148]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
 80032e8:	e015      	b.n	8003316 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_RCC_OscConfig+0x244>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe fb34 	bl	800195c <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f8:	f7fe fb30 	bl	800195c <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e187      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d036      	beq.n	8003390 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d016      	beq.n	8003358 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_RCC_OscConfig+0x248>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fe fb14 	bl	800195c <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003338:	f7fe fb10 	bl	800195c <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e167      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800334c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x200>
 8003356:	e01b      	b.n	8003390 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_RCC_OscConfig+0x248>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335e:	f7fe fafd 	bl	800195c <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003364:	e00e      	b.n	8003384 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003366:	f7fe faf9 	bl	800195c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d907      	bls.n	8003384 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e150      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
 8003378:	40023800 	.word	0x40023800
 800337c:	42470000 	.word	0x42470000
 8003380:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	4b88      	ldr	r3, [pc, #544]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1ea      	bne.n	8003366 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8097 	beq.w	80034cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b81      	ldr	r3, [pc, #516]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10f      	bne.n	80033ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	4b7d      	ldr	r3, [pc, #500]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	4a7c      	ldr	r2, [pc, #496]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033bc:	6413      	str	r3, [r2, #64]	; 0x40
 80033be:	4b7a      	ldr	r3, [pc, #488]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b77      	ldr	r3, [pc, #476]	; (80035ac <HAL_RCC_OscConfig+0x474>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033da:	4b74      	ldr	r3, [pc, #464]	; (80035ac <HAL_RCC_OscConfig+0x474>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a73      	ldr	r2, [pc, #460]	; (80035ac <HAL_RCC_OscConfig+0x474>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7fe fab9 	bl	800195c <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fe fab5 	bl	800195c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e10c      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_OscConfig+0x474>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x2ea>
 8003414:	4b64      	ldr	r3, [pc, #400]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	4a63      	ldr	r2, [pc, #396]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6713      	str	r3, [r2, #112]	; 0x70
 8003420:	e01c      	b.n	800345c <HAL_RCC_OscConfig+0x324>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b05      	cmp	r3, #5
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x30c>
 800342a:	4b5f      	ldr	r3, [pc, #380]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	4a5e      	ldr	r2, [pc, #376]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003430:	f043 0304 	orr.w	r3, r3, #4
 8003434:	6713      	str	r3, [r2, #112]	; 0x70
 8003436:	4b5c      	ldr	r3, [pc, #368]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a5b      	ldr	r2, [pc, #364]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0x324>
 8003444:	4b58      	ldr	r3, [pc, #352]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	4a57      	ldr	r2, [pc, #348]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	6713      	str	r3, [r2, #112]	; 0x70
 8003450:	4b55      	ldr	r3, [pc, #340]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	4a54      	ldr	r2, [pc, #336]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003456:	f023 0304 	bic.w	r3, r3, #4
 800345a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d015      	beq.n	8003490 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fe fa7a 	bl	800195c <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346a:	e00a      	b.n	8003482 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fe fa76 	bl	800195c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e0cb      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003482:	4b49      	ldr	r3, [pc, #292]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0ee      	beq.n	800346c <HAL_RCC_OscConfig+0x334>
 800348e:	e014      	b.n	80034ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003490:	f7fe fa64 	bl	800195c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003496:	e00a      	b.n	80034ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7fe fa60 	bl	800195c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0b5      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ae:	4b3e      	ldr	r3, [pc, #248]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1ee      	bne.n	8003498 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d105      	bne.n	80034cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c0:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	4a38      	ldr	r2, [pc, #224]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80a1 	beq.w	8003618 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d6:	4b34      	ldr	r3, [pc, #208]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d05c      	beq.n	800359c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d141      	bne.n	800356e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <HAL_RCC_OscConfig+0x478>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fe fa34 	bl	800195c <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe fa30 	bl	800195c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e087      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	019b      	lsls	r3, r3, #6
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	3b01      	subs	r3, #1
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	061b      	lsls	r3, r3, #24
 800353a:	491b      	ldr	r1, [pc, #108]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_RCC_OscConfig+0x478>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7fe fa09 	bl	800195c <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354e:	f7fe fa05 	bl	800195c <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e05c      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003560:	4b11      	ldr	r3, [pc, #68]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x416>
 800356c:	e054      	b.n	8003618 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <HAL_RCC_OscConfig+0x478>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fe f9f2 	bl	800195c <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357c:	f7fe f9ee 	bl	800195c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e045      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x444>
 800359a:	e03d      	b.n	8003618 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e038      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40007000 	.word	0x40007000
 80035b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x4ec>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d028      	beq.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d121      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d11a      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035e4:	4013      	ands	r3, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d111      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	085b      	lsrs	r3, r3, #1
 80035fc:	3b01      	subs	r3, #1
 80035fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d107      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800

08003628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0cc      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800363c:	4b68      	ldr	r3, [pc, #416]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d90c      	bls.n	8003664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b65      	ldr	r3, [pc, #404]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b63      	ldr	r3, [pc, #396]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0b8      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800367c:	4b59      	ldr	r3, [pc, #356]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a58      	ldr	r2, [pc, #352]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003694:	4b53      	ldr	r3, [pc, #332]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a52      	ldr	r2, [pc, #328]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800369e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a0:	4b50      	ldr	r3, [pc, #320]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	494d      	ldr	r1, [pc, #308]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d044      	beq.n	8003748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	4b47      	ldr	r3, [pc, #284]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d119      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e07f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	4b3f      	ldr	r3, [pc, #252]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e06f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f6:	4b3b      	ldr	r3, [pc, #236]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e067      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003706:	4b37      	ldr	r3, [pc, #220]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f023 0203 	bic.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4934      	ldr	r1, [pc, #208]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003718:	f7fe f920 	bl	800195c <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	e00a      	b.n	8003736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003720:	f7fe f91c 	bl	800195c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e04f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 020c 	and.w	r2, r3, #12
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	429a      	cmp	r2, r3
 8003746:	d1eb      	bne.n	8003720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003748:	4b25      	ldr	r3, [pc, #148]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d20c      	bcs.n	8003770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e032      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800377c:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4916      	ldr	r1, [pc, #88]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	490e      	ldr	r1, [pc, #56]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ae:	f000 f821 	bl	80037f4 <HAL_RCC_GetSysClockFreq>
 80037b2:	4602      	mov	r2, r0
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	490a      	ldr	r1, [pc, #40]	; (80037e8 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	5ccb      	ldrb	r3, [r1, r3]
 80037c2:	fa22 f303 	lsr.w	r3, r2, r3
 80037c6:	4a09      	ldr	r2, [pc, #36]	; (80037ec <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe f880 	bl	80018d4 <HAL_InitTick>

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023c00 	.word	0x40023c00
 80037e4:	40023800 	.word	0x40023800
 80037e8:	080060c8 	.word	0x080060c8
 80037ec:	20000004 	.word	0x20000004
 80037f0:	20000008 	.word	0x20000008

080037f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f8:	b094      	sub	sp, #80	; 0x50
 80037fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003800:	2300      	movs	r3, #0
 8003802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003804:	2300      	movs	r3, #0
 8003806:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800380c:	4b79      	ldr	r3, [pc, #484]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b08      	cmp	r3, #8
 8003816:	d00d      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x40>
 8003818:	2b08      	cmp	r3, #8
 800381a:	f200 80e1 	bhi.w	80039e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0x34>
 8003822:	2b04      	cmp	r3, #4
 8003824:	d003      	beq.n	800382e <HAL_RCC_GetSysClockFreq+0x3a>
 8003826:	e0db      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003828:	4b73      	ldr	r3, [pc, #460]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800382a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800382c:	e0db      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800382e:	4b73      	ldr	r3, [pc, #460]	; (80039fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003830:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003832:	e0d8      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003834:	4b6f      	ldr	r3, [pc, #444]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800383c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800383e:	4b6d      	ldr	r3, [pc, #436]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d063      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384a:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	099b      	lsrs	r3, r3, #6
 8003850:	2200      	movs	r2, #0
 8003852:	63bb      	str	r3, [r7, #56]	; 0x38
 8003854:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385c:	633b      	str	r3, [r7, #48]	; 0x30
 800385e:	2300      	movs	r3, #0
 8003860:	637b      	str	r3, [r7, #52]	; 0x34
 8003862:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003866:	4622      	mov	r2, r4
 8003868:	462b      	mov	r3, r5
 800386a:	f04f 0000 	mov.w	r0, #0
 800386e:	f04f 0100 	mov.w	r1, #0
 8003872:	0159      	lsls	r1, r3, #5
 8003874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003878:	0150      	lsls	r0, r2, #5
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4621      	mov	r1, r4
 8003880:	1a51      	subs	r1, r2, r1
 8003882:	6139      	str	r1, [r7, #16]
 8003884:	4629      	mov	r1, r5
 8003886:	eb63 0301 	sbc.w	r3, r3, r1
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003898:	4659      	mov	r1, fp
 800389a:	018b      	lsls	r3, r1, #6
 800389c:	4651      	mov	r1, sl
 800389e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038a2:	4651      	mov	r1, sl
 80038a4:	018a      	lsls	r2, r1, #6
 80038a6:	4651      	mov	r1, sl
 80038a8:	ebb2 0801 	subs.w	r8, r2, r1
 80038ac:	4659      	mov	r1, fp
 80038ae:	eb63 0901 	sbc.w	r9, r3, r1
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038c6:	4690      	mov	r8, r2
 80038c8:	4699      	mov	r9, r3
 80038ca:	4623      	mov	r3, r4
 80038cc:	eb18 0303 	adds.w	r3, r8, r3
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	462b      	mov	r3, r5
 80038d4:	eb49 0303 	adc.w	r3, r9, r3
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038e6:	4629      	mov	r1, r5
 80038e8:	024b      	lsls	r3, r1, #9
 80038ea:	4621      	mov	r1, r4
 80038ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038f0:	4621      	mov	r1, r4
 80038f2:	024a      	lsls	r2, r1, #9
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038fa:	2200      	movs	r2, #0
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003900:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003904:	f7fc fffe 	bl	8000904 <__aeabi_uldivmod>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4613      	mov	r3, r2
 800390e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003910:	e058      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003912:	4b38      	ldr	r3, [pc, #224]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	099b      	lsrs	r3, r3, #6
 8003918:	2200      	movs	r2, #0
 800391a:	4618      	mov	r0, r3
 800391c:	4611      	mov	r1, r2
 800391e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003922:	623b      	str	r3, [r7, #32]
 8003924:	2300      	movs	r3, #0
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
 8003928:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800392c:	4642      	mov	r2, r8
 800392e:	464b      	mov	r3, r9
 8003930:	f04f 0000 	mov.w	r0, #0
 8003934:	f04f 0100 	mov.w	r1, #0
 8003938:	0159      	lsls	r1, r3, #5
 800393a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800393e:	0150      	lsls	r0, r2, #5
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4641      	mov	r1, r8
 8003946:	ebb2 0a01 	subs.w	sl, r2, r1
 800394a:	4649      	mov	r1, r9
 800394c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800395c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003960:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003964:	ebb2 040a 	subs.w	r4, r2, sl
 8003968:	eb63 050b 	sbc.w	r5, r3, fp
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	00eb      	lsls	r3, r5, #3
 8003976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800397a:	00e2      	lsls	r2, r4, #3
 800397c:	4614      	mov	r4, r2
 800397e:	461d      	mov	r5, r3
 8003980:	4643      	mov	r3, r8
 8003982:	18e3      	adds	r3, r4, r3
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	464b      	mov	r3, r9
 8003988:	eb45 0303 	adc.w	r3, r5, r3
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800399a:	4629      	mov	r1, r5
 800399c:	028b      	lsls	r3, r1, #10
 800399e:	4621      	mov	r1, r4
 80039a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a4:	4621      	mov	r1, r4
 80039a6:	028a      	lsls	r2, r1, #10
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ae:	2200      	movs	r2, #0
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	61fa      	str	r2, [r7, #28]
 80039b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b8:	f7fc ffa4 	bl	8000904 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4613      	mov	r3, r2
 80039c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	3301      	adds	r3, #1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039de:	e002      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80039e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3750      	adds	r7, #80	; 0x50
 80039ec:	46bd      	mov	sp, r7
 80039ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
 80039f8:	00f42400 	.word	0x00f42400
 80039fc:	007a1200 	.word	0x007a1200

08003a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000004 	.word	0x20000004

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a1c:	f7ff fff0 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	0a9b      	lsrs	r3, r3, #10
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4903      	ldr	r1, [pc, #12]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	080060d8 	.word	0x080060d8

08003a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a44:	f7ff ffdc 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	0b5b      	lsrs	r3, r3, #13
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4903      	ldr	r1, [pc, #12]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a56:	5ccb      	ldrb	r3, [r1, r3]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40023800 	.word	0x40023800
 8003a64:	080060d8 	.word	0x080060d8

08003a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e07b      	b.n	8003b72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d108      	bne.n	8003a94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a8a:	d009      	beq.n	8003aa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	61da      	str	r2, [r3, #28]
 8003a92:	e005      	b.n	8003aa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fd fd6a 	bl	8001594 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b24:	ea42 0103 	orr.w	r1, r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	f003 0104 	and.w	r1, r3, #4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	f003 0210 	and.w	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_SPI_Transmit_IT+0x20>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e06f      	b.n	8003c7c <HAL_SPI_Transmit_IT+0x100>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_SPI_Transmit_IT+0x34>
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bb4:	e05d      	b.n	8003c72 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d002      	beq.n	8003bc8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bc6:	e054      	b.n	8003c72 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2203      	movs	r2, #3
 8003bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	88fa      	ldrh	r2, [r7, #6]
 8003be0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	88fa      	ldrh	r2, [r7, #6]
 8003be6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <HAL_SPI_Transmit_IT+0x10c>)
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c0e:	e002      	b.n	8003c16 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <HAL_SPI_Transmit_IT+0x110>)
 8003c14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c1e:	d10f      	bne.n	8003c40 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003c4e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d008      	beq.n	8003c70 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e000      	b.n	8003c72 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8003c70:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	08003f13 	.word	0x08003f13
 8003c8c:	08003ecd 	.word	0x08003ecd

08003c90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	099b      	lsrs	r3, r3, #6
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10f      	bne.n	8003cd4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	099b      	lsrs	r3, r3, #6
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	4798      	blx	r3
    return;
 8003cd2:	e0d7      	b.n	8003e84 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_SPI_IRQHandler+0x66>
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	09db      	lsrs	r3, r3, #7
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
    return;
 8003cf4:	e0c6      	b.n	8003e84 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10c      	bne.n	8003d1c <HAL_SPI_IRQHandler+0x8c>
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	0a1b      	lsrs	r3, r3, #8
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80b4 	beq.w	8003e84 <HAL_SPI_IRQHandler+0x1f4>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80ad 	beq.w	8003e84 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d023      	beq.n	8003d7e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d011      	beq.n	8003d66 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	f043 0204 	orr.w	r2, r3, #4
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	e00b      	b.n	8003d7e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	693b      	ldr	r3, [r7, #16]
        return;
 8003d7c:	e082      	b.n	8003e84 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d014      	beq.n	8003db4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	f043 0201 	orr.w	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00c      	beq.n	8003dda <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	f043 0208 	orr.w	r2, r3, #8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d04f      	beq.n	8003e82 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003df0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d104      	bne.n	8003e0e <HAL_SPI_IRQHandler+0x17e>
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d034      	beq.n	8003e78 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0203 	bic.w	r2, r2, #3
 8003e1c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d011      	beq.n	8003e4a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	4a18      	ldr	r2, [pc, #96]	; (8003e8c <HAL_SPI_IRQHandler+0x1fc>)
 8003e2c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe fd0c 	bl	8002850 <HAL_DMA_Abort_IT>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d016      	beq.n	8003e80 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e56:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <HAL_SPI_IRQHandler+0x1fc>)
 8003e58:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe fcf6 	bl	8002850 <HAL_DMA_Abort_IT>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003e76:	e003      	b.n	8003e80 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f809 	bl	8003e90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e7e:	e000      	b.n	8003e82 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003e80:	bf00      	nop
    return;
 8003e82:	bf00      	nop
  }
}
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	08003ea5 	.word	0x08003ea5

08003e90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f7ff ffe6 	bl	8003e90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	7812      	ldrb	r2, [r2, #0]
 8003ee0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d102      	bne.n	8003f0a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f8f1 	bl	80040ec <SPI_CloseTx_ISR>
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	881a      	ldrh	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	1c9a      	adds	r2, r3, #2
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f8cf 	bl	80040ec <SPI_CloseTx_ISR>
  }
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	4613      	mov	r3, r2
 8003f66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f68:	f7fd fcf8 	bl	800195c <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4413      	add	r3, r2
 8003f76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f78:	f7fd fcf0 	bl	800195c <HAL_GetTick>
 8003f7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f7e:	4b39      	ldr	r3, [pc, #228]	; (8004064 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	015b      	lsls	r3, r3, #5
 8003f84:	0d1b      	lsrs	r3, r3, #20
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	fb02 f303 	mul.w	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f8e:	e054      	b.n	800403a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d050      	beq.n	800403a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f98:	f7fd fce0 	bl	800195c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d902      	bls.n	8003fae <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d13d      	bne.n	800402a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fc6:	d111      	bne.n	8003fec <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd0:	d004      	beq.n	8003fdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fda:	d107      	bne.n	8003fec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff4:	d10f      	bne.n	8004016 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004014:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e017      	b.n	800405a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3b01      	subs	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	429a      	cmp	r2, r3
 8004048:	bf0c      	ite	eq
 800404a:	2301      	moveq	r3, #1
 800404c:	2300      	movne	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	429a      	cmp	r2, r3
 8004056:	d19b      	bne.n	8003f90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000004 	.word	0x20000004

08004068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004074:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <SPI_EndRxTxTransaction+0x7c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1b      	ldr	r2, [pc, #108]	; (80040e8 <SPI_EndRxTxTransaction+0x80>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	0d5b      	lsrs	r3, r3, #21
 8004080:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004092:	d112      	bne.n	80040ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2200      	movs	r2, #0
 800409c:	2180      	movs	r1, #128	; 0x80
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7ff ff5a 	bl	8003f58 <SPI_WaitFlagStateUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d016      	beq.n	80040d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	f043 0220 	orr.w	r2, r3, #32
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e00f      	b.n	80040da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d0:	2b80      	cmp	r3, #128	; 0x80
 80040d2:	d0f2      	beq.n	80040ba <SPI_EndRxTxTransaction+0x52>
 80040d4:	e000      	b.n	80040d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80040d6:	bf00      	nop
  }

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000004 	.word	0x20000004
 80040e8:	165e9f81 	.word	0x165e9f81

080040ec <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80040f4:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <SPI_CloseTx_ISR+0xbc>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a2c      	ldr	r2, [pc, #176]	; (80041ac <SPI_CloseTx_ISR+0xc0>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0a5b      	lsrs	r3, r3, #9
 8004100:	2264      	movs	r2, #100	; 0x64
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004108:	f7fd fc28 	bl	800195c <HAL_GetTick>
 800410c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004118:	f043 0220 	orr.w	r2, r3, #32
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004120:	e009      	b.n	8004136 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	3b01      	subs	r3, #1
 8004126:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0eb      	beq.n	800410e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004144:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	2164      	movs	r1, #100	; 0x64
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff ff8c 	bl	8004068 <SPI_EndRxTxTransaction>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff fe7d 	bl	8003e90 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004196:	e002      	b.n	800419e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7fd f901 	bl	80013a0 <HAL_SPI_TxCpltCallback>
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000004 	.word	0x20000004
 80041ac:	057619f1 	.word	0x057619f1

080041b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e041      	b.n	8004246 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fd fa2c 	bl	8001634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4619      	mov	r1, r3
 80041ee:	4610      	mov	r0, r2
 80041f0:	f000 fa88 	bl	8004704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	d001      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e044      	b.n	80042f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <HAL_TIM_Base_Start_IT+0xb0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d018      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x6c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004292:	d013      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x6c>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <HAL_TIM_Base_Start_IT+0xb4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00e      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x6c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a19      	ldr	r2, [pc, #100]	; (8004308 <HAL_TIM_Base_Start_IT+0xb8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d009      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x6c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a17      	ldr	r2, [pc, #92]	; (800430c <HAL_TIM_Base_Start_IT+0xbc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x6c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a16      	ldr	r2, [pc, #88]	; (8004310 <HAL_TIM_Base_Start_IT+0xc0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d111      	bne.n	80042e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b06      	cmp	r3, #6
 80042cc:	d010      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0201 	orr.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042de:	e007      	b.n	80042f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40010000 	.word	0x40010000
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	40000c00 	.word	0x40000c00
 8004310:	40014000 	.word	0x40014000

08004314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	d122      	bne.n	8004370 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b02      	cmp	r3, #2
 8004336:	d11b      	bne.n	8004370 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0202 	mvn.w	r2, #2
 8004340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f9b5 	bl	80046c6 <HAL_TIM_IC_CaptureCallback>
 800435c:	e005      	b.n	800436a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f9a7 	bl	80046b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f9b8 	bl	80046da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b04      	cmp	r3, #4
 800437c:	d122      	bne.n	80043c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b04      	cmp	r3, #4
 800438a:	d11b      	bne.n	80043c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0204 	mvn.w	r2, #4
 8004394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f98b 	bl	80046c6 <HAL_TIM_IC_CaptureCallback>
 80043b0:	e005      	b.n	80043be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f97d 	bl	80046b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f98e 	bl	80046da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d122      	bne.n	8004418 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d11b      	bne.n	8004418 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0208 	mvn.w	r2, #8
 80043e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2204      	movs	r2, #4
 80043ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f961 	bl	80046c6 <HAL_TIM_IC_CaptureCallback>
 8004404:	e005      	b.n	8004412 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f953 	bl	80046b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f964 	bl	80046da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b10      	cmp	r3, #16
 8004424:	d122      	bne.n	800446c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b10      	cmp	r3, #16
 8004432:	d11b      	bne.n	800446c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0210 	mvn.w	r2, #16
 800443c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2208      	movs	r2, #8
 8004442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f937 	bl	80046c6 <HAL_TIM_IC_CaptureCallback>
 8004458:	e005      	b.n	8004466 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f929 	bl	80046b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f93a 	bl	80046da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b01      	cmp	r3, #1
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b01      	cmp	r3, #1
 8004486:	d107      	bne.n	8004498 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0201 	mvn.w	r2, #1
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc ff9a 	bl	80013cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a2:	2b80      	cmp	r3, #128	; 0x80
 80044a4:	d10e      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b0:	2b80      	cmp	r3, #128	; 0x80
 80044b2:	d107      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fab2 	bl	8004a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	d10e      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d107      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f8ff 	bl	80046ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d10e      	bne.n	800451c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b20      	cmp	r3, #32
 800450a:	d107      	bne.n	800451c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0220 	mvn.w	r2, #32
 8004514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa7c 	bl	8004a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_TIM_ConfigClockSource+0x1c>
 800453c:	2302      	movs	r3, #2
 800453e:	e0b4      	b.n	80046aa <HAL_TIM_ConfigClockSource+0x186>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800455e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004566:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004578:	d03e      	beq.n	80045f8 <HAL_TIM_ConfigClockSource+0xd4>
 800457a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800457e:	f200 8087 	bhi.w	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 8004582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004586:	f000 8086 	beq.w	8004696 <HAL_TIM_ConfigClockSource+0x172>
 800458a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458e:	d87f      	bhi.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 8004590:	2b70      	cmp	r3, #112	; 0x70
 8004592:	d01a      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0xa6>
 8004594:	2b70      	cmp	r3, #112	; 0x70
 8004596:	d87b      	bhi.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b60      	cmp	r3, #96	; 0x60
 800459a:	d050      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x11a>
 800459c:	2b60      	cmp	r3, #96	; 0x60
 800459e:	d877      	bhi.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b50      	cmp	r3, #80	; 0x50
 80045a2:	d03c      	beq.n	800461e <HAL_TIM_ConfigClockSource+0xfa>
 80045a4:	2b50      	cmp	r3, #80	; 0x50
 80045a6:	d873      	bhi.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d058      	beq.n	800465e <HAL_TIM_ConfigClockSource+0x13a>
 80045ac:	2b40      	cmp	r3, #64	; 0x40
 80045ae:	d86f      	bhi.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b30      	cmp	r3, #48	; 0x30
 80045b2:	d064      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x15a>
 80045b4:	2b30      	cmp	r3, #48	; 0x30
 80045b6:	d86b      	bhi.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d060      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x15a>
 80045bc:	2b20      	cmp	r3, #32
 80045be:	d867      	bhi.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d05c      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x15a>
 80045c4:	2b10      	cmp	r3, #16
 80045c6:	d05a      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x15a>
 80045c8:	e062      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6899      	ldr	r1, [r3, #8]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f000 f98d 	bl	80048f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	609a      	str	r2, [r3, #8]
      break;
 80045f6:	e04f      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	6899      	ldr	r1, [r3, #8]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f000 f976 	bl	80048f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800461a:	609a      	str	r2, [r3, #8]
      break;
 800461c:	e03c      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6859      	ldr	r1, [r3, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	461a      	mov	r2, r3
 800462c:	f000 f8ea 	bl	8004804 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2150      	movs	r1, #80	; 0x50
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f943 	bl	80048c2 <TIM_ITRx_SetConfig>
      break;
 800463c:	e02c      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6859      	ldr	r1, [r3, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	461a      	mov	r2, r3
 800464c:	f000 f909 	bl	8004862 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2160      	movs	r1, #96	; 0x60
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f933 	bl	80048c2 <TIM_ITRx_SetConfig>
      break;
 800465c:	e01c      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6859      	ldr	r1, [r3, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	461a      	mov	r2, r3
 800466c:	f000 f8ca 	bl	8004804 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2140      	movs	r1, #64	; 0x40
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f923 	bl	80048c2 <TIM_ITRx_SetConfig>
      break;
 800467c:	e00c      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4619      	mov	r1, r3
 8004688:	4610      	mov	r0, r2
 800468a:	f000 f91a 	bl	80048c2 <TIM_ITRx_SetConfig>
      break;
 800468e:	e003      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
      break;
 8004694:	e000      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004696:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
	...

08004704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a34      	ldr	r2, [pc, #208]	; (80047e8 <TIM_Base_SetConfig+0xe4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00f      	beq.n	800473c <TIM_Base_SetConfig+0x38>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004722:	d00b      	beq.n	800473c <TIM_Base_SetConfig+0x38>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a31      	ldr	r2, [pc, #196]	; (80047ec <TIM_Base_SetConfig+0xe8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d007      	beq.n	800473c <TIM_Base_SetConfig+0x38>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a30      	ldr	r2, [pc, #192]	; (80047f0 <TIM_Base_SetConfig+0xec>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d003      	beq.n	800473c <TIM_Base_SetConfig+0x38>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a2f      	ldr	r2, [pc, #188]	; (80047f4 <TIM_Base_SetConfig+0xf0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d108      	bne.n	800474e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a25      	ldr	r2, [pc, #148]	; (80047e8 <TIM_Base_SetConfig+0xe4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01b      	beq.n	800478e <TIM_Base_SetConfig+0x8a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475c:	d017      	beq.n	800478e <TIM_Base_SetConfig+0x8a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a22      	ldr	r2, [pc, #136]	; (80047ec <TIM_Base_SetConfig+0xe8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <TIM_Base_SetConfig+0x8a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a21      	ldr	r2, [pc, #132]	; (80047f0 <TIM_Base_SetConfig+0xec>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00f      	beq.n	800478e <TIM_Base_SetConfig+0x8a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a20      	ldr	r2, [pc, #128]	; (80047f4 <TIM_Base_SetConfig+0xf0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00b      	beq.n	800478e <TIM_Base_SetConfig+0x8a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a1f      	ldr	r2, [pc, #124]	; (80047f8 <TIM_Base_SetConfig+0xf4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d007      	beq.n	800478e <TIM_Base_SetConfig+0x8a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <TIM_Base_SetConfig+0xf8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d003      	beq.n	800478e <TIM_Base_SetConfig+0x8a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1d      	ldr	r2, [pc, #116]	; (8004800 <TIM_Base_SetConfig+0xfc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d108      	bne.n	80047a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <TIM_Base_SetConfig+0xe4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d103      	bne.n	80047d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	615a      	str	r2, [r3, #20]
}
 80047da:	bf00      	nop
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40010000 	.word	0x40010000
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40000800 	.word	0x40000800
 80047f4:	40000c00 	.word	0x40000c00
 80047f8:	40014000 	.word	0x40014000
 80047fc:	40014400 	.word	0x40014400
 8004800:	40014800 	.word	0x40014800

08004804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f023 0201 	bic.w	r2, r3, #1
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800482e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f023 030a 	bic.w	r3, r3, #10
 8004840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004862:	b480      	push	{r7}
 8004864:	b087      	sub	sp, #28
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	f023 0210 	bic.w	r2, r3, #16
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800488c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	031b      	lsls	r3, r3, #12
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800489e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	f043 0307 	orr.w	r3, r3, #7
 80048e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	609a      	str	r2, [r3, #8]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004912:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	021a      	lsls	r2, r3, #8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	431a      	orrs	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4313      	orrs	r3, r2
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	609a      	str	r2, [r3, #8]
}
 800492c:	bf00      	nop
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800494c:	2302      	movs	r3, #2
 800494e:	e050      	b.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1c      	ldr	r2, [pc, #112]	; (8004a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d018      	beq.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499c:	d013      	beq.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a18      	ldr	r2, [pc, #96]	; (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00e      	beq.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a16      	ldr	r2, [pc, #88]	; (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d009      	beq.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a15      	ldr	r2, [pc, #84]	; (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d004      	beq.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d10c      	bne.n	80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40000800 	.word	0x40000800
 8004a0c:	40000c00 	.word	0x40000c00
 8004a10:	40014000 	.word	0x40014000

08004a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e03f      	b.n	8004ace <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fc fe2c 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2224      	movs	r2, #36	; 0x24
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f829 	bl	8004ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ab4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	b0c0      	sub	sp, #256	; 0x100
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af4:	68d9      	ldr	r1, [r3, #12]
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	ea40 0301 	orr.w	r3, r0, r1
 8004b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b30:	f021 010c 	bic.w	r1, r1, #12
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b52:	6999      	ldr	r1, [r3, #24]
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	ea40 0301 	orr.w	r3, r0, r1
 8004b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4b8f      	ldr	r3, [pc, #572]	; (8004da4 <UART_SetConfig+0x2cc>)
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d005      	beq.n	8004b78 <UART_SetConfig+0xa0>
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b8d      	ldr	r3, [pc, #564]	; (8004da8 <UART_SetConfig+0x2d0>)
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d104      	bne.n	8004b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b78:	f7fe ff62 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 8004b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b80:	e003      	b.n	8004b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b82:	f7fe ff49 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8004b86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b94:	f040 810c 	bne.w	8004db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004baa:	4622      	mov	r2, r4
 8004bac:	462b      	mov	r3, r5
 8004bae:	1891      	adds	r1, r2, r2
 8004bb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bb2:	415b      	adcs	r3, r3
 8004bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bba:	4621      	mov	r1, r4
 8004bbc:	eb12 0801 	adds.w	r8, r2, r1
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	eb43 0901 	adc.w	r9, r3, r1
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bda:	4690      	mov	r8, r2
 8004bdc:	4699      	mov	r9, r3
 8004bde:	4623      	mov	r3, r4
 8004be0:	eb18 0303 	adds.w	r3, r8, r3
 8004be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004be8:	462b      	mov	r3, r5
 8004bea:	eb49 0303 	adc.w	r3, r9, r3
 8004bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c06:	460b      	mov	r3, r1
 8004c08:	18db      	adds	r3, r3, r3
 8004c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	eb42 0303 	adc.w	r3, r2, r3
 8004c12:	657b      	str	r3, [r7, #84]	; 0x54
 8004c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c1c:	f7fb fe72 	bl	8000904 <__aeabi_uldivmod>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4b61      	ldr	r3, [pc, #388]	; (8004dac <UART_SetConfig+0x2d4>)
 8004c26:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	011c      	lsls	r4, r3, #4
 8004c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c40:	4642      	mov	r2, r8
 8004c42:	464b      	mov	r3, r9
 8004c44:	1891      	adds	r1, r2, r2
 8004c46:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c48:	415b      	adcs	r3, r3
 8004c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c50:	4641      	mov	r1, r8
 8004c52:	eb12 0a01 	adds.w	sl, r2, r1
 8004c56:	4649      	mov	r1, r9
 8004c58:	eb43 0b01 	adc.w	fp, r3, r1
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c70:	4692      	mov	sl, r2
 8004c72:	469b      	mov	fp, r3
 8004c74:	4643      	mov	r3, r8
 8004c76:	eb1a 0303 	adds.w	r3, sl, r3
 8004c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c7e:	464b      	mov	r3, r9
 8004c80:	eb4b 0303 	adc.w	r3, fp, r3
 8004c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	18db      	adds	r3, r3, r3
 8004ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	eb42 0303 	adc.w	r3, r2, r3
 8004ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8004caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cb2:	f7fb fe27 	bl	8000904 <__aeabi_uldivmod>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4b3b      	ldr	r3, [pc, #236]	; (8004dac <UART_SetConfig+0x2d4>)
 8004cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2264      	movs	r2, #100	; 0x64
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	1acb      	subs	r3, r1, r3
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cd2:	4b36      	ldr	r3, [pc, #216]	; (8004dac <UART_SetConfig+0x2d4>)
 8004cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ce0:	441c      	add	r4, r3
 8004ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	1891      	adds	r1, r2, r2
 8004cfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cfc:	415b      	adcs	r3, r3
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d04:	4641      	mov	r1, r8
 8004d06:	1851      	adds	r1, r2, r1
 8004d08:	6339      	str	r1, [r7, #48]	; 0x30
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	414b      	adcs	r3, r1
 8004d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	00cb      	lsls	r3, r1, #3
 8004d20:	4651      	mov	r1, sl
 8004d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d26:	4651      	mov	r1, sl
 8004d28:	00ca      	lsls	r2, r1, #3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4642      	mov	r2, r8
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d38:	464b      	mov	r3, r9
 8004d3a:	460a      	mov	r2, r1
 8004d3c:	eb42 0303 	adc.w	r3, r2, r3
 8004d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d58:	460b      	mov	r3, r1
 8004d5a:	18db      	adds	r3, r3, r3
 8004d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5e:	4613      	mov	r3, r2
 8004d60:	eb42 0303 	adc.w	r3, r2, r3
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d6e:	f7fb fdc9 	bl	8000904 <__aeabi_uldivmod>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <UART_SetConfig+0x2d4>)
 8004d78:	fba3 1302 	umull	r1, r3, r3, r2
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	2164      	movs	r1, #100	; 0x64
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	3332      	adds	r3, #50	; 0x32
 8004d8a:	4a08      	ldr	r2, [pc, #32]	; (8004dac <UART_SetConfig+0x2d4>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	f003 0207 	and.w	r2, r3, #7
 8004d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4422      	add	r2, r4
 8004d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da0:	e105      	b.n	8004fae <UART_SetConfig+0x4d6>
 8004da2:	bf00      	nop
 8004da4:	40011000 	.word	0x40011000
 8004da8:	40011400 	.word	0x40011400
 8004dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dc2:	4642      	mov	r2, r8
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	1891      	adds	r1, r2, r2
 8004dc8:	6239      	str	r1, [r7, #32]
 8004dca:	415b      	adcs	r3, r3
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	1854      	adds	r4, r2, r1
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	eb43 0501 	adc.w	r5, r3, r1
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	00eb      	lsls	r3, r5, #3
 8004de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dea:	00e2      	lsls	r2, r4, #3
 8004dec:	4614      	mov	r4, r2
 8004dee:	461d      	mov	r5, r3
 8004df0:	4643      	mov	r3, r8
 8004df2:	18e3      	adds	r3, r4, r3
 8004df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004df8:	464b      	mov	r3, r9
 8004dfa:	eb45 0303 	adc.w	r3, r5, r3
 8004dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e1e:	4629      	mov	r1, r5
 8004e20:	008b      	lsls	r3, r1, #2
 8004e22:	4621      	mov	r1, r4
 8004e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e28:	4621      	mov	r1, r4
 8004e2a:	008a      	lsls	r2, r1, #2
 8004e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e30:	f7fb fd68 	bl	8000904 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4b60      	ldr	r3, [pc, #384]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	011c      	lsls	r4, r3, #4
 8004e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	1891      	adds	r1, r2, r2
 8004e5a:	61b9      	str	r1, [r7, #24]
 8004e5c:	415b      	adcs	r3, r3
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e64:	4641      	mov	r1, r8
 8004e66:	1851      	adds	r1, r2, r1
 8004e68:	6139      	str	r1, [r7, #16]
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	414b      	adcs	r3, r1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	00cb      	lsls	r3, r1, #3
 8004e80:	4651      	mov	r1, sl
 8004e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e86:	4651      	mov	r1, sl
 8004e88:	00ca      	lsls	r2, r1, #3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4642      	mov	r2, r8
 8004e92:	189b      	adds	r3, r3, r2
 8004e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e98:	464b      	mov	r3, r9
 8004e9a:	460a      	mov	r2, r1
 8004e9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	008b      	lsls	r3, r1, #2
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	008a      	lsls	r2, r1, #2
 8004eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ece:	f7fb fd19 	bl	8000904 <__aeabi_uldivmod>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	2164      	movs	r1, #100	; 0x64
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	3332      	adds	r3, #50	; 0x32
 8004eea:	4a34      	ldr	r2, [pc, #208]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	095b      	lsrs	r3, r3, #5
 8004ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ef6:	441c      	add	r4, r3
 8004ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efc:	2200      	movs	r2, #0
 8004efe:	673b      	str	r3, [r7, #112]	; 0x70
 8004f00:	677a      	str	r2, [r7, #116]	; 0x74
 8004f02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f06:	4642      	mov	r2, r8
 8004f08:	464b      	mov	r3, r9
 8004f0a:	1891      	adds	r1, r2, r2
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	415b      	adcs	r3, r3
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f16:	4641      	mov	r1, r8
 8004f18:	1851      	adds	r1, r2, r1
 8004f1a:	6039      	str	r1, [r7, #0]
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	414b      	adcs	r3, r1
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f2e:	4659      	mov	r1, fp
 8004f30:	00cb      	lsls	r3, r1, #3
 8004f32:	4651      	mov	r1, sl
 8004f34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f38:	4651      	mov	r1, sl
 8004f3a:	00ca      	lsls	r2, r1, #3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4603      	mov	r3, r0
 8004f42:	4642      	mov	r2, r8
 8004f44:	189b      	adds	r3, r3, r2
 8004f46:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f48:	464b      	mov	r3, r9
 8004f4a:	460a      	mov	r2, r1
 8004f4c:	eb42 0303 	adc.w	r3, r2, r3
 8004f50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f5c:	667a      	str	r2, [r7, #100]	; 0x64
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	008b      	lsls	r3, r1, #2
 8004f6e:	4641      	mov	r1, r8
 8004f70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f74:	4641      	mov	r1, r8
 8004f76:	008a      	lsls	r2, r1, #2
 8004f78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f7c:	f7fb fcc2 	bl	8000904 <__aeabi_uldivmod>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004f86:	fba3 1302 	umull	r1, r3, r3, r2
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	2164      	movs	r1, #100	; 0x64
 8004f8e:	fb01 f303 	mul.w	r3, r1, r3
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	3332      	adds	r3, #50	; 0x32
 8004f98:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	f003 020f 	and.w	r2, r3, #15
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4422      	add	r2, r4
 8004fac:	609a      	str	r2, [r3, #8]
}
 8004fae:	bf00      	nop
 8004fb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fba:	bf00      	nop
 8004fbc:	51eb851f 	.word	0x51eb851f

08004fc0 <__libc_init_array>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	4d0d      	ldr	r5, [pc, #52]	; (8004ff8 <__libc_init_array+0x38>)
 8004fc4:	4c0d      	ldr	r4, [pc, #52]	; (8004ffc <__libc_init_array+0x3c>)
 8004fc6:	1b64      	subs	r4, r4, r5
 8004fc8:	10a4      	asrs	r4, r4, #2
 8004fca:	2600      	movs	r6, #0
 8004fcc:	42a6      	cmp	r6, r4
 8004fce:	d109      	bne.n	8004fe4 <__libc_init_array+0x24>
 8004fd0:	4d0b      	ldr	r5, [pc, #44]	; (8005000 <__libc_init_array+0x40>)
 8004fd2:	4c0c      	ldr	r4, [pc, #48]	; (8005004 <__libc_init_array+0x44>)
 8004fd4:	f001 f86a 	bl	80060ac <_init>
 8004fd8:	1b64      	subs	r4, r4, r5
 8004fda:	10a4      	asrs	r4, r4, #2
 8004fdc:	2600      	movs	r6, #0
 8004fde:	42a6      	cmp	r6, r4
 8004fe0:	d105      	bne.n	8004fee <__libc_init_array+0x2e>
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}
 8004fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe8:	4798      	blx	r3
 8004fea:	3601      	adds	r6, #1
 8004fec:	e7ee      	b.n	8004fcc <__libc_init_array+0xc>
 8004fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff2:	4798      	blx	r3
 8004ff4:	3601      	adds	r6, #1
 8004ff6:	e7f2      	b.n	8004fde <__libc_init_array+0x1e>
 8004ff8:	080062c8 	.word	0x080062c8
 8004ffc:	080062c8 	.word	0x080062c8
 8005000:	080062c8 	.word	0x080062c8
 8005004:	080062cc 	.word	0x080062cc

08005008 <memset>:
 8005008:	4402      	add	r2, r0
 800500a:	4603      	mov	r3, r0
 800500c:	4293      	cmp	r3, r2
 800500e:	d100      	bne.n	8005012 <memset+0xa>
 8005010:	4770      	bx	lr
 8005012:	f803 1b01 	strb.w	r1, [r3], #1
 8005016:	e7f9      	b.n	800500c <memset+0x4>

08005018 <sin>:
 8005018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800501a:	ec53 2b10 	vmov	r2, r3, d0
 800501e:	4828      	ldr	r0, [pc, #160]	; (80050c0 <sin+0xa8>)
 8005020:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005024:	4281      	cmp	r1, r0
 8005026:	dc07      	bgt.n	8005038 <sin+0x20>
 8005028:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80050b8 <sin+0xa0>
 800502c:	2000      	movs	r0, #0
 800502e:	b005      	add	sp, #20
 8005030:	f85d eb04 	ldr.w	lr, [sp], #4
 8005034:	f000 be6c 	b.w	8005d10 <__kernel_sin>
 8005038:	4822      	ldr	r0, [pc, #136]	; (80050c4 <sin+0xac>)
 800503a:	4281      	cmp	r1, r0
 800503c:	dd09      	ble.n	8005052 <sin+0x3a>
 800503e:	ee10 0a10 	vmov	r0, s0
 8005042:	4619      	mov	r1, r3
 8005044:	f7fb f9f6 	bl	8000434 <__aeabi_dsub>
 8005048:	ec41 0b10 	vmov	d0, r0, r1
 800504c:	b005      	add	sp, #20
 800504e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005052:	4668      	mov	r0, sp
 8005054:	f000 f838 	bl	80050c8 <__ieee754_rem_pio2>
 8005058:	f000 0003 	and.w	r0, r0, #3
 800505c:	2801      	cmp	r0, #1
 800505e:	d00c      	beq.n	800507a <sin+0x62>
 8005060:	2802      	cmp	r0, #2
 8005062:	d011      	beq.n	8005088 <sin+0x70>
 8005064:	b9f0      	cbnz	r0, 80050a4 <sin+0x8c>
 8005066:	ed9d 1b02 	vldr	d1, [sp, #8]
 800506a:	ed9d 0b00 	vldr	d0, [sp]
 800506e:	2001      	movs	r0, #1
 8005070:	f000 fe4e 	bl	8005d10 <__kernel_sin>
 8005074:	ec51 0b10 	vmov	r0, r1, d0
 8005078:	e7e6      	b.n	8005048 <sin+0x30>
 800507a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800507e:	ed9d 0b00 	vldr	d0, [sp]
 8005082:	f000 fa2d 	bl	80054e0 <__kernel_cos>
 8005086:	e7f5      	b.n	8005074 <sin+0x5c>
 8005088:	ed9d 1b02 	vldr	d1, [sp, #8]
 800508c:	ed9d 0b00 	vldr	d0, [sp]
 8005090:	2001      	movs	r0, #1
 8005092:	f000 fe3d 	bl	8005d10 <__kernel_sin>
 8005096:	ec53 2b10 	vmov	r2, r3, d0
 800509a:	ee10 0a10 	vmov	r0, s0
 800509e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80050a2:	e7d1      	b.n	8005048 <sin+0x30>
 80050a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80050a8:	ed9d 0b00 	vldr	d0, [sp]
 80050ac:	f000 fa18 	bl	80054e0 <__kernel_cos>
 80050b0:	e7f1      	b.n	8005096 <sin+0x7e>
 80050b2:	bf00      	nop
 80050b4:	f3af 8000 	nop.w
	...
 80050c0:	3fe921fb 	.word	0x3fe921fb
 80050c4:	7fefffff 	.word	0x7fefffff

080050c8 <__ieee754_rem_pio2>:
 80050c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	ed2d 8b02 	vpush	{d8}
 80050d0:	ec55 4b10 	vmov	r4, r5, d0
 80050d4:	4bca      	ldr	r3, [pc, #808]	; (8005400 <__ieee754_rem_pio2+0x338>)
 80050d6:	b08b      	sub	sp, #44	; 0x2c
 80050d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80050dc:	4598      	cmp	r8, r3
 80050de:	4682      	mov	sl, r0
 80050e0:	9502      	str	r5, [sp, #8]
 80050e2:	dc08      	bgt.n	80050f6 <__ieee754_rem_pio2+0x2e>
 80050e4:	2200      	movs	r2, #0
 80050e6:	2300      	movs	r3, #0
 80050e8:	ed80 0b00 	vstr	d0, [r0]
 80050ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80050f0:	f04f 0b00 	mov.w	fp, #0
 80050f4:	e028      	b.n	8005148 <__ieee754_rem_pio2+0x80>
 80050f6:	4bc3      	ldr	r3, [pc, #780]	; (8005404 <__ieee754_rem_pio2+0x33c>)
 80050f8:	4598      	cmp	r8, r3
 80050fa:	dc78      	bgt.n	80051ee <__ieee754_rem_pio2+0x126>
 80050fc:	9b02      	ldr	r3, [sp, #8]
 80050fe:	4ec2      	ldr	r6, [pc, #776]	; (8005408 <__ieee754_rem_pio2+0x340>)
 8005100:	2b00      	cmp	r3, #0
 8005102:	ee10 0a10 	vmov	r0, s0
 8005106:	a3b0      	add	r3, pc, #704	; (adr r3, 80053c8 <__ieee754_rem_pio2+0x300>)
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	4629      	mov	r1, r5
 800510e:	dd39      	ble.n	8005184 <__ieee754_rem_pio2+0xbc>
 8005110:	f7fb f990 	bl	8000434 <__aeabi_dsub>
 8005114:	45b0      	cmp	r8, r6
 8005116:	4604      	mov	r4, r0
 8005118:	460d      	mov	r5, r1
 800511a:	d01b      	beq.n	8005154 <__ieee754_rem_pio2+0x8c>
 800511c:	a3ac      	add	r3, pc, #688	; (adr r3, 80053d0 <__ieee754_rem_pio2+0x308>)
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	f7fb f987 	bl	8000434 <__aeabi_dsub>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	e9ca 2300 	strd	r2, r3, [sl]
 800512e:	4620      	mov	r0, r4
 8005130:	4629      	mov	r1, r5
 8005132:	f7fb f97f 	bl	8000434 <__aeabi_dsub>
 8005136:	a3a6      	add	r3, pc, #664	; (adr r3, 80053d0 <__ieee754_rem_pio2+0x308>)
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f7fb f97a 	bl	8000434 <__aeabi_dsub>
 8005140:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005144:	f04f 0b01 	mov.w	fp, #1
 8005148:	4658      	mov	r0, fp
 800514a:	b00b      	add	sp, #44	; 0x2c
 800514c:	ecbd 8b02 	vpop	{d8}
 8005150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005154:	a3a0      	add	r3, pc, #640	; (adr r3, 80053d8 <__ieee754_rem_pio2+0x310>)
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f7fb f96b 	bl	8000434 <__aeabi_dsub>
 800515e:	a3a0      	add	r3, pc, #640	; (adr r3, 80053e0 <__ieee754_rem_pio2+0x318>)
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	4604      	mov	r4, r0
 8005166:	460d      	mov	r5, r1
 8005168:	f7fb f964 	bl	8000434 <__aeabi_dsub>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	e9ca 2300 	strd	r2, r3, [sl]
 8005174:	4620      	mov	r0, r4
 8005176:	4629      	mov	r1, r5
 8005178:	f7fb f95c 	bl	8000434 <__aeabi_dsub>
 800517c:	a398      	add	r3, pc, #608	; (adr r3, 80053e0 <__ieee754_rem_pio2+0x318>)
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	e7db      	b.n	800513c <__ieee754_rem_pio2+0x74>
 8005184:	f7fb f958 	bl	8000438 <__adddf3>
 8005188:	45b0      	cmp	r8, r6
 800518a:	4604      	mov	r4, r0
 800518c:	460d      	mov	r5, r1
 800518e:	d016      	beq.n	80051be <__ieee754_rem_pio2+0xf6>
 8005190:	a38f      	add	r3, pc, #572	; (adr r3, 80053d0 <__ieee754_rem_pio2+0x308>)
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f7fb f94f 	bl	8000438 <__adddf3>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	e9ca 2300 	strd	r2, r3, [sl]
 80051a2:	4620      	mov	r0, r4
 80051a4:	4629      	mov	r1, r5
 80051a6:	f7fb f945 	bl	8000434 <__aeabi_dsub>
 80051aa:	a389      	add	r3, pc, #548	; (adr r3, 80053d0 <__ieee754_rem_pio2+0x308>)
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f7fb f942 	bl	8000438 <__adddf3>
 80051b4:	f04f 3bff 	mov.w	fp, #4294967295
 80051b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80051bc:	e7c4      	b.n	8005148 <__ieee754_rem_pio2+0x80>
 80051be:	a386      	add	r3, pc, #536	; (adr r3, 80053d8 <__ieee754_rem_pio2+0x310>)
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f7fb f938 	bl	8000438 <__adddf3>
 80051c8:	a385      	add	r3, pc, #532	; (adr r3, 80053e0 <__ieee754_rem_pio2+0x318>)
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	4604      	mov	r4, r0
 80051d0:	460d      	mov	r5, r1
 80051d2:	f7fb f931 	bl	8000438 <__adddf3>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	e9ca 2300 	strd	r2, r3, [sl]
 80051de:	4620      	mov	r0, r4
 80051e0:	4629      	mov	r1, r5
 80051e2:	f7fb f927 	bl	8000434 <__aeabi_dsub>
 80051e6:	a37e      	add	r3, pc, #504	; (adr r3, 80053e0 <__ieee754_rem_pio2+0x318>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	e7e0      	b.n	80051b0 <__ieee754_rem_pio2+0xe8>
 80051ee:	4b87      	ldr	r3, [pc, #540]	; (800540c <__ieee754_rem_pio2+0x344>)
 80051f0:	4598      	cmp	r8, r3
 80051f2:	f300 80d9 	bgt.w	80053a8 <__ieee754_rem_pio2+0x2e0>
 80051f6:	f000 fe49 	bl	8005e8c <fabs>
 80051fa:	ec55 4b10 	vmov	r4, r5, d0
 80051fe:	ee10 0a10 	vmov	r0, s0
 8005202:	a379      	add	r3, pc, #484	; (adr r3, 80053e8 <__ieee754_rem_pio2+0x320>)
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	4629      	mov	r1, r5
 800520a:	f7fa ffe5 	bl	80001d8 <__aeabi_dmul>
 800520e:	4b80      	ldr	r3, [pc, #512]	; (8005410 <__ieee754_rem_pio2+0x348>)
 8005210:	2200      	movs	r2, #0
 8005212:	f7fb f911 	bl	8000438 <__adddf3>
 8005216:	f7fb fb4d 	bl	80008b4 <__aeabi_d2iz>
 800521a:	4683      	mov	fp, r0
 800521c:	f7fb fa58 	bl	80006d0 <__aeabi_i2d>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	ec43 2b18 	vmov	d8, r2, r3
 8005228:	a367      	add	r3, pc, #412	; (adr r3, 80053c8 <__ieee754_rem_pio2+0x300>)
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f7fa ffd3 	bl	80001d8 <__aeabi_dmul>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	4620      	mov	r0, r4
 8005238:	4629      	mov	r1, r5
 800523a:	f7fb f8fb 	bl	8000434 <__aeabi_dsub>
 800523e:	a364      	add	r3, pc, #400	; (adr r3, 80053d0 <__ieee754_rem_pio2+0x308>)
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	4606      	mov	r6, r0
 8005246:	460f      	mov	r7, r1
 8005248:	ec51 0b18 	vmov	r0, r1, d8
 800524c:	f7fa ffc4 	bl	80001d8 <__aeabi_dmul>
 8005250:	f1bb 0f1f 	cmp.w	fp, #31
 8005254:	4604      	mov	r4, r0
 8005256:	460d      	mov	r5, r1
 8005258:	dc0d      	bgt.n	8005276 <__ieee754_rem_pio2+0x1ae>
 800525a:	4b6e      	ldr	r3, [pc, #440]	; (8005414 <__ieee754_rem_pio2+0x34c>)
 800525c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005264:	4543      	cmp	r3, r8
 8005266:	d006      	beq.n	8005276 <__ieee754_rem_pio2+0x1ae>
 8005268:	4622      	mov	r2, r4
 800526a:	462b      	mov	r3, r5
 800526c:	4630      	mov	r0, r6
 800526e:	4639      	mov	r1, r7
 8005270:	f7fb f8e0 	bl	8000434 <__aeabi_dsub>
 8005274:	e00f      	b.n	8005296 <__ieee754_rem_pio2+0x1ce>
 8005276:	462b      	mov	r3, r5
 8005278:	4622      	mov	r2, r4
 800527a:	4630      	mov	r0, r6
 800527c:	4639      	mov	r1, r7
 800527e:	f7fb f8d9 	bl	8000434 <__aeabi_dsub>
 8005282:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005286:	9303      	str	r3, [sp, #12]
 8005288:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800528c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005290:	f1b8 0f10 	cmp.w	r8, #16
 8005294:	dc02      	bgt.n	800529c <__ieee754_rem_pio2+0x1d4>
 8005296:	e9ca 0100 	strd	r0, r1, [sl]
 800529a:	e039      	b.n	8005310 <__ieee754_rem_pio2+0x248>
 800529c:	a34e      	add	r3, pc, #312	; (adr r3, 80053d8 <__ieee754_rem_pio2+0x310>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	ec51 0b18 	vmov	r0, r1, d8
 80052a6:	f7fa ff97 	bl	80001d8 <__aeabi_dmul>
 80052aa:	4604      	mov	r4, r0
 80052ac:	460d      	mov	r5, r1
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4630      	mov	r0, r6
 80052b4:	4639      	mov	r1, r7
 80052b6:	f7fb f8bd 	bl	8000434 <__aeabi_dsub>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4680      	mov	r8, r0
 80052c0:	4689      	mov	r9, r1
 80052c2:	4630      	mov	r0, r6
 80052c4:	4639      	mov	r1, r7
 80052c6:	f7fb f8b5 	bl	8000434 <__aeabi_dsub>
 80052ca:	4622      	mov	r2, r4
 80052cc:	462b      	mov	r3, r5
 80052ce:	f7fb f8b1 	bl	8000434 <__aeabi_dsub>
 80052d2:	a343      	add	r3, pc, #268	; (adr r3, 80053e0 <__ieee754_rem_pio2+0x318>)
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	4604      	mov	r4, r0
 80052da:	460d      	mov	r5, r1
 80052dc:	ec51 0b18 	vmov	r0, r1, d8
 80052e0:	f7fa ff7a 	bl	80001d8 <__aeabi_dmul>
 80052e4:	4622      	mov	r2, r4
 80052e6:	462b      	mov	r3, r5
 80052e8:	f7fb f8a4 	bl	8000434 <__aeabi_dsub>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4604      	mov	r4, r0
 80052f2:	460d      	mov	r5, r1
 80052f4:	4640      	mov	r0, r8
 80052f6:	4649      	mov	r1, r9
 80052f8:	f7fb f89c 	bl	8000434 <__aeabi_dsub>
 80052fc:	9a03      	ldr	r2, [sp, #12]
 80052fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b31      	cmp	r3, #49	; 0x31
 8005306:	dc24      	bgt.n	8005352 <__ieee754_rem_pio2+0x28a>
 8005308:	e9ca 0100 	strd	r0, r1, [sl]
 800530c:	4646      	mov	r6, r8
 800530e:	464f      	mov	r7, r9
 8005310:	e9da 8900 	ldrd	r8, r9, [sl]
 8005314:	4630      	mov	r0, r6
 8005316:	4642      	mov	r2, r8
 8005318:	464b      	mov	r3, r9
 800531a:	4639      	mov	r1, r7
 800531c:	f7fb f88a 	bl	8000434 <__aeabi_dsub>
 8005320:	462b      	mov	r3, r5
 8005322:	4622      	mov	r2, r4
 8005324:	f7fb f886 	bl	8000434 <__aeabi_dsub>
 8005328:	9b02      	ldr	r3, [sp, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005330:	f6bf af0a 	bge.w	8005148 <__ieee754_rem_pio2+0x80>
 8005334:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005338:	f8ca 3004 	str.w	r3, [sl, #4]
 800533c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005340:	f8ca 8000 	str.w	r8, [sl]
 8005344:	f8ca 0008 	str.w	r0, [sl, #8]
 8005348:	f8ca 300c 	str.w	r3, [sl, #12]
 800534c:	f1cb 0b00 	rsb	fp, fp, #0
 8005350:	e6fa      	b.n	8005148 <__ieee754_rem_pio2+0x80>
 8005352:	a327      	add	r3, pc, #156	; (adr r3, 80053f0 <__ieee754_rem_pio2+0x328>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	ec51 0b18 	vmov	r0, r1, d8
 800535c:	f7fa ff3c 	bl	80001d8 <__aeabi_dmul>
 8005360:	4604      	mov	r4, r0
 8005362:	460d      	mov	r5, r1
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4640      	mov	r0, r8
 800536a:	4649      	mov	r1, r9
 800536c:	f7fb f862 	bl	8000434 <__aeabi_dsub>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4606      	mov	r6, r0
 8005376:	460f      	mov	r7, r1
 8005378:	4640      	mov	r0, r8
 800537a:	4649      	mov	r1, r9
 800537c:	f7fb f85a 	bl	8000434 <__aeabi_dsub>
 8005380:	4622      	mov	r2, r4
 8005382:	462b      	mov	r3, r5
 8005384:	f7fb f856 	bl	8000434 <__aeabi_dsub>
 8005388:	a31b      	add	r3, pc, #108	; (adr r3, 80053f8 <__ieee754_rem_pio2+0x330>)
 800538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538e:	4604      	mov	r4, r0
 8005390:	460d      	mov	r5, r1
 8005392:	ec51 0b18 	vmov	r0, r1, d8
 8005396:	f7fa ff1f 	bl	80001d8 <__aeabi_dmul>
 800539a:	4622      	mov	r2, r4
 800539c:	462b      	mov	r3, r5
 800539e:	f7fb f849 	bl	8000434 <__aeabi_dsub>
 80053a2:	4604      	mov	r4, r0
 80053a4:	460d      	mov	r5, r1
 80053a6:	e75f      	b.n	8005268 <__ieee754_rem_pio2+0x1a0>
 80053a8:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <__ieee754_rem_pio2+0x350>)
 80053aa:	4598      	cmp	r8, r3
 80053ac:	dd36      	ble.n	800541c <__ieee754_rem_pio2+0x354>
 80053ae:	ee10 2a10 	vmov	r2, s0
 80053b2:	462b      	mov	r3, r5
 80053b4:	4620      	mov	r0, r4
 80053b6:	4629      	mov	r1, r5
 80053b8:	f7fb f83c 	bl	8000434 <__aeabi_dsub>
 80053bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80053c0:	e9ca 0100 	strd	r0, r1, [sl]
 80053c4:	e694      	b.n	80050f0 <__ieee754_rem_pio2+0x28>
 80053c6:	bf00      	nop
 80053c8:	54400000 	.word	0x54400000
 80053cc:	3ff921fb 	.word	0x3ff921fb
 80053d0:	1a626331 	.word	0x1a626331
 80053d4:	3dd0b461 	.word	0x3dd0b461
 80053d8:	1a600000 	.word	0x1a600000
 80053dc:	3dd0b461 	.word	0x3dd0b461
 80053e0:	2e037073 	.word	0x2e037073
 80053e4:	3ba3198a 	.word	0x3ba3198a
 80053e8:	6dc9c883 	.word	0x6dc9c883
 80053ec:	3fe45f30 	.word	0x3fe45f30
 80053f0:	2e000000 	.word	0x2e000000
 80053f4:	3ba3198a 	.word	0x3ba3198a
 80053f8:	252049c1 	.word	0x252049c1
 80053fc:	397b839a 	.word	0x397b839a
 8005400:	3fe921fb 	.word	0x3fe921fb
 8005404:	4002d97b 	.word	0x4002d97b
 8005408:	3ff921fb 	.word	0x3ff921fb
 800540c:	413921fb 	.word	0x413921fb
 8005410:	3fe00000 	.word	0x3fe00000
 8005414:	080060e8 	.word	0x080060e8
 8005418:	7fefffff 	.word	0x7fefffff
 800541c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005420:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005424:	ee10 0a10 	vmov	r0, s0
 8005428:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800542c:	ee10 6a10 	vmov	r6, s0
 8005430:	460f      	mov	r7, r1
 8005432:	f7fb fa3f 	bl	80008b4 <__aeabi_d2iz>
 8005436:	f7fb f94b 	bl	80006d0 <__aeabi_i2d>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4630      	mov	r0, r6
 8005440:	4639      	mov	r1, r7
 8005442:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005446:	f7fa fff5 	bl	8000434 <__aeabi_dsub>
 800544a:	4b23      	ldr	r3, [pc, #140]	; (80054d8 <__ieee754_rem_pio2+0x410>)
 800544c:	2200      	movs	r2, #0
 800544e:	f7fa fec3 	bl	80001d8 <__aeabi_dmul>
 8005452:	460f      	mov	r7, r1
 8005454:	4606      	mov	r6, r0
 8005456:	f7fb fa2d 	bl	80008b4 <__aeabi_d2iz>
 800545a:	f7fb f939 	bl	80006d0 <__aeabi_i2d>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4630      	mov	r0, r6
 8005464:	4639      	mov	r1, r7
 8005466:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800546a:	f7fa ffe3 	bl	8000434 <__aeabi_dsub>
 800546e:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <__ieee754_rem_pio2+0x410>)
 8005470:	2200      	movs	r2, #0
 8005472:	f7fa feb1 	bl	80001d8 <__aeabi_dmul>
 8005476:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800547a:	ad04      	add	r5, sp, #16
 800547c:	f04f 0803 	mov.w	r8, #3
 8005480:	46a9      	mov	r9, r5
 8005482:	2600      	movs	r6, #0
 8005484:	2700      	movs	r7, #0
 8005486:	4632      	mov	r2, r6
 8005488:	463b      	mov	r3, r7
 800548a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800548e:	46c3      	mov	fp, r8
 8005490:	3d08      	subs	r5, #8
 8005492:	f108 38ff 	add.w	r8, r8, #4294967295
 8005496:	f7fb f9db 	bl	8000850 <__aeabi_dcmpeq>
 800549a:	2800      	cmp	r0, #0
 800549c:	d1f3      	bne.n	8005486 <__ieee754_rem_pio2+0x3be>
 800549e:	4b0f      	ldr	r3, [pc, #60]	; (80054dc <__ieee754_rem_pio2+0x414>)
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	2302      	movs	r3, #2
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	4622      	mov	r2, r4
 80054a8:	465b      	mov	r3, fp
 80054aa:	4651      	mov	r1, sl
 80054ac:	4648      	mov	r0, r9
 80054ae:	f000 f8df 	bl	8005670 <__kernel_rem_pio2>
 80054b2:	9b02      	ldr	r3, [sp, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	4683      	mov	fp, r0
 80054b8:	f6bf ae46 	bge.w	8005148 <__ieee754_rem_pio2+0x80>
 80054bc:	e9da 2100 	ldrd	r2, r1, [sl]
 80054c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054c4:	e9ca 2300 	strd	r2, r3, [sl]
 80054c8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80054cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054d0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80054d4:	e73a      	b.n	800534c <__ieee754_rem_pio2+0x284>
 80054d6:	bf00      	nop
 80054d8:	41700000 	.word	0x41700000
 80054dc:	08006168 	.word	0x08006168

080054e0 <__kernel_cos>:
 80054e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	ec57 6b10 	vmov	r6, r7, d0
 80054e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80054ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80054f0:	ed8d 1b00 	vstr	d1, [sp]
 80054f4:	da07      	bge.n	8005506 <__kernel_cos+0x26>
 80054f6:	ee10 0a10 	vmov	r0, s0
 80054fa:	4639      	mov	r1, r7
 80054fc:	f7fb f9da 	bl	80008b4 <__aeabi_d2iz>
 8005500:	2800      	cmp	r0, #0
 8005502:	f000 8088 	beq.w	8005616 <__kernel_cos+0x136>
 8005506:	4632      	mov	r2, r6
 8005508:	463b      	mov	r3, r7
 800550a:	4630      	mov	r0, r6
 800550c:	4639      	mov	r1, r7
 800550e:	f7fa fe63 	bl	80001d8 <__aeabi_dmul>
 8005512:	4b51      	ldr	r3, [pc, #324]	; (8005658 <__kernel_cos+0x178>)
 8005514:	2200      	movs	r2, #0
 8005516:	4604      	mov	r4, r0
 8005518:	460d      	mov	r5, r1
 800551a:	f7fa fe5d 	bl	80001d8 <__aeabi_dmul>
 800551e:	a340      	add	r3, pc, #256	; (adr r3, 8005620 <__kernel_cos+0x140>)
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	4682      	mov	sl, r0
 8005526:	468b      	mov	fp, r1
 8005528:	4620      	mov	r0, r4
 800552a:	4629      	mov	r1, r5
 800552c:	f7fa fe54 	bl	80001d8 <__aeabi_dmul>
 8005530:	a33d      	add	r3, pc, #244	; (adr r3, 8005628 <__kernel_cos+0x148>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f7fa ff7f 	bl	8000438 <__adddf3>
 800553a:	4622      	mov	r2, r4
 800553c:	462b      	mov	r3, r5
 800553e:	f7fa fe4b 	bl	80001d8 <__aeabi_dmul>
 8005542:	a33b      	add	r3, pc, #236	; (adr r3, 8005630 <__kernel_cos+0x150>)
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f7fa ff74 	bl	8000434 <__aeabi_dsub>
 800554c:	4622      	mov	r2, r4
 800554e:	462b      	mov	r3, r5
 8005550:	f7fa fe42 	bl	80001d8 <__aeabi_dmul>
 8005554:	a338      	add	r3, pc, #224	; (adr r3, 8005638 <__kernel_cos+0x158>)
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	f7fa ff6d 	bl	8000438 <__adddf3>
 800555e:	4622      	mov	r2, r4
 8005560:	462b      	mov	r3, r5
 8005562:	f7fa fe39 	bl	80001d8 <__aeabi_dmul>
 8005566:	a336      	add	r3, pc, #216	; (adr r3, 8005640 <__kernel_cos+0x160>)
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f7fa ff62 	bl	8000434 <__aeabi_dsub>
 8005570:	4622      	mov	r2, r4
 8005572:	462b      	mov	r3, r5
 8005574:	f7fa fe30 	bl	80001d8 <__aeabi_dmul>
 8005578:	a333      	add	r3, pc, #204	; (adr r3, 8005648 <__kernel_cos+0x168>)
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	f7fa ff5b 	bl	8000438 <__adddf3>
 8005582:	4622      	mov	r2, r4
 8005584:	462b      	mov	r3, r5
 8005586:	f7fa fe27 	bl	80001d8 <__aeabi_dmul>
 800558a:	4622      	mov	r2, r4
 800558c:	462b      	mov	r3, r5
 800558e:	f7fa fe23 	bl	80001d8 <__aeabi_dmul>
 8005592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005596:	4604      	mov	r4, r0
 8005598:	460d      	mov	r5, r1
 800559a:	4630      	mov	r0, r6
 800559c:	4639      	mov	r1, r7
 800559e:	f7fa fe1b 	bl	80001d8 <__aeabi_dmul>
 80055a2:	460b      	mov	r3, r1
 80055a4:	4602      	mov	r2, r0
 80055a6:	4629      	mov	r1, r5
 80055a8:	4620      	mov	r0, r4
 80055aa:	f7fa ff43 	bl	8000434 <__aeabi_dsub>
 80055ae:	4b2b      	ldr	r3, [pc, #172]	; (800565c <__kernel_cos+0x17c>)
 80055b0:	4598      	cmp	r8, r3
 80055b2:	4606      	mov	r6, r0
 80055b4:	460f      	mov	r7, r1
 80055b6:	dc10      	bgt.n	80055da <__kernel_cos+0xfa>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4650      	mov	r0, sl
 80055be:	4659      	mov	r1, fp
 80055c0:	f7fa ff38 	bl	8000434 <__aeabi_dsub>
 80055c4:	460b      	mov	r3, r1
 80055c6:	4926      	ldr	r1, [pc, #152]	; (8005660 <__kernel_cos+0x180>)
 80055c8:	4602      	mov	r2, r0
 80055ca:	2000      	movs	r0, #0
 80055cc:	f7fa ff32 	bl	8000434 <__aeabi_dsub>
 80055d0:	ec41 0b10 	vmov	d0, r0, r1
 80055d4:	b003      	add	sp, #12
 80055d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055da:	4b22      	ldr	r3, [pc, #136]	; (8005664 <__kernel_cos+0x184>)
 80055dc:	4920      	ldr	r1, [pc, #128]	; (8005660 <__kernel_cos+0x180>)
 80055de:	4598      	cmp	r8, r3
 80055e0:	bfcc      	ite	gt
 80055e2:	4d21      	ldrgt	r5, [pc, #132]	; (8005668 <__kernel_cos+0x188>)
 80055e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80055e8:	2400      	movs	r4, #0
 80055ea:	4622      	mov	r2, r4
 80055ec:	462b      	mov	r3, r5
 80055ee:	2000      	movs	r0, #0
 80055f0:	f7fa ff20 	bl	8000434 <__aeabi_dsub>
 80055f4:	4622      	mov	r2, r4
 80055f6:	4680      	mov	r8, r0
 80055f8:	4689      	mov	r9, r1
 80055fa:	462b      	mov	r3, r5
 80055fc:	4650      	mov	r0, sl
 80055fe:	4659      	mov	r1, fp
 8005600:	f7fa ff18 	bl	8000434 <__aeabi_dsub>
 8005604:	4632      	mov	r2, r6
 8005606:	463b      	mov	r3, r7
 8005608:	f7fa ff14 	bl	8000434 <__aeabi_dsub>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4640      	mov	r0, r8
 8005612:	4649      	mov	r1, r9
 8005614:	e7da      	b.n	80055cc <__kernel_cos+0xec>
 8005616:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005650 <__kernel_cos+0x170>
 800561a:	e7db      	b.n	80055d4 <__kernel_cos+0xf4>
 800561c:	f3af 8000 	nop.w
 8005620:	be8838d4 	.word	0xbe8838d4
 8005624:	bda8fae9 	.word	0xbda8fae9
 8005628:	bdb4b1c4 	.word	0xbdb4b1c4
 800562c:	3e21ee9e 	.word	0x3e21ee9e
 8005630:	809c52ad 	.word	0x809c52ad
 8005634:	3e927e4f 	.word	0x3e927e4f
 8005638:	19cb1590 	.word	0x19cb1590
 800563c:	3efa01a0 	.word	0x3efa01a0
 8005640:	16c15177 	.word	0x16c15177
 8005644:	3f56c16c 	.word	0x3f56c16c
 8005648:	5555554c 	.word	0x5555554c
 800564c:	3fa55555 	.word	0x3fa55555
 8005650:	00000000 	.word	0x00000000
 8005654:	3ff00000 	.word	0x3ff00000
 8005658:	3fe00000 	.word	0x3fe00000
 800565c:	3fd33332 	.word	0x3fd33332
 8005660:	3ff00000 	.word	0x3ff00000
 8005664:	3fe90000 	.word	0x3fe90000
 8005668:	3fd20000 	.word	0x3fd20000
 800566c:	00000000 	.word	0x00000000

08005670 <__kernel_rem_pio2>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	ed2d 8b02 	vpush	{d8}
 8005678:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800567c:	f112 0f14 	cmn.w	r2, #20
 8005680:	9308      	str	r3, [sp, #32]
 8005682:	9101      	str	r1, [sp, #4]
 8005684:	4bc4      	ldr	r3, [pc, #784]	; (8005998 <__kernel_rem_pio2+0x328>)
 8005686:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005688:	900b      	str	r0, [sp, #44]	; 0x2c
 800568a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800568e:	9302      	str	r3, [sp, #8]
 8005690:	9b08      	ldr	r3, [sp, #32]
 8005692:	f103 33ff 	add.w	r3, r3, #4294967295
 8005696:	bfa8      	it	ge
 8005698:	1ed4      	subge	r4, r2, #3
 800569a:	9306      	str	r3, [sp, #24]
 800569c:	bfb2      	itee	lt
 800569e:	2400      	movlt	r4, #0
 80056a0:	2318      	movge	r3, #24
 80056a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80056a6:	f06f 0317 	mvn.w	r3, #23
 80056aa:	fb04 3303 	mla	r3, r4, r3, r3
 80056ae:	eb03 0a02 	add.w	sl, r3, r2
 80056b2:	9b02      	ldr	r3, [sp, #8]
 80056b4:	9a06      	ldr	r2, [sp, #24]
 80056b6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005988 <__kernel_rem_pio2+0x318>
 80056ba:	eb03 0802 	add.w	r8, r3, r2
 80056be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80056c0:	1aa7      	subs	r7, r4, r2
 80056c2:	ae22      	add	r6, sp, #136	; 0x88
 80056c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80056c8:	2500      	movs	r5, #0
 80056ca:	4545      	cmp	r5, r8
 80056cc:	dd13      	ble.n	80056f6 <__kernel_rem_pio2+0x86>
 80056ce:	9b08      	ldr	r3, [sp, #32]
 80056d0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005988 <__kernel_rem_pio2+0x318>
 80056d4:	aa22      	add	r2, sp, #136	; 0x88
 80056d6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80056da:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80056de:	f04f 0800 	mov.w	r8, #0
 80056e2:	9b02      	ldr	r3, [sp, #8]
 80056e4:	4598      	cmp	r8, r3
 80056e6:	dc2f      	bgt.n	8005748 <__kernel_rem_pio2+0xd8>
 80056e8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80056ec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80056f0:	462f      	mov	r7, r5
 80056f2:	2600      	movs	r6, #0
 80056f4:	e01b      	b.n	800572e <__kernel_rem_pio2+0xbe>
 80056f6:	42ef      	cmn	r7, r5
 80056f8:	d407      	bmi.n	800570a <__kernel_rem_pio2+0x9a>
 80056fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80056fe:	f7fa ffe7 	bl	80006d0 <__aeabi_i2d>
 8005702:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005706:	3501      	adds	r5, #1
 8005708:	e7df      	b.n	80056ca <__kernel_rem_pio2+0x5a>
 800570a:	ec51 0b18 	vmov	r0, r1, d8
 800570e:	e7f8      	b.n	8005702 <__kernel_rem_pio2+0x92>
 8005710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005714:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005718:	f7fa fd5e 	bl	80001d8 <__aeabi_dmul>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005724:	f7fa fe88 	bl	8000438 <__adddf3>
 8005728:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800572c:	3601      	adds	r6, #1
 800572e:	9b06      	ldr	r3, [sp, #24]
 8005730:	429e      	cmp	r6, r3
 8005732:	f1a7 0708 	sub.w	r7, r7, #8
 8005736:	ddeb      	ble.n	8005710 <__kernel_rem_pio2+0xa0>
 8005738:	ed9d 7b04 	vldr	d7, [sp, #16]
 800573c:	f108 0801 	add.w	r8, r8, #1
 8005740:	ecab 7b02 	vstmia	fp!, {d7}
 8005744:	3508      	adds	r5, #8
 8005746:	e7cc      	b.n	80056e2 <__kernel_rem_pio2+0x72>
 8005748:	9b02      	ldr	r3, [sp, #8]
 800574a:	aa0e      	add	r2, sp, #56	; 0x38
 800574c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005750:	930d      	str	r3, [sp, #52]	; 0x34
 8005752:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005754:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005758:	9c02      	ldr	r4, [sp, #8]
 800575a:	930c      	str	r3, [sp, #48]	; 0x30
 800575c:	00e3      	lsls	r3, r4, #3
 800575e:	930a      	str	r3, [sp, #40]	; 0x28
 8005760:	ab9a      	add	r3, sp, #616	; 0x268
 8005762:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005766:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800576a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800576e:	ab72      	add	r3, sp, #456	; 0x1c8
 8005770:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005774:	46c3      	mov	fp, r8
 8005776:	46a1      	mov	r9, r4
 8005778:	f1b9 0f00 	cmp.w	r9, #0
 800577c:	f1a5 0508 	sub.w	r5, r5, #8
 8005780:	dc77      	bgt.n	8005872 <__kernel_rem_pio2+0x202>
 8005782:	ec47 6b10 	vmov	d0, r6, r7
 8005786:	4650      	mov	r0, sl
 8005788:	f000 fc0a 	bl	8005fa0 <scalbn>
 800578c:	ec57 6b10 	vmov	r6, r7, d0
 8005790:	2200      	movs	r2, #0
 8005792:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005796:	ee10 0a10 	vmov	r0, s0
 800579a:	4639      	mov	r1, r7
 800579c:	f7fa fd1c 	bl	80001d8 <__aeabi_dmul>
 80057a0:	ec41 0b10 	vmov	d0, r0, r1
 80057a4:	f000 fb7c 	bl	8005ea0 <floor>
 80057a8:	4b7c      	ldr	r3, [pc, #496]	; (800599c <__kernel_rem_pio2+0x32c>)
 80057aa:	ec51 0b10 	vmov	r0, r1, d0
 80057ae:	2200      	movs	r2, #0
 80057b0:	f7fa fd12 	bl	80001d8 <__aeabi_dmul>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4630      	mov	r0, r6
 80057ba:	4639      	mov	r1, r7
 80057bc:	f7fa fe3a 	bl	8000434 <__aeabi_dsub>
 80057c0:	460f      	mov	r7, r1
 80057c2:	4606      	mov	r6, r0
 80057c4:	f7fb f876 	bl	80008b4 <__aeabi_d2iz>
 80057c8:	9004      	str	r0, [sp, #16]
 80057ca:	f7fa ff81 	bl	80006d0 <__aeabi_i2d>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4630      	mov	r0, r6
 80057d4:	4639      	mov	r1, r7
 80057d6:	f7fa fe2d 	bl	8000434 <__aeabi_dsub>
 80057da:	f1ba 0f00 	cmp.w	sl, #0
 80057de:	4606      	mov	r6, r0
 80057e0:	460f      	mov	r7, r1
 80057e2:	dd6d      	ble.n	80058c0 <__kernel_rem_pio2+0x250>
 80057e4:	1e62      	subs	r2, r4, #1
 80057e6:	ab0e      	add	r3, sp, #56	; 0x38
 80057e8:	9d04      	ldr	r5, [sp, #16]
 80057ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80057ee:	f1ca 0118 	rsb	r1, sl, #24
 80057f2:	fa40 f301 	asr.w	r3, r0, r1
 80057f6:	441d      	add	r5, r3
 80057f8:	408b      	lsls	r3, r1
 80057fa:	1ac0      	subs	r0, r0, r3
 80057fc:	ab0e      	add	r3, sp, #56	; 0x38
 80057fe:	9504      	str	r5, [sp, #16]
 8005800:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005804:	f1ca 0317 	rsb	r3, sl, #23
 8005808:	fa40 fb03 	asr.w	fp, r0, r3
 800580c:	f1bb 0f00 	cmp.w	fp, #0
 8005810:	dd65      	ble.n	80058de <__kernel_rem_pio2+0x26e>
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	2200      	movs	r2, #0
 8005816:	3301      	adds	r3, #1
 8005818:	9304      	str	r3, [sp, #16]
 800581a:	4615      	mov	r5, r2
 800581c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005820:	4294      	cmp	r4, r2
 8005822:	f300 809c 	bgt.w	800595e <__kernel_rem_pio2+0x2ee>
 8005826:	f1ba 0f00 	cmp.w	sl, #0
 800582a:	dd07      	ble.n	800583c <__kernel_rem_pio2+0x1cc>
 800582c:	f1ba 0f01 	cmp.w	sl, #1
 8005830:	f000 80c0 	beq.w	80059b4 <__kernel_rem_pio2+0x344>
 8005834:	f1ba 0f02 	cmp.w	sl, #2
 8005838:	f000 80c6 	beq.w	80059c8 <__kernel_rem_pio2+0x358>
 800583c:	f1bb 0f02 	cmp.w	fp, #2
 8005840:	d14d      	bne.n	80058de <__kernel_rem_pio2+0x26e>
 8005842:	4632      	mov	r2, r6
 8005844:	463b      	mov	r3, r7
 8005846:	4956      	ldr	r1, [pc, #344]	; (80059a0 <__kernel_rem_pio2+0x330>)
 8005848:	2000      	movs	r0, #0
 800584a:	f7fa fdf3 	bl	8000434 <__aeabi_dsub>
 800584e:	4606      	mov	r6, r0
 8005850:	460f      	mov	r7, r1
 8005852:	2d00      	cmp	r5, #0
 8005854:	d043      	beq.n	80058de <__kernel_rem_pio2+0x26e>
 8005856:	4650      	mov	r0, sl
 8005858:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005990 <__kernel_rem_pio2+0x320>
 800585c:	f000 fba0 	bl	8005fa0 <scalbn>
 8005860:	4630      	mov	r0, r6
 8005862:	4639      	mov	r1, r7
 8005864:	ec53 2b10 	vmov	r2, r3, d0
 8005868:	f7fa fde4 	bl	8000434 <__aeabi_dsub>
 800586c:	4606      	mov	r6, r0
 800586e:	460f      	mov	r7, r1
 8005870:	e035      	b.n	80058de <__kernel_rem_pio2+0x26e>
 8005872:	4b4c      	ldr	r3, [pc, #304]	; (80059a4 <__kernel_rem_pio2+0x334>)
 8005874:	2200      	movs	r2, #0
 8005876:	4630      	mov	r0, r6
 8005878:	4639      	mov	r1, r7
 800587a:	f7fa fcad 	bl	80001d8 <__aeabi_dmul>
 800587e:	f7fb f819 	bl	80008b4 <__aeabi_d2iz>
 8005882:	f7fa ff25 	bl	80006d0 <__aeabi_i2d>
 8005886:	4602      	mov	r2, r0
 8005888:	460b      	mov	r3, r1
 800588a:	ec43 2b18 	vmov	d8, r2, r3
 800588e:	4b46      	ldr	r3, [pc, #280]	; (80059a8 <__kernel_rem_pio2+0x338>)
 8005890:	2200      	movs	r2, #0
 8005892:	f7fa fca1 	bl	80001d8 <__aeabi_dmul>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4630      	mov	r0, r6
 800589c:	4639      	mov	r1, r7
 800589e:	f7fa fdc9 	bl	8000434 <__aeabi_dsub>
 80058a2:	f7fb f807 	bl	80008b4 <__aeabi_d2iz>
 80058a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058aa:	f84b 0b04 	str.w	r0, [fp], #4
 80058ae:	ec51 0b18 	vmov	r0, r1, d8
 80058b2:	f7fa fdc1 	bl	8000438 <__adddf3>
 80058b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80058ba:	4606      	mov	r6, r0
 80058bc:	460f      	mov	r7, r1
 80058be:	e75b      	b.n	8005778 <__kernel_rem_pio2+0x108>
 80058c0:	d106      	bne.n	80058d0 <__kernel_rem_pio2+0x260>
 80058c2:	1e63      	subs	r3, r4, #1
 80058c4:	aa0e      	add	r2, sp, #56	; 0x38
 80058c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80058ca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80058ce:	e79d      	b.n	800580c <__kernel_rem_pio2+0x19c>
 80058d0:	4b36      	ldr	r3, [pc, #216]	; (80059ac <__kernel_rem_pio2+0x33c>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	f7fa ffda 	bl	800088c <__aeabi_dcmpge>
 80058d8:	2800      	cmp	r0, #0
 80058da:	d13d      	bne.n	8005958 <__kernel_rem_pio2+0x2e8>
 80058dc:	4683      	mov	fp, r0
 80058de:	2200      	movs	r2, #0
 80058e0:	2300      	movs	r3, #0
 80058e2:	4630      	mov	r0, r6
 80058e4:	4639      	mov	r1, r7
 80058e6:	f7fa ffb3 	bl	8000850 <__aeabi_dcmpeq>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	f000 80c0 	beq.w	8005a70 <__kernel_rem_pio2+0x400>
 80058f0:	1e65      	subs	r5, r4, #1
 80058f2:	462b      	mov	r3, r5
 80058f4:	2200      	movs	r2, #0
 80058f6:	9902      	ldr	r1, [sp, #8]
 80058f8:	428b      	cmp	r3, r1
 80058fa:	da6c      	bge.n	80059d6 <__kernel_rem_pio2+0x366>
 80058fc:	2a00      	cmp	r2, #0
 80058fe:	f000 8089 	beq.w	8005a14 <__kernel_rem_pio2+0x3a4>
 8005902:	ab0e      	add	r3, sp, #56	; 0x38
 8005904:	f1aa 0a18 	sub.w	sl, sl, #24
 8005908:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80ad 	beq.w	8005a6c <__kernel_rem_pio2+0x3fc>
 8005912:	4650      	mov	r0, sl
 8005914:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005990 <__kernel_rem_pio2+0x320>
 8005918:	f000 fb42 	bl	8005fa0 <scalbn>
 800591c:	ab9a      	add	r3, sp, #616	; 0x268
 800591e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005922:	ec57 6b10 	vmov	r6, r7, d0
 8005926:	00ec      	lsls	r4, r5, #3
 8005928:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800592c:	46aa      	mov	sl, r5
 800592e:	f1ba 0f00 	cmp.w	sl, #0
 8005932:	f280 80d6 	bge.w	8005ae2 <__kernel_rem_pio2+0x472>
 8005936:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005988 <__kernel_rem_pio2+0x318>
 800593a:	462e      	mov	r6, r5
 800593c:	2e00      	cmp	r6, #0
 800593e:	f2c0 8104 	blt.w	8005b4a <__kernel_rem_pio2+0x4da>
 8005942:	ab72      	add	r3, sp, #456	; 0x1c8
 8005944:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005948:	f8df a064 	ldr.w	sl, [pc, #100]	; 80059b0 <__kernel_rem_pio2+0x340>
 800594c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005950:	f04f 0800 	mov.w	r8, #0
 8005954:	1baf      	subs	r7, r5, r6
 8005956:	e0ea      	b.n	8005b2e <__kernel_rem_pio2+0x4be>
 8005958:	f04f 0b02 	mov.w	fp, #2
 800595c:	e759      	b.n	8005812 <__kernel_rem_pio2+0x1a2>
 800595e:	f8d8 3000 	ldr.w	r3, [r8]
 8005962:	b955      	cbnz	r5, 800597a <__kernel_rem_pio2+0x30a>
 8005964:	b123      	cbz	r3, 8005970 <__kernel_rem_pio2+0x300>
 8005966:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800596a:	f8c8 3000 	str.w	r3, [r8]
 800596e:	2301      	movs	r3, #1
 8005970:	3201      	adds	r2, #1
 8005972:	f108 0804 	add.w	r8, r8, #4
 8005976:	461d      	mov	r5, r3
 8005978:	e752      	b.n	8005820 <__kernel_rem_pio2+0x1b0>
 800597a:	1acb      	subs	r3, r1, r3
 800597c:	f8c8 3000 	str.w	r3, [r8]
 8005980:	462b      	mov	r3, r5
 8005982:	e7f5      	b.n	8005970 <__kernel_rem_pio2+0x300>
 8005984:	f3af 8000 	nop.w
	...
 8005994:	3ff00000 	.word	0x3ff00000
 8005998:	080062b0 	.word	0x080062b0
 800599c:	40200000 	.word	0x40200000
 80059a0:	3ff00000 	.word	0x3ff00000
 80059a4:	3e700000 	.word	0x3e700000
 80059a8:	41700000 	.word	0x41700000
 80059ac:	3fe00000 	.word	0x3fe00000
 80059b0:	08006270 	.word	0x08006270
 80059b4:	1e62      	subs	r2, r4, #1
 80059b6:	ab0e      	add	r3, sp, #56	; 0x38
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80059c0:	a90e      	add	r1, sp, #56	; 0x38
 80059c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80059c6:	e739      	b.n	800583c <__kernel_rem_pio2+0x1cc>
 80059c8:	1e62      	subs	r2, r4, #1
 80059ca:	ab0e      	add	r3, sp, #56	; 0x38
 80059cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80059d4:	e7f4      	b.n	80059c0 <__kernel_rem_pio2+0x350>
 80059d6:	a90e      	add	r1, sp, #56	; 0x38
 80059d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80059dc:	3b01      	subs	r3, #1
 80059de:	430a      	orrs	r2, r1
 80059e0:	e789      	b.n	80058f6 <__kernel_rem_pio2+0x286>
 80059e2:	3301      	adds	r3, #1
 80059e4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80059e8:	2900      	cmp	r1, #0
 80059ea:	d0fa      	beq.n	80059e2 <__kernel_rem_pio2+0x372>
 80059ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80059f2:	446a      	add	r2, sp
 80059f4:	3a98      	subs	r2, #152	; 0x98
 80059f6:	920a      	str	r2, [sp, #40]	; 0x28
 80059f8:	9a08      	ldr	r2, [sp, #32]
 80059fa:	18e3      	adds	r3, r4, r3
 80059fc:	18a5      	adds	r5, r4, r2
 80059fe:	aa22      	add	r2, sp, #136	; 0x88
 8005a00:	f104 0801 	add.w	r8, r4, #1
 8005a04:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005a08:	9304      	str	r3, [sp, #16]
 8005a0a:	9b04      	ldr	r3, [sp, #16]
 8005a0c:	4543      	cmp	r3, r8
 8005a0e:	da04      	bge.n	8005a1a <__kernel_rem_pio2+0x3aa>
 8005a10:	461c      	mov	r4, r3
 8005a12:	e6a3      	b.n	800575c <__kernel_rem_pio2+0xec>
 8005a14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a16:	2301      	movs	r3, #1
 8005a18:	e7e4      	b.n	80059e4 <__kernel_rem_pio2+0x374>
 8005a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a1c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005a20:	f7fa fe56 	bl	80006d0 <__aeabi_i2d>
 8005a24:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a2a:	46ab      	mov	fp, r5
 8005a2c:	461c      	mov	r4, r3
 8005a2e:	f04f 0900 	mov.w	r9, #0
 8005a32:	2600      	movs	r6, #0
 8005a34:	2700      	movs	r7, #0
 8005a36:	9b06      	ldr	r3, [sp, #24]
 8005a38:	4599      	cmp	r9, r3
 8005a3a:	dd06      	ble.n	8005a4a <__kernel_rem_pio2+0x3da>
 8005a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a3e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005a42:	f108 0801 	add.w	r8, r8, #1
 8005a46:	930a      	str	r3, [sp, #40]	; 0x28
 8005a48:	e7df      	b.n	8005a0a <__kernel_rem_pio2+0x39a>
 8005a4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005a4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005a52:	f7fa fbc1 	bl	80001d8 <__aeabi_dmul>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	4639      	mov	r1, r7
 8005a5e:	f7fa fceb 	bl	8000438 <__adddf3>
 8005a62:	f109 0901 	add.w	r9, r9, #1
 8005a66:	4606      	mov	r6, r0
 8005a68:	460f      	mov	r7, r1
 8005a6a:	e7e4      	b.n	8005a36 <__kernel_rem_pio2+0x3c6>
 8005a6c:	3d01      	subs	r5, #1
 8005a6e:	e748      	b.n	8005902 <__kernel_rem_pio2+0x292>
 8005a70:	ec47 6b10 	vmov	d0, r6, r7
 8005a74:	f1ca 0000 	rsb	r0, sl, #0
 8005a78:	f000 fa92 	bl	8005fa0 <scalbn>
 8005a7c:	ec57 6b10 	vmov	r6, r7, d0
 8005a80:	4ba0      	ldr	r3, [pc, #640]	; (8005d04 <__kernel_rem_pio2+0x694>)
 8005a82:	ee10 0a10 	vmov	r0, s0
 8005a86:	2200      	movs	r2, #0
 8005a88:	4639      	mov	r1, r7
 8005a8a:	f7fa feff 	bl	800088c <__aeabi_dcmpge>
 8005a8e:	b1f8      	cbz	r0, 8005ad0 <__kernel_rem_pio2+0x460>
 8005a90:	4b9d      	ldr	r3, [pc, #628]	; (8005d08 <__kernel_rem_pio2+0x698>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	4630      	mov	r0, r6
 8005a96:	4639      	mov	r1, r7
 8005a98:	f7fa fb9e 	bl	80001d8 <__aeabi_dmul>
 8005a9c:	f7fa ff0a 	bl	80008b4 <__aeabi_d2iz>
 8005aa0:	4680      	mov	r8, r0
 8005aa2:	f7fa fe15 	bl	80006d0 <__aeabi_i2d>
 8005aa6:	4b97      	ldr	r3, [pc, #604]	; (8005d04 <__kernel_rem_pio2+0x694>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f7fa fb95 	bl	80001d8 <__aeabi_dmul>
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	4639      	mov	r1, r7
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f7fa fcbd 	bl	8000434 <__aeabi_dsub>
 8005aba:	f7fa fefb 	bl	80008b4 <__aeabi_d2iz>
 8005abe:	1c65      	adds	r5, r4, #1
 8005ac0:	ab0e      	add	r3, sp, #56	; 0x38
 8005ac2:	f10a 0a18 	add.w	sl, sl, #24
 8005ac6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005aca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005ace:	e720      	b.n	8005912 <__kernel_rem_pio2+0x2a2>
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	f7fa feee 	bl	80008b4 <__aeabi_d2iz>
 8005ad8:	ab0e      	add	r3, sp, #56	; 0x38
 8005ada:	4625      	mov	r5, r4
 8005adc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005ae0:	e717      	b.n	8005912 <__kernel_rem_pio2+0x2a2>
 8005ae2:	ab0e      	add	r3, sp, #56	; 0x38
 8005ae4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005ae8:	f7fa fdf2 	bl	80006d0 <__aeabi_i2d>
 8005aec:	4632      	mov	r2, r6
 8005aee:	463b      	mov	r3, r7
 8005af0:	f7fa fb72 	bl	80001d8 <__aeabi_dmul>
 8005af4:	4b84      	ldr	r3, [pc, #528]	; (8005d08 <__kernel_rem_pio2+0x698>)
 8005af6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005afa:	2200      	movs	r2, #0
 8005afc:	4630      	mov	r0, r6
 8005afe:	4639      	mov	r1, r7
 8005b00:	f7fa fb6a 	bl	80001d8 <__aeabi_dmul>
 8005b04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b08:	4606      	mov	r6, r0
 8005b0a:	460f      	mov	r7, r1
 8005b0c:	e70f      	b.n	800592e <__kernel_rem_pio2+0x2be>
 8005b0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005b12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005b16:	f7fa fb5f 	bl	80001d8 <__aeabi_dmul>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b22:	f7fa fc89 	bl	8000438 <__adddf3>
 8005b26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b2a:	f108 0801 	add.w	r8, r8, #1
 8005b2e:	9b02      	ldr	r3, [sp, #8]
 8005b30:	4598      	cmp	r8, r3
 8005b32:	dc01      	bgt.n	8005b38 <__kernel_rem_pio2+0x4c8>
 8005b34:	45b8      	cmp	r8, r7
 8005b36:	ddea      	ble.n	8005b0e <__kernel_rem_pio2+0x49e>
 8005b38:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005b3c:	ab4a      	add	r3, sp, #296	; 0x128
 8005b3e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005b42:	ed87 7b00 	vstr	d7, [r7]
 8005b46:	3e01      	subs	r6, #1
 8005b48:	e6f8      	b.n	800593c <__kernel_rem_pio2+0x2cc>
 8005b4a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	dc0b      	bgt.n	8005b68 <__kernel_rem_pio2+0x4f8>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	dc35      	bgt.n	8005bc0 <__kernel_rem_pio2+0x550>
 8005b54:	d059      	beq.n	8005c0a <__kernel_rem_pio2+0x59a>
 8005b56:	9b04      	ldr	r3, [sp, #16]
 8005b58:	f003 0007 	and.w	r0, r3, #7
 8005b5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005b60:	ecbd 8b02 	vpop	{d8}
 8005b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b68:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d1f3      	bne.n	8005b56 <__kernel_rem_pio2+0x4e6>
 8005b6e:	ab4a      	add	r3, sp, #296	; 0x128
 8005b70:	4423      	add	r3, r4
 8005b72:	9306      	str	r3, [sp, #24]
 8005b74:	461c      	mov	r4, r3
 8005b76:	469a      	mov	sl, r3
 8005b78:	9502      	str	r5, [sp, #8]
 8005b7a:	9b02      	ldr	r3, [sp, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f1aa 0a08 	sub.w	sl, sl, #8
 8005b82:	dc6b      	bgt.n	8005c5c <__kernel_rem_pio2+0x5ec>
 8005b84:	46aa      	mov	sl, r5
 8005b86:	f1ba 0f01 	cmp.w	sl, #1
 8005b8a:	f1a4 0408 	sub.w	r4, r4, #8
 8005b8e:	f300 8085 	bgt.w	8005c9c <__kernel_rem_pio2+0x62c>
 8005b92:	9c06      	ldr	r4, [sp, #24]
 8005b94:	2000      	movs	r0, #0
 8005b96:	3408      	adds	r4, #8
 8005b98:	2100      	movs	r1, #0
 8005b9a:	2d01      	cmp	r5, #1
 8005b9c:	f300 809d 	bgt.w	8005cda <__kernel_rem_pio2+0x66a>
 8005ba0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005ba4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005ba8:	f1bb 0f00 	cmp.w	fp, #0
 8005bac:	f040 809b 	bne.w	8005ce6 <__kernel_rem_pio2+0x676>
 8005bb0:	9b01      	ldr	r3, [sp, #4]
 8005bb2:	e9c3 5600 	strd	r5, r6, [r3]
 8005bb6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005bba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005bbe:	e7ca      	b.n	8005b56 <__kernel_rem_pio2+0x4e6>
 8005bc0:	3408      	adds	r4, #8
 8005bc2:	ab4a      	add	r3, sp, #296	; 0x128
 8005bc4:	441c      	add	r4, r3
 8005bc6:	462e      	mov	r6, r5
 8005bc8:	2000      	movs	r0, #0
 8005bca:	2100      	movs	r1, #0
 8005bcc:	2e00      	cmp	r6, #0
 8005bce:	da36      	bge.n	8005c3e <__kernel_rem_pio2+0x5ce>
 8005bd0:	f1bb 0f00 	cmp.w	fp, #0
 8005bd4:	d039      	beq.n	8005c4a <__kernel_rem_pio2+0x5da>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bdc:	9c01      	ldr	r4, [sp, #4]
 8005bde:	e9c4 2300 	strd	r2, r3, [r4]
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005bea:	f7fa fc23 	bl	8000434 <__aeabi_dsub>
 8005bee:	ae4c      	add	r6, sp, #304	; 0x130
 8005bf0:	2401      	movs	r4, #1
 8005bf2:	42a5      	cmp	r5, r4
 8005bf4:	da2c      	bge.n	8005c50 <__kernel_rem_pio2+0x5e0>
 8005bf6:	f1bb 0f00 	cmp.w	fp, #0
 8005bfa:	d002      	beq.n	8005c02 <__kernel_rem_pio2+0x592>
 8005bfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c00:	4619      	mov	r1, r3
 8005c02:	9b01      	ldr	r3, [sp, #4]
 8005c04:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005c08:	e7a5      	b.n	8005b56 <__kernel_rem_pio2+0x4e6>
 8005c0a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005c0e:	eb0d 0403 	add.w	r4, sp, r3
 8005c12:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005c16:	2000      	movs	r0, #0
 8005c18:	2100      	movs	r1, #0
 8005c1a:	2d00      	cmp	r5, #0
 8005c1c:	da09      	bge.n	8005c32 <__kernel_rem_pio2+0x5c2>
 8005c1e:	f1bb 0f00 	cmp.w	fp, #0
 8005c22:	d002      	beq.n	8005c2a <__kernel_rem_pio2+0x5ba>
 8005c24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c28:	4619      	mov	r1, r3
 8005c2a:	9b01      	ldr	r3, [sp, #4]
 8005c2c:	e9c3 0100 	strd	r0, r1, [r3]
 8005c30:	e791      	b.n	8005b56 <__kernel_rem_pio2+0x4e6>
 8005c32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c36:	f7fa fbff 	bl	8000438 <__adddf3>
 8005c3a:	3d01      	subs	r5, #1
 8005c3c:	e7ed      	b.n	8005c1a <__kernel_rem_pio2+0x5aa>
 8005c3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c42:	f7fa fbf9 	bl	8000438 <__adddf3>
 8005c46:	3e01      	subs	r6, #1
 8005c48:	e7c0      	b.n	8005bcc <__kernel_rem_pio2+0x55c>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	e7c5      	b.n	8005bdc <__kernel_rem_pio2+0x56c>
 8005c50:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005c54:	f7fa fbf0 	bl	8000438 <__adddf3>
 8005c58:	3401      	adds	r4, #1
 8005c5a:	e7ca      	b.n	8005bf2 <__kernel_rem_pio2+0x582>
 8005c5c:	e9da 8900 	ldrd	r8, r9, [sl]
 8005c60:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005c64:	9b02      	ldr	r3, [sp, #8]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	9302      	str	r3, [sp, #8]
 8005c6a:	4632      	mov	r2, r6
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	4640      	mov	r0, r8
 8005c70:	4649      	mov	r1, r9
 8005c72:	f7fa fbe1 	bl	8000438 <__adddf3>
 8005c76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4640      	mov	r0, r8
 8005c80:	4649      	mov	r1, r9
 8005c82:	f7fa fbd7 	bl	8000434 <__aeabi_dsub>
 8005c86:	4632      	mov	r2, r6
 8005c88:	463b      	mov	r3, r7
 8005c8a:	f7fa fbd5 	bl	8000438 <__adddf3>
 8005c8e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005c92:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c96:	ed8a 7b00 	vstr	d7, [sl]
 8005c9a:	e76e      	b.n	8005b7a <__kernel_rem_pio2+0x50a>
 8005c9c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005ca0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	4632      	mov	r2, r6
 8005ca8:	463b      	mov	r3, r7
 8005caa:	4649      	mov	r1, r9
 8005cac:	f7fa fbc4 	bl	8000438 <__adddf3>
 8005cb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4640      	mov	r0, r8
 8005cba:	4649      	mov	r1, r9
 8005cbc:	f7fa fbba 	bl	8000434 <__aeabi_dsub>
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	f7fa fbb8 	bl	8000438 <__adddf3>
 8005cc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ccc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005cd0:	ed84 7b00 	vstr	d7, [r4]
 8005cd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cd8:	e755      	b.n	8005b86 <__kernel_rem_pio2+0x516>
 8005cda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005cde:	f7fa fbab 	bl	8000438 <__adddf3>
 8005ce2:	3d01      	subs	r5, #1
 8005ce4:	e759      	b.n	8005b9a <__kernel_rem_pio2+0x52a>
 8005ce6:	9b01      	ldr	r3, [sp, #4]
 8005ce8:	9a01      	ldr	r2, [sp, #4]
 8005cea:	601d      	str	r5, [r3, #0]
 8005cec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005cf0:	605c      	str	r4, [r3, #4]
 8005cf2:	609f      	str	r7, [r3, #8]
 8005cf4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005cf8:	60d3      	str	r3, [r2, #12]
 8005cfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cfe:	6110      	str	r0, [r2, #16]
 8005d00:	6153      	str	r3, [r2, #20]
 8005d02:	e728      	b.n	8005b56 <__kernel_rem_pio2+0x4e6>
 8005d04:	41700000 	.word	0x41700000
 8005d08:	3e700000 	.word	0x3e700000
 8005d0c:	00000000 	.word	0x00000000

08005d10 <__kernel_sin>:
 8005d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	ed2d 8b04 	vpush	{d8-d9}
 8005d18:	eeb0 8a41 	vmov.f32	s16, s2
 8005d1c:	eef0 8a61 	vmov.f32	s17, s3
 8005d20:	ec55 4b10 	vmov	r4, r5, d0
 8005d24:	b083      	sub	sp, #12
 8005d26:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d2a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005d2e:	9001      	str	r0, [sp, #4]
 8005d30:	da06      	bge.n	8005d40 <__kernel_sin+0x30>
 8005d32:	ee10 0a10 	vmov	r0, s0
 8005d36:	4629      	mov	r1, r5
 8005d38:	f7fa fdbc 	bl	80008b4 <__aeabi_d2iz>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d051      	beq.n	8005de4 <__kernel_sin+0xd4>
 8005d40:	4622      	mov	r2, r4
 8005d42:	462b      	mov	r3, r5
 8005d44:	4620      	mov	r0, r4
 8005d46:	4629      	mov	r1, r5
 8005d48:	f7fa fa46 	bl	80001d8 <__aeabi_dmul>
 8005d4c:	4682      	mov	sl, r0
 8005d4e:	468b      	mov	fp, r1
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4620      	mov	r0, r4
 8005d56:	4629      	mov	r1, r5
 8005d58:	f7fa fa3e 	bl	80001d8 <__aeabi_dmul>
 8005d5c:	a341      	add	r3, pc, #260	; (adr r3, 8005e64 <__kernel_sin+0x154>)
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	4680      	mov	r8, r0
 8005d64:	4689      	mov	r9, r1
 8005d66:	4650      	mov	r0, sl
 8005d68:	4659      	mov	r1, fp
 8005d6a:	f7fa fa35 	bl	80001d8 <__aeabi_dmul>
 8005d6e:	a33f      	add	r3, pc, #252	; (adr r3, 8005e6c <__kernel_sin+0x15c>)
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	f7fa fb5e 	bl	8000434 <__aeabi_dsub>
 8005d78:	4652      	mov	r2, sl
 8005d7a:	465b      	mov	r3, fp
 8005d7c:	f7fa fa2c 	bl	80001d8 <__aeabi_dmul>
 8005d80:	a33c      	add	r3, pc, #240	; (adr r3, 8005e74 <__kernel_sin+0x164>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f7fa fb57 	bl	8000438 <__adddf3>
 8005d8a:	4652      	mov	r2, sl
 8005d8c:	465b      	mov	r3, fp
 8005d8e:	f7fa fa23 	bl	80001d8 <__aeabi_dmul>
 8005d92:	a33a      	add	r3, pc, #232	; (adr r3, 8005e7c <__kernel_sin+0x16c>)
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f7fa fb4c 	bl	8000434 <__aeabi_dsub>
 8005d9c:	4652      	mov	r2, sl
 8005d9e:	465b      	mov	r3, fp
 8005da0:	f7fa fa1a 	bl	80001d8 <__aeabi_dmul>
 8005da4:	a337      	add	r3, pc, #220	; (adr r3, 8005e84 <__kernel_sin+0x174>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f7fa fb45 	bl	8000438 <__adddf3>
 8005dae:	9b01      	ldr	r3, [sp, #4]
 8005db0:	4606      	mov	r6, r0
 8005db2:	460f      	mov	r7, r1
 8005db4:	b9eb      	cbnz	r3, 8005df2 <__kernel_sin+0xe2>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4650      	mov	r0, sl
 8005dbc:	4659      	mov	r1, fp
 8005dbe:	f7fa fa0b 	bl	80001d8 <__aeabi_dmul>
 8005dc2:	a325      	add	r3, pc, #148	; (adr r3, 8005e58 <__kernel_sin+0x148>)
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	f7fa fb34 	bl	8000434 <__aeabi_dsub>
 8005dcc:	4642      	mov	r2, r8
 8005dce:	464b      	mov	r3, r9
 8005dd0:	f7fa fa02 	bl	80001d8 <__aeabi_dmul>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4620      	mov	r0, r4
 8005dda:	4629      	mov	r1, r5
 8005ddc:	f7fa fb2c 	bl	8000438 <__adddf3>
 8005de0:	4604      	mov	r4, r0
 8005de2:	460d      	mov	r5, r1
 8005de4:	ec45 4b10 	vmov	d0, r4, r5
 8005de8:	b003      	add	sp, #12
 8005dea:	ecbd 8b04 	vpop	{d8-d9}
 8005dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df2:	4b1b      	ldr	r3, [pc, #108]	; (8005e60 <__kernel_sin+0x150>)
 8005df4:	ec51 0b18 	vmov	r0, r1, d8
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f7fa f9ed 	bl	80001d8 <__aeabi_dmul>
 8005dfe:	4632      	mov	r2, r6
 8005e00:	ec41 0b19 	vmov	d9, r0, r1
 8005e04:	463b      	mov	r3, r7
 8005e06:	4640      	mov	r0, r8
 8005e08:	4649      	mov	r1, r9
 8005e0a:	f7fa f9e5 	bl	80001d8 <__aeabi_dmul>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	ec51 0b19 	vmov	r0, r1, d9
 8005e16:	f7fa fb0d 	bl	8000434 <__aeabi_dsub>
 8005e1a:	4652      	mov	r2, sl
 8005e1c:	465b      	mov	r3, fp
 8005e1e:	f7fa f9db 	bl	80001d8 <__aeabi_dmul>
 8005e22:	ec53 2b18 	vmov	r2, r3, d8
 8005e26:	f7fa fb05 	bl	8000434 <__aeabi_dsub>
 8005e2a:	a30b      	add	r3, pc, #44	; (adr r3, 8005e58 <__kernel_sin+0x148>)
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	4606      	mov	r6, r0
 8005e32:	460f      	mov	r7, r1
 8005e34:	4640      	mov	r0, r8
 8005e36:	4649      	mov	r1, r9
 8005e38:	f7fa f9ce 	bl	80001d8 <__aeabi_dmul>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4630      	mov	r0, r6
 8005e42:	4639      	mov	r1, r7
 8005e44:	f7fa faf8 	bl	8000438 <__adddf3>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	4629      	mov	r1, r5
 8005e50:	f7fa faf0 	bl	8000434 <__aeabi_dsub>
 8005e54:	e7c4      	b.n	8005de0 <__kernel_sin+0xd0>
 8005e56:	bf00      	nop
 8005e58:	55555549 	.word	0x55555549
 8005e5c:	3fc55555 	.word	0x3fc55555
 8005e60:	3fe00000 	.word	0x3fe00000
 8005e64:	5acfd57c 	.word	0x5acfd57c
 8005e68:	3de5d93a 	.word	0x3de5d93a
 8005e6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005e70:	3e5ae5e6 	.word	0x3e5ae5e6
 8005e74:	57b1fe7d 	.word	0x57b1fe7d
 8005e78:	3ec71de3 	.word	0x3ec71de3
 8005e7c:	19c161d5 	.word	0x19c161d5
 8005e80:	3f2a01a0 	.word	0x3f2a01a0
 8005e84:	1110f8a6 	.word	0x1110f8a6
 8005e88:	3f811111 	.word	0x3f811111

08005e8c <fabs>:
 8005e8c:	ec51 0b10 	vmov	r0, r1, d0
 8005e90:	ee10 2a10 	vmov	r2, s0
 8005e94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e98:	ec43 2b10 	vmov	d0, r2, r3
 8005e9c:	4770      	bx	lr
	...

08005ea0 <floor>:
 8005ea0:	ec51 0b10 	vmov	r0, r1, d0
 8005ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005eac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005eb0:	2e13      	cmp	r6, #19
 8005eb2:	ee10 5a10 	vmov	r5, s0
 8005eb6:	ee10 8a10 	vmov	r8, s0
 8005eba:	460c      	mov	r4, r1
 8005ebc:	dc32      	bgt.n	8005f24 <floor+0x84>
 8005ebe:	2e00      	cmp	r6, #0
 8005ec0:	da14      	bge.n	8005eec <floor+0x4c>
 8005ec2:	a333      	add	r3, pc, #204	; (adr r3, 8005f90 <floor+0xf0>)
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	f7fa fab6 	bl	8000438 <__adddf3>
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f7fa fce6 	bl	80008a0 <__aeabi_dcmpgt>
 8005ed4:	b138      	cbz	r0, 8005ee6 <floor+0x46>
 8005ed6:	2c00      	cmp	r4, #0
 8005ed8:	da57      	bge.n	8005f8a <floor+0xea>
 8005eda:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005ede:	431d      	orrs	r5, r3
 8005ee0:	d001      	beq.n	8005ee6 <floor+0x46>
 8005ee2:	4c2d      	ldr	r4, [pc, #180]	; (8005f98 <floor+0xf8>)
 8005ee4:	2500      	movs	r5, #0
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	4628      	mov	r0, r5
 8005eea:	e025      	b.n	8005f38 <floor+0x98>
 8005eec:	4f2b      	ldr	r7, [pc, #172]	; (8005f9c <floor+0xfc>)
 8005eee:	4137      	asrs	r7, r6
 8005ef0:	ea01 0307 	and.w	r3, r1, r7
 8005ef4:	4303      	orrs	r3, r0
 8005ef6:	d01f      	beq.n	8005f38 <floor+0x98>
 8005ef8:	a325      	add	r3, pc, #148	; (adr r3, 8005f90 <floor+0xf0>)
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	f7fa fa9b 	bl	8000438 <__adddf3>
 8005f02:	2200      	movs	r2, #0
 8005f04:	2300      	movs	r3, #0
 8005f06:	f7fa fccb 	bl	80008a0 <__aeabi_dcmpgt>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d0eb      	beq.n	8005ee6 <floor+0x46>
 8005f0e:	2c00      	cmp	r4, #0
 8005f10:	bfbe      	ittt	lt
 8005f12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005f16:	fa43 f606 	asrlt.w	r6, r3, r6
 8005f1a:	19a4      	addlt	r4, r4, r6
 8005f1c:	ea24 0407 	bic.w	r4, r4, r7
 8005f20:	2500      	movs	r5, #0
 8005f22:	e7e0      	b.n	8005ee6 <floor+0x46>
 8005f24:	2e33      	cmp	r6, #51	; 0x33
 8005f26:	dd0b      	ble.n	8005f40 <floor+0xa0>
 8005f28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005f2c:	d104      	bne.n	8005f38 <floor+0x98>
 8005f2e:	ee10 2a10 	vmov	r2, s0
 8005f32:	460b      	mov	r3, r1
 8005f34:	f7fa fa80 	bl	8000438 <__adddf3>
 8005f38:	ec41 0b10 	vmov	d0, r0, r1
 8005f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f40:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005f44:	f04f 33ff 	mov.w	r3, #4294967295
 8005f48:	fa23 f707 	lsr.w	r7, r3, r7
 8005f4c:	4207      	tst	r7, r0
 8005f4e:	d0f3      	beq.n	8005f38 <floor+0x98>
 8005f50:	a30f      	add	r3, pc, #60	; (adr r3, 8005f90 <floor+0xf0>)
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	f7fa fa6f 	bl	8000438 <__adddf3>
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f7fa fc9f 	bl	80008a0 <__aeabi_dcmpgt>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d0bf      	beq.n	8005ee6 <floor+0x46>
 8005f66:	2c00      	cmp	r4, #0
 8005f68:	da02      	bge.n	8005f70 <floor+0xd0>
 8005f6a:	2e14      	cmp	r6, #20
 8005f6c:	d103      	bne.n	8005f76 <floor+0xd6>
 8005f6e:	3401      	adds	r4, #1
 8005f70:	ea25 0507 	bic.w	r5, r5, r7
 8005f74:	e7b7      	b.n	8005ee6 <floor+0x46>
 8005f76:	2301      	movs	r3, #1
 8005f78:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005f7c:	fa03 f606 	lsl.w	r6, r3, r6
 8005f80:	4435      	add	r5, r6
 8005f82:	4545      	cmp	r5, r8
 8005f84:	bf38      	it	cc
 8005f86:	18e4      	addcc	r4, r4, r3
 8005f88:	e7f2      	b.n	8005f70 <floor+0xd0>
 8005f8a:	2500      	movs	r5, #0
 8005f8c:	462c      	mov	r4, r5
 8005f8e:	e7aa      	b.n	8005ee6 <floor+0x46>
 8005f90:	8800759c 	.word	0x8800759c
 8005f94:	7e37e43c 	.word	0x7e37e43c
 8005f98:	bff00000 	.word	0xbff00000
 8005f9c:	000fffff 	.word	0x000fffff

08005fa0 <scalbn>:
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	ec55 4b10 	vmov	r4, r5, d0
 8005fa6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005faa:	4606      	mov	r6, r0
 8005fac:	462b      	mov	r3, r5
 8005fae:	b99a      	cbnz	r2, 8005fd8 <scalbn+0x38>
 8005fb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005fb4:	4323      	orrs	r3, r4
 8005fb6:	d036      	beq.n	8006026 <scalbn+0x86>
 8005fb8:	4b39      	ldr	r3, [pc, #228]	; (80060a0 <scalbn+0x100>)
 8005fba:	4629      	mov	r1, r5
 8005fbc:	ee10 0a10 	vmov	r0, s0
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f7fa f909 	bl	80001d8 <__aeabi_dmul>
 8005fc6:	4b37      	ldr	r3, [pc, #220]	; (80060a4 <scalbn+0x104>)
 8005fc8:	429e      	cmp	r6, r3
 8005fca:	4604      	mov	r4, r0
 8005fcc:	460d      	mov	r5, r1
 8005fce:	da10      	bge.n	8005ff2 <scalbn+0x52>
 8005fd0:	a32b      	add	r3, pc, #172	; (adr r3, 8006080 <scalbn+0xe0>)
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	e03a      	b.n	800604e <scalbn+0xae>
 8005fd8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005fdc:	428a      	cmp	r2, r1
 8005fde:	d10c      	bne.n	8005ffa <scalbn+0x5a>
 8005fe0:	ee10 2a10 	vmov	r2, s0
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	f7fa fa26 	bl	8000438 <__adddf3>
 8005fec:	4604      	mov	r4, r0
 8005fee:	460d      	mov	r5, r1
 8005ff0:	e019      	b.n	8006026 <scalbn+0x86>
 8005ff2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	3a36      	subs	r2, #54	; 0x36
 8005ffa:	4432      	add	r2, r6
 8005ffc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006000:	428a      	cmp	r2, r1
 8006002:	dd08      	ble.n	8006016 <scalbn+0x76>
 8006004:	2d00      	cmp	r5, #0
 8006006:	a120      	add	r1, pc, #128	; (adr r1, 8006088 <scalbn+0xe8>)
 8006008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800600c:	da1c      	bge.n	8006048 <scalbn+0xa8>
 800600e:	a120      	add	r1, pc, #128	; (adr r1, 8006090 <scalbn+0xf0>)
 8006010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006014:	e018      	b.n	8006048 <scalbn+0xa8>
 8006016:	2a00      	cmp	r2, #0
 8006018:	dd08      	ble.n	800602c <scalbn+0x8c>
 800601a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800601e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006022:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006026:	ec45 4b10 	vmov	d0, r4, r5
 800602a:	bd70      	pop	{r4, r5, r6, pc}
 800602c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006030:	da19      	bge.n	8006066 <scalbn+0xc6>
 8006032:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006036:	429e      	cmp	r6, r3
 8006038:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800603c:	dd0a      	ble.n	8006054 <scalbn+0xb4>
 800603e:	a112      	add	r1, pc, #72	; (adr r1, 8006088 <scalbn+0xe8>)
 8006040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e2      	bne.n	800600e <scalbn+0x6e>
 8006048:	a30f      	add	r3, pc, #60	; (adr r3, 8006088 <scalbn+0xe8>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa f8c3 	bl	80001d8 <__aeabi_dmul>
 8006052:	e7cb      	b.n	8005fec <scalbn+0x4c>
 8006054:	a10a      	add	r1, pc, #40	; (adr r1, 8006080 <scalbn+0xe0>)
 8006056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0b8      	beq.n	8005fd0 <scalbn+0x30>
 800605e:	a10e      	add	r1, pc, #56	; (adr r1, 8006098 <scalbn+0xf8>)
 8006060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006064:	e7b4      	b.n	8005fd0 <scalbn+0x30>
 8006066:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800606a:	3236      	adds	r2, #54	; 0x36
 800606c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006070:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006074:	4620      	mov	r0, r4
 8006076:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <scalbn+0x108>)
 8006078:	2200      	movs	r2, #0
 800607a:	e7e8      	b.n	800604e <scalbn+0xae>
 800607c:	f3af 8000 	nop.w
 8006080:	c2f8f359 	.word	0xc2f8f359
 8006084:	01a56e1f 	.word	0x01a56e1f
 8006088:	8800759c 	.word	0x8800759c
 800608c:	7e37e43c 	.word	0x7e37e43c
 8006090:	8800759c 	.word	0x8800759c
 8006094:	fe37e43c 	.word	0xfe37e43c
 8006098:	c2f8f359 	.word	0xc2f8f359
 800609c:	81a56e1f 	.word	0x81a56e1f
 80060a0:	43500000 	.word	0x43500000
 80060a4:	ffff3cb0 	.word	0xffff3cb0
 80060a8:	3c900000 	.word	0x3c900000

080060ac <_init>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	bf00      	nop
 80060b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b2:	bc08      	pop	{r3}
 80060b4:	469e      	mov	lr, r3
 80060b6:	4770      	bx	lr

080060b8 <_fini>:
 80060b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ba:	bf00      	nop
 80060bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060be:	bc08      	pop	{r3}
 80060c0:	469e      	mov	lr, r3
 80060c2:	4770      	bx	lr
