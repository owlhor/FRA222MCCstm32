
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004180  08004180  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004188  08004188  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004188  08004188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08004190  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  200000f0  0800427c  000200f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  0800427c  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb27  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001951  00000000  00000000  0002cc43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  0002e598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  0002f138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015559  00000000  00000000  0002fc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c91e  00000000  00000000  000451a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d16  00000000  00000000  00051ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db7dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003244  00000000  00000000  000db830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000f0 	.word	0x200000f0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004150 	.word	0x08004150

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000f4 	.word	0x200000f4
 80001d4:	08004150 	.word	0x08004150

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_uldivmod>:
 8000974:	b953      	cbnz	r3, 800098c <__aeabi_uldivmod+0x18>
 8000976:	b94a      	cbnz	r2, 800098c <__aeabi_uldivmod+0x18>
 8000978:	2900      	cmp	r1, #0
 800097a:	bf08      	it	eq
 800097c:	2800      	cmpeq	r0, #0
 800097e:	bf1c      	itt	ne
 8000980:	f04f 31ff 	movne.w	r1, #4294967295
 8000984:	f04f 30ff 	movne.w	r0, #4294967295
 8000988:	f000 b974 	b.w	8000c74 <__aeabi_idiv0>
 800098c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000990:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000994:	f000 f806 	bl	80009a4 <__udivmoddi4>
 8000998:	f8dd e004 	ldr.w	lr, [sp, #4]
 800099c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009a0:	b004      	add	sp, #16
 80009a2:	4770      	bx	lr

080009a4 <__udivmoddi4>:
 80009a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a8:	9d08      	ldr	r5, [sp, #32]
 80009aa:	4604      	mov	r4, r0
 80009ac:	468e      	mov	lr, r1
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d14d      	bne.n	8000a4e <__udivmoddi4+0xaa>
 80009b2:	428a      	cmp	r2, r1
 80009b4:	4694      	mov	ip, r2
 80009b6:	d969      	bls.n	8000a8c <__udivmoddi4+0xe8>
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	b152      	cbz	r2, 80009d4 <__udivmoddi4+0x30>
 80009be:	fa01 f302 	lsl.w	r3, r1, r2
 80009c2:	f1c2 0120 	rsb	r1, r2, #32
 80009c6:	fa20 f101 	lsr.w	r1, r0, r1
 80009ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ce:	ea41 0e03 	orr.w	lr, r1, r3
 80009d2:	4094      	lsls	r4, r2
 80009d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d8:	0c21      	lsrs	r1, r4, #16
 80009da:	fbbe f6f8 	udiv	r6, lr, r8
 80009de:	fa1f f78c 	uxth.w	r7, ip
 80009e2:	fb08 e316 	mls	r3, r8, r6, lr
 80009e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009ea:	fb06 f107 	mul.w	r1, r6, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x64>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80009fa:	f080 811f 	bcs.w	8000c3c <__udivmoddi4+0x298>
 80009fe:	4299      	cmp	r1, r3
 8000a00:	f240 811c 	bls.w	8000c3c <__udivmoddi4+0x298>
 8000a04:	3e02      	subs	r6, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1a5b      	subs	r3, r3, r1
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a10:	fb08 3310 	mls	r3, r8, r0, r3
 8000a14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a18:	fb00 f707 	mul.w	r7, r0, r7
 8000a1c:	42a7      	cmp	r7, r4
 8000a1e:	d90a      	bls.n	8000a36 <__udivmoddi4+0x92>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a28:	f080 810a 	bcs.w	8000c40 <__udivmoddi4+0x29c>
 8000a2c:	42a7      	cmp	r7, r4
 8000a2e:	f240 8107 	bls.w	8000c40 <__udivmoddi4+0x29c>
 8000a32:	4464      	add	r4, ip
 8000a34:	3802      	subs	r0, #2
 8000a36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a3a:	1be4      	subs	r4, r4, r7
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	b11d      	cbz	r5, 8000a48 <__udivmoddi4+0xa4>
 8000a40:	40d4      	lsrs	r4, r2
 8000a42:	2300      	movs	r3, #0
 8000a44:	e9c5 4300 	strd	r4, r3, [r5]
 8000a48:	4631      	mov	r1, r6
 8000a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d909      	bls.n	8000a66 <__udivmoddi4+0xc2>
 8000a52:	2d00      	cmp	r5, #0
 8000a54:	f000 80ef 	beq.w	8000c36 <__udivmoddi4+0x292>
 8000a58:	2600      	movs	r6, #0
 8000a5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a5e:	4630      	mov	r0, r6
 8000a60:	4631      	mov	r1, r6
 8000a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a66:	fab3 f683 	clz	r6, r3
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	d14a      	bne.n	8000b04 <__udivmoddi4+0x160>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d302      	bcc.n	8000a78 <__udivmoddi4+0xd4>
 8000a72:	4282      	cmp	r2, r0
 8000a74:	f200 80f9 	bhi.w	8000c6a <__udivmoddi4+0x2c6>
 8000a78:	1a84      	subs	r4, r0, r2
 8000a7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a7e:	2001      	movs	r0, #1
 8000a80:	469e      	mov	lr, r3
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d0e0      	beq.n	8000a48 <__udivmoddi4+0xa4>
 8000a86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a8a:	e7dd      	b.n	8000a48 <__udivmoddi4+0xa4>
 8000a8c:	b902      	cbnz	r2, 8000a90 <__udivmoddi4+0xec>
 8000a8e:	deff      	udf	#255	; 0xff
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	f040 8092 	bne.w	8000bbe <__udivmoddi4+0x21a>
 8000a9a:	eba1 010c 	sub.w	r1, r1, ip
 8000a9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa2:	fa1f fe8c 	uxth.w	lr, ip
 8000aa6:	2601      	movs	r6, #1
 8000aa8:	0c20      	lsrs	r0, r4, #16
 8000aaa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aae:	fb07 1113 	mls	r1, r7, r3, r1
 8000ab2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab6:	fb0e f003 	mul.w	r0, lr, r3
 8000aba:	4288      	cmp	r0, r1
 8000abc:	d908      	bls.n	8000ad0 <__udivmoddi4+0x12c>
 8000abe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ac6:	d202      	bcs.n	8000ace <__udivmoddi4+0x12a>
 8000ac8:	4288      	cmp	r0, r1
 8000aca:	f200 80cb 	bhi.w	8000c64 <__udivmoddi4+0x2c0>
 8000ace:	4643      	mov	r3, r8
 8000ad0:	1a09      	subs	r1, r1, r0
 8000ad2:	b2a4      	uxth	r4, r4
 8000ad4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad8:	fb07 1110 	mls	r1, r7, r0, r1
 8000adc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ae0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ae4:	45a6      	cmp	lr, r4
 8000ae6:	d908      	bls.n	8000afa <__udivmoddi4+0x156>
 8000ae8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000af0:	d202      	bcs.n	8000af8 <__udivmoddi4+0x154>
 8000af2:	45a6      	cmp	lr, r4
 8000af4:	f200 80bb 	bhi.w	8000c6e <__udivmoddi4+0x2ca>
 8000af8:	4608      	mov	r0, r1
 8000afa:	eba4 040e 	sub.w	r4, r4, lr
 8000afe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b02:	e79c      	b.n	8000a3e <__udivmoddi4+0x9a>
 8000b04:	f1c6 0720 	rsb	r7, r6, #32
 8000b08:	40b3      	lsls	r3, r6
 8000b0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b12:	fa20 f407 	lsr.w	r4, r0, r7
 8000b16:	fa01 f306 	lsl.w	r3, r1, r6
 8000b1a:	431c      	orrs	r4, r3
 8000b1c:	40f9      	lsrs	r1, r7
 8000b1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b22:	fa00 f306 	lsl.w	r3, r0, r6
 8000b26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b2a:	0c20      	lsrs	r0, r4, #16
 8000b2c:	fa1f fe8c 	uxth.w	lr, ip
 8000b30:	fb09 1118 	mls	r1, r9, r8, r1
 8000b34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b38:	fb08 f00e 	mul.w	r0, r8, lr
 8000b3c:	4288      	cmp	r0, r1
 8000b3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b42:	d90b      	bls.n	8000b5c <__udivmoddi4+0x1b8>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b4c:	f080 8088 	bcs.w	8000c60 <__udivmoddi4+0x2bc>
 8000b50:	4288      	cmp	r0, r1
 8000b52:	f240 8085 	bls.w	8000c60 <__udivmoddi4+0x2bc>
 8000b56:	f1a8 0802 	sub.w	r8, r8, #2
 8000b5a:	4461      	add	r1, ip
 8000b5c:	1a09      	subs	r1, r1, r0
 8000b5e:	b2a4      	uxth	r4, r4
 8000b60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b64:	fb09 1110 	mls	r1, r9, r0, r1
 8000b68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b70:	458e      	cmp	lr, r1
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x1e2>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b7c:	d26c      	bcs.n	8000c58 <__udivmoddi4+0x2b4>
 8000b7e:	458e      	cmp	lr, r1
 8000b80:	d96a      	bls.n	8000c58 <__udivmoddi4+0x2b4>
 8000b82:	3802      	subs	r0, #2
 8000b84:	4461      	add	r1, ip
 8000b86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b8e:	eba1 010e 	sub.w	r1, r1, lr
 8000b92:	42a1      	cmp	r1, r4
 8000b94:	46c8      	mov	r8, r9
 8000b96:	46a6      	mov	lr, r4
 8000b98:	d356      	bcc.n	8000c48 <__udivmoddi4+0x2a4>
 8000b9a:	d053      	beq.n	8000c44 <__udivmoddi4+0x2a0>
 8000b9c:	b15d      	cbz	r5, 8000bb6 <__udivmoddi4+0x212>
 8000b9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000ba2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ba6:	fa01 f707 	lsl.w	r7, r1, r7
 8000baa:	fa22 f306 	lsr.w	r3, r2, r6
 8000bae:	40f1      	lsrs	r1, r6
 8000bb0:	431f      	orrs	r7, r3
 8000bb2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bb6:	2600      	movs	r6, #0
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	f1c2 0320 	rsb	r3, r2, #32
 8000bc2:	40d8      	lsrs	r0, r3
 8000bc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	4301      	orrs	r1, r0
 8000bd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd4:	fa1f fe8c 	uxth.w	lr, ip
 8000bd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bdc:	fb07 3610 	mls	r6, r7, r0, r3
 8000be0:	0c0b      	lsrs	r3, r1, #16
 8000be2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000be6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bea:	429e      	cmp	r6, r3
 8000bec:	fa04 f402 	lsl.w	r4, r4, r2
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x260>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bfa:	d22f      	bcs.n	8000c5c <__udivmoddi4+0x2b8>
 8000bfc:	429e      	cmp	r6, r3
 8000bfe:	d92d      	bls.n	8000c5c <__udivmoddi4+0x2b8>
 8000c00:	3802      	subs	r0, #2
 8000c02:	4463      	add	r3, ip
 8000c04:	1b9b      	subs	r3, r3, r6
 8000c06:	b289      	uxth	r1, r1
 8000c08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c14:	fb06 f30e 	mul.w	r3, r6, lr
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x28a>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c24:	d216      	bcs.n	8000c54 <__udivmoddi4+0x2b0>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d914      	bls.n	8000c54 <__udivmoddi4+0x2b0>
 8000c2a:	3e02      	subs	r6, #2
 8000c2c:	4461      	add	r1, ip
 8000c2e:	1ac9      	subs	r1, r1, r3
 8000c30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c34:	e738      	b.n	8000aa8 <__udivmoddi4+0x104>
 8000c36:	462e      	mov	r6, r5
 8000c38:	4628      	mov	r0, r5
 8000c3a:	e705      	b.n	8000a48 <__udivmoddi4+0xa4>
 8000c3c:	4606      	mov	r6, r0
 8000c3e:	e6e3      	b.n	8000a08 <__udivmoddi4+0x64>
 8000c40:	4618      	mov	r0, r3
 8000c42:	e6f8      	b.n	8000a36 <__udivmoddi4+0x92>
 8000c44:	454b      	cmp	r3, r9
 8000c46:	d2a9      	bcs.n	8000b9c <__udivmoddi4+0x1f8>
 8000c48:	ebb9 0802 	subs.w	r8, r9, r2
 8000c4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c50:	3801      	subs	r0, #1
 8000c52:	e7a3      	b.n	8000b9c <__udivmoddi4+0x1f8>
 8000c54:	4646      	mov	r6, r8
 8000c56:	e7ea      	b.n	8000c2e <__udivmoddi4+0x28a>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	e794      	b.n	8000b86 <__udivmoddi4+0x1e2>
 8000c5c:	4640      	mov	r0, r8
 8000c5e:	e7d1      	b.n	8000c04 <__udivmoddi4+0x260>
 8000c60:	46d0      	mov	r8, sl
 8000c62:	e77b      	b.n	8000b5c <__udivmoddi4+0x1b8>
 8000c64:	3b02      	subs	r3, #2
 8000c66:	4461      	add	r1, ip
 8000c68:	e732      	b.n	8000ad0 <__udivmoddi4+0x12c>
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	e709      	b.n	8000a82 <__udivmoddi4+0xde>
 8000c6e:	4464      	add	r4, ip
 8000c70:	3802      	subs	r0, #2
 8000c72:	e742      	b.n	8000afa <__udivmoddi4+0x156>

08000c74 <__aeabi_idiv0>:
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7c:	f001 fa20 	bl	80020c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c80:	f000 f828 	bl	8000cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c84:	f000 f97e 	bl	8000f84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c88:	f000 f952 	bl	8000f30 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c8c:	f000 f88a 	bl	8000da4 <MX_TIM2_Init>
  MX_TIM11_Init();
 8000c90:	f000 f92a 	bl	8000ee8 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000c94:	f000 f8da 	bl	8000e4c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim3);
 8000c98:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <main+0x4c>)
 8000c9a:	f002 fa1b 	bl	80030d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim11);
 8000c9e:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <main+0x50>)
 8000ca0:	f002 fa18 	bl	80030d4 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000ca4:	213c      	movs	r1, #60	; 0x3c
 8000ca6:	4809      	ldr	r0, [pc, #36]	; (8000ccc <main+0x54>)
 8000ca8:	f002 fb1c 	bl	80032e4 <HAL_TIM_Encoder_Start>
  	q[0]=TIM2->CNT;
 8000cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <main+0x58>)
 8000cb6:	601a      	str	r2, [r3, #0]
  	q[1]=q[0];
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <main+0x58>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <main+0x58>)
 8000cbe:	6053      	str	r3, [r2, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <main+0x48>
 8000cc2:	bf00      	nop
 8000cc4:	20000154 	.word	0x20000154
 8000cc8:	2000019c 	.word	0x2000019c
 8000ccc:	2000010c 	.word	0x2000010c
 8000cd0:	20000270 	.word	0x20000270

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b094      	sub	sp, #80	; 0x50
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	2230      	movs	r2, #48	; 0x30
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 fa2c 	bl	8004140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <SystemClock_Config+0xc8>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	4a26      	ldr	r2, [pc, #152]	; (8000d9c <SystemClock_Config+0xc8>)
 8000d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d06:	6413      	str	r3, [r2, #64]	; 0x40
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <SystemClock_Config+0xc8>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <SystemClock_Config+0xcc>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a20      	ldr	r2, [pc, #128]	; (8000da0 <SystemClock_Config+0xcc>)
 8000d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <SystemClock_Config+0xcc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d34:	2301      	movs	r3, #1
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d44:	2308      	movs	r3, #8
 8000d46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d48:	2364      	movs	r3, #100	; 0x64
 8000d4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d50:	2304      	movs	r3, #4
 8000d52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d54:	f107 0320 	add.w	r3, r7, #32
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 fcd3 	bl	8002704 <HAL_RCC_OscConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d64:	f001 f830 	bl	8001dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d68:	230f      	movs	r3, #15
 8000d6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2103      	movs	r1, #3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 ff35 	bl	8002bf4 <HAL_RCC_ClockConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d90:	f001 f81a 	bl	8001dc8 <Error_Handler>
  }
}
 8000d94:	bf00      	nop
 8000d96:	3750      	adds	r7, #80	; 0x50
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40007000 	.word	0x40007000

08000da4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	2224      	movs	r2, #36	; 0x24
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 f9c4 	bl	8004140 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_TIM2_Init+0xa4>)
 8000dc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <MX_TIM2_Init+0xa4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_TIM2_Init+0xa4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3071;
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_TIM2_Init+0xa4>)
 8000dd6:	f640 32ff 	movw	r2, #3071	; 0xbff
 8000dda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_TIM2_Init+0xa4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_TIM2_Init+0xa4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000de8:	2303      	movs	r3, #3
 8000dea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000df0:	2301      	movs	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e00:	2301      	movs	r3, #1
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4619      	mov	r1, r3
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_TIM2_Init+0xa4>)
 8000e14:	f002 f9c0 	bl	8003198 <HAL_TIM_Encoder_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e1e:	f000 ffd3 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <MX_TIM2_Init+0xa4>)
 8000e30:	f002 fe1e 	bl	8003a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000e3a:	f000 ffc5 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3730      	adds	r7, #48	; 0x30
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000010c 	.word	0x2000010c

08000e4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e60:	463b      	mov	r3, r7
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <MX_TIM3_Init+0x94>)
 8000e6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <MX_TIM3_Init+0x98>)
 8000e6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_TIM3_Init+0x94>)
 8000e70:	2209      	movs	r2, #9
 8000e72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <MX_TIM3_Init+0x94>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_TIM3_Init+0x94>)
 8000e7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <MX_TIM3_Init+0x94>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_TIM3_Init+0x94>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e8e:	4814      	ldr	r0, [pc, #80]	; (8000ee0 <MX_TIM3_Init+0x94>)
 8000e90:	f002 f8d0 	bl	8003034 <HAL_TIM_Base_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e9a:	f000 ff95 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <MX_TIM3_Init+0x94>)
 8000eac:	f002 fbb0 	bl	8003610 <HAL_TIM_ConfigClockSource>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000eb6:	f000 ff87 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <MX_TIM3_Init+0x94>)
 8000ec8:	f002 fdd2 	bl	8003a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000ed2:	f000 ff79 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000154 	.word	0x20000154
 8000ee4:	40000400 	.word	0x40000400

08000ee8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_TIM11_Init+0x40>)
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <MX_TIM11_Init+0x44>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <MX_TIM11_Init+0x40>)
 8000ef4:	2263      	movs	r2, #99	; 0x63
 8000ef6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_TIM11_Init+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_TIM11_Init+0x40>)
 8000f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f04:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_TIM11_Init+0x40>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_TIM11_Init+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_TIM11_Init+0x40>)
 8000f14:	f002 f88e 	bl	8003034 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000f1e:	f000 ff53 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000019c 	.word	0x2000019c
 8000f2c:	40014800 	.word	0x40014800

08000f30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <MX_USART2_UART_Init+0x50>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f68:	f002 fe04 	bl	8003b74 <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f72:	f000 ff29 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001e4 	.word	0x200001e4
 8000f80:	40004400 	.word	0x40004400

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <MX_GPIO_Init+0xd0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a2c      	ldr	r2, [pc, #176]	; (8001054 <MX_GPIO_Init+0xd0>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <MX_GPIO_Init+0xd0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <MX_GPIO_Init+0xd0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a25      	ldr	r2, [pc, #148]	; (8001054 <MX_GPIO_Init+0xd0>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <MX_GPIO_Init+0xd0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <MX_GPIO_Init+0xd0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a1e      	ldr	r2, [pc, #120]	; (8001054 <MX_GPIO_Init+0xd0>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <MX_GPIO_Init+0xd0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_GPIO_Init+0xd0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <MX_GPIO_Init+0xd0>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_GPIO_Init+0xd0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2120      	movs	r1, #32
 800100e:	4812      	ldr	r0, [pc, #72]	; (8001058 <MX_GPIO_Init+0xd4>)
 8001010:	f001 fb5e 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800101a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	480c      	ldr	r0, [pc, #48]	; (800105c <MX_GPIO_Init+0xd8>)
 800102c:	f001 f9cc 	bl	80023c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001030:	2320      	movs	r3, #32
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_GPIO_Init+0xd4>)
 8001048:	f001 f9be 	bl	80023c8 <HAL_GPIO_Init>

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000
 800105c:	40020800 	.word	0x40020800

08001060 <kalman_func>:

/* USER CODE BEGIN 4 */

void kalman_func(){
 8001060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001064:	b08a      	sub	sp, #40	; 0x28
 8001066:	af00      	add	r7, sp, #0
		q[0] = TIM2->CNT;
 8001068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	461a      	mov	r2, r3
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <kalman_func+0x34>)
 8001072:	601a      	str	r2, [r3, #0]
		if(q[0]-q[1]<-1000){
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <kalman_func+0x34>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <kalman_func+0x34>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001082:	da0b      	bge.n	800109c <kalman_func+0x3c>
			step+=3071;
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <kalman_func+0x38>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f603 33ff 	addw	r3, r3, #3071	; 0xbff
 800108c:	4a02      	ldr	r2, [pc, #8]	; (8001098 <kalman_func+0x38>)
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	e012      	b.n	80010b8 <kalman_func+0x58>
 8001092:	bf00      	nop
 8001094:	20000270 	.word	0x20000270
 8001098:	20000278 	.word	0x20000278
		}
		else if(q[0]-q[1]>=1000){
 800109c:	4bc4      	ldr	r3, [pc, #784]	; (80013b0 <kalman_func+0x350>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4bc3      	ldr	r3, [pc, #780]	; (80013b0 <kalman_func+0x350>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010aa:	db05      	blt.n	80010b8 <kalman_func+0x58>
			step-=3071;
 80010ac:	4bc1      	ldr	r3, [pc, #772]	; (80013b4 <kalman_func+0x354>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f6a3 33ff 	subw	r3, r3, #3071	; 0xbff
 80010b4:	4abf      	ldr	r2, [pc, #764]	; (80013b4 <kalman_func+0x354>)
 80010b6:	6013      	str	r3, [r2, #0]
		}
		pos[0] = q[0] + step;
 80010b8:	4bbd      	ldr	r3, [pc, #756]	; (80013b0 <kalman_func+0x350>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4bbd      	ldr	r3, [pc, #756]	; (80013b4 <kalman_func+0x354>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4413      	add	r3, r2
 80010c2:	4abd      	ldr	r2, [pc, #756]	; (80013b8 <kalman_func+0x358>)
 80010c4:	6013      	str	r3, [r2, #0]
		//predict
		X[0] = X_l[0] + X_l[1] * dt + 0.5 * X_l[2] * dt * dt;
 80010c6:	4bbd      	ldr	r3, [pc, #756]	; (80013bc <kalman_func+0x35c>)
 80010c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80010cc:	4bbb      	ldr	r3, [pc, #748]	; (80013bc <kalman_func+0x35c>)
 80010ce:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80010d2:	4bbb      	ldr	r3, [pc, #748]	; (80013c0 <kalman_func+0x360>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f9e3 	bl	80004a0 <__aeabi_f2d>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4640      	mov	r0, r8
 80010e0:	4649      	mov	r1, r9
 80010e2:	f7ff fa35 	bl	8000550 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4620      	mov	r0, r4
 80010ec:	4629      	mov	r1, r5
 80010ee:	f7ff f879 	bl	80001e4 <__adddf3>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4614      	mov	r4, r2
 80010f8:	461d      	mov	r5, r3
 80010fa:	4bb0      	ldr	r3, [pc, #704]	; (80013bc <kalman_func+0x35c>)
 80010fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4baf      	ldr	r3, [pc, #700]	; (80013c4 <kalman_func+0x364>)
 8001106:	f7ff fa23 	bl	8000550 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4690      	mov	r8, r2
 8001110:	4699      	mov	r9, r3
 8001112:	4bab      	ldr	r3, [pc, #684]	; (80013c0 <kalman_func+0x360>)
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f9c3 	bl	80004a0 <__aeabi_f2d>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4640      	mov	r0, r8
 8001120:	4649      	mov	r1, r9
 8001122:	f7ff fa15 	bl	8000550 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4690      	mov	r8, r2
 800112c:	4699      	mov	r9, r3
 800112e:	4ba4      	ldr	r3, [pc, #656]	; (80013c0 <kalman_func+0x360>)
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f9b5 	bl	80004a0 <__aeabi_f2d>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4640      	mov	r0, r8
 800113c:	4649      	mov	r1, r9
 800113e:	f7ff fa07 	bl	8000550 <__aeabi_dmul>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4620      	mov	r0, r4
 8001148:	4629      	mov	r1, r5
 800114a:	f7ff f84b 	bl	80001e4 <__adddf3>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	499d      	ldr	r1, [pc, #628]	; (80013c8 <kalman_func+0x368>)
 8001154:	e9c1 2300 	strd	r2, r3, [r1]
		X[1] = X_l[1] + X_l[2] * dt;
 8001158:	4b98      	ldr	r3, [pc, #608]	; (80013bc <kalman_func+0x35c>)
 800115a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800115e:	4b97      	ldr	r3, [pc, #604]	; (80013bc <kalman_func+0x35c>)
 8001160:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001164:	4b96      	ldr	r3, [pc, #600]	; (80013c0 <kalman_func+0x360>)
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f99a 	bl	80004a0 <__aeabi_f2d>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4640      	mov	r0, r8
 8001172:	4649      	mov	r1, r9
 8001174:	f7ff f9ec 	bl	8000550 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4620      	mov	r0, r4
 800117e:	4629      	mov	r1, r5
 8001180:	f7ff f830 	bl	80001e4 <__adddf3>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	498f      	ldr	r1, [pc, #572]	; (80013c8 <kalman_func+0x368>)
 800118a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		X[2] = X_l[2];
 800118e:	4b8b      	ldr	r3, [pc, #556]	; (80013bc <kalman_func+0x35c>)
 8001190:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001194:	498c      	ldr	r1, [pc, #560]	; (80013c8 <kalman_func+0x368>)
 8001196:	e9c1 2304 	strd	r2, r3, [r1, #16]
		P[0][0] = P_l[0][0] + P_l[1][0] * dt + 0.5 * P_l[2][0] * dt * dt
 800119a:	4b8c      	ldr	r3, [pc, #560]	; (80013cc <kalman_func+0x36c>)
 800119c:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011a0:	4b8a      	ldr	r3, [pc, #552]	; (80013cc <kalman_func+0x36c>)
 80011a2:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 80011a6:	4b86      	ldr	r3, [pc, #536]	; (80013c0 <kalman_func+0x360>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f979 	bl	80004a0 <__aeabi_f2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4640      	mov	r0, r8
 80011b4:	4649      	mov	r1, r9
 80011b6:	f7ff f9cb 	bl	8000550 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4620      	mov	r0, r4
 80011c0:	4629      	mov	r1, r5
 80011c2:	f7ff f80f 	bl	80001e4 <__adddf3>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4614      	mov	r4, r2
 80011cc:	461d      	mov	r5, r3
 80011ce:	4b7f      	ldr	r3, [pc, #508]	; (80013cc <kalman_func+0x36c>)
 80011d0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	4b7a      	ldr	r3, [pc, #488]	; (80013c4 <kalman_func+0x364>)
 80011da:	f7ff f9b9 	bl	8000550 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4690      	mov	r8, r2
 80011e4:	4699      	mov	r9, r3
 80011e6:	4b76      	ldr	r3, [pc, #472]	; (80013c0 <kalman_func+0x360>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f959 	bl	80004a0 <__aeabi_f2d>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4640      	mov	r0, r8
 80011f4:	4649      	mov	r1, r9
 80011f6:	f7ff f9ab 	bl	8000550 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4690      	mov	r8, r2
 8001200:	4699      	mov	r9, r3
 8001202:	4b6f      	ldr	r3, [pc, #444]	; (80013c0 <kalman_func+0x360>)
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f94b 	bl	80004a0 <__aeabi_f2d>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4640      	mov	r0, r8
 8001210:	4649      	mov	r1, r9
 8001212:	f7ff f99d 	bl	8000550 <__aeabi_dmul>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4620      	mov	r0, r4
 800121c:	4629      	mov	r1, r5
 800121e:	f7fe ffe1 	bl	80001e4 <__adddf3>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	e9c7 2300 	strd	r2, r3, [r7]
				+ dt
						* (P_l[0][1] + P_l[1][1] * dt
 800122a:	4b65      	ldr	r3, [pc, #404]	; (80013c0 <kalman_func+0x360>)
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f937 	bl	80004a0 <__aeabi_f2d>
 8001232:	4682      	mov	sl, r0
 8001234:	468b      	mov	fp, r1
 8001236:	4b65      	ldr	r3, [pc, #404]	; (80013cc <kalman_func+0x36c>)
 8001238:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800123c:	4b63      	ldr	r3, [pc, #396]	; (80013cc <kalman_func+0x36c>)
 800123e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8001242:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <kalman_func+0x360>)
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f92b 	bl	80004a0 <__aeabi_f2d>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4640      	mov	r0, r8
 8001250:	4649      	mov	r1, r9
 8001252:	f7ff f97d 	bl	8000550 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4620      	mov	r0, r4
 800125c:	4629      	mov	r1, r5
 800125e:	f7fe ffc1 	bl	80001e4 <__adddf3>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4614      	mov	r4, r2
 8001268:	461d      	mov	r5, r3
								+ 0.5 * P_l[2][1] * dt * dt)
 800126a:	4b58      	ldr	r3, [pc, #352]	; (80013cc <kalman_func+0x36c>)
 800126c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	4b53      	ldr	r3, [pc, #332]	; (80013c4 <kalman_func+0x364>)
 8001276:	f7ff f96b 	bl	8000550 <__aeabi_dmul>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4690      	mov	r8, r2
 8001280:	4699      	mov	r9, r3
 8001282:	4b4f      	ldr	r3, [pc, #316]	; (80013c0 <kalman_func+0x360>)
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f90b 	bl	80004a0 <__aeabi_f2d>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4640      	mov	r0, r8
 8001290:	4649      	mov	r1, r9
 8001292:	f7ff f95d 	bl	8000550 <__aeabi_dmul>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4690      	mov	r8, r2
 800129c:	4699      	mov	r9, r3
 800129e:	4b48      	ldr	r3, [pc, #288]	; (80013c0 <kalman_func+0x360>)
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f8fd 	bl	80004a0 <__aeabi_f2d>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4640      	mov	r0, r8
 80012ac:	4649      	mov	r1, r9
 80012ae:	f7ff f94f 	bl	8000550 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4620      	mov	r0, r4
 80012b8:	4629      	mov	r1, r5
 80012ba:	f7fe ff93 	bl	80001e4 <__adddf3>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
						* (P_l[0][1] + P_l[1][1] * dt
 80012c2:	4650      	mov	r0, sl
 80012c4:	4659      	mov	r1, fp
 80012c6:	f7ff f943 	bl	8000550 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
				+ dt
 80012ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012d2:	f7fe ff87 	bl	80001e4 <__adddf3>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4692      	mov	sl, r2
 80012dc:	469b      	mov	fp, r3
				+ 0.5 * dt * dt
 80012de:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <kalman_func+0x360>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f8dd 	bl	80004a0 <__aeabi_f2d>
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <kalman_func+0x364>)
 80012ec:	f7ff f930 	bl	8000550 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <kalman_func+0x360>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f8d0 	bl	80004a0 <__aeabi_f2d>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4620      	mov	r0, r4
 8001306:	4629      	mov	r1, r5
 8001308:	f7ff f922 	bl	8000550 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	e9c7 2300 	strd	r2, r3, [r7]
						* (P_l[0][2] + P_l[1][2] * dt
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <kalman_func+0x36c>)
 8001316:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800131a:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <kalman_func+0x36c>)
 800131c:	e9d3 890a 	ldrd	r8, r9, [r3, #40]	; 0x28
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <kalman_func+0x360>)
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f8bc 	bl	80004a0 <__aeabi_f2d>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4640      	mov	r0, r8
 800132e:	4649      	mov	r1, r9
 8001330:	f7ff f90e 	bl	8000550 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ff52 	bl	80001e4 <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4614      	mov	r4, r2
 8001346:	461d      	mov	r5, r3
								+ 0.5 * P_l[2][2] * dt * dt) + Q[0][0];
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <kalman_func+0x36c>)
 800134a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <kalman_func+0x364>)
 8001354:	f7ff f8fc 	bl	8000550 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4690      	mov	r8, r2
 800135e:	4699      	mov	r9, r3
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <kalman_func+0x360>)
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f89c 	bl	80004a0 <__aeabi_f2d>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4640      	mov	r0, r8
 800136e:	4649      	mov	r1, r9
 8001370:	f7ff f8ee 	bl	8000550 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4690      	mov	r8, r2
 800137a:	4699      	mov	r9, r3
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <kalman_func+0x360>)
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f88e 	bl	80004a0 <__aeabi_f2d>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4640      	mov	r0, r8
 800138a:	4649      	mov	r1, r9
 800138c:	f7ff f8e0 	bl	8000550 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4620      	mov	r0, r4
 8001396:	4629      	mov	r1, r5
 8001398:	f7fe ff24 	bl	80001e4 <__adddf3>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
						* (P_l[0][2] + P_l[1][2] * dt
 80013a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013a4:	f7ff f8d4 	bl	8000550 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
				+ 0.5 * dt * dt
 80013ac:	4650      	mov	r0, sl
 80013ae:	e00f      	b.n	80013d0 <kalman_func+0x370>
 80013b0:	20000270 	.word	0x20000270
 80013b4:	20000278 	.word	0x20000278
 80013b8:	2000027c 	.word	0x2000027c
 80013bc:	20000248 	.word	0x20000248
 80013c0:	3a83126f 	.word	0x3a83126f
 80013c4:	3fe00000 	.word	0x3fe00000
 80013c8:	20000230 	.word	0x20000230
 80013cc:	20000048 	.word	0x20000048
 80013d0:	4659      	mov	r1, fp
 80013d2:	f7fe ff07 	bl	80001e4 <__adddf3>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
								+ 0.5 * P_l[2][2] * dt * dt) + Q[0][0];
 80013de:	4bc5      	ldr	r3, [pc, #788]	; (80016f4 <kalman_func+0x694>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7fe fefe 	bl	80001e4 <__adddf3>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
		P[0][0] = P_l[0][0] + P_l[1][0] * dt + 0.5 * P_l[2][0] * dt * dt
 80013ec:	49c2      	ldr	r1, [pc, #776]	; (80016f8 <kalman_func+0x698>)
 80013ee:	e9c1 2300 	strd	r2, r3, [r1]
		P[1][0] = P_l[1][0] + P_l[2][0] * dt
 80013f2:	4bc2      	ldr	r3, [pc, #776]	; (80016fc <kalman_func+0x69c>)
 80013f4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80013f8:	4bc0      	ldr	r3, [pc, #768]	; (80016fc <kalman_func+0x69c>)
 80013fa:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 80013fe:	4bc0      	ldr	r3, [pc, #768]	; (8001700 <kalman_func+0x6a0>)
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f84d 	bl	80004a0 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4640      	mov	r0, r8
 800140c:	4649      	mov	r1, r9
 800140e:	f7ff f89f 	bl	8000550 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4620      	mov	r0, r4
 8001418:	4629      	mov	r1, r5
 800141a:	f7fe fee3 	bl	80001e4 <__adddf3>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	e9c7 2300 	strd	r2, r3, [r7]
				+ dt * (P_l[1][1] + P_l[2][1] * dt)
 8001426:	4bb6      	ldr	r3, [pc, #728]	; (8001700 <kalman_func+0x6a0>)
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f839 	bl	80004a0 <__aeabi_f2d>
 800142e:	4682      	mov	sl, r0
 8001430:	468b      	mov	fp, r1
 8001432:	4bb2      	ldr	r3, [pc, #712]	; (80016fc <kalman_func+0x69c>)
 8001434:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001438:	4bb0      	ldr	r3, [pc, #704]	; (80016fc <kalman_func+0x69c>)
 800143a:	e9d3 890e 	ldrd	r8, r9, [r3, #56]	; 0x38
 800143e:	4bb0      	ldr	r3, [pc, #704]	; (8001700 <kalman_func+0x6a0>)
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f82d 	bl	80004a0 <__aeabi_f2d>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4640      	mov	r0, r8
 800144c:	4649      	mov	r1, r9
 800144e:	f7ff f87f 	bl	8000550 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4620      	mov	r0, r4
 8001458:	4629      	mov	r1, r5
 800145a:	f7fe fec3 	bl	80001e4 <__adddf3>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4650      	mov	r0, sl
 8001464:	4659      	mov	r1, fp
 8001466:	f7ff f873 	bl	8000550 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001472:	f7fe feb7 	bl	80001e4 <__adddf3>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4692      	mov	sl, r2
 800147c:	469b      	mov	fp, r3
				+ 0.5 * dt * dt * (P_l[1][2] + P_l[2][2] * dt) + Q[1][0];
 800147e:	4ba0      	ldr	r3, [pc, #640]	; (8001700 <kalman_func+0x6a0>)
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f80d 	bl	80004a0 <__aeabi_f2d>
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	4b9e      	ldr	r3, [pc, #632]	; (8001704 <kalman_func+0x6a4>)
 800148c:	f7ff f860 	bl	8000550 <__aeabi_dmul>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4614      	mov	r4, r2
 8001496:	461d      	mov	r5, r3
 8001498:	4b99      	ldr	r3, [pc, #612]	; (8001700 <kalman_func+0x6a0>)
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f800 	bl	80004a0 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4620      	mov	r0, r4
 80014a6:	4629      	mov	r1, r5
 80014a8:	f7ff f852 	bl	8000550 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	e9c7 2300 	strd	r2, r3, [r7]
 80014b4:	4b91      	ldr	r3, [pc, #580]	; (80016fc <kalman_func+0x69c>)
 80014b6:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80014ba:	4b90      	ldr	r3, [pc, #576]	; (80016fc <kalman_func+0x69c>)
 80014bc:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	; 0x40
 80014c0:	4b8f      	ldr	r3, [pc, #572]	; (8001700 <kalman_func+0x6a0>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ffec 	bl	80004a0 <__aeabi_f2d>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4640      	mov	r0, r8
 80014ce:	4649      	mov	r1, r9
 80014d0:	f7ff f83e 	bl	8000550 <__aeabi_dmul>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4620      	mov	r0, r4
 80014da:	4629      	mov	r1, r5
 80014dc:	f7fe fe82 	bl	80001e4 <__adddf3>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014e8:	f7ff f832 	bl	8000550 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4650      	mov	r0, sl
 80014f2:	4659      	mov	r1, fp
 80014f4:	f7fe fe76 	bl	80001e4 <__adddf3>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	4b7c      	ldr	r3, [pc, #496]	; (80016f4 <kalman_func+0x694>)
 8001502:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001506:	f7fe fe6d 	bl	80001e4 <__adddf3>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
		P[1][0] = P_l[1][0] + P_l[2][0] * dt
 800150e:	497a      	ldr	r1, [pc, #488]	; (80016f8 <kalman_func+0x698>)
 8001510:	e9c1 2306 	strd	r2, r3, [r1, #24]
		P[2][0] = P_l[2][0] + P_l[2][1] * dt + 0.5 * dt * dt * P_l[2][2]
 8001514:	4b79      	ldr	r3, [pc, #484]	; (80016fc <kalman_func+0x69c>)
 8001516:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800151a:	4b78      	ldr	r3, [pc, #480]	; (80016fc <kalman_func+0x69c>)
 800151c:	e9d3 890e 	ldrd	r8, r9, [r3, #56]	; 0x38
 8001520:	4b77      	ldr	r3, [pc, #476]	; (8001700 <kalman_func+0x6a0>)
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe ffbc 	bl	80004a0 <__aeabi_f2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4640      	mov	r0, r8
 800152e:	4649      	mov	r1, r9
 8001530:	f7ff f80e 	bl	8000550 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7fe fe52 	bl	80001e4 <__adddf3>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4614      	mov	r4, r2
 8001546:	461d      	mov	r5, r3
 8001548:	4b6d      	ldr	r3, [pc, #436]	; (8001700 <kalman_func+0x6a0>)
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ffa8 	bl	80004a0 <__aeabi_f2d>
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	4b6b      	ldr	r3, [pc, #428]	; (8001704 <kalman_func+0x6a4>)
 8001556:	f7fe fffb 	bl	8000550 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4690      	mov	r8, r2
 8001560:	4699      	mov	r9, r3
 8001562:	4b67      	ldr	r3, [pc, #412]	; (8001700 <kalman_func+0x6a0>)
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ff9b 	bl	80004a0 <__aeabi_f2d>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4640      	mov	r0, r8
 8001570:	4649      	mov	r1, r9
 8001572:	f7fe ffed 	bl	8000550 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	4b5f      	ldr	r3, [pc, #380]	; (80016fc <kalman_func+0x69c>)
 8001580:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001584:	f7fe ffe4 	bl	8000550 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4620      	mov	r0, r4
 800158e:	4629      	mov	r1, r5
 8001590:	f7fe fe28 	bl	80001e4 <__adddf3>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
				+ Q[2][0];
 800159c:	4b55      	ldr	r3, [pc, #340]	; (80016f4 <kalman_func+0x694>)
 800159e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80015a2:	f7fe fe1f 	bl	80001e4 <__adddf3>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
		P[2][0] = P_l[2][0] + P_l[2][1] * dt + 0.5 * dt * dt * P_l[2][2]
 80015aa:	4953      	ldr	r1, [pc, #332]	; (80016f8 <kalman_func+0x698>)
 80015ac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		P[0][1] = P_l[0][1] + P_l[1][1] * dt + 0.5 * dt * dt * P_l[2][1]
 80015b0:	4b52      	ldr	r3, [pc, #328]	; (80016fc <kalman_func+0x69c>)
 80015b2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80015b6:	4b51      	ldr	r3, [pc, #324]	; (80016fc <kalman_func+0x69c>)
 80015b8:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80015bc:	4b50      	ldr	r3, [pc, #320]	; (8001700 <kalman_func+0x6a0>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ff6e 	bl	80004a0 <__aeabi_f2d>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4640      	mov	r0, r8
 80015ca:	4649      	mov	r1, r9
 80015cc:	f7fe ffc0 	bl	8000550 <__aeabi_dmul>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7fe fe04 	bl	80001e4 <__adddf3>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4614      	mov	r4, r2
 80015e2:	461d      	mov	r5, r3
 80015e4:	4b46      	ldr	r3, [pc, #280]	; (8001700 <kalman_func+0x6a0>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ff5a 	bl	80004a0 <__aeabi_f2d>
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	4b44      	ldr	r3, [pc, #272]	; (8001704 <kalman_func+0x6a4>)
 80015f2:	f7fe ffad 	bl	8000550 <__aeabi_dmul>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4690      	mov	r8, r2
 80015fc:	4699      	mov	r9, r3
 80015fe:	4b40      	ldr	r3, [pc, #256]	; (8001700 <kalman_func+0x6a0>)
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff4d 	bl	80004a0 <__aeabi_f2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4640      	mov	r0, r8
 800160c:	4649      	mov	r1, r9
 800160e:	f7fe ff9f 	bl	8000550 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	4b38      	ldr	r3, [pc, #224]	; (80016fc <kalman_func+0x69c>)
 800161c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001620:	f7fe ff96 	bl	8000550 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4620      	mov	r0, r4
 800162a:	4629      	mov	r1, r5
 800162c:	f7fe fdda 	bl	80001e4 <__adddf3>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	e9c7 2300 	strd	r2, r3, [r7]
				+ dt
						* (P_l[0][2] + P_l[1][2] * dt
 8001638:	4b31      	ldr	r3, [pc, #196]	; (8001700 <kalman_func+0x6a0>)
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff30 	bl	80004a0 <__aeabi_f2d>
 8001640:	4682      	mov	sl, r0
 8001642:	468b      	mov	fp, r1
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <kalman_func+0x69c>)
 8001646:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800164a:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <kalman_func+0x69c>)
 800164c:	e9d3 890a 	ldrd	r8, r9, [r3, #40]	; 0x28
 8001650:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <kalman_func+0x6a0>)
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff24 	bl	80004a0 <__aeabi_f2d>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4640      	mov	r0, r8
 800165e:	4649      	mov	r1, r9
 8001660:	f7fe ff76 	bl	8000550 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4620      	mov	r0, r4
 800166a:	4629      	mov	r1, r5
 800166c:	f7fe fdba 	bl	80001e4 <__adddf3>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4614      	mov	r4, r2
 8001676:	461d      	mov	r5, r3
								+ 0.5 * dt * dt * P_l[2][2]) + Q[0][1];
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <kalman_func+0x6a0>)
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff10 	bl	80004a0 <__aeabi_f2d>
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <kalman_func+0x6a4>)
 8001686:	f7fe ff63 	bl	8000550 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4690      	mov	r8, r2
 8001690:	4699      	mov	r9, r3
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <kalman_func+0x6a0>)
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff03 	bl	80004a0 <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4640      	mov	r0, r8
 80016a0:	4649      	mov	r1, r9
 80016a2:	f7fe ff55 	bl	8000550 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <kalman_func+0x69c>)
 80016b0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80016b4:	f7fe ff4c 	bl	8000550 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4620      	mov	r0, r4
 80016be:	4629      	mov	r1, r5
 80016c0:	f7fe fd90 	bl	80001e4 <__adddf3>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
						* (P_l[0][2] + P_l[1][2] * dt
 80016c8:	4650      	mov	r0, sl
 80016ca:	4659      	mov	r1, fp
 80016cc:	f7fe ff40 	bl	8000550 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
				+ dt
 80016d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016d8:	f7fe fd84 	bl	80001e4 <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
								+ 0.5 * dt * dt * P_l[2][2]) + Q[0][1];
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <kalman_func+0x694>)
 80016e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016ea:	f7fe fd7b 	bl	80001e4 <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	e009      	b.n	8001708 <kalman_func+0x6a8>
 80016f4:	20000090 	.word	0x20000090
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000048 	.word	0x20000048
 8001700:	3a83126f 	.word	0x3a83126f
 8001704:	3fe00000 	.word	0x3fe00000
		P[0][1] = P_l[0][1] + P_l[1][1] * dt + 0.5 * dt * dt * P_l[2][1]
 8001708:	49b5      	ldr	r1, [pc, #724]	; (80019e0 <kalman_func+0x980>)
 800170a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		P[1][1] = P_l[1][1] + P_l[2][1] * dt + P_l[1][2] * dt
 800170e:	4bb5      	ldr	r3, [pc, #724]	; (80019e4 <kalman_func+0x984>)
 8001710:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001714:	4bb3      	ldr	r3, [pc, #716]	; (80019e4 <kalman_func+0x984>)
 8001716:	e9d3 890e 	ldrd	r8, r9, [r3, #56]	; 0x38
 800171a:	4bb3      	ldr	r3, [pc, #716]	; (80019e8 <kalman_func+0x988>)
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe febf 	bl	80004a0 <__aeabi_f2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4640      	mov	r0, r8
 8001728:	4649      	mov	r1, r9
 800172a:	f7fe ff11 	bl	8000550 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7fe fd55 	bl	80001e4 <__adddf3>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4690      	mov	r8, r2
 8001740:	4699      	mov	r9, r3
 8001742:	4ba8      	ldr	r3, [pc, #672]	; (80019e4 <kalman_func+0x984>)
 8001744:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001748:	4ba7      	ldr	r3, [pc, #668]	; (80019e8 <kalman_func+0x988>)
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fea8 	bl	80004a0 <__aeabi_f2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4620      	mov	r0, r4
 8001756:	4629      	mov	r1, r5
 8001758:	f7fe fefa 	bl	8000550 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4640      	mov	r0, r8
 8001762:	4649      	mov	r1, r9
 8001764:	f7fe fd3e 	bl	80001e4 <__adddf3>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4614      	mov	r4, r2
 800176e:	461d      	mov	r5, r3
				+ 0.5 * dt * dt * P_l[2][2] + Q[1][1];
 8001770:	4b9d      	ldr	r3, [pc, #628]	; (80019e8 <kalman_func+0x988>)
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fe94 	bl	80004a0 <__aeabi_f2d>
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	4b9b      	ldr	r3, [pc, #620]	; (80019ec <kalman_func+0x98c>)
 800177e:	f7fe fee7 	bl	8000550 <__aeabi_dmul>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4690      	mov	r8, r2
 8001788:	4699      	mov	r9, r3
 800178a:	4b97      	ldr	r3, [pc, #604]	; (80019e8 <kalman_func+0x988>)
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fe87 	bl	80004a0 <__aeabi_f2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4640      	mov	r0, r8
 8001798:	4649      	mov	r1, r9
 800179a:	f7fe fed9 	bl	8000550 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	4b8f      	ldr	r3, [pc, #572]	; (80019e4 <kalman_func+0x984>)
 80017a8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80017ac:	f7fe fed0 	bl	8000550 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4620      	mov	r0, r4
 80017b6:	4629      	mov	r1, r5
 80017b8:	f7fe fd14 	bl	80001e4 <__adddf3>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	4b8a      	ldr	r3, [pc, #552]	; (80019f0 <kalman_func+0x990>)
 80017c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80017ca:	f7fe fd0b 	bl	80001e4 <__adddf3>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
		P[1][1] = P_l[1][1] + P_l[2][1] * dt + P_l[1][2] * dt
 80017d2:	4983      	ldr	r1, [pc, #524]	; (80019e0 <kalman_func+0x980>)
 80017d4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		P[2][1] = P_l[2][1] + P_l[2][2] * dt + Q[2][1];
 80017d8:	4b82      	ldr	r3, [pc, #520]	; (80019e4 <kalman_func+0x984>)
 80017da:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80017de:	4b81      	ldr	r3, [pc, #516]	; (80019e4 <kalman_func+0x984>)
 80017e0:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	; 0x40
 80017e4:	4b80      	ldr	r3, [pc, #512]	; (80019e8 <kalman_func+0x988>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fe5a 	bl	80004a0 <__aeabi_f2d>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4640      	mov	r0, r8
 80017f2:	4649      	mov	r1, r9
 80017f4:	f7fe feac 	bl	8000550 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4620      	mov	r0, r4
 80017fe:	4629      	mov	r1, r5
 8001800:	f7fe fcf0 	bl	80001e4 <__adddf3>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	4b78      	ldr	r3, [pc, #480]	; (80019f0 <kalman_func+0x990>)
 800180e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001812:	f7fe fce7 	bl	80001e4 <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4971      	ldr	r1, [pc, #452]	; (80019e0 <kalman_func+0x980>)
 800181c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		P[0][2] = P_l[0][2] + P_l[1][2] * dt + 0.5 * dt * dt * P_l[2][2]
 8001820:	4b70      	ldr	r3, [pc, #448]	; (80019e4 <kalman_func+0x984>)
 8001822:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001826:	4b6f      	ldr	r3, [pc, #444]	; (80019e4 <kalman_func+0x984>)
 8001828:	e9d3 890a 	ldrd	r8, r9, [r3, #40]	; 0x28
 800182c:	4b6e      	ldr	r3, [pc, #440]	; (80019e8 <kalman_func+0x988>)
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe36 	bl	80004a0 <__aeabi_f2d>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4640      	mov	r0, r8
 800183a:	4649      	mov	r1, r9
 800183c:	f7fe fe88 	bl	8000550 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4620      	mov	r0, r4
 8001846:	4629      	mov	r1, r5
 8001848:	f7fe fccc 	bl	80001e4 <__adddf3>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4614      	mov	r4, r2
 8001852:	461d      	mov	r5, r3
 8001854:	4b64      	ldr	r3, [pc, #400]	; (80019e8 <kalman_func+0x988>)
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe22 	bl	80004a0 <__aeabi_f2d>
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	4b62      	ldr	r3, [pc, #392]	; (80019ec <kalman_func+0x98c>)
 8001862:	f7fe fe75 	bl	8000550 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4690      	mov	r8, r2
 800186c:	4699      	mov	r9, r3
 800186e:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <kalman_func+0x988>)
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fe15 	bl	80004a0 <__aeabi_f2d>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4640      	mov	r0, r8
 800187c:	4649      	mov	r1, r9
 800187e:	f7fe fe67 	bl	8000550 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	4b56      	ldr	r3, [pc, #344]	; (80019e4 <kalman_func+0x984>)
 800188c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001890:	f7fe fe5e 	bl	8000550 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe fca2 	bl	80001e4 <__adddf3>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
				+ Q[0][2];
 80018a8:	4b51      	ldr	r3, [pc, #324]	; (80019f0 <kalman_func+0x990>)
 80018aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018ae:	f7fe fc99 	bl	80001e4 <__adddf3>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
		P[0][2] = P_l[0][2] + P_l[1][2] * dt + 0.5 * dt * dt * P_l[2][2]
 80018b6:	494a      	ldr	r1, [pc, #296]	; (80019e0 <kalman_func+0x980>)
 80018b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
		P[1][2] = P_l[1][2] + dt * P_l[2][2] + Q[1][2];
 80018bc:	4b49      	ldr	r3, [pc, #292]	; (80019e4 <kalman_func+0x984>)
 80018be:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80018c2:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <kalman_func+0x988>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fdeb 	bl	80004a0 <__aeabi_f2d>
 80018ca:	4b46      	ldr	r3, [pc, #280]	; (80019e4 <kalman_func+0x984>)
 80018cc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80018d0:	f7fe fe3e 	bl	8000550 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fc82 	bl	80001e4 <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <kalman_func+0x990>)
 80018ea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80018ee:	f7fe fc79 	bl	80001e4 <__adddf3>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	493a      	ldr	r1, [pc, #232]	; (80019e0 <kalman_func+0x980>)
 80018f8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		P[2][2] = P_l[2][2] + Q[2][2];
 80018fc:	4b39      	ldr	r3, [pc, #228]	; (80019e4 <kalman_func+0x984>)
 80018fe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001902:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <kalman_func+0x990>)
 8001904:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001908:	f7fe fc6c 	bl	80001e4 <__adddf3>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4933      	ldr	r1, [pc, #204]	; (80019e0 <kalman_func+0x980>)
 8001912:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		//correct
		z = (pos[0] - pos[1]) / dt;
 8001916:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <kalman_func+0x994>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <kalman_func+0x994>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	ee07 3a90 	vmov	s15, r3
 8001924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001928:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80019f8 <kalman_func+0x998>
 800192c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001930:	ee16 0a90 	vmov	r0, s13
 8001934:	f7fe fdb4 	bl	80004a0 <__aeabi_f2d>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	492f      	ldr	r1, [pc, #188]	; (80019fc <kalman_func+0x99c>)
 800193e:	e9c1 2300 	strd	r2, r3, [r1]
		y = z - X[1];
 8001942:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <kalman_func+0x99c>)
 8001944:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <kalman_func+0x9a0>)
 800194a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800194e:	f7fe fc47 	bl	80001e0 <__aeabi_dsub>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	492b      	ldr	r1, [pc, #172]	; (8001a04 <kalman_func+0x9a4>)
 8001958:	e9c1 2300 	strd	r2, r3, [r1]
		double s = P[1][1] + R;
 800195c:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <kalman_func+0x980>)
 800195e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001962:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <kalman_func+0x9a8>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe fc3c 	bl	80001e4 <__adddf3>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double K[] = { P[0][1] / s, P[1][1] / s, P[2][1] / s };
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <kalman_func+0x980>)
 8001976:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800197a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800197e:	f7fe ff11 	bl	80007a4 <__aeabi_ddiv>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <kalman_func+0x980>)
 800198c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001990:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001994:	f7fe ff06 	bl	80007a4 <__aeabi_ddiv>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <kalman_func+0x980>)
 80019a2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80019a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019aa:	f7fe fefb 	bl	80007a4 <__aeabi_ddiv>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		X_l[0] = X[0] + K[0] * y;
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <kalman_func+0x9a0>)
 80019b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80019bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <kalman_func+0x9a4>)
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	f7fe fdc3 	bl	8000550 <__aeabi_dmul>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4620      	mov	r0, r4
 80019d0:	4629      	mov	r1, r5
 80019d2:	f7fe fc07 	bl	80001e4 <__adddf3>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	490c      	ldr	r1, [pc, #48]	; (8001a0c <kalman_func+0x9ac>)
 80019dc:	e018      	b.n	8001a10 <kalman_func+0x9b0>
 80019de:	bf00      	nop
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000048 	.word	0x20000048
 80019e8:	3a83126f 	.word	0x3a83126f
 80019ec:	3fe00000 	.word	0x3fe00000
 80019f0:	20000090 	.word	0x20000090
 80019f4:	2000027c 	.word	0x2000027c
 80019f8:	3a83126f 	.word	0x3a83126f
 80019fc:	20000260 	.word	0x20000260
 8001a00:	20000230 	.word	0x20000230
 8001a04:	20000268 	.word	0x20000268
 8001a08:	200000d8 	.word	0x200000d8
 8001a0c:	20000248 	.word	0x20000248
 8001a10:	e9c1 2300 	strd	r2, r3, [r1]
		X_l[1] = X[1] + K[1] * y;
 8001a14:	4bac      	ldr	r3, [pc, #688]	; (8001cc8 <kalman_func+0xc68>)
 8001a16:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001a1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a1e:	4bab      	ldr	r3, [pc, #684]	; (8001ccc <kalman_func+0xc6c>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	f7fe fd94 	bl	8000550 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	4629      	mov	r1, r5
 8001a30:	f7fe fbd8 	bl	80001e4 <__adddf3>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	49a5      	ldr	r1, [pc, #660]	; (8001cd0 <kalman_func+0xc70>)
 8001a3a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		X_l[2] = X[2] + K[2] * y;
 8001a3e:	4ba2      	ldr	r3, [pc, #648]	; (8001cc8 <kalman_func+0xc68>)
 8001a40:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001a44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a48:	4ba0      	ldr	r3, [pc, #640]	; (8001ccc <kalman_func+0xc6c>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	f7fe fd7f 	bl	8000550 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4620      	mov	r0, r4
 8001a58:	4629      	mov	r1, r5
 8001a5a:	f7fe fbc3 	bl	80001e4 <__adddf3>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	499b      	ldr	r1, [pc, #620]	; (8001cd0 <kalman_func+0xc70>)
 8001a64:	e9c1 2304 	strd	r2, r3, [r1, #16]
		P_l[0][0] = P[0][0] - (P[0][1] * P[1][0]) / (P[1][1] + R);
 8001a68:	4b9a      	ldr	r3, [pc, #616]	; (8001cd4 <kalman_func+0xc74>)
 8001a6a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a6e:	4b99      	ldr	r3, [pc, #612]	; (8001cd4 <kalman_func+0xc74>)
 8001a70:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a74:	4b97      	ldr	r3, [pc, #604]	; (8001cd4 <kalman_func+0xc74>)
 8001a76:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a7a:	f7fe fd69 	bl	8000550 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4690      	mov	r8, r2
 8001a84:	4699      	mov	r9, r3
 8001a86:	4b93      	ldr	r3, [pc, #588]	; (8001cd4 <kalman_func+0xc74>)
 8001a88:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001a8c:	4b92      	ldr	r3, [pc, #584]	; (8001cd8 <kalman_func+0xc78>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe fba7 	bl	80001e4 <__adddf3>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4640      	mov	r0, r8
 8001a9c:	4649      	mov	r1, r9
 8001a9e:	f7fe fe81 	bl	80007a4 <__aeabi_ddiv>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	f7fe fb99 	bl	80001e0 <__aeabi_dsub>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	498a      	ldr	r1, [pc, #552]	; (8001cdc <kalman_func+0xc7c>)
 8001ab4:	e9c1 2300 	strd	r2, r3, [r1]
		P_l[1][0] = P[1][0] - (P[1][0] * P[1][1]) / (P[1][1] + R);
 8001ab8:	4b86      	ldr	r3, [pc, #536]	; (8001cd4 <kalman_func+0xc74>)
 8001aba:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001abe:	4b85      	ldr	r3, [pc, #532]	; (8001cd4 <kalman_func+0xc74>)
 8001ac0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ac4:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <kalman_func+0xc74>)
 8001ac6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001aca:	f7fe fd41 	bl	8000550 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4690      	mov	r8, r2
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	4b7f      	ldr	r3, [pc, #508]	; (8001cd4 <kalman_func+0xc74>)
 8001ad8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001adc:	4b7e      	ldr	r3, [pc, #504]	; (8001cd8 <kalman_func+0xc78>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	f7fe fb7f 	bl	80001e4 <__adddf3>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4640      	mov	r0, r8
 8001aec:	4649      	mov	r1, r9
 8001aee:	f7fe fe59 	bl	80007a4 <__aeabi_ddiv>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4620      	mov	r0, r4
 8001af8:	4629      	mov	r1, r5
 8001afa:	f7fe fb71 	bl	80001e0 <__aeabi_dsub>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4976      	ldr	r1, [pc, #472]	; (8001cdc <kalman_func+0xc7c>)
 8001b04:	e9c1 2306 	strd	r2, r3, [r1, #24]
		P_l[2][0] = P[2][0] - (P[1][0] * P[2][1]) / (P[1][1] + R);
 8001b08:	4b72      	ldr	r3, [pc, #456]	; (8001cd4 <kalman_func+0xc74>)
 8001b0a:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001b0e:	4b71      	ldr	r3, [pc, #452]	; (8001cd4 <kalman_func+0xc74>)
 8001b10:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b14:	4b6f      	ldr	r3, [pc, #444]	; (8001cd4 <kalman_func+0xc74>)
 8001b16:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001b1a:	f7fe fd19 	bl	8000550 <__aeabi_dmul>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4690      	mov	r8, r2
 8001b24:	4699      	mov	r9, r3
 8001b26:	4b6b      	ldr	r3, [pc, #428]	; (8001cd4 <kalman_func+0xc74>)
 8001b28:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001b2c:	4b6a      	ldr	r3, [pc, #424]	; (8001cd8 <kalman_func+0xc78>)
 8001b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b32:	f7fe fb57 	bl	80001e4 <__adddf3>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4640      	mov	r0, r8
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	f7fe fe31 	bl	80007a4 <__aeabi_ddiv>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4620      	mov	r0, r4
 8001b48:	4629      	mov	r1, r5
 8001b4a:	f7fe fb49 	bl	80001e0 <__aeabi_dsub>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4962      	ldr	r1, [pc, #392]	; (8001cdc <kalman_func+0xc7c>)
 8001b54:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		P_l[0][1] = P[0][1] - (P[0][1] * P[1][1]) / (P[1][1] + R);
 8001b58:	4b5e      	ldr	r3, [pc, #376]	; (8001cd4 <kalman_func+0xc74>)
 8001b5a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001b5e:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <kalman_func+0xc74>)
 8001b60:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b64:	4b5b      	ldr	r3, [pc, #364]	; (8001cd4 <kalman_func+0xc74>)
 8001b66:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b6a:	f7fe fcf1 	bl	8000550 <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4690      	mov	r8, r2
 8001b74:	4699      	mov	r9, r3
 8001b76:	4b57      	ldr	r3, [pc, #348]	; (8001cd4 <kalman_func+0xc74>)
 8001b78:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001b7c:	4b56      	ldr	r3, [pc, #344]	; (8001cd8 <kalman_func+0xc78>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fb2f 	bl	80001e4 <__adddf3>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4640      	mov	r0, r8
 8001b8c:	4649      	mov	r1, r9
 8001b8e:	f7fe fe09 	bl	80007a4 <__aeabi_ddiv>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4620      	mov	r0, r4
 8001b98:	4629      	mov	r1, r5
 8001b9a:	f7fe fb21 	bl	80001e0 <__aeabi_dsub>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	494e      	ldr	r1, [pc, #312]	; (8001cdc <kalman_func+0xc7c>)
 8001ba4:	e9c1 2302 	strd	r2, r3, [r1, #8]
		P_l[1][1] = P[1][1] - (P[1][1] * P[1][1]) / (P[1][1] + R);
 8001ba8:	4b4a      	ldr	r3, [pc, #296]	; (8001cd4 <kalman_func+0xc74>)
 8001baa:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001bae:	4b49      	ldr	r3, [pc, #292]	; (8001cd4 <kalman_func+0xc74>)
 8001bb0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001bb4:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <kalman_func+0xc74>)
 8001bb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001bba:	f7fe fcc9 	bl	8000550 <__aeabi_dmul>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4690      	mov	r8, r2
 8001bc4:	4699      	mov	r9, r3
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <kalman_func+0xc74>)
 8001bc8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001bcc:	4b42      	ldr	r3, [pc, #264]	; (8001cd8 <kalman_func+0xc78>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fb07 	bl	80001e4 <__adddf3>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4640      	mov	r0, r8
 8001bdc:	4649      	mov	r1, r9
 8001bde:	f7fe fde1 	bl	80007a4 <__aeabi_ddiv>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4620      	mov	r0, r4
 8001be8:	4629      	mov	r1, r5
 8001bea:	f7fe faf9 	bl	80001e0 <__aeabi_dsub>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	493a      	ldr	r1, [pc, #232]	; (8001cdc <kalman_func+0xc7c>)
 8001bf4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		P_l[2][1] = P[2][1] - (P[1][1] * P[2][1]) / (P[1][1] + R);
 8001bf8:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <kalman_func+0xc74>)
 8001bfa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001bfe:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <kalman_func+0xc74>)
 8001c00:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001c04:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <kalman_func+0xc74>)
 8001c06:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c0a:	f7fe fca1 	bl	8000550 <__aeabi_dmul>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4690      	mov	r8, r2
 8001c14:	4699      	mov	r9, r3
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <kalman_func+0xc74>)
 8001c18:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <kalman_func+0xc78>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fadf 	bl	80001e4 <__adddf3>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4640      	mov	r0, r8
 8001c2c:	4649      	mov	r1, r9
 8001c2e:	f7fe fdb9 	bl	80007a4 <__aeabi_ddiv>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4620      	mov	r0, r4
 8001c38:	4629      	mov	r1, r5
 8001c3a:	f7fe fad1 	bl	80001e0 <__aeabi_dsub>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4926      	ldr	r1, [pc, #152]	; (8001cdc <kalman_func+0xc7c>)
 8001c44:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		P_l[0][2] = P[0][2] - (P[0][1] * P[1][2]) / (P[1][1] + R);
 8001c48:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <kalman_func+0xc74>)
 8001c4a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <kalman_func+0xc74>)
 8001c50:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c54:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <kalman_func+0xc74>)
 8001c56:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c5a:	f7fe fc79 	bl	8000550 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4690      	mov	r8, r2
 8001c64:	4699      	mov	r9, r3
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <kalman_func+0xc74>)
 8001c68:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <kalman_func+0xc78>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fab7 	bl	80001e4 <__adddf3>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4640      	mov	r0, r8
 8001c7c:	4649      	mov	r1, r9
 8001c7e:	f7fe fd91 	bl	80007a4 <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4620      	mov	r0, r4
 8001c88:	4629      	mov	r1, r5
 8001c8a:	f7fe faa9 	bl	80001e0 <__aeabi_dsub>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4912      	ldr	r1, [pc, #72]	; (8001cdc <kalman_func+0xc7c>)
 8001c94:	e9c1 2304 	strd	r2, r3, [r1, #16]
		P_l[1][2] = P[1][2] - (P[1][1] * P[1][2]) / (P[1][1] + R);
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <kalman_func+0xc74>)
 8001c9a:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <kalman_func+0xc74>)
 8001ca0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <kalman_func+0xc74>)
 8001ca6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001caa:	f7fe fc51 	bl	8000550 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4690      	mov	r8, r2
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <kalman_func+0xc74>)
 8001cb8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <kalman_func+0xc78>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	f7fe fa8f 	bl	80001e4 <__adddf3>
 8001cc6:	e00b      	b.n	8001ce0 <kalman_func+0xc80>
 8001cc8:	20000230 	.word	0x20000230
 8001ccc:	20000268 	.word	0x20000268
 8001cd0:	20000248 	.word	0x20000248
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	200000d8 	.word	0x200000d8
 8001cdc:	20000048 	.word	0x20000048
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4640      	mov	r0, r8
 8001ce6:	4649      	mov	r1, r9
 8001ce8:	f7fe fd5c 	bl	80007a4 <__aeabi_ddiv>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	4629      	mov	r1, r5
 8001cf4:	f7fe fa74 	bl	80001e0 <__aeabi_dsub>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	491b      	ldr	r1, [pc, #108]	; (8001d6c <kalman_func+0xd0c>)
 8001cfe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		P_l[2][2] = P[2][2] - (P[1][2] * P[2][1]) / (P[1][1] + R);
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <kalman_func+0xd10>)
 8001d04:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <kalman_func+0xd10>)
 8001d0a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001d0e:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <kalman_func+0xd10>)
 8001d10:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001d14:	f7fe fc1c 	bl	8000550 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4690      	mov	r8, r2
 8001d1e:	4699      	mov	r9, r3
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <kalman_func+0xd10>)
 8001d22:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <kalman_func+0xd14>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	f7fe fa5a 	bl	80001e4 <__adddf3>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4640      	mov	r0, r8
 8001d36:	4649      	mov	r1, r9
 8001d38:	f7fe fd34 	bl	80007a4 <__aeabi_ddiv>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4620      	mov	r0, r4
 8001d42:	4629      	mov	r1, r5
 8001d44:	f7fe fa4c 	bl	80001e0 <__aeabi_dsub>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4907      	ldr	r1, [pc, #28]	; (8001d6c <kalman_func+0xd0c>)
 8001d4e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		q[1] = q[0];
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <kalman_func+0xd18>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <kalman_func+0xd18>)
 8001d58:	6053      	str	r3, [r2, #4]
		pos[1] = pos[0];
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <kalman_func+0xd1c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <kalman_func+0xd1c>)
 8001d60:	6053      	str	r3, [r2, #4]
}
 8001d62:	bf00      	nop
 8001d64:	3728      	adds	r7, #40	; 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6c:	20000048 	.word	0x20000048
 8001d70:	20000000 	.word	0x20000000
 8001d74:	200000d8 	.word	0x200000d8
 8001d78:	20000270 	.word	0x20000270
 8001d7c:	2000027c 	.word	0x2000027c

08001d80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d10a      	bne.n	8001da6 <HAL_TIM_PeriodElapsedCallback+0x26>
		_micro += 65535;
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d9a:	1854      	adds	r4, r2, r1
 8001d9c:	f143 0500 	adc.w	r5, r3, #0
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001da2:	e9c3 4500 	strd	r4, r5, [r3]
	}

	if (htim == &htim3) {
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a06      	ldr	r2, [pc, #24]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d101      	bne.n	8001db2 <HAL_TIM_PeriodElapsedCallback+0x32>
			kalman_func();
 8001dae:	f7ff f957 	bl	8001060 <kalman_func>
		}
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2000019c 	.word	0x2000019c
 8001dc0:	20000228 	.word	0x20000228
 8001dc4:	20000154 	.word	0x20000154

08001dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dcc:	b672      	cpsid	i
}
 8001dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <Error_Handler+0x8>
	...

08001dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_MspInit+0x4c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <HAL_MspInit+0x4c>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_MspInit+0x4c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_MspInit+0x4c>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_MspInit+0x4c>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_MspInit+0x4c>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e12:	2007      	movs	r0, #7
 8001e14:	f000 fa96 	bl	8002344 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e44:	d12b      	bne.n	8001e9e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a16      	ldr	r2, [pc, #88]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4804      	ldr	r0, [pc, #16]	; (8001eac <HAL_TIM_Encoder_MspInit+0x88>)
 8001e9a:	f000 fa95 	bl	80023c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	; 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000

08001eb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_TIM_Base_MspInit+0x80>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d116      	bne.n	8001ef0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_TIM_Base_MspInit+0x84>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <HAL_TIM_Base_MspInit+0x84>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_TIM_Base_MspInit+0x84>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	201d      	movs	r0, #29
 8001ee4:	f000 fa39 	bl	800235a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ee8:	201d      	movs	r0, #29
 8001eea:	f000 fa52 	bl	8002392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001eee:	e01a      	b.n	8001f26 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_TIM_Base_MspInit+0x88>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d115      	bne.n	8001f26 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_TIM_Base_MspInit+0x84>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <HAL_TIM_Base_MspInit+0x84>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_TIM_Base_MspInit+0x84>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	201a      	movs	r0, #26
 8001f1c:	f000 fa1d 	bl	800235a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f20:	201a      	movs	r0, #26
 8001f22:	f000 fa36 	bl	8002392 <HAL_NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40000400 	.word	0x40000400
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40014800 	.word	0x40014800

08001f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <HAL_UART_MspInit+0x84>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d12b      	bne.n	8001fb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <HAL_UART_MspInit+0x88>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <HAL_UART_MspInit+0x88>)
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_UART_MspInit+0x88>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_UART_MspInit+0x88>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <HAL_UART_MspInit+0x88>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_UART_MspInit+0x88>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f96:	230c      	movs	r3, #12
 8001f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <HAL_UART_MspInit+0x8c>)
 8001fb2:	f000 fa09 	bl	80023c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	; 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40004400 	.word	0x40004400
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020000 	.word	0x40020000

08001fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <NMI_Handler+0x4>

08001fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <HardFault_Handler+0x4>

08001fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <MemManage_Handler+0x4>

08001fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe2:	e7fe      	b.n	8001fe2 <BusFault_Handler+0x4>

08001fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <UsageFault_Handler+0x4>

08001fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002018:	f000 f8a4 	bl	8002164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}

08002020 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002026:	f001 f9eb 	bl	8003400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000019c 	.word	0x2000019c

08002034 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <TIM3_IRQHandler+0x10>)
 800203a:	f001 f9e1 	bl	8003400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000154 	.word	0x20000154

08002048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <SystemInit+0x20>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <SystemInit+0x20>)
 8002054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800206c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002070:	480d      	ldr	r0, [pc, #52]	; (80020a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002072:	490e      	ldr	r1, [pc, #56]	; (80020ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002074:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002078:	e002      	b.n	8002080 <LoopCopyDataInit>

0800207a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800207a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800207c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207e:	3304      	adds	r3, #4

08002080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002084:	d3f9      	bcc.n	800207a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002086:	4a0b      	ldr	r2, [pc, #44]	; (80020b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002088:	4c0b      	ldr	r4, [pc, #44]	; (80020b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800208c:	e001      	b.n	8002092 <LoopFillZerobss>

0800208e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002090:	3204      	adds	r2, #4

08002092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002094:	d3fb      	bcc.n	800208e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002096:	f7ff ffd7 	bl	8002048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800209a:	f002 f82d 	bl	80040f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800209e:	f7fe fdeb 	bl	8000c78 <main>
  bx  lr    
 80020a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ac:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80020b0:	08004190 	.word	0x08004190
  ldr r2, =_sbss
 80020b4:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80020b8:	20000288 	.word	0x20000288

080020bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020bc:	e7fe      	b.n	80020bc <ADC_IRQHandler>
	...

080020c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_Init+0x40>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <HAL_Init+0x40>)
 80020ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_Init+0x40>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <HAL_Init+0x40>)
 80020d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_Init+0x40>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_Init+0x40>)
 80020e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e8:	2003      	movs	r0, #3
 80020ea:	f000 f92b 	bl	8002344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f000 f808 	bl	8002104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f4:	f7ff fe6e 	bl	8001dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023c00 	.word	0x40023c00

08002104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_InitTick+0x54>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_InitTick+0x58>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211a:	fbb3 f3f1 	udiv	r3, r3, r1
 800211e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f943 	bl	80023ae <HAL_SYSTICK_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e00e      	b.n	8002150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b0f      	cmp	r3, #15
 8002136:	d80a      	bhi.n	800214e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002138:	2200      	movs	r2, #0
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f000 f90b 	bl	800235a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002144:	4a06      	ldr	r2, [pc, #24]	; (8002160 <HAL_InitTick+0x5c>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e000      	b.n	8002150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	200000e0 	.word	0x200000e0
 800215c:	200000e8 	.word	0x200000e8
 8002160:	200000e4 	.word	0x200000e4

08002164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_IncTick+0x20>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_IncTick+0x24>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4413      	add	r3, r2
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <HAL_IncTick+0x24>)
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	200000e8 	.word	0x200000e8
 8002188:	20000284 	.word	0x20000284

0800218c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return uwTick;
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <HAL_GetTick+0x14>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000284 	.word	0x20000284

080021a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d6:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <__NVIC_SetPriorityGrouping+0x44>)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	60d3      	str	r3, [r2, #12]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <__NVIC_GetPriorityGrouping+0x18>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	f003 0307 	and.w	r3, r3, #7
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	2b00      	cmp	r3, #0
 8002218:	db0b      	blt.n	8002232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	f003 021f 	and.w	r2, r3, #31
 8002220:	4907      	ldr	r1, [pc, #28]	; (8002240 <__NVIC_EnableIRQ+0x38>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	2001      	movs	r0, #1
 800222a:	fa00 f202 	lsl.w	r2, r0, r2
 800222e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000e100 	.word	0xe000e100

08002244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	db0a      	blt.n	800226e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2da      	uxtb	r2, r3
 800225c:	490c      	ldr	r1, [pc, #48]	; (8002290 <__NVIC_SetPriority+0x4c>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	0112      	lsls	r2, r2, #4
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	440b      	add	r3, r1
 8002268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800226c:	e00a      	b.n	8002284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4908      	ldr	r1, [pc, #32]	; (8002294 <__NVIC_SetPriority+0x50>)
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	3b04      	subs	r3, #4
 800227c:	0112      	lsls	r2, r2, #4
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	440b      	add	r3, r1
 8002282:	761a      	strb	r2, [r3, #24]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000e100 	.word	0xe000e100
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f1c3 0307 	rsb	r3, r3, #7
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	bf28      	it	cs
 80022b6:	2304      	movcs	r3, #4
 80022b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3304      	adds	r3, #4
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d902      	bls.n	80022c8 <NVIC_EncodePriority+0x30>
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3b03      	subs	r3, #3
 80022c6:	e000      	b.n	80022ca <NVIC_EncodePriority+0x32>
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	f04f 32ff 	mov.w	r2, #4294967295
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	401a      	ands	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e0:	f04f 31ff 	mov.w	r1, #4294967295
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	43d9      	mvns	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	4313      	orrs	r3, r2
         );
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002310:	d301      	bcc.n	8002316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002312:	2301      	movs	r3, #1
 8002314:	e00f      	b.n	8002336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <SysTick_Config+0x40>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231e:	210f      	movs	r1, #15
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	f7ff ff8e 	bl	8002244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <SysTick_Config+0x40>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <SysTick_Config+0x40>)
 8002330:	2207      	movs	r2, #7
 8002332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	e000e010 	.word	0xe000e010

08002344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ff29 	bl	80021a4 <__NVIC_SetPriorityGrouping>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800235a:	b580      	push	{r7, lr}
 800235c:	b086      	sub	sp, #24
 800235e:	af00      	add	r7, sp, #0
 8002360:	4603      	mov	r3, r0
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800236c:	f7ff ff3e 	bl	80021ec <__NVIC_GetPriorityGrouping>
 8002370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	6978      	ldr	r0, [r7, #20]
 8002378:	f7ff ff8e 	bl	8002298 <NVIC_EncodePriority>
 800237c:	4602      	mov	r2, r0
 800237e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff5d 	bl	8002244 <__NVIC_SetPriority>
}
 800238a:	bf00      	nop
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	4603      	mov	r3, r0
 800239a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff31 	bl	8002208 <__NVIC_EnableIRQ>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ffa2 	bl	8002300 <SysTick_Config>
 80023bc:	4603      	mov	r3, r0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	e159      	b.n	8002698 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e4:	2201      	movs	r2, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	f040 8148 	bne.w	8002692 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d005      	beq.n	800241a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002416:	2b02      	cmp	r3, #2
 8002418:	d130      	bne.n	800247c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	2203      	movs	r2, #3
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002450:	2201      	movs	r2, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 0201 	and.w	r2, r3, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b03      	cmp	r3, #3
 8002486:	d017      	beq.n	80024b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d123      	bne.n	800250c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	08da      	lsrs	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	220f      	movs	r2, #15
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	08da      	lsrs	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3208      	adds	r2, #8
 8002506:	69b9      	ldr	r1, [r7, #24]
 8002508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0203 	and.w	r2, r3, #3
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80a2 	beq.w	8002692 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <HAL_GPIO_Init+0x2e8>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4a56      	ldr	r2, [pc, #344]	; (80026b0 <HAL_GPIO_Init+0x2e8>)
 8002558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	4b54      	ldr	r3, [pc, #336]	; (80026b0 <HAL_GPIO_Init+0x2e8>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800256a:	4a52      	ldr	r2, [pc, #328]	; (80026b4 <HAL_GPIO_Init+0x2ec>)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	3302      	adds	r3, #2
 8002572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	220f      	movs	r2, #15
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a49      	ldr	r2, [pc, #292]	; (80026b8 <HAL_GPIO_Init+0x2f0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d019      	beq.n	80025ca <HAL_GPIO_Init+0x202>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a48      	ldr	r2, [pc, #288]	; (80026bc <HAL_GPIO_Init+0x2f4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d013      	beq.n	80025c6 <HAL_GPIO_Init+0x1fe>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a47      	ldr	r2, [pc, #284]	; (80026c0 <HAL_GPIO_Init+0x2f8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00d      	beq.n	80025c2 <HAL_GPIO_Init+0x1fa>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a46      	ldr	r2, [pc, #280]	; (80026c4 <HAL_GPIO_Init+0x2fc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d007      	beq.n	80025be <HAL_GPIO_Init+0x1f6>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a45      	ldr	r2, [pc, #276]	; (80026c8 <HAL_GPIO_Init+0x300>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d101      	bne.n	80025ba <HAL_GPIO_Init+0x1f2>
 80025b6:	2304      	movs	r3, #4
 80025b8:	e008      	b.n	80025cc <HAL_GPIO_Init+0x204>
 80025ba:	2307      	movs	r3, #7
 80025bc:	e006      	b.n	80025cc <HAL_GPIO_Init+0x204>
 80025be:	2303      	movs	r3, #3
 80025c0:	e004      	b.n	80025cc <HAL_GPIO_Init+0x204>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e002      	b.n	80025cc <HAL_GPIO_Init+0x204>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_GPIO_Init+0x204>
 80025ca:	2300      	movs	r3, #0
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	f002 0203 	and.w	r2, r2, #3
 80025d2:	0092      	lsls	r2, r2, #2
 80025d4:	4093      	lsls	r3, r2
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025dc:	4935      	ldr	r1, [pc, #212]	; (80026b4 <HAL_GPIO_Init+0x2ec>)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3302      	adds	r3, #2
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ea:	4b38      	ldr	r3, [pc, #224]	; (80026cc <HAL_GPIO_Init+0x304>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800260e:	4a2f      	ldr	r2, [pc, #188]	; (80026cc <HAL_GPIO_Init+0x304>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002614:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <HAL_GPIO_Init+0x304>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002638:	4a24      	ldr	r2, [pc, #144]	; (80026cc <HAL_GPIO_Init+0x304>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263e:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_GPIO_Init+0x304>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002662:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <HAL_GPIO_Init+0x304>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_GPIO_Init+0x304>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800268c:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <HAL_GPIO_Init+0x304>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3301      	adds	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b0f      	cmp	r3, #15
 800269c:	f67f aea2 	bls.w	80023e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40013800 	.word	0x40013800
 80026b8:	40020000 	.word	0x40020000
 80026bc:	40020400 	.word	0x40020400
 80026c0:	40020800 	.word	0x40020800
 80026c4:	40020c00 	.word	0x40020c00
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40013c00 	.word	0x40013c00

080026d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
 80026dc:	4613      	mov	r3, r2
 80026de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026e0:	787b      	ldrb	r3, [r7, #1]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026ec:	e003      	b.n	80026f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ee:	887b      	ldrh	r3, [r7, #2]
 80026f0:	041a      	lsls	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	619a      	str	r2, [r3, #24]
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e267      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d075      	beq.n	800280e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002722:	4b88      	ldr	r3, [pc, #544]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b04      	cmp	r3, #4
 800272c:	d00c      	beq.n	8002748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272e:	4b85      	ldr	r3, [pc, #532]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002736:	2b08      	cmp	r3, #8
 8002738:	d112      	bne.n	8002760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800273a:	4b82      	ldr	r3, [pc, #520]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002746:	d10b      	bne.n	8002760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	4b7e      	ldr	r3, [pc, #504]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d05b      	beq.n	800280c <HAL_RCC_OscConfig+0x108>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d157      	bne.n	800280c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e242      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002768:	d106      	bne.n	8002778 <HAL_RCC_OscConfig+0x74>
 800276a:	4b76      	ldr	r3, [pc, #472]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a75      	ldr	r2, [pc, #468]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e01d      	b.n	80027b4 <HAL_RCC_OscConfig+0xb0>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x98>
 8002782:	4b70      	ldr	r3, [pc, #448]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a6f      	ldr	r2, [pc, #444]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b6d      	ldr	r3, [pc, #436]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6c      	ldr	r2, [pc, #432]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0xb0>
 800279c:	4b69      	ldr	r3, [pc, #420]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a68      	ldr	r2, [pc, #416]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 80027a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b66      	ldr	r3, [pc, #408]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a65      	ldr	r2, [pc, #404]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7ff fce6 	bl	800218c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c4:	f7ff fce2 	bl	800218c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e207      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b5b      	ldr	r3, [pc, #364]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0xc0>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7ff fcd2 	bl	800218c <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ec:	f7ff fcce 	bl	800218c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1f3      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	4b51      	ldr	r3, [pc, #324]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0xe8>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d063      	beq.n	80028e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800281a:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002826:	4b47      	ldr	r3, [pc, #284]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800282e:	2b08      	cmp	r3, #8
 8002830:	d11c      	bne.n	800286c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002832:	4b44      	ldr	r3, [pc, #272]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	4b41      	ldr	r3, [pc, #260]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x152>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1c7      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4937      	ldr	r1, [pc, #220]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	e03a      	b.n	80028e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d020      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002874:	4b34      	ldr	r3, [pc, #208]	; (8002948 <HAL_RCC_OscConfig+0x244>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7ff fc87 	bl	800218c <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002882:	f7ff fc83 	bl	800218c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e1a8      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	4b28      	ldr	r3, [pc, #160]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4925      	ldr	r1, [pc, #148]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
 80028b4:	e015      	b.n	80028e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <HAL_RCC_OscConfig+0x244>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7ff fc66 	bl	800218c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c4:	f7ff fc62 	bl	800218c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e187      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d036      	beq.n	800295c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d016      	beq.n	8002924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_RCC_OscConfig+0x248>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7ff fc46 	bl	800218c <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002904:	f7ff fc42 	bl	800218c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e167      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x200>
 8002922:	e01b      	b.n	800295c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_RCC_OscConfig+0x248>)
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292a:	f7ff fc2f 	bl	800218c <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002930:	e00e      	b.n	8002950 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002932:	f7ff fc2b 	bl	800218c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d907      	bls.n	8002950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e150      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
 8002944:	40023800 	.word	0x40023800
 8002948:	42470000 	.word	0x42470000
 800294c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002950:	4b88      	ldr	r3, [pc, #544]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ea      	bne.n	8002932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8097 	beq.w	8002a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296a:	2300      	movs	r3, #0
 800296c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296e:	4b81      	ldr	r3, [pc, #516]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10f      	bne.n	800299a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	4b7d      	ldr	r3, [pc, #500]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a7c      	ldr	r2, [pc, #496]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b7a      	ldr	r3, [pc, #488]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002996:	2301      	movs	r3, #1
 8002998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299a:	4b77      	ldr	r3, [pc, #476]	; (8002b78 <HAL_RCC_OscConfig+0x474>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d118      	bne.n	80029d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a6:	4b74      	ldr	r3, [pc, #464]	; (8002b78 <HAL_RCC_OscConfig+0x474>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a73      	ldr	r2, [pc, #460]	; (8002b78 <HAL_RCC_OscConfig+0x474>)
 80029ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b2:	f7ff fbeb 	bl	800218c <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ba:	f7ff fbe7 	bl	800218c <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e10c      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	4b6a      	ldr	r3, [pc, #424]	; (8002b78 <HAL_RCC_OscConfig+0x474>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d106      	bne.n	80029ee <HAL_RCC_OscConfig+0x2ea>
 80029e0:	4b64      	ldr	r3, [pc, #400]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a63      	ldr	r2, [pc, #396]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
 80029ec:	e01c      	b.n	8002a28 <HAL_RCC_OscConfig+0x324>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b05      	cmp	r3, #5
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x30c>
 80029f6:	4b5f      	ldr	r3, [pc, #380]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	4a5e      	ldr	r2, [pc, #376]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 80029fc:	f043 0304 	orr.w	r3, r3, #4
 8002a00:	6713      	str	r3, [r2, #112]	; 0x70
 8002a02:	4b5c      	ldr	r3, [pc, #368]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	4a5b      	ldr	r2, [pc, #364]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0e:	e00b      	b.n	8002a28 <HAL_RCC_OscConfig+0x324>
 8002a10:	4b58      	ldr	r3, [pc, #352]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4a57      	ldr	r2, [pc, #348]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1c:	4b55      	ldr	r3, [pc, #340]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a54      	ldr	r2, [pc, #336]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a22:	f023 0304 	bic.w	r3, r3, #4
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d015      	beq.n	8002a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a30:	f7ff fbac 	bl	800218c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a38:	f7ff fba8 	bl	800218c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e0cb      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4e:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0ee      	beq.n	8002a38 <HAL_RCC_OscConfig+0x334>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5c:	f7ff fb96 	bl	800218c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a64:	f7ff fb92 	bl	800218c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e0b5      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7a:	4b3e      	ldr	r3, [pc, #248]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1ee      	bne.n	8002a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a86:	7dfb      	ldrb	r3, [r7, #23]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d105      	bne.n	8002a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8c:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	4a38      	ldr	r2, [pc, #224]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80a1 	beq.w	8002be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aa2:	4b34      	ldr	r3, [pc, #208]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d05c      	beq.n	8002b68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d141      	bne.n	8002b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b31      	ldr	r3, [pc, #196]	; (8002b7c <HAL_RCC_OscConfig+0x478>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7ff fb66 	bl	800218c <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7ff fb62 	bl	800218c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e087      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69da      	ldr	r2, [r3, #28]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	019b      	lsls	r3, r3, #6
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	3b01      	subs	r3, #1
 8002afc:	041b      	lsls	r3, r3, #16
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	491b      	ldr	r1, [pc, #108]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_RCC_OscConfig+0x478>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7ff fb3b 	bl	800218c <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7ff fb37 	bl	800218c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e05c      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x416>
 8002b38:	e054      	b.n	8002be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <HAL_RCC_OscConfig+0x478>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7ff fb24 	bl	800218c <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b48:	f7ff fb20 	bl	800218c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e045      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x444>
 8002b66:	e03d      	b.n	8002be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d107      	bne.n	8002b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e038      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40007000 	.word	0x40007000
 8002b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b80:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_RCC_OscConfig+0x4ec>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d028      	beq.n	8002be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d121      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d11a      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d111      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800

08002bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0cc      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c08:	4b68      	ldr	r3, [pc, #416]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d90c      	bls.n	8002c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b65      	ldr	r3, [pc, #404]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b63      	ldr	r3, [pc, #396]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0b8      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d020      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c48:	4b59      	ldr	r3, [pc, #356]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4a58      	ldr	r2, [pc, #352]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c60:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4a52      	ldr	r2, [pc, #328]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6c:	4b50      	ldr	r3, [pc, #320]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	494d      	ldr	r1, [pc, #308]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d044      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d119      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e07f      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d003      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb2:	4b3f      	ldr	r3, [pc, #252]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06f      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc2:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e067      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cd2:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f023 0203 	bic.w	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4934      	ldr	r1, [pc, #208]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce4:	f7ff fa52 	bl	800218c <HAL_GetTick>
 8002ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cec:	f7ff fa4e 	bl	800218c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e04f      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 020c 	and.w	r2, r3, #12
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d1eb      	bne.n	8002cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d14:	4b25      	ldr	r3, [pc, #148]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d20c      	bcs.n	8002d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b22      	ldr	r3, [pc, #136]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b20      	ldr	r3, [pc, #128]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e032      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4916      	ldr	r1, [pc, #88]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d66:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	490e      	ldr	r1, [pc, #56]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d7a:	f000 f821 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	490a      	ldr	r1, [pc, #40]	; (8002db4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	5ccb      	ldrb	r3, [r1, r3]
 8002d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d92:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d96:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff f9b2 	bl	8002104 <HAL_InitTick>

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40023c00 	.word	0x40023c00
 8002db0:	40023800 	.word	0x40023800
 8002db4:	08004168 	.word	0x08004168
 8002db8:	200000e0 	.word	0x200000e0
 8002dbc:	200000e4 	.word	0x200000e4

08002dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc4:	b094      	sub	sp, #80	; 0x50
 8002dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	647b      	str	r3, [r7, #68]	; 0x44
 8002dcc:	2300      	movs	r3, #0
 8002dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dd8:	4b79      	ldr	r3, [pc, #484]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d00d      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x40>
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	f200 80e1 	bhi.w	8002fac <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d003      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8002df2:	e0db      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002df4:	4b73      	ldr	r3, [pc, #460]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002df6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002df8:	e0db      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dfa:	4b73      	ldr	r3, [pc, #460]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dfe:	e0d8      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e00:	4b6f      	ldr	r3, [pc, #444]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e0a:	4b6d      	ldr	r3, [pc, #436]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d063      	beq.n	8002ede <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e16:	4b6a      	ldr	r3, [pc, #424]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	099b      	lsrs	r3, r3, #6
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e32:	4622      	mov	r2, r4
 8002e34:	462b      	mov	r3, r5
 8002e36:	f04f 0000 	mov.w	r0, #0
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	0159      	lsls	r1, r3, #5
 8002e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e44:	0150      	lsls	r0, r2, #5
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4621      	mov	r1, r4
 8002e4c:	1a51      	subs	r1, r2, r1
 8002e4e:	6139      	str	r1, [r7, #16]
 8002e50:	4629      	mov	r1, r5
 8002e52:	eb63 0301 	sbc.w	r3, r3, r1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e64:	4659      	mov	r1, fp
 8002e66:	018b      	lsls	r3, r1, #6
 8002e68:	4651      	mov	r1, sl
 8002e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e6e:	4651      	mov	r1, sl
 8002e70:	018a      	lsls	r2, r1, #6
 8002e72:	4651      	mov	r1, sl
 8002e74:	ebb2 0801 	subs.w	r8, r2, r1
 8002e78:	4659      	mov	r1, fp
 8002e7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e92:	4690      	mov	r8, r2
 8002e94:	4699      	mov	r9, r3
 8002e96:	4623      	mov	r3, r4
 8002e98:	eb18 0303 	adds.w	r3, r8, r3
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	462b      	mov	r3, r5
 8002ea0:	eb49 0303 	adc.w	r3, r9, r3
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	024b      	lsls	r3, r1, #9
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	024a      	lsls	r2, r1, #9
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ed0:	f7fd fd50 	bl	8000974 <__aeabi_uldivmod>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4613      	mov	r3, r2
 8002eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002edc:	e058      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ede:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	099b      	lsrs	r3, r3, #6
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	4611      	mov	r1, r2
 8002eea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eee:	623b      	str	r3, [r7, #32]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ef8:	4642      	mov	r2, r8
 8002efa:	464b      	mov	r3, r9
 8002efc:	f04f 0000 	mov.w	r0, #0
 8002f00:	f04f 0100 	mov.w	r1, #0
 8002f04:	0159      	lsls	r1, r3, #5
 8002f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f0a:	0150      	lsls	r0, r2, #5
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4641      	mov	r1, r8
 8002f12:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f16:	4649      	mov	r1, r9
 8002f18:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f30:	ebb2 040a 	subs.w	r4, r2, sl
 8002f34:	eb63 050b 	sbc.w	r5, r3, fp
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	00eb      	lsls	r3, r5, #3
 8002f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f46:	00e2      	lsls	r2, r4, #3
 8002f48:	4614      	mov	r4, r2
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	4643      	mov	r3, r8
 8002f4e:	18e3      	adds	r3, r4, r3
 8002f50:	603b      	str	r3, [r7, #0]
 8002f52:	464b      	mov	r3, r9
 8002f54:	eb45 0303 	adc.w	r3, r5, r3
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f66:	4629      	mov	r1, r5
 8002f68:	028b      	lsls	r3, r1, #10
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f70:	4621      	mov	r1, r4
 8002f72:	028a      	lsls	r2, r1, #10
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	61fa      	str	r2, [r7, #28]
 8002f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f84:	f7fd fcf6 	bl	8000974 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002faa:	e002      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3750      	adds	r7, #80	; 0x50
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	00f42400 	.word	0x00f42400
 8002fc8:	007a1200 	.word	0x007a1200

08002fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	200000e0 	.word	0x200000e0

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fe8:	f7ff fff0 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	0a9b      	lsrs	r3, r3, #10
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4903      	ldr	r1, [pc, #12]	; (8003008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800
 8003008:	08004178 	.word	0x08004178

0800300c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003010:	f7ff ffdc 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	0b5b      	lsrs	r3, r3, #13
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4903      	ldr	r1, [pc, #12]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40023800 	.word	0x40023800
 8003030:	08004178 	.word	0x08004178

08003034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e041      	b.n	80030ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fe ff28 	bl	8001eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3304      	adds	r3, #4
 8003070:	4619      	mov	r1, r3
 8003072:	4610      	mov	r0, r2
 8003074:	f000 fbbc 	bl	80037f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d001      	beq.n	80030ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e044      	b.n	8003176 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <HAL_TIM_Base_Start_IT+0xb0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d018      	beq.n	8003140 <HAL_TIM_Base_Start_IT+0x6c>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003116:	d013      	beq.n	8003140 <HAL_TIM_Base_Start_IT+0x6c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1a      	ldr	r2, [pc, #104]	; (8003188 <HAL_TIM_Base_Start_IT+0xb4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00e      	beq.n	8003140 <HAL_TIM_Base_Start_IT+0x6c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a19      	ldr	r2, [pc, #100]	; (800318c <HAL_TIM_Base_Start_IT+0xb8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d009      	beq.n	8003140 <HAL_TIM_Base_Start_IT+0x6c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a17      	ldr	r2, [pc, #92]	; (8003190 <HAL_TIM_Base_Start_IT+0xbc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <HAL_TIM_Base_Start_IT+0x6c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a16      	ldr	r2, [pc, #88]	; (8003194 <HAL_TIM_Base_Start_IT+0xc0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d111      	bne.n	8003164 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b06      	cmp	r3, #6
 8003150:	d010      	beq.n	8003174 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0201 	orr.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003162:	e007      	b.n	8003174 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40010000 	.word	0x40010000
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800
 8003190:	40000c00 	.word	0x40000c00
 8003194:	40014000 	.word	0x40014000

08003198 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e097      	b.n	80032dc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d106      	bne.n	80031c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7fe fe2f 	bl	8001e24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2202      	movs	r2, #2
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031dc:	f023 0307 	bic.w	r3, r3, #7
 80031e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f000 faff 	bl	80037f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321a:	f023 0303 	bic.w	r3, r3, #3
 800321e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	4313      	orrs	r3, r2
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003238:	f023 030c 	bic.w	r3, r3, #12
 800323c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003244:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	4313      	orrs	r3, r2
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	011a      	lsls	r2, r3, #4
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	031b      	lsls	r3, r3, #12
 8003268:	4313      	orrs	r3, r2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003276:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800327e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	4313      	orrs	r3, r2
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003304:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800330c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d110      	bne.n	8003336 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d102      	bne.n	8003320 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800331a:	7b7b      	ldrb	r3, [r7, #13]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d001      	beq.n	8003324 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e069      	b.n	80033f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003334:	e031      	b.n	800339a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b04      	cmp	r3, #4
 800333a:	d110      	bne.n	800335e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800333c:	7bbb      	ldrb	r3, [r7, #14]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d102      	bne.n	8003348 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003342:	7b3b      	ldrb	r3, [r7, #12]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d001      	beq.n	800334c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e055      	b.n	80033f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800335c:	e01d      	b.n	800339a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d108      	bne.n	8003376 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003364:	7bbb      	ldrb	r3, [r7, #14]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d105      	bne.n	8003376 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800336a:	7b7b      	ldrb	r3, [r7, #13]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d102      	bne.n	8003376 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003370:	7b3b      	ldrb	r3, [r7, #12]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d001      	beq.n	800337a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e03e      	b.n	80033f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2202      	movs	r2, #2
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_TIM_Encoder_Start+0xc4>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d008      	beq.n	80033b8 <HAL_TIM_Encoder_Start+0xd4>
 80033a6:	e00f      	b.n	80033c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2201      	movs	r2, #1
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fb37 	bl	8003a24 <TIM_CCxChannelCmd>
      break;
 80033b6:	e016      	b.n	80033e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2201      	movs	r2, #1
 80033be:	2104      	movs	r1, #4
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fb2f 	bl	8003a24 <TIM_CCxChannelCmd>
      break;
 80033c6:	e00e      	b.n	80033e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2201      	movs	r2, #1
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fb27 	bl	8003a24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2201      	movs	r2, #1
 80033dc:	2104      	movs	r1, #4
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fb20 	bl	8003a24 <TIM_CCxChannelCmd>
      break;
 80033e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d122      	bne.n	800345c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b02      	cmp	r3, #2
 8003422:	d11b      	bne.n	800345c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0202 	mvn.w	r2, #2
 800342c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f9b5 	bl	80037b2 <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f9a7 	bl	800379e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f9b8 	bl	80037c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b04      	cmp	r3, #4
 8003468:	d122      	bne.n	80034b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b04      	cmp	r3, #4
 8003476:	d11b      	bne.n	80034b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0204 	mvn.w	r2, #4
 8003480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f98b 	bl	80037b2 <HAL_TIM_IC_CaptureCallback>
 800349c:	e005      	b.n	80034aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f97d 	bl	800379e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f98e 	bl	80037c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d122      	bne.n	8003504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d11b      	bne.n	8003504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0208 	mvn.w	r2, #8
 80034d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2204      	movs	r2, #4
 80034da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f961 	bl	80037b2 <HAL_TIM_IC_CaptureCallback>
 80034f0:	e005      	b.n	80034fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f953 	bl	800379e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f964 	bl	80037c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b10      	cmp	r3, #16
 8003510:	d122      	bne.n	8003558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b10      	cmp	r3, #16
 800351e:	d11b      	bne.n	8003558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0210 	mvn.w	r2, #16
 8003528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2208      	movs	r2, #8
 800352e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f937 	bl	80037b2 <HAL_TIM_IC_CaptureCallback>
 8003544:	e005      	b.n	8003552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f929 	bl	800379e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f93a 	bl	80037c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10e      	bne.n	8003584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b01      	cmp	r3, #1
 8003572:	d107      	bne.n	8003584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0201 	mvn.w	r2, #1
 800357c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe fbfe 	bl	8001d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358e:	2b80      	cmp	r3, #128	; 0x80
 8003590:	d10e      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359c:	2b80      	cmp	r3, #128	; 0x80
 800359e:	d107      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fad8 	bl	8003b60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d10e      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b40      	cmp	r3, #64	; 0x40
 80035ca:	d107      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8ff 	bl	80037da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d10e      	bne.n	8003608 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d107      	bne.n	8003608 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0220 	mvn.w	r2, #32
 8003600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 faa2 	bl	8003b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIM_ConfigClockSource+0x1c>
 8003628:	2302      	movs	r3, #2
 800362a:	e0b4      	b.n	8003796 <HAL_TIM_ConfigClockSource+0x186>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800364a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003652:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003664:	d03e      	beq.n	80036e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366a:	f200 8087 	bhi.w	800377c <HAL_TIM_ConfigClockSource+0x16c>
 800366e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003672:	f000 8086 	beq.w	8003782 <HAL_TIM_ConfigClockSource+0x172>
 8003676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367a:	d87f      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b70      	cmp	r3, #112	; 0x70
 800367e:	d01a      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003680:	2b70      	cmp	r3, #112	; 0x70
 8003682:	d87b      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 8003684:	2b60      	cmp	r3, #96	; 0x60
 8003686:	d050      	beq.n	800372a <HAL_TIM_ConfigClockSource+0x11a>
 8003688:	2b60      	cmp	r3, #96	; 0x60
 800368a:	d877      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	2b50      	cmp	r3, #80	; 0x50
 800368e:	d03c      	beq.n	800370a <HAL_TIM_ConfigClockSource+0xfa>
 8003690:	2b50      	cmp	r3, #80	; 0x50
 8003692:	d873      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d058      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x13a>
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	d86f      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 800369c:	2b30      	cmp	r3, #48	; 0x30
 800369e:	d064      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x15a>
 80036a0:	2b30      	cmp	r3, #48	; 0x30
 80036a2:	d86b      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d060      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x15a>
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d867      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d05c      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x15a>
 80036b0:	2b10      	cmp	r3, #16
 80036b2:	d05a      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x15a>
 80036b4:	e062      	b.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6899      	ldr	r1, [r3, #8]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f000 f98d 	bl	80039e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	609a      	str	r2, [r3, #8]
      break;
 80036e2:	e04f      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	6899      	ldr	r1, [r3, #8]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f000 f976 	bl	80039e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003706:	609a      	str	r2, [r3, #8]
      break;
 8003708:	e03c      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	461a      	mov	r2, r3
 8003718:	f000 f8ea 	bl	80038f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2150      	movs	r1, #80	; 0x50
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f943 	bl	80039ae <TIM_ITRx_SetConfig>
      break;
 8003728:	e02c      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6859      	ldr	r1, [r3, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	461a      	mov	r2, r3
 8003738:	f000 f909 	bl	800394e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2160      	movs	r1, #96	; 0x60
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f933 	bl	80039ae <TIM_ITRx_SetConfig>
      break;
 8003748:	e01c      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6859      	ldr	r1, [r3, #4]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	461a      	mov	r2, r3
 8003758:	f000 f8ca 	bl	80038f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2140      	movs	r1, #64	; 0x40
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f923 	bl	80039ae <TIM_ITRx_SetConfig>
      break;
 8003768:	e00c      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f000 f91a 	bl	80039ae <TIM_ITRx_SetConfig>
      break;
 800377a:	e003      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      break;
 8003780:	e000      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003782:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a34      	ldr	r2, [pc, #208]	; (80038d4 <TIM_Base_SetConfig+0xe4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00f      	beq.n	8003828 <TIM_Base_SetConfig+0x38>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380e:	d00b      	beq.n	8003828 <TIM_Base_SetConfig+0x38>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a31      	ldr	r2, [pc, #196]	; (80038d8 <TIM_Base_SetConfig+0xe8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d007      	beq.n	8003828 <TIM_Base_SetConfig+0x38>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a30      	ldr	r2, [pc, #192]	; (80038dc <TIM_Base_SetConfig+0xec>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d003      	beq.n	8003828 <TIM_Base_SetConfig+0x38>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a2f      	ldr	r2, [pc, #188]	; (80038e0 <TIM_Base_SetConfig+0xf0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d108      	bne.n	800383a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a25      	ldr	r2, [pc, #148]	; (80038d4 <TIM_Base_SetConfig+0xe4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01b      	beq.n	800387a <TIM_Base_SetConfig+0x8a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003848:	d017      	beq.n	800387a <TIM_Base_SetConfig+0x8a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <TIM_Base_SetConfig+0xe8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <TIM_Base_SetConfig+0x8a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a21      	ldr	r2, [pc, #132]	; (80038dc <TIM_Base_SetConfig+0xec>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00f      	beq.n	800387a <TIM_Base_SetConfig+0x8a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a20      	ldr	r2, [pc, #128]	; (80038e0 <TIM_Base_SetConfig+0xf0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00b      	beq.n	800387a <TIM_Base_SetConfig+0x8a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1f      	ldr	r2, [pc, #124]	; (80038e4 <TIM_Base_SetConfig+0xf4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <TIM_Base_SetConfig+0x8a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <TIM_Base_SetConfig+0xf8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d003      	beq.n	800387a <TIM_Base_SetConfig+0x8a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <TIM_Base_SetConfig+0xfc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d108      	bne.n	800388c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a08      	ldr	r2, [pc, #32]	; (80038d4 <TIM_Base_SetConfig+0xe4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d103      	bne.n	80038c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	615a      	str	r2, [r3, #20]
}
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40010000 	.word	0x40010000
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800
 80038e0:	40000c00 	.word	0x40000c00
 80038e4:	40014000 	.word	0x40014000
 80038e8:	40014400 	.word	0x40014400
 80038ec:	40014800 	.word	0x40014800

080038f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f023 0201 	bic.w	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800391a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f023 030a 	bic.w	r3, r3, #10
 800392c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	621a      	str	r2, [r3, #32]
}
 8003942:	bf00      	nop
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800394e:	b480      	push	{r7}
 8003950:	b087      	sub	sp, #28
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f023 0210 	bic.w	r2, r3, #16
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	031b      	lsls	r3, r3, #12
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800398a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	621a      	str	r2, [r3, #32]
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f043 0307 	orr.w	r3, r3, #7
 80039d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	609a      	str	r2, [r3, #8]
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	021a      	lsls	r2, r3, #8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	609a      	str	r2, [r3, #8]
}
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	2201      	movs	r2, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a1a      	ldr	r2, [r3, #32]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	401a      	ands	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e050      	b.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1c      	ldr	r2, [pc, #112]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad4:	d013      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a16      	ldr	r2, [pc, #88]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a13      	ldr	r2, [pc, #76]	; (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10c      	bne.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40000800 	.word	0x40000800
 8003b44:	40000c00 	.word	0x40000c00
 8003b48:	40014000 	.word	0x40014000

08003b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e03f      	b.n	8003c06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fe f9ce 	bl	8001f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2224      	movs	r2, #36	; 0x24
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f829 	bl	8003c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b0c0      	sub	sp, #256	; 0x100
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	68d9      	ldr	r1, [r3, #12]
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	ea40 0301 	orr.w	r3, r0, r1
 8003c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c68:	f021 010c 	bic.w	r1, r1, #12
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c76:	430b      	orrs	r3, r1
 8003c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8a:	6999      	ldr	r1, [r3, #24]
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	ea40 0301 	orr.w	r3, r0, r1
 8003c96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4b8f      	ldr	r3, [pc, #572]	; (8003edc <UART_SetConfig+0x2cc>)
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d005      	beq.n	8003cb0 <UART_SetConfig+0xa0>
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b8d      	ldr	r3, [pc, #564]	; (8003ee0 <UART_SetConfig+0x2d0>)
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d104      	bne.n	8003cba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cb0:	f7ff f9ac 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 8003cb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cb8:	e003      	b.n	8003cc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cba:	f7ff f993 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8003cbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ccc:	f040 810c 	bne.w	8003ee8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003cda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003cde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ce2:	4622      	mov	r2, r4
 8003ce4:	462b      	mov	r3, r5
 8003ce6:	1891      	adds	r1, r2, r2
 8003ce8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cea:	415b      	adcs	r3, r3
 8003cec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	eb12 0801 	adds.w	r8, r2, r1
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	eb43 0901 	adc.w	r9, r3, r1
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d12:	4690      	mov	r8, r2
 8003d14:	4699      	mov	r9, r3
 8003d16:	4623      	mov	r3, r4
 8003d18:	eb18 0303 	adds.w	r3, r8, r3
 8003d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d20:	462b      	mov	r3, r5
 8003d22:	eb49 0303 	adc.w	r3, r9, r3
 8003d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d3e:	460b      	mov	r3, r1
 8003d40:	18db      	adds	r3, r3, r3
 8003d42:	653b      	str	r3, [r7, #80]	; 0x50
 8003d44:	4613      	mov	r3, r2
 8003d46:	eb42 0303 	adc.w	r3, r2, r3
 8003d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d54:	f7fc fe0e 	bl	8000974 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4b61      	ldr	r3, [pc, #388]	; (8003ee4 <UART_SetConfig+0x2d4>)
 8003d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	011c      	lsls	r4, r3, #4
 8003d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	1891      	adds	r1, r2, r2
 8003d7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d80:	415b      	adcs	r3, r3
 8003d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d88:	4641      	mov	r1, r8
 8003d8a:	eb12 0a01 	adds.w	sl, r2, r1
 8003d8e:	4649      	mov	r1, r9
 8003d90:	eb43 0b01 	adc.w	fp, r3, r1
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003da0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da8:	4692      	mov	sl, r2
 8003daa:	469b      	mov	fp, r3
 8003dac:	4643      	mov	r3, r8
 8003dae:	eb1a 0303 	adds.w	r3, sl, r3
 8003db2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003db6:	464b      	mov	r3, r9
 8003db8:	eb4b 0303 	adc.w	r3, fp, r3
 8003dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dcc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003dd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	18db      	adds	r3, r3, r3
 8003dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8003dda:	4613      	mov	r3, r2
 8003ddc:	eb42 0303 	adc.w	r3, r2, r3
 8003de0:	647b      	str	r3, [r7, #68]	; 0x44
 8003de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003de6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003dea:	f7fc fdc3 	bl	8000974 <__aeabi_uldivmod>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4611      	mov	r1, r2
 8003df4:	4b3b      	ldr	r3, [pc, #236]	; (8003ee4 <UART_SetConfig+0x2d4>)
 8003df6:	fba3 2301 	umull	r2, r3, r3, r1
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	2264      	movs	r2, #100	; 0x64
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	1acb      	subs	r3, r1, r3
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <UART_SetConfig+0x2d4>)
 8003e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e18:	441c      	add	r4, r3
 8003e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	1891      	adds	r1, r2, r2
 8003e32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e34:	415b      	adcs	r3, r3
 8003e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	1851      	adds	r1, r2, r1
 8003e40:	6339      	str	r1, [r7, #48]	; 0x30
 8003e42:	4649      	mov	r1, r9
 8003e44:	414b      	adcs	r3, r1
 8003e46:	637b      	str	r3, [r7, #52]	; 0x34
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e54:	4659      	mov	r1, fp
 8003e56:	00cb      	lsls	r3, r1, #3
 8003e58:	4651      	mov	r1, sl
 8003e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5e:	4651      	mov	r1, sl
 8003e60:	00ca      	lsls	r2, r1, #3
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	4642      	mov	r2, r8
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e70:	464b      	mov	r3, r9
 8003e72:	460a      	mov	r2, r1
 8003e74:	eb42 0303 	adc.w	r3, r2, r3
 8003e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e90:	460b      	mov	r3, r1
 8003e92:	18db      	adds	r3, r3, r3
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e96:	4613      	mov	r3, r2
 8003e98:	eb42 0303 	adc.w	r3, r2, r3
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ea2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ea6:	f7fc fd65 	bl	8000974 <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <UART_SetConfig+0x2d4>)
 8003eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	2164      	movs	r1, #100	; 0x64
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	3332      	adds	r3, #50	; 0x32
 8003ec2:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <UART_SetConfig+0x2d4>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	f003 0207 	and.w	r2, r3, #7
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4422      	add	r2, r4
 8003ed6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ed8:	e105      	b.n	80040e6 <UART_SetConfig+0x4d6>
 8003eda:	bf00      	nop
 8003edc:	40011000 	.word	0x40011000
 8003ee0:	40011400 	.word	0x40011400
 8003ee4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ef2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ef6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003efa:	4642      	mov	r2, r8
 8003efc:	464b      	mov	r3, r9
 8003efe:	1891      	adds	r1, r2, r2
 8003f00:	6239      	str	r1, [r7, #32]
 8003f02:	415b      	adcs	r3, r3
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
 8003f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	1854      	adds	r4, r2, r1
 8003f0e:	4649      	mov	r1, r9
 8003f10:	eb43 0501 	adc.w	r5, r3, r1
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	00eb      	lsls	r3, r5, #3
 8003f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f22:	00e2      	lsls	r2, r4, #3
 8003f24:	4614      	mov	r4, r2
 8003f26:	461d      	mov	r5, r3
 8003f28:	4643      	mov	r3, r8
 8003f2a:	18e3      	adds	r3, r4, r3
 8003f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f30:	464b      	mov	r3, r9
 8003f32:	eb45 0303 	adc.w	r3, r5, r3
 8003f36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f56:	4629      	mov	r1, r5
 8003f58:	008b      	lsls	r3, r1, #2
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f60:	4621      	mov	r1, r4
 8003f62:	008a      	lsls	r2, r1, #2
 8003f64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f68:	f7fc fd04 	bl	8000974 <__aeabi_uldivmod>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4b60      	ldr	r3, [pc, #384]	; (80040f4 <UART_SetConfig+0x4e4>)
 8003f72:	fba3 2302 	umull	r2, r3, r3, r2
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	011c      	lsls	r4, r3, #4
 8003f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	464b      	mov	r3, r9
 8003f90:	1891      	adds	r1, r2, r2
 8003f92:	61b9      	str	r1, [r7, #24]
 8003f94:	415b      	adcs	r3, r3
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	1851      	adds	r1, r2, r1
 8003fa0:	6139      	str	r1, [r7, #16]
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	414b      	adcs	r3, r1
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fb4:	4659      	mov	r1, fp
 8003fb6:	00cb      	lsls	r3, r1, #3
 8003fb8:	4651      	mov	r1, sl
 8003fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fbe:	4651      	mov	r1, sl
 8003fc0:	00ca      	lsls	r2, r1, #3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4642      	mov	r2, r8
 8003fca:	189b      	adds	r3, r3, r2
 8003fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fd0:	464b      	mov	r3, r9
 8003fd2:	460a      	mov	r2, r1
 8003fd4:	eb42 0303 	adc.w	r3, r2, r3
 8003fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fe6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	008b      	lsls	r3, r1, #2
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ffe:	4641      	mov	r1, r8
 8004000:	008a      	lsls	r2, r1, #2
 8004002:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004006:	f7fc fcb5 	bl	8000974 <__aeabi_uldivmod>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4b39      	ldr	r3, [pc, #228]	; (80040f4 <UART_SetConfig+0x4e4>)
 8004010:	fba3 1302 	umull	r1, r3, r3, r2
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	2164      	movs	r1, #100	; 0x64
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	3332      	adds	r3, #50	; 0x32
 8004022:	4a34      	ldr	r2, [pc, #208]	; (80040f4 <UART_SetConfig+0x4e4>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800402e:	441c      	add	r4, r3
 8004030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004034:	2200      	movs	r2, #0
 8004036:	673b      	str	r3, [r7, #112]	; 0x70
 8004038:	677a      	str	r2, [r7, #116]	; 0x74
 800403a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800403e:	4642      	mov	r2, r8
 8004040:	464b      	mov	r3, r9
 8004042:	1891      	adds	r1, r2, r2
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	415b      	adcs	r3, r3
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800404e:	4641      	mov	r1, r8
 8004050:	1851      	adds	r1, r2, r1
 8004052:	6039      	str	r1, [r7, #0]
 8004054:	4649      	mov	r1, r9
 8004056:	414b      	adcs	r3, r1
 8004058:	607b      	str	r3, [r7, #4]
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004066:	4659      	mov	r1, fp
 8004068:	00cb      	lsls	r3, r1, #3
 800406a:	4651      	mov	r1, sl
 800406c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004070:	4651      	mov	r1, sl
 8004072:	00ca      	lsls	r2, r1, #3
 8004074:	4610      	mov	r0, r2
 8004076:	4619      	mov	r1, r3
 8004078:	4603      	mov	r3, r0
 800407a:	4642      	mov	r2, r8
 800407c:	189b      	adds	r3, r3, r2
 800407e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004080:	464b      	mov	r3, r9
 8004082:	460a      	mov	r2, r1
 8004084:	eb42 0303 	adc.w	r3, r2, r3
 8004088:	66fb      	str	r3, [r7, #108]	; 0x6c
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	663b      	str	r3, [r7, #96]	; 0x60
 8004094:	667a      	str	r2, [r7, #100]	; 0x64
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040a2:	4649      	mov	r1, r9
 80040a4:	008b      	lsls	r3, r1, #2
 80040a6:	4641      	mov	r1, r8
 80040a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ac:	4641      	mov	r1, r8
 80040ae:	008a      	lsls	r2, r1, #2
 80040b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040b4:	f7fc fc5e 	bl	8000974 <__aeabi_uldivmod>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <UART_SetConfig+0x4e4>)
 80040be:	fba3 1302 	umull	r1, r3, r3, r2
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	2164      	movs	r1, #100	; 0x64
 80040c6:	fb01 f303 	mul.w	r3, r1, r3
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	3332      	adds	r3, #50	; 0x32
 80040d0:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <UART_SetConfig+0x4e4>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	f003 020f 	and.w	r2, r3, #15
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4422      	add	r2, r4
 80040e4:	609a      	str	r2, [r3, #8]
}
 80040e6:	bf00      	nop
 80040e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040ec:	46bd      	mov	sp, r7
 80040ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f2:	bf00      	nop
 80040f4:	51eb851f 	.word	0x51eb851f

080040f8 <__libc_init_array>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	4d0d      	ldr	r5, [pc, #52]	; (8004130 <__libc_init_array+0x38>)
 80040fc:	4c0d      	ldr	r4, [pc, #52]	; (8004134 <__libc_init_array+0x3c>)
 80040fe:	1b64      	subs	r4, r4, r5
 8004100:	10a4      	asrs	r4, r4, #2
 8004102:	2600      	movs	r6, #0
 8004104:	42a6      	cmp	r6, r4
 8004106:	d109      	bne.n	800411c <__libc_init_array+0x24>
 8004108:	4d0b      	ldr	r5, [pc, #44]	; (8004138 <__libc_init_array+0x40>)
 800410a:	4c0c      	ldr	r4, [pc, #48]	; (800413c <__libc_init_array+0x44>)
 800410c:	f000 f820 	bl	8004150 <_init>
 8004110:	1b64      	subs	r4, r4, r5
 8004112:	10a4      	asrs	r4, r4, #2
 8004114:	2600      	movs	r6, #0
 8004116:	42a6      	cmp	r6, r4
 8004118:	d105      	bne.n	8004126 <__libc_init_array+0x2e>
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004120:	4798      	blx	r3
 8004122:	3601      	adds	r6, #1
 8004124:	e7ee      	b.n	8004104 <__libc_init_array+0xc>
 8004126:	f855 3b04 	ldr.w	r3, [r5], #4
 800412a:	4798      	blx	r3
 800412c:	3601      	adds	r6, #1
 800412e:	e7f2      	b.n	8004116 <__libc_init_array+0x1e>
 8004130:	08004188 	.word	0x08004188
 8004134:	08004188 	.word	0x08004188
 8004138:	08004188 	.word	0x08004188
 800413c:	0800418c 	.word	0x0800418c

08004140 <memset>:
 8004140:	4402      	add	r2, r0
 8004142:	4603      	mov	r3, r0
 8004144:	4293      	cmp	r3, r2
 8004146:	d100      	bne.n	800414a <memset+0xa>
 8004148:	4770      	bx	lr
 800414a:	f803 1b01 	strb.w	r1, [r3], #1
 800414e:	e7f9      	b.n	8004144 <memset+0x4>

08004150 <_init>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	bf00      	nop
 8004154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004156:	bc08      	pop	{r3}
 8004158:	469e      	mov	lr, r3
 800415a:	4770      	bx	lr

0800415c <_fini>:
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415e:	bf00      	nop
 8004160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004162:	bc08      	pop	{r3}
 8004164:	469e      	mov	lr, r3
 8004166:	4770      	bx	lr
