
week5_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d74  08003d74  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d7c  08003d7c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000020  08003da0  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08003da0  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f113  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d53  00000000  00000000  0002f15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00030eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00031be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b28  00000000  00000000  00032860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb0a  00000000  00000000  00049388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095db2  00000000  00000000  00057e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edc44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d4  00000000  00000000  000edc98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003d44 	.word	0x08003d44

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08003d44 	.word	0x08003d44

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fd52 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f8c6 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 faba 	bl	8000a54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 fa8e 	bl	8000a00 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e4:	f000 f928 	bl	8000738 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004e8:	f000 f978 	bl	80007dc <MX_TIM1_Init>
  MX_TIM3_Init();
 80004ec:	f000 fa16 	bl	800091c <MX_TIM3_Init>
  MX_TIM11_Init();
 80004f0:	f000 fa62 	bl	80009b8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  ///////////////////////////////////////////////////////////
  // start ADC, TIMER
  HAL_ADC_Start_IT(&hadc1); // Start_IT = start interrupt
 80004f4:	484e      	ldr	r0, [pc, #312]	; (8000630 <main+0x160>)
 80004f6:	f000 fdf7 	bl	80010e8 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80004fa:	484e      	ldr	r0, [pc, #312]	; (8000634 <main+0x164>)
 80004fc:	f002 f9c0 	bl	8002880 <HAL_TIM_Base_Start>

  // timer, OC gen PWM
  HAL_TIM_Base_Start(&htim1);
 8000500:	484d      	ldr	r0, [pc, #308]	; (8000638 <main+0x168>)
 8000502:	f002 f9bd 	bl	8002880 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000506:	2100      	movs	r1, #0
 8000508:	484b      	ldr	r0, [pc, #300]	; (8000638 <main+0x168>)
 800050a:	f002 facf 	bl	8002aac <HAL_TIM_PWM_Start>

  //timer for micros()
  HAL_TIM_Base_Start_IT(&htim11);
 800050e:	484b      	ldr	r0, [pc, #300]	; (800063c <main+0x16c>)
 8000510:	f002 fa10 	bl	8002934 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */

	  //ADCReadUpdate();

	  //2KHz loop use timer
	  if(micros() - TimeOutputLoop > 500){
 8000514:	f000 fb42 	bl	8000b9c <micros>
 8000518:	4b49      	ldr	r3, [pc, #292]	; (8000640 <main+0x170>)
 800051a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800051e:	1a84      	subs	r4, r0, r2
 8000520:	eb61 0503 	sbc.w	r5, r1, r3
 8000524:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	42ab      	cmp	r3, r5
 800052e:	bf08      	it	eq
 8000530:	42a2      	cmpeq	r2, r4
 8000532:	d20b      	bcs.n	800054c <main+0x7c>
		  TimeOutputLoop = micros(); // stamp
 8000534:	f000 fb32 	bl	8000b9c <micros>
 8000538:	4602      	mov	r2, r0
 800053a:	460b      	mov	r3, r1
 800053c:	4940      	ldr	r1, [pc, #256]	; (8000640 <main+0x170>)
 800053e:	e9c1 2300 	strd	r2, r3, [r1]
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMOut);
 8000542:	4b40      	ldr	r3, [pc, #256]	; (8000644 <main+0x174>)
 8000544:	881a      	ldrh	r2, [r3, #0]
 8000546:	4b3c      	ldr	r3, [pc, #240]	; (8000638 <main+0x168>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	635a      	str	r2, [r3, #52]	; 0x34
		  //ADC_Target = ADCFeedx[1].datt;
	  }
	  // control PWM to get 1V=> 1023 ADu
	  if(ADCUpdateFlag){
 800054c:	4b3e      	ldr	r3, [pc, #248]	; (8000648 <main+0x178>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0df      	beq.n	8000514 <main+0x44>
		  // any task when update flag = 1
		  // PID
		  Err[0] = ADC_Target - ADCFeedback;
 8000554:	4b3d      	ldr	r3, [pc, #244]	; (800064c <main+0x17c>)
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	4b3d      	ldr	r3, [pc, #244]	; (8000650 <main+0x180>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	b29b      	uxth	r3, r3
 8000560:	b21a      	sxth	r2, r3
 8000562:	4b3c      	ldr	r3, [pc, #240]	; (8000654 <main+0x184>)
 8000564:	801a      	strh	r2, [r3, #0]

		  PWMOut = PWMOut + (k_p * Err [0]) + (k_i * Integral) + (k_d *(Err[1]-Err[0]) );
 8000566:	4b37      	ldr	r3, [pc, #220]	; (8000644 <main+0x174>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	ee07 3a90 	vmov	s15, r3
 800056e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000572:	4b38      	ldr	r3, [pc, #224]	; (8000654 <main+0x184>)
 8000574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000578:	ee07 3a90 	vmov	s15, r3
 800057c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000580:	4b35      	ldr	r3, [pc, #212]	; (8000658 <main+0x188>)
 8000582:	edd3 7a00 	vldr	s15, [r3]
 8000586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800058a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800058e:	4b33      	ldr	r3, [pc, #204]	; (800065c <main+0x18c>)
 8000590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000594:	ee07 3a90 	vmov	s15, r3
 8000598:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800059c:	4b30      	ldr	r3, [pc, #192]	; (8000660 <main+0x190>)
 800059e:	edd3 7a00 	vldr	s15, [r3]
 80005a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005aa:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <main+0x184>)
 80005ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b28      	ldr	r3, [pc, #160]	; (8000654 <main+0x184>)
 80005b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	ee07 3a90 	vmov	s15, r3
 80005be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <main+0x194>)
 80005c4:	edd3 7a00 	vldr	s15, [r3]
 80005c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005d4:	ee17 3a90 	vmov	r3, s15
 80005d8:	b29a      	uxth	r2, r3
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <main+0x174>)
 80005dc:	801a      	strh	r2, [r3, #0]

		  // saturation
		  if(PWMOut >= 10000){
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <main+0x174>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d904      	bls.n	80005f4 <main+0x124>
			  PWMOut = 10000;
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <main+0x174>)
 80005ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80005f0:	801a      	strh	r2, [r3, #0]
 80005f2:	e014      	b.n	800061e <main+0x14e>
		  }
		  else if(PWMOut <= 0){
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <main+0x174>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d103      	bne.n	8000604 <main+0x134>
			  PWMOut = 0;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <main+0x174>)
 80005fe:	2200      	movs	r2, #0
 8000600:	801a      	strh	r2, [r3, #0]
 8000602:	e00c      	b.n	800061e <main+0x14e>
		  }
		  else{
			  Integral += Err[0];
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <main+0x184>)
 8000606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800060a:	b29a      	uxth	r2, r3
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <main+0x18c>)
 800060e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000612:	b29b      	uxth	r3, r3
 8000614:	4413      	add	r3, r2
 8000616:	b29b      	uxth	r3, r3
 8000618:	b21a      	sxth	r2, r3
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <main+0x18c>)
 800061c:	801a      	strh	r2, [r3, #0]
		  }
		  Err[1] = Err[0];
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <main+0x184>)
 8000620:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <main+0x184>)
 8000626:	805a      	strh	r2, [r3, #2]

		  ADCUpdateFlag = 0; //end task
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <main+0x178>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	  if(micros() - TimeOutputLoop > 500){
 800062e:	e771      	b.n	8000514 <main+0x44>
 8000630:	200000a0 	.word	0x200000a0
 8000634:	20000058 	.word	0x20000058
 8000638:	20000130 	.word	0x20000130
 800063c:	200000e8 	.word	0x200000e8
 8000640:	20000048 	.word	0x20000048
 8000644:	20000002 	.word	0x20000002
 8000648:	2000003c 	.word	0x2000003c
 800064c:	20000000 	.word	0x20000000
 8000650:	2000003e 	.word	0x2000003e
 8000654:	20000050 	.word	0x20000050
 8000658:	20000004 	.word	0x20000004
 800065c:	20000054 	.word	0x20000054
 8000660:	20000008 	.word	0x20000008
 8000664:	2000000c 	.word	0x2000000c

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 fb5c 	bl	8003d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <SystemClock_Config+0xc8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a26      	ldr	r2, [pc, #152]	; (8000730 <SystemClock_Config+0xc8>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b24      	ldr	r3, [pc, #144]	; (8000730 <SystemClock_Config+0xc8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <SystemClock_Config+0xcc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <SystemClock_Config+0xcc>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <SystemClock_Config+0xcc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006dc:	2364      	movs	r3, #100	; 0x64
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fc03 	bl	8001ef8 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f8:	f000 fa6a 	bl	8000bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2103      	movs	r1, #3
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fe65 	bl	80023e8 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000724:	f000 fa54 	bl	8000bd0 <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3750      	adds	r7, #80	; 0x50
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	463b      	mov	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_ADC1_Init+0x9c>)
 800074c:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <MX_ADC1_Init+0xa0>)
 800074e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_ADC1_Init+0x9c>)
 8000752:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000756:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_ADC1_Init+0x9c>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_ADC1_Init+0x9c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_ADC1_Init+0x9c>)
 8000766:	2200      	movs	r2, #0
 8000768:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_ADC1_Init+0x9c>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_ADC1_Init+0x9c>)
 8000774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_ADC1_Init+0x9c>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_ADC1_Init+0x9c>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_ADC1_Init+0x9c>)
 800078a:	2201      	movs	r2, #1
 800078c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_ADC1_Init+0x9c>)
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_ADC1_Init+0x9c>)
 8000798:	2201      	movs	r2, #1
 800079a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_ADC1_Init+0x9c>)
 800079e:	f000 fc5f 	bl	8001060 <HAL_ADC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80007a8:	f000 fa12 	bl	8000bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80007b4:	2301      	movs	r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_ADC1_Init+0x9c>)
 80007be:	f000 feb3 	bl	8001528 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80007c8:	f000 fa02 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000a0 	.word	0x200000a0
 80007d8:	40012000 	.word	0x40012000

080007dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b096      	sub	sp, #88	; 0x58
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2220      	movs	r2, #32
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f003 fa8d 	bl	8003d34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800081a:	4b3e      	ldr	r3, [pc, #248]	; (8000914 <MX_TIM1_Init+0x138>)
 800081c:	4a3e      	ldr	r2, [pc, #248]	; (8000918 <MX_TIM1_Init+0x13c>)
 800081e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000820:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <MX_TIM1_Init+0x138>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b3b      	ldr	r3, [pc, #236]	; (8000914 <MX_TIM1_Init+0x138>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 800082c:	4b39      	ldr	r3, [pc, #228]	; (8000914 <MX_TIM1_Init+0x138>)
 800082e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000832:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b37      	ldr	r3, [pc, #220]	; (8000914 <MX_TIM1_Init+0x138>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083a:	4b36      	ldr	r3, [pc, #216]	; (8000914 <MX_TIM1_Init+0x138>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000840:	4b34      	ldr	r3, [pc, #208]	; (8000914 <MX_TIM1_Init+0x138>)
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000846:	4833      	ldr	r0, [pc, #204]	; (8000914 <MX_TIM1_Init+0x138>)
 8000848:	f001 ffca 	bl	80027e0 <HAL_TIM_Base_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000852:	f000 f9bd 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800085c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000860:	4619      	mov	r1, r3
 8000862:	482c      	ldr	r0, [pc, #176]	; (8000914 <MX_TIM1_Init+0x138>)
 8000864:	f002 fb9c 	bl	8002fa0 <HAL_TIM_ConfigClockSource>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800086e:	f000 f9af 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000872:	4828      	ldr	r0, [pc, #160]	; (8000914 <MX_TIM1_Init+0x138>)
 8000874:	f002 f8c0 	bl	80029f8 <HAL_TIM_PWM_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800087e:	f000 f9a7 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800088a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800088e:	4619      	mov	r1, r3
 8000890:	4820      	ldr	r0, [pc, #128]	; (8000914 <MX_TIM1_Init+0x138>)
 8000892:	f002 ff41 	bl	8003718 <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800089c:	f000 f998 	bl	8000bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a0:	2360      	movs	r3, #96	; 0x60
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	2200      	movs	r2, #0
 80008c2:	4619      	mov	r1, r3
 80008c4:	4813      	ldr	r0, [pc, #76]	; (8000914 <MX_TIM1_Init+0x138>)
 80008c6:	f002 faa9 	bl	8002e1c <HAL_TIM_PWM_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80008d0:	f000 f97e 	bl	8000bd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4807      	ldr	r0, [pc, #28]	; (8000914 <MX_TIM1_Init+0x138>)
 80008f8:	f002 ff7c 	bl	80037f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000902:	f000 f965 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000906:	4803      	ldr	r0, [pc, #12]	; (8000914 <MX_TIM1_Init+0x138>)
 8000908:	f000 fa38 	bl	8000d7c <HAL_TIM_MspPostInit>

}
 800090c:	bf00      	nop
 800090e:	3758      	adds	r7, #88	; 0x58
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000130 	.word	0x20000130
 8000918:	40010000 	.word	0x40010000

0800091c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_TIM3_Init+0x94>)
 800093a:	4a1e      	ldr	r2, [pc, #120]	; (80009b4 <MX_TIM3_Init+0x98>)
 800093c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_TIM3_Init+0x94>)
 8000940:	2209      	movs	r2, #9
 8000942:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_TIM3_Init+0x94>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_TIM3_Init+0x94>)
 800094c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000950:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_TIM3_Init+0x94>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_TIM3_Init+0x94>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800095e:	4814      	ldr	r0, [pc, #80]	; (80009b0 <MX_TIM3_Init+0x94>)
 8000960:	f001 ff3e 	bl	80027e0 <HAL_TIM_Base_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800096a:	f000 f931 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	4619      	mov	r1, r3
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_TIM3_Init+0x94>)
 800097c:	f002 fb10 	bl	8002fa0 <HAL_TIM_ConfigClockSource>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 f923 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800098a:	2320      	movs	r3, #32
 800098c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	4619      	mov	r1, r3
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <MX_TIM3_Init+0x94>)
 8000998:	f002 febe 	bl	8003718 <HAL_TIMEx_MasterConfigSynchronization>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80009a2:	f000 f915 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000058 	.word	0x20000058
 80009b4:	40000400 	.word	0x40000400

080009b8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_TIM11_Init+0x40>)
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <MX_TIM11_Init+0x44>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_TIM11_Init+0x40>)
 80009c4:	2263      	movs	r2, #99	; 0x63
 80009c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_TIM11_Init+0x40>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_TIM11_Init+0x40>)
 80009d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_TIM11_Init+0x40>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_TIM11_Init+0x40>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_TIM11_Init+0x40>)
 80009e4:	f001 fefc 	bl	80027e0 <HAL_TIM_Base_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80009ee:	f000 f8ef 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000e8 	.word	0x200000e8
 80009fc:	40014800 	.word	0x40014800

08000a00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_USART2_UART_Init+0x4c>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <MX_USART2_UART_Init+0x50>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_USART2_UART_Init+0x4c>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_USART2_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_USART2_UART_Init+0x4c>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_USART2_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_USART2_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_USART2_UART_Init+0x4c>)
 8000a38:	f002 ff42 	bl	80038c0 <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a42:	f000 f8c5 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000178 	.word	0x20000178
 8000a50:	40004400 	.word	0x40004400

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a2c      	ldr	r2, [pc, #176]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a25      	ldr	r2, [pc, #148]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a1e      	ldr	r2, [pc, #120]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2120      	movs	r1, #32
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <MX_GPIO_Init+0xd4>)
 8000ae0:	f001 f9f0 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <MX_GPIO_Init+0xd8>)
 8000afc:	f001 f85e 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b00:	2320      	movs	r3, #32
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4804      	ldr	r0, [pc, #16]	; (8000b28 <MX_GPIO_Init+0xd4>)
 8000b18:	f001 f850 	bl	8001bbc <HAL_GPIO_Init>

}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	; 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	40020800 	.word	0x40020800

08000b30 <HAL_ADC_ConvCpltCallback>:
	HAL_ADC_Stop(&hadc1);
	}
}
*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) // feedback new ADC every 1K
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	ADCFeedback = HAL_ADC_GetValue(&hadc1);
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <HAL_ADC_ConvCpltCallback+0x24>)
 8000b3a:	f000 fcd4 	bl	80014e6 <HAL_ADC_GetValue>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_ADC_ConvCpltCallback+0x28>)
 8000b44:	801a      	strh	r2, [r3, #0]
	ADCUpdateFlag = 1;
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_ADC_ConvCpltCallback+0x2c>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000a0 	.word	0x200000a0
 8000b58:	2000003e 	.word	0x2000003e
 8000b5c:	2000003c 	.word	0x2000003c

08000b60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b60:	b4b0      	push	{r4, r5, r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	if(htim == &htim11){
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d10c      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b7a:	f04f 0100 	mov.w	r1, #0
 8000b7e:	1814      	adds	r4, r2, r0
 8000b80:	eb43 0501 	adc.w	r5, r3, r1
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b86:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bcb0      	pop	{r4, r5, r7}
 8000b92:	4770      	bx	lr
 8000b94:	200000e8 	.word	0x200000e8
 8000b98:	20000040 	.word	0x20000040

08000b9c <micros>:

uint64_t micros() {
 8000b9c:	b4b0      	push	{r4, r5, r7}
 8000b9e:	af00      	add	r7, sp, #0
	return _micro + htim11.Instance->CNT;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <micros+0x2c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f04f 0100 	mov.w	r1, #0
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <micros+0x30>)
 8000bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb2:	1884      	adds	r4, r0, r2
 8000bb4:	eb41 0503 	adc.w	r5, r1, r3
 8000bb8:	4622      	mov	r2, r4
 8000bba:	462b      	mov	r3, r5
}
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bcb0      	pop	{r4, r5, r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200000e8 	.word	0x200000e8
 8000bcc:	20000040 	.word	0x20000040

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c1a:	2007      	movs	r0, #7
 8000c1c:	f000 ff8c 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <HAL_ADC_MspInit+0x8c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d12f      	bne.n	8000cae <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <HAL_ADC_MspInit+0x90>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <HAL_ADC_MspInit+0x90>)
 8000c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <HAL_ADC_MspInit+0x90>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <HAL_ADC_MspInit+0x90>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <HAL_ADC_MspInit+0x90>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_ADC_MspInit+0x90>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c86:	2303      	movs	r3, #3
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <HAL_ADC_MspInit+0x94>)
 8000c9a:	f000 ff8f 	bl	8001bbc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2012      	movs	r0, #18
 8000ca4:	f000 ff53 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ca8:	2012      	movs	r0, #18
 8000caa:	f000 ff6c 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40012000 	.word	0x40012000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a26      	ldr	r2, [pc, #152]	; (8000d6c <HAL_TIM_Base_MspInit+0xa8>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d116      	bne.n	8000d04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <HAL_TIM_Base_MspInit+0xac>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a24      	ldr	r2, [pc, #144]	; (8000d70 <HAL_TIM_Base_MspInit+0xac>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <HAL_TIM_Base_MspInit+0xac>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	201a      	movs	r0, #26
 8000cf8:	f000 ff29 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000cfc:	201a      	movs	r0, #26
 8000cfe:	f000 ff42 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000d02:	e02e      	b.n	8000d62 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a1a      	ldr	r2, [pc, #104]	; (8000d74 <HAL_TIM_Base_MspInit+0xb0>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d10e      	bne.n	8000d2c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_TIM_Base_MspInit+0xac>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <HAL_TIM_Base_MspInit+0xac>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_TIM_Base_MspInit+0xac>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
}
 8000d2a:	e01a      	b.n	8000d62 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a11      	ldr	r2, [pc, #68]	; (8000d78 <HAL_TIM_Base_MspInit+0xb4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d115      	bne.n	8000d62 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_TIM_Base_MspInit+0xac>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <HAL_TIM_Base_MspInit+0xac>)
 8000d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_TIM_Base_MspInit+0xac>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	201a      	movs	r0, #26
 8000d58:	f000 fef9 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d5c:	201a      	movs	r0, #26
 8000d5e:	f000 ff12 	bl	8001b86 <HAL_NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40010000 	.word	0x40010000
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40000400 	.word	0x40000400
 8000d78:	40014800 	.word	0x40014800

08000d7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <HAL_TIM_MspPostInit+0x68>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d11e      	bne.n	8000ddc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_TIM_MspPostInit+0x6c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_TIM_MspPostInit+0x6c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_TIM_MspPostInit+0x6c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_PWM_Pin;
 8000dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM1_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_TIM_MspPostInit+0x70>)
 8000dd8:	f000 fef0 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40010000 	.word	0x40010000
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000

08000df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <HAL_UART_MspInit+0x84>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d12b      	bne.n	8000e6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_UART_MspInit+0x88>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <HAL_UART_MspInit+0x88>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_UART_MspInit+0x88>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_UART_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_UART_MspInit+0x88>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_UART_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <HAL_UART_MspInit+0x8c>)
 8000e66:	f000 fea9 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	; 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40004400 	.word	0x40004400
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ecc:	f000 f8a8 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <ADC_IRQHandler+0x10>)
 8000eda:	f000 f9c3 	bl	8001264 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000a0 	.word	0x200000a0

08000ee8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000eee:	f001 fe8d 	bl	8002c0c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000ef4:	f001 fe8a 	bl	8002c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000130 	.word	0x20000130
 8000f00:	200000e8 	.word	0x200000e8

08000f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f2e:	490e      	ldr	r1, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f44:	4c0b      	ldr	r4, [pc, #44]	; (8000f74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f52:	f7ff ffd7 	bl	8000f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f56:	f002 fec9 	bl	8003cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5a:	f7ff fab9 	bl	80004d0 <main>
  bx  lr    
 8000f5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000f6c:	08003d84 	.word	0x08003d84
  ldr r2, =_sbss
 8000f70:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000f74:	200001c0 	.word	0x200001c0

08000f78 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <DMA1_Stream0_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 fdc7 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fe14 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fddf 	bl	8001ba2 <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 fda7 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000010 	.word	0x20000010
 8001018:	20000018 	.word	0x20000018
 800101c:	20000014 	.word	0x20000014

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000018 	.word	0x20000018
 8001044:	200001bc 	.word	0x200001bc

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200001bc 	.word	0x200001bc

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff fdd4 	bl	8000c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fb6a 	bl	800178c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start_IT+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a1      	b.n	8001246 <HAL_ADC_Start_IT+0x15e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4a      	ldr	r3, [pc, #296]	; (8001254 <HAL_ADC_Start_IT+0x16c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4a      	ldr	r2, [pc, #296]	; (8001258 <HAL_ADC_Start_IT+0x170>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d169      	bne.n	800122c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <HAL_ADC_Start_IT+0x174>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 031f 	and.w	r3, r3, #31
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10f      	bne.n	8001202 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d129      	bne.n	8001244 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	e020      	b.n	8001244 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a16      	ldr	r2, [pc, #88]	; (8001260 <HAL_ADC_Start_IT+0x178>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d11b      	bne.n	8001244 <HAL_ADC_Start_IT+0x15c>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d114      	bne.n	8001244 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	e00b      	b.n	8001244 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f043 0210 	orr.w	r2, r3, #16
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123c:	f043 0201 	orr.w	r2, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000010 	.word	0x20000010
 8001258:	431bde83 	.word	0x431bde83
 800125c:	40012300 	.word	0x40012300
 8001260:	40012000 	.word	0x40012000

08001264 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b02      	cmp	r3, #2
 8001280:	bf0c      	ite	eq
 8001282:	2301      	moveq	r3, #1
 8001284:	2300      	movne	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	2b20      	cmp	r3, #32
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d049      	beq.n	800133a <HAL_ADC_IRQHandler+0xd6>
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d046      	beq.n	800133a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 0310 	and.w	r3, r3, #16
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d105      	bne.n	80012c4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d12b      	bne.n	800132a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d127      	bne.n	800132a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d119      	bne.n	800132a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0220 	bic.w	r2, r2, #32
 8001304:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f043 0201 	orr.w	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fc00 	bl	8000b30 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f06f 0212 	mvn.w	r2, #18
 8001338:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b04      	cmp	r3, #4
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135a:	2b80      	cmp	r3, #128	; 0x80
 800135c:	bf0c      	ite	eq
 800135e:	2301      	moveq	r3, #1
 8001360:	2300      	movne	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d057      	beq.n	800141c <HAL_ADC_IRQHandler+0x1b8>
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d054      	beq.n	800141c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	2b00      	cmp	r3, #0
 800137c:	d105      	bne.n	800138a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d139      	bne.n	800140c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d006      	beq.n	80013b4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d12b      	bne.n	800140c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d124      	bne.n	800140c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d11d      	bne.n	800140c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d119      	bne.n	800140c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d105      	bne.n	800140c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f043 0201 	orr.w	r2, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fab9 	bl	8001984 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f06f 020c 	mvn.w	r2, #12
 800141a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b01      	cmp	r3, #1
 8001428:	bf0c      	ite	eq
 800142a:	2301      	moveq	r3, #1
 800142c:	2300      	movne	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143c:	2b40      	cmp	r3, #64	; 0x40
 800143e:	bf0c      	ite	eq
 8001440:	2301      	moveq	r3, #1
 8001442:	2300      	movne	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d017      	beq.n	800147e <HAL_ADC_IRQHandler+0x21a>
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d014      	beq.n	800147e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b01      	cmp	r3, #1
 8001460:	d10d      	bne.n	800147e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f846 	bl	8001500 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f06f 0201 	mvn.w	r2, #1
 800147c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	2b20      	cmp	r3, #32
 800148a:	bf0c      	ite	eq
 800148c:	2301      	moveq	r3, #1
 800148e:	2300      	movne	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800149e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014a2:	bf0c      	ite	eq
 80014a4:	2301      	moveq	r3, #1
 80014a6:	2300      	movne	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d015      	beq.n	80014de <HAL_ADC_IRQHandler+0x27a>
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d012      	beq.n	80014de <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	f043 0202 	orr.w	r2, r3, #2
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f06f 0220 	mvn.w	r2, #32
 80014cc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f820 	bl	8001514 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f06f 0220 	mvn.w	r2, #32
 80014dc:	601a      	str	r2, [r3, #0]
  }
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1c>
 8001540:	2302      	movs	r3, #2
 8001542:	e113      	b.n	800176c <HAL_ADC_ConfigChannel+0x244>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b09      	cmp	r3, #9
 8001552:	d925      	bls.n	80015a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68d9      	ldr	r1, [r3, #12]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	b29b      	uxth	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	3b1e      	subs	r3, #30
 800156a:	2207      	movs	r2, #7
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43da      	mvns	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	400a      	ands	r2, r1
 8001578:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68d9      	ldr	r1, [r3, #12]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	4618      	mov	r0, r3
 800158c:	4603      	mov	r3, r0
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4403      	add	r3, r0
 8001592:	3b1e      	subs	r3, #30
 8001594:	409a      	lsls	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	e022      	b.n	80015e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6919      	ldr	r1, [r3, #16]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	2207      	movs	r2, #7
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	400a      	ands	r2, r1
 80015c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6919      	ldr	r1, [r3, #16]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4403      	add	r3, r0
 80015dc:	409a      	lsls	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d824      	bhi.n	8001638 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	3b05      	subs	r3, #5
 8001600:	221f      	movs	r2, #31
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	400a      	ands	r2, r1
 800160e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	3b05      	subs	r3, #5
 800162a:	fa00 f203 	lsl.w	r2, r0, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	635a      	str	r2, [r3, #52]	; 0x34
 8001636:	e04c      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b0c      	cmp	r3, #12
 800163e:	d824      	bhi.n	800168a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	3b23      	subs	r3, #35	; 0x23
 8001652:	221f      	movs	r2, #31
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43da      	mvns	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	400a      	ands	r2, r1
 8001660:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	4618      	mov	r0, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	3b23      	subs	r3, #35	; 0x23
 800167c:	fa00 f203 	lsl.w	r2, r0, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	631a      	str	r2, [r3, #48]	; 0x30
 8001688:	e023      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	3b41      	subs	r3, #65	; 0x41
 800169c:	221f      	movs	r2, #31
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	400a      	ands	r2, r1
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	3b41      	subs	r3, #65	; 0x41
 80016c6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016d2:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HAL_ADC_ConfigChannel+0x250>)
 80016d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a28      	ldr	r2, [pc, #160]	; (800177c <HAL_ADC_ConfigChannel+0x254>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d10f      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x1d8>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b12      	cmp	r3, #18
 80016e6:	d10b      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a1d      	ldr	r2, [pc, #116]	; (800177c <HAL_ADC_ConfigChannel+0x254>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d12b      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x23a>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <HAL_ADC_ConfigChannel+0x258>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d003      	beq.n	800171c <HAL_ADC_ConfigChannel+0x1f4>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b11      	cmp	r3, #17
 800171a:	d122      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a11      	ldr	r2, [pc, #68]	; (8001780 <HAL_ADC_ConfigChannel+0x258>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d111      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_ADC_ConfigChannel+0x25c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a11      	ldr	r2, [pc, #68]	; (8001788 <HAL_ADC_ConfigChannel+0x260>)
 8001744:	fba2 2303 	umull	r2, r3, r2, r3
 8001748:	0c9a      	lsrs	r2, r3, #18
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001754:	e002      	b.n	800175c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3b01      	subs	r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f9      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40012300 	.word	0x40012300
 800177c:	40012000 	.word	0x40012000
 8001780:	10000012 	.word	0x10000012
 8001784:	20000010 	.word	0x20000010
 8001788:	431bde83 	.word	0x431bde83

0800178c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001794:	4b79      	ldr	r3, [pc, #484]	; (800197c <ADC_Init+0x1f0>)
 8001796:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6859      	ldr	r1, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	021a      	lsls	r2, r3, #8
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001806:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6899      	ldr	r1, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	4a58      	ldr	r2, [pc, #352]	; (8001980 <ADC_Init+0x1f4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d022      	beq.n	800186a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001832:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6899      	ldr	r1, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001854:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6899      	ldr	r1, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	e00f      	b.n	800188a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001878:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001888:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0202 	bic.w	r2, r2, #2
 8001898:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6899      	ldr	r1, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7e1b      	ldrb	r3, [r3, #24]
 80018a4:	005a      	lsls	r2, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d01b      	beq.n	80018f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6859      	ldr	r1, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	3b01      	subs	r3, #1
 80018e4:	035a      	lsls	r2, r3, #13
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	e007      	b.n	8001900 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	3b01      	subs	r3, #1
 800191c:	051a      	lsls	r2, r3, #20
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001934:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6899      	ldr	r1, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001942:	025a      	lsls	r2, r3, #9
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800195a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6899      	ldr	r1, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	029a      	lsls	r2, r3, #10
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	609a      	str	r2, [r3, #8]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	40012300 	.word	0x40012300
 8001980:	0f000001 	.word	0x0f000001

08001984 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <__NVIC_EnableIRQ+0x38>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff8e 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff29 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff3e 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff8e 	bl	8001a8c <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5d 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff31 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa2 	bl	8001af4 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	e159      	b.n	8001e8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd8:	2201      	movs	r2, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	f040 8148 	bne.w	8001e86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d005      	beq.n	8001c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d130      	bne.n	8001c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 0201 	and.w	r2, r3, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d017      	beq.n	8001cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d123      	bne.n	8001d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	69b9      	ldr	r1, [r7, #24]
 8001cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80a2 	beq.w	8001e86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b57      	ldr	r3, [pc, #348]	; (8001ea4 <HAL_GPIO_Init+0x2e8>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a56      	ldr	r2, [pc, #344]	; (8001ea4 <HAL_GPIO_Init+0x2e8>)
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b54      	ldr	r3, [pc, #336]	; (8001ea4 <HAL_GPIO_Init+0x2e8>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d5e:	4a52      	ldr	r2, [pc, #328]	; (8001ea8 <HAL_GPIO_Init+0x2ec>)
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	220f      	movs	r2, #15
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a49      	ldr	r2, [pc, #292]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d019      	beq.n	8001dbe <HAL_GPIO_Init+0x202>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a48      	ldr	r2, [pc, #288]	; (8001eb0 <HAL_GPIO_Init+0x2f4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_GPIO_Init+0x1fe>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a47      	ldr	r2, [pc, #284]	; (8001eb4 <HAL_GPIO_Init+0x2f8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00d      	beq.n	8001db6 <HAL_GPIO_Init+0x1fa>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a46      	ldr	r2, [pc, #280]	; (8001eb8 <HAL_GPIO_Init+0x2fc>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d007      	beq.n	8001db2 <HAL_GPIO_Init+0x1f6>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a45      	ldr	r2, [pc, #276]	; (8001ebc <HAL_GPIO_Init+0x300>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_GPIO_Init+0x1f2>
 8001daa:	2304      	movs	r3, #4
 8001dac:	e008      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001dae:	2307      	movs	r3, #7
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001db2:	2303      	movs	r3, #3
 8001db4:	e004      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e002      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	f002 0203 	and.w	r2, r2, #3
 8001dc6:	0092      	lsls	r2, r2, #2
 8001dc8:	4093      	lsls	r3, r2
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd0:	4935      	ldr	r1, [pc, #212]	; (8001ea8 <HAL_GPIO_Init+0x2ec>)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dde:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e02:	4a2f      	ldr	r2, [pc, #188]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e2c:	4a24      	ldr	r2, [pc, #144]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e32:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e56:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e5c:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e80:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2b0f      	cmp	r3, #15
 8001e90:	f67f aea2 	bls.w	8001bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40013800 	.word	0x40013800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40020c00 	.word	0x40020c00
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40013c00 	.word	0x40013c00

08001ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed4:	787b      	ldrb	r3, [r7, #1]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee0:	e003      	b.n	8001eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ee2:	887b      	ldrh	r3, [r7, #2]
 8001ee4:	041a      	lsls	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	619a      	str	r2, [r3, #24]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e264      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d075      	beq.n	8002002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f16:	4ba3      	ldr	r3, [pc, #652]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d00c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f22:	4ba0      	ldr	r3, [pc, #640]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d112      	bne.n	8001f54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2e:	4b9d      	ldr	r3, [pc, #628]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f3a:	d10b      	bne.n	8001f54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	4b99      	ldr	r3, [pc, #612]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d05b      	beq.n	8002000 <HAL_RCC_OscConfig+0x108>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d157      	bne.n	8002000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e23f      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_OscConfig+0x74>
 8001f5e:	4b91      	ldr	r3, [pc, #580]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a90      	ldr	r2, [pc, #576]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e01d      	b.n	8001fa8 <HAL_RCC_OscConfig+0xb0>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x98>
 8001f76:	4b8b      	ldr	r3, [pc, #556]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a8a      	ldr	r2, [pc, #552]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b88      	ldr	r3, [pc, #544]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a87      	ldr	r2, [pc, #540]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCC_OscConfig+0xb0>
 8001f90:	4b84      	ldr	r3, [pc, #528]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a83      	ldr	r2, [pc, #524]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	4b81      	ldr	r3, [pc, #516]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a80      	ldr	r2, [pc, #512]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d013      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f84a 	bl	8001048 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff f846 	bl	8001048 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e204      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0xc0>
 8001fd6:	e014      	b.n	8002002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f836 	bl	8001048 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff f832 	bl	8001048 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e1f0      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0xe8>
 8001ffe:	e000      	b.n	8002002 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d063      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800200e:	4b65      	ldr	r3, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201a:	4b62      	ldr	r3, [pc, #392]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002022:	2b08      	cmp	r3, #8
 8002024:	d11c      	bne.n	8002060 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002026:	4b5f      	ldr	r3, [pc, #380]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d116      	bne.n	8002060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002032:	4b5c      	ldr	r3, [pc, #368]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_RCC_OscConfig+0x152>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e1c4      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204a:	4b56      	ldr	r3, [pc, #344]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4952      	ldr	r1, [pc, #328]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205e:	e03a      	b.n	80020d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002068:	4b4f      	ldr	r3, [pc, #316]	; (80021a8 <HAL_RCC_OscConfig+0x2b0>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206e:	f7fe ffeb 	bl	8001048 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002076:	f7fe ffe7 	bl	8001048 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e1a5      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002088:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002094:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4940      	ldr	r1, [pc, #256]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]
 80020a8:	e015      	b.n	80020d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020aa:	4b3f      	ldr	r3, [pc, #252]	; (80021a8 <HAL_RCC_OscConfig+0x2b0>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe ffca 	bl	8001048 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b8:	f7fe ffc6 	bl	8001048 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e184      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d030      	beq.n	8002144 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d016      	beq.n	8002118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ea:	4b30      	ldr	r3, [pc, #192]	; (80021ac <HAL_RCC_OscConfig+0x2b4>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7fe ffaa 	bl	8001048 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f8:	f7fe ffa6 	bl	8001048 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e164      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x200>
 8002116:	e015      	b.n	8002144 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCC_OscConfig+0x2b4>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7fe ff93 	bl	8001048 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002126:	f7fe ff8f 	bl	8001048 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e14d      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 800213a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80a0 	beq.w	8002292 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10f      	bne.n	8002182 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217e:	2301      	movs	r3, #1
 8002180:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_OscConfig+0x2b8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d121      	bne.n	80021d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_RCC_OscConfig+0x2b8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_RCC_OscConfig+0x2b8>)
 8002194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219a:	f7fe ff55 	bl	8001048 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	e011      	b.n	80021c6 <HAL_RCC_OscConfig+0x2ce>
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	42470000 	.word	0x42470000
 80021ac:	42470e80 	.word	0x42470e80
 80021b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b4:	f7fe ff48 	bl	8001048 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e106      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c6:	4b85      	ldr	r3, [pc, #532]	; (80023dc <HAL_RCC_OscConfig+0x4e4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d106      	bne.n	80021e8 <HAL_RCC_OscConfig+0x2f0>
 80021da:	4b81      	ldr	r3, [pc, #516]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	4a80      	ldr	r2, [pc, #512]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6713      	str	r3, [r2, #112]	; 0x70
 80021e6:	e01c      	b.n	8002222 <HAL_RCC_OscConfig+0x32a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d10c      	bne.n	800220a <HAL_RCC_OscConfig+0x312>
 80021f0:	4b7b      	ldr	r3, [pc, #492]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	4a7a      	ldr	r2, [pc, #488]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	6713      	str	r3, [r2, #112]	; 0x70
 80021fc:	4b78      	ldr	r3, [pc, #480]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	4a77      	ldr	r2, [pc, #476]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6713      	str	r3, [r2, #112]	; 0x70
 8002208:	e00b      	b.n	8002222 <HAL_RCC_OscConfig+0x32a>
 800220a:	4b75      	ldr	r3, [pc, #468]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	4a74      	ldr	r2, [pc, #464]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 8002210:	f023 0301 	bic.w	r3, r3, #1
 8002214:	6713      	str	r3, [r2, #112]	; 0x70
 8002216:	4b72      	ldr	r3, [pc, #456]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	4a71      	ldr	r2, [pc, #452]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 800221c:	f023 0304 	bic.w	r3, r3, #4
 8002220:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d015      	beq.n	8002256 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7fe ff0d 	bl	8001048 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7fe ff09 	bl	8001048 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e0c5      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	4b65      	ldr	r3, [pc, #404]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 800224a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0ee      	beq.n	8002232 <HAL_RCC_OscConfig+0x33a>
 8002254:	e014      	b.n	8002280 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7fe fef7 	bl	8001048 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7fe fef3 	bl	8001048 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	; 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e0af      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002274:	4b5a      	ldr	r3, [pc, #360]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ee      	bne.n	800225e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002280:	7dfb      	ldrb	r3, [r7, #23]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d105      	bne.n	8002292 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002286:	4b56      	ldr	r3, [pc, #344]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a55      	ldr	r2, [pc, #340]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 800228c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 809b 	beq.w	80023d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229c:	4b50      	ldr	r3, [pc, #320]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d05c      	beq.n	8002362 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d141      	bne.n	8002334 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b0:	4b4c      	ldr	r3, [pc, #304]	; (80023e4 <HAL_RCC_OscConfig+0x4ec>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe fec7 	bl	8001048 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022be:	f7fe fec3 	bl	8001048 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e081      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d0:	4b43      	ldr	r3, [pc, #268]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	019b      	lsls	r3, r3, #6
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	3b01      	subs	r3, #1
 80022f6:	041b      	lsls	r3, r3, #16
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	061b      	lsls	r3, r3, #24
 8002300:	4937      	ldr	r1, [pc, #220]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002306:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <HAL_RCC_OscConfig+0x4ec>)
 8002308:	2201      	movs	r2, #1
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7fe fe9c 	bl	8001048 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002314:	f7fe fe98 	bl	8001048 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e056      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002326:	4b2e      	ldr	r3, [pc, #184]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x41c>
 8002332:	e04e      	b.n	80023d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002334:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <HAL_RCC_OscConfig+0x4ec>)
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fe85 	bl	8001048 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002342:	f7fe fe81 	bl	8001048 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e03f      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002354:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f0      	bne.n	8002342 <HAL_RCC_OscConfig+0x44a>
 8002360:	e037      	b.n	80023d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e032      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <HAL_RCC_OscConfig+0x4e8>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d028      	beq.n	80023ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d121      	bne.n	80023ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d11a      	bne.n	80023ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800239e:	4013      	ands	r3, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d111      	bne.n	80023ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	085b      	lsrs	r3, r3, #1
 80023b6:	3b01      	subs	r3, #1
 80023b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40007000 	.word	0x40007000
 80023e0:	40023800 	.word	0x40023800
 80023e4:	42470060 	.word	0x42470060

080023e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0cc      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4b68      	ldr	r3, [pc, #416]	; (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d90c      	bls.n	8002424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b65      	ldr	r3, [pc, #404]	; (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b63      	ldr	r3, [pc, #396]	; (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0b8      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800243c:	4b59      	ldr	r3, [pc, #356]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a58      	ldr	r2, [pc, #352]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002446:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002454:	4b53      	ldr	r3, [pc, #332]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800245e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002460:	4b50      	ldr	r3, [pc, #320]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	494d      	ldr	r1, [pc, #308]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d044      	beq.n	8002508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d119      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e07f      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d003      	beq.n	80024a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e06f      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e067      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	4b37      	ldr	r3, [pc, #220]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4934      	ldr	r1, [pc, #208]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d8:	f7fe fdb6 	bl	8001048 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fe fdb2 	bl	8001048 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e04f      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 020c 	and.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	d1eb      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d20c      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e032      	b.n	8002596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4916      	ldr	r1, [pc, #88]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	490e      	ldr	r1, [pc, #56]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800256e:	f000 f821 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8002572:	4602      	mov	r2, r0
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	490a      	ldr	r1, [pc, #40]	; (80025a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	5ccb      	ldrb	r3, [r1, r3]
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
 8002586:	4a09      	ldr	r2, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fd16 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40023c00 	.word	0x40023c00
 80025a4:	40023800 	.word	0x40023800
 80025a8:	08003d5c 	.word	0x08003d5c
 80025ac:	20000010 	.word	0x20000010
 80025b0:	20000014 	.word	0x20000014

080025b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	2300      	movs	r3, #0
 80025c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025cc:	4b67      	ldr	r3, [pc, #412]	; (800276c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d00d      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x40>
 80025d8:	2b08      	cmp	r3, #8
 80025da:	f200 80bd 	bhi.w	8002758 <HAL_RCC_GetSysClockFreq+0x1a4>
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x34>
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d003      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0x3a>
 80025e6:	e0b7      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4b61      	ldr	r3, [pc, #388]	; (8002770 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80025ea:	60bb      	str	r3, [r7, #8]
       break;
 80025ec:	e0b7      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ee:	4b61      	ldr	r3, [pc, #388]	; (8002774 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80025f0:	60bb      	str	r3, [r7, #8]
      break;
 80025f2:	e0b4      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f4:	4b5d      	ldr	r3, [pc, #372]	; (800276c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025fe:	4b5b      	ldr	r3, [pc, #364]	; (800276c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d04d      	beq.n	80026a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260a:	4b58      	ldr	r3, [pc, #352]	; (800276c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	099b      	lsrs	r3, r3, #6
 8002610:	461a      	mov	r2, r3
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	f240 10ff 	movw	r0, #511	; 0x1ff
 800261a:	f04f 0100 	mov.w	r1, #0
 800261e:	ea02 0800 	and.w	r8, r2, r0
 8002622:	ea03 0901 	and.w	r9, r3, r1
 8002626:	4640      	mov	r0, r8
 8002628:	4649      	mov	r1, r9
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	014b      	lsls	r3, r1, #5
 8002634:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002638:	0142      	lsls	r2, r0, #5
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	ebb0 0008 	subs.w	r0, r0, r8
 8002642:	eb61 0109 	sbc.w	r1, r1, r9
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	018b      	lsls	r3, r1, #6
 8002650:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002654:	0182      	lsls	r2, r0, #6
 8002656:	1a12      	subs	r2, r2, r0
 8002658:	eb63 0301 	sbc.w	r3, r3, r1
 800265c:	f04f 0000 	mov.w	r0, #0
 8002660:	f04f 0100 	mov.w	r1, #0
 8002664:	00d9      	lsls	r1, r3, #3
 8002666:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800266a:	00d0      	lsls	r0, r2, #3
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	eb12 0208 	adds.w	r2, r2, r8
 8002674:	eb43 0309 	adc.w	r3, r3, r9
 8002678:	f04f 0000 	mov.w	r0, #0
 800267c:	f04f 0100 	mov.w	r1, #0
 8002680:	0259      	lsls	r1, r3, #9
 8002682:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002686:	0250      	lsls	r0, r2, #9
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	461a      	mov	r2, r3
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	f7fd fd9e 	bl	80001d8 <__aeabi_uldivmod>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4613      	mov	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e04a      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a6:	4b31      	ldr	r3, [pc, #196]	; (800276c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	099b      	lsrs	r3, r3, #6
 80026ac:	461a      	mov	r2, r3
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026b6:	f04f 0100 	mov.w	r1, #0
 80026ba:	ea02 0400 	and.w	r4, r2, r0
 80026be:	ea03 0501 	and.w	r5, r3, r1
 80026c2:	4620      	mov	r0, r4
 80026c4:	4629      	mov	r1, r5
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	014b      	lsls	r3, r1, #5
 80026d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026d4:	0142      	lsls	r2, r0, #5
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	1b00      	subs	r0, r0, r4
 80026dc:	eb61 0105 	sbc.w	r1, r1, r5
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	018b      	lsls	r3, r1, #6
 80026ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026ee:	0182      	lsls	r2, r0, #6
 80026f0:	1a12      	subs	r2, r2, r0
 80026f2:	eb63 0301 	sbc.w	r3, r3, r1
 80026f6:	f04f 0000 	mov.w	r0, #0
 80026fa:	f04f 0100 	mov.w	r1, #0
 80026fe:	00d9      	lsls	r1, r3, #3
 8002700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002704:	00d0      	lsls	r0, r2, #3
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	1912      	adds	r2, r2, r4
 800270c:	eb45 0303 	adc.w	r3, r5, r3
 8002710:	f04f 0000 	mov.w	r0, #0
 8002714:	f04f 0100 	mov.w	r1, #0
 8002718:	0299      	lsls	r1, r3, #10
 800271a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800271e:	0290      	lsls	r0, r2, #10
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	461a      	mov	r2, r3
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	f7fd fd52 	bl	80001d8 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4613      	mov	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	3301      	adds	r3, #1
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	60bb      	str	r3, [r7, #8]
      break;
 8002756:	e002      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800275a:	60bb      	str	r3, [r7, #8]
      break;
 800275c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800275e:	68bb      	ldr	r3, [r7, #8]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	00f42400 	.word	0x00f42400
 8002774:	007a1200 	.word	0x007a1200

08002778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <HAL_RCC_GetHCLKFreq+0x14>)
 800277e:	681b      	ldr	r3, [r3, #0]
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000010 	.word	0x20000010

08002790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002794:	f7ff fff0 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 8002798:	4602      	mov	r2, r0
 800279a:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	0a9b      	lsrs	r3, r3, #10
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	4903      	ldr	r1, [pc, #12]	; (80027b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a6:	5ccb      	ldrb	r3, [r1, r3]
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40023800 	.word	0x40023800
 80027b4:	08003d6c 	.word	0x08003d6c

080027b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027bc:	f7ff ffdc 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	0b5b      	lsrs	r3, r3, #13
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4903      	ldr	r1, [pc, #12]	; (80027dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40023800 	.word	0x40023800
 80027dc:	08003d6c 	.word	0x08003d6c

080027e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e041      	b.n	8002876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fa5c 	bl	8000cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	4619      	mov	r1, r3
 800281e:	4610      	mov	r0, r2
 8002820:	f000 fcae 	bl	8003180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d001      	beq.n	8002898 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e03c      	b.n	8002912 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1e      	ldr	r2, [pc, #120]	; (8002920 <HAL_TIM_Base_Start+0xa0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d018      	beq.n	80028dc <HAL_TIM_Base_Start+0x5c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b2:	d013      	beq.n	80028dc <HAL_TIM_Base_Start+0x5c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1a      	ldr	r2, [pc, #104]	; (8002924 <HAL_TIM_Base_Start+0xa4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00e      	beq.n	80028dc <HAL_TIM_Base_Start+0x5c>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a19      	ldr	r2, [pc, #100]	; (8002928 <HAL_TIM_Base_Start+0xa8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d009      	beq.n	80028dc <HAL_TIM_Base_Start+0x5c>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a17      	ldr	r2, [pc, #92]	; (800292c <HAL_TIM_Base_Start+0xac>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_TIM_Base_Start+0x5c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a16      	ldr	r2, [pc, #88]	; (8002930 <HAL_TIM_Base_Start+0xb0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d111      	bne.n	8002900 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d010      	beq.n	8002910 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fe:	e007      	b.n	8002910 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40010000 	.word	0x40010000
 8002924:	40000400 	.word	0x40000400
 8002928:	40000800 	.word	0x40000800
 800292c:	40000c00 	.word	0x40000c00
 8002930:	40014000 	.word	0x40014000

08002934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d001      	beq.n	800294c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e044      	b.n	80029d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1e      	ldr	r2, [pc, #120]	; (80029e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d018      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x6c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002976:	d013      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x6c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1a      	ldr	r2, [pc, #104]	; (80029e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00e      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x6c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a19      	ldr	r2, [pc, #100]	; (80029ec <HAL_TIM_Base_Start_IT+0xb8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x6c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x6c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d111      	bne.n	80029c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d010      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c2:	e007      	b.n	80029d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40010000 	.word	0x40010000
 80029e8:	40000400 	.word	0x40000400
 80029ec:	40000800 	.word	0x40000800
 80029f0:	40000c00 	.word	0x40000c00
 80029f4:	40014000 	.word	0x40014000

080029f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e041      	b.n	8002a8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f839 	bl	8002a96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3304      	adds	r3, #4
 8002a34:	4619      	mov	r1, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	f000 fba2 	bl	8003180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d109      	bne.n	8002ad0 <HAL_TIM_PWM_Start+0x24>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e022      	b.n	8002b16 <HAL_TIM_PWM_Start+0x6a>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d109      	bne.n	8002aea <HAL_TIM_PWM_Start+0x3e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	bf14      	ite	ne
 8002ae2:	2301      	movne	r3, #1
 8002ae4:	2300      	moveq	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	e015      	b.n	8002b16 <HAL_TIM_PWM_Start+0x6a>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d109      	bne.n	8002b04 <HAL_TIM_PWM_Start+0x58>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	bf14      	ite	ne
 8002afc:	2301      	movne	r3, #1
 8002afe:	2300      	moveq	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e008      	b.n	8002b16 <HAL_TIM_PWM_Start+0x6a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	bf14      	ite	ne
 8002b10:	2301      	movne	r3, #1
 8002b12:	2300      	moveq	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e068      	b.n	8002bf0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d104      	bne.n	8002b2e <HAL_TIM_PWM_Start+0x82>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b2c:	e013      	b.n	8002b56 <HAL_TIM_PWM_Start+0xaa>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d104      	bne.n	8002b3e <HAL_TIM_PWM_Start+0x92>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b3c:	e00b      	b.n	8002b56 <HAL_TIM_PWM_Start+0xaa>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d104      	bne.n	8002b4e <HAL_TIM_PWM_Start+0xa2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b4c:	e003      	b.n	8002b56 <HAL_TIM_PWM_Start+0xaa>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2202      	movs	r2, #2
 8002b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	6839      	ldr	r1, [r7, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fdb4 	bl	80036cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a23      	ldr	r2, [pc, #140]	; (8002bf8 <HAL_TIM_PWM_Start+0x14c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d107      	bne.n	8002b7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <HAL_TIM_PWM_Start+0x14c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d018      	beq.n	8002bba <HAL_TIM_PWM_Start+0x10e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b90:	d013      	beq.n	8002bba <HAL_TIM_PWM_Start+0x10e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <HAL_TIM_PWM_Start+0x150>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d00e      	beq.n	8002bba <HAL_TIM_PWM_Start+0x10e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_TIM_PWM_Start+0x154>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d009      	beq.n	8002bba <HAL_TIM_PWM_Start+0x10e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <HAL_TIM_PWM_Start+0x158>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d004      	beq.n	8002bba <HAL_TIM_PWM_Start+0x10e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <HAL_TIM_PWM_Start+0x15c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d111      	bne.n	8002bde <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b06      	cmp	r3, #6
 8002bca:	d010      	beq.n	8002bee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bdc:	e007      	b.n	8002bee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40010000 	.word	0x40010000
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40000800 	.word	0x40000800
 8002c04:	40000c00 	.word	0x40000c00
 8002c08:	40014000 	.word	0x40014000

08002c0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d122      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0202 	mvn.w	r2, #2
 8002c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fa77 	bl	8003142 <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa69 	bl	800312e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fa7a 	bl	8003156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d122      	bne.n	8002cbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d11b      	bne.n	8002cbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0204 	mvn.w	r2, #4
 8002c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2202      	movs	r2, #2
 8002c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fa4d 	bl	8003142 <HAL_TIM_IC_CaptureCallback>
 8002ca8:	e005      	b.n	8002cb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa3f 	bl	800312e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fa50 	bl	8003156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d122      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d11b      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0208 	mvn.w	r2, #8
 8002ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa23 	bl	8003142 <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa15 	bl	800312e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fa26 	bl	8003156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	d122      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b10      	cmp	r3, #16
 8002d2a:	d11b      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0210 	mvn.w	r2, #16
 8002d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2208      	movs	r2, #8
 8002d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f9f9 	bl	8003142 <HAL_TIM_IC_CaptureCallback>
 8002d50:	e005      	b.n	8002d5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f9eb 	bl	800312e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f9fc 	bl	8003156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d10e      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d107      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0201 	mvn.w	r2, #1
 8002d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd fee8 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9a:	2b80      	cmp	r3, #128	; 0x80
 8002d9c:	d10e      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da8:	2b80      	cmp	r3, #128	; 0x80
 8002daa:	d107      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fd78 	bl	80038ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	2b40      	cmp	r3, #64	; 0x40
 8002dc8:	d10e      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d107      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9c1 	bl	800316a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d10e      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d107      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0220 	mvn.w	r2, #32
 8002e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fd42 	bl	8003898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e0ae      	b.n	8002f98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	f200 809f 	bhi.w	8002f88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e4a:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002e85 	.word	0x08002e85
 8002e54:	08002f89 	.word	0x08002f89
 8002e58:	08002f89 	.word	0x08002f89
 8002e5c:	08002f89 	.word	0x08002f89
 8002e60:	08002ec5 	.word	0x08002ec5
 8002e64:	08002f89 	.word	0x08002f89
 8002e68:	08002f89 	.word	0x08002f89
 8002e6c:	08002f89 	.word	0x08002f89
 8002e70:	08002f07 	.word	0x08002f07
 8002e74:	08002f89 	.word	0x08002f89
 8002e78:	08002f89 	.word	0x08002f89
 8002e7c:	08002f89 	.word	0x08002f89
 8002e80:	08002f47 	.word	0x08002f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f9f8 	bl	8003280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0208 	orr.w	r2, r2, #8
 8002e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0204 	bic.w	r2, r2, #4
 8002eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6999      	ldr	r1, [r3, #24]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	619a      	str	r2, [r3, #24]
      break;
 8002ec2:	e064      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fa3e 	bl	800334c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6999      	ldr	r1, [r3, #24]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	021a      	lsls	r2, r3, #8
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	619a      	str	r2, [r3, #24]
      break;
 8002f04:	e043      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fa89 	bl	8003424 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0208 	orr.w	r2, r2, #8
 8002f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0204 	bic.w	r2, r2, #4
 8002f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69d9      	ldr	r1, [r3, #28]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	61da      	str	r2, [r3, #28]
      break;
 8002f44:	e023      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fad3 	bl	80034f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69d9      	ldr	r1, [r3, #28]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	021a      	lsls	r2, r3, #8
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	61da      	str	r2, [r3, #28]
      break;
 8002f86:	e002      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_TIM_ConfigClockSource+0x1c>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e0b4      	b.n	8003126 <HAL_TIM_ConfigClockSource+0x186>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff4:	d03e      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0xd4>
 8002ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffa:	f200 8087 	bhi.w	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003002:	f000 8086 	beq.w	8003112 <HAL_TIM_ConfigClockSource+0x172>
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300a:	d87f      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800300c:	2b70      	cmp	r3, #112	; 0x70
 800300e:	d01a      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0xa6>
 8003010:	2b70      	cmp	r3, #112	; 0x70
 8003012:	d87b      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8003014:	2b60      	cmp	r3, #96	; 0x60
 8003016:	d050      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0x11a>
 8003018:	2b60      	cmp	r3, #96	; 0x60
 800301a:	d877      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800301c:	2b50      	cmp	r3, #80	; 0x50
 800301e:	d03c      	beq.n	800309a <HAL_TIM_ConfigClockSource+0xfa>
 8003020:	2b50      	cmp	r3, #80	; 0x50
 8003022:	d873      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d058      	beq.n	80030da <HAL_TIM_ConfigClockSource+0x13a>
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d86f      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800302c:	2b30      	cmp	r3, #48	; 0x30
 800302e:	d064      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003030:	2b30      	cmp	r3, #48	; 0x30
 8003032:	d86b      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8003034:	2b20      	cmp	r3, #32
 8003036:	d060      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003038:	2b20      	cmp	r3, #32
 800303a:	d867      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05c      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003040:	2b10      	cmp	r3, #16
 8003042:	d05a      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003044:	e062      	b.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6899      	ldr	r1, [r3, #8]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f000 fb19 	bl	800368c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	609a      	str	r2, [r3, #8]
      break;
 8003072:	e04f      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6899      	ldr	r1, [r3, #8]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f000 fb02 	bl	800368c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003096:	609a      	str	r2, [r3, #8]
      break;
 8003098:	e03c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	461a      	mov	r2, r3
 80030a8:	f000 fa76 	bl	8003598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2150      	movs	r1, #80	; 0x50
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 facf 	bl	8003656 <TIM_ITRx_SetConfig>
      break;
 80030b8:	e02c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6859      	ldr	r1, [r3, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f000 fa95 	bl	80035f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2160      	movs	r1, #96	; 0x60
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fabf 	bl	8003656 <TIM_ITRx_SetConfig>
      break;
 80030d8:	e01c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f000 fa56 	bl	8003598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2140      	movs	r1, #64	; 0x40
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 faaf 	bl	8003656 <TIM_ITRx_SetConfig>
      break;
 80030f8:	e00c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f000 faa6 	bl	8003656 <TIM_ITRx_SetConfig>
      break;
 800310a:	e003      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      break;
 8003110:	e000      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003124:	7bfb      	ldrb	r3, [r7, #15]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a34      	ldr	r2, [pc, #208]	; (8003264 <TIM_Base_SetConfig+0xe4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00f      	beq.n	80031b8 <TIM_Base_SetConfig+0x38>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319e:	d00b      	beq.n	80031b8 <TIM_Base_SetConfig+0x38>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a31      	ldr	r2, [pc, #196]	; (8003268 <TIM_Base_SetConfig+0xe8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d007      	beq.n	80031b8 <TIM_Base_SetConfig+0x38>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a30      	ldr	r2, [pc, #192]	; (800326c <TIM_Base_SetConfig+0xec>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <TIM_Base_SetConfig+0x38>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a2f      	ldr	r2, [pc, #188]	; (8003270 <TIM_Base_SetConfig+0xf0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d108      	bne.n	80031ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a25      	ldr	r2, [pc, #148]	; (8003264 <TIM_Base_SetConfig+0xe4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01b      	beq.n	800320a <TIM_Base_SetConfig+0x8a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d8:	d017      	beq.n	800320a <TIM_Base_SetConfig+0x8a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a22      	ldr	r2, [pc, #136]	; (8003268 <TIM_Base_SetConfig+0xe8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <TIM_Base_SetConfig+0x8a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a21      	ldr	r2, [pc, #132]	; (800326c <TIM_Base_SetConfig+0xec>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00f      	beq.n	800320a <TIM_Base_SetConfig+0x8a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a20      	ldr	r2, [pc, #128]	; (8003270 <TIM_Base_SetConfig+0xf0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00b      	beq.n	800320a <TIM_Base_SetConfig+0x8a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a1f      	ldr	r2, [pc, #124]	; (8003274 <TIM_Base_SetConfig+0xf4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <TIM_Base_SetConfig+0x8a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a1e      	ldr	r2, [pc, #120]	; (8003278 <TIM_Base_SetConfig+0xf8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d003      	beq.n	800320a <TIM_Base_SetConfig+0x8a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a1d      	ldr	r2, [pc, #116]	; (800327c <TIM_Base_SetConfig+0xfc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d108      	bne.n	800321c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a08      	ldr	r2, [pc, #32]	; (8003264 <TIM_Base_SetConfig+0xe4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d103      	bne.n	8003250 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	615a      	str	r2, [r3, #20]
}
 8003256:	bf00      	nop
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40010000 	.word	0x40010000
 8003268:	40000400 	.word	0x40000400
 800326c:	40000800 	.word	0x40000800
 8003270:	40000c00 	.word	0x40000c00
 8003274:	40014000 	.word	0x40014000
 8003278:	40014400 	.word	0x40014400
 800327c:	40014800 	.word	0x40014800

08003280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	f023 0201 	bic.w	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0303 	bic.w	r3, r3, #3
 80032b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f023 0302 	bic.w	r3, r3, #2
 80032c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <TIM_OC1_SetConfig+0xc8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d10c      	bne.n	80032f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f023 0308 	bic.w	r3, r3, #8
 80032e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f023 0304 	bic.w	r3, r3, #4
 80032f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a13      	ldr	r2, [pc, #76]	; (8003348 <TIM_OC1_SetConfig+0xc8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d111      	bne.n	8003322 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800330c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	621a      	str	r2, [r3, #32]
}
 800333c:	bf00      	nop
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	40010000 	.word	0x40010000

0800334c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f023 0210 	bic.w	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800337a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f023 0320 	bic.w	r3, r3, #32
 8003396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <TIM_OC2_SetConfig+0xd4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d10d      	bne.n	80033c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a15      	ldr	r2, [pc, #84]	; (8003420 <TIM_OC2_SetConfig+0xd4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d113      	bne.n	80033f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	621a      	str	r2, [r3, #32]
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40010000 	.word	0x40010000

08003424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0303 	bic.w	r3, r3, #3
 800345a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800346c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <TIM_OC3_SetConfig+0xd0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d10d      	bne.n	800349e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003488:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800349c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <TIM_OC3_SetConfig+0xd0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d113      	bne.n	80034ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	621a      	str	r2, [r3, #32]
}
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	40010000 	.word	0x40010000

080034f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	031b      	lsls	r3, r3, #12
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a10      	ldr	r2, [pc, #64]	; (8003594 <TIM_OC4_SetConfig+0x9c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d109      	bne.n	800356c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800355e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	019b      	lsls	r3, r3, #6
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	621a      	str	r2, [r3, #32]
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40010000 	.word	0x40010000

08003598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f023 0201 	bic.w	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f023 030a 	bic.w	r3, r3, #10
 80035d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b087      	sub	sp, #28
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f023 0210 	bic.w	r2, r3, #16
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003620:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	031b      	lsls	r3, r3, #12
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003632:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	621a      	str	r2, [r3, #32]
}
 800364a:	bf00      	nop
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003656:	b480      	push	{r7}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	f043 0307 	orr.w	r3, r3, #7
 8003678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	609a      	str	r2, [r3, #8]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	021a      	lsls	r2, r3, #8
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	609a      	str	r2, [r3, #8]
}
 80036c0:	bf00      	nop
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2201      	movs	r2, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a1a      	ldr	r2, [r3, #32]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	401a      	ands	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1a      	ldr	r2, [r3, #32]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	431a      	orrs	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800372c:	2302      	movs	r3, #2
 800372e:	e050      	b.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1c      	ldr	r2, [pc, #112]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d018      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377c:	d013      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00e      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d009      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a15      	ldr	r2, [pc, #84]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d004      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a13      	ldr	r2, [pc, #76]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d10c      	bne.n	80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800
 80037ec:	40000c00 	.word	0x40000c00
 80037f0:	40014000 	.word	0x40014000

080037f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800380c:	2302      	movs	r3, #2
 800380e:	e03d      	b.n	800388c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e03f      	b.n	8003952 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fa82 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	; 0x24
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f829 	bl	800395c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800395c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003960:	b09f      	sub	sp, #124	; 0x7c
 8003962:	af00      	add	r7, sp, #0
 8003964:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003972:	68d9      	ldr	r1, [r3, #12]
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	ea40 0301 	orr.w	r3, r0, r1
 800397c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800397e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	431a      	orrs	r2, r3
 8003988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	431a      	orrs	r2, r3
 800398e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	4313      	orrs	r3, r2
 8003994:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039a0:	f021 010c 	bic.w	r1, r1, #12
 80039a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039aa:	430b      	orrs	r3, r1
 80039ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ba:	6999      	ldr	r1, [r3, #24]
 80039bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	ea40 0301 	orr.w	r3, r0, r1
 80039c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4bc5      	ldr	r3, [pc, #788]	; (8003ce0 <UART_SetConfig+0x384>)
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d004      	beq.n	80039da <UART_SetConfig+0x7e>
 80039d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4bc3      	ldr	r3, [pc, #780]	; (8003ce4 <UART_SetConfig+0x388>)
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d103      	bne.n	80039e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039da:	f7fe feed 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 80039de:	6778      	str	r0, [r7, #116]	; 0x74
 80039e0:	e002      	b.n	80039e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039e2:	f7fe fed5 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 80039e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f0:	f040 80b6 	bne.w	8003b60 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f6:	461c      	mov	r4, r3
 80039f8:	f04f 0500 	mov.w	r5, #0
 80039fc:	4622      	mov	r2, r4
 80039fe:	462b      	mov	r3, r5
 8003a00:	1891      	adds	r1, r2, r2
 8003a02:	6439      	str	r1, [r7, #64]	; 0x40
 8003a04:	415b      	adcs	r3, r3
 8003a06:	647b      	str	r3, [r7, #68]	; 0x44
 8003a08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a0c:	1912      	adds	r2, r2, r4
 8003a0e:	eb45 0303 	adc.w	r3, r5, r3
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	00d9      	lsls	r1, r3, #3
 8003a1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a20:	00d0      	lsls	r0, r2, #3
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	1911      	adds	r1, r2, r4
 8003a28:	6639      	str	r1, [r7, #96]	; 0x60
 8003a2a:	416b      	adcs	r3, r5
 8003a2c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	461a      	mov	r2, r3
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	1891      	adds	r1, r2, r2
 8003a3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a3c:	415b      	adcs	r3, r3
 8003a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a44:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a48:	f7fc fbc6 	bl	80001d8 <__aeabi_uldivmod>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4ba5      	ldr	r3, [pc, #660]	; (8003ce8 <UART_SetConfig+0x38c>)
 8003a52:	fba3 2302 	umull	r2, r3, r3, r2
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	011e      	lsls	r6, r3, #4
 8003a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a5c:	461c      	mov	r4, r3
 8003a5e:	f04f 0500 	mov.w	r5, #0
 8003a62:	4622      	mov	r2, r4
 8003a64:	462b      	mov	r3, r5
 8003a66:	1891      	adds	r1, r2, r2
 8003a68:	6339      	str	r1, [r7, #48]	; 0x30
 8003a6a:	415b      	adcs	r3, r3
 8003a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a72:	1912      	adds	r2, r2, r4
 8003a74:	eb45 0303 	adc.w	r3, r5, r3
 8003a78:	f04f 0000 	mov.w	r0, #0
 8003a7c:	f04f 0100 	mov.w	r1, #0
 8003a80:	00d9      	lsls	r1, r3, #3
 8003a82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a86:	00d0      	lsls	r0, r2, #3
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	1911      	adds	r1, r2, r4
 8003a8e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a90:	416b      	adcs	r3, r5
 8003a92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	1891      	adds	r1, r2, r2
 8003aa0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003aa2:	415b      	adcs	r3, r3
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aaa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003aae:	f7fc fb93 	bl	80001d8 <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4b8c      	ldr	r3, [pc, #560]	; (8003ce8 <UART_SetConfig+0x38c>)
 8003ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	2164      	movs	r1, #100	; 0x64
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	3332      	adds	r3, #50	; 0x32
 8003aca:	4a87      	ldr	r2, [pc, #540]	; (8003ce8 <UART_SetConfig+0x38c>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ad8:	441e      	add	r6, r3
 8003ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003adc:	4618      	mov	r0, r3
 8003ade:	f04f 0100 	mov.w	r1, #0
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	1894      	adds	r4, r2, r2
 8003ae8:	623c      	str	r4, [r7, #32]
 8003aea:	415b      	adcs	r3, r3
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
 8003aee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003af2:	1812      	adds	r2, r2, r0
 8003af4:	eb41 0303 	adc.w	r3, r1, r3
 8003af8:	f04f 0400 	mov.w	r4, #0
 8003afc:	f04f 0500 	mov.w	r5, #0
 8003b00:	00dd      	lsls	r5, r3, #3
 8003b02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b06:	00d4      	lsls	r4, r2, #3
 8003b08:	4622      	mov	r2, r4
 8003b0a:	462b      	mov	r3, r5
 8003b0c:	1814      	adds	r4, r2, r0
 8003b0e:	653c      	str	r4, [r7, #80]	; 0x50
 8003b10:	414b      	adcs	r3, r1
 8003b12:	657b      	str	r3, [r7, #84]	; 0x54
 8003b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	1891      	adds	r1, r2, r2
 8003b20:	61b9      	str	r1, [r7, #24]
 8003b22:	415b      	adcs	r3, r3
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b2e:	f7fc fb53 	bl	80001d8 <__aeabi_uldivmod>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4b6c      	ldr	r3, [pc, #432]	; (8003ce8 <UART_SetConfig+0x38c>)
 8003b38:	fba3 1302 	umull	r1, r3, r3, r2
 8003b3c:	095b      	lsrs	r3, r3, #5
 8003b3e:	2164      	movs	r1, #100	; 0x64
 8003b40:	fb01 f303 	mul.w	r3, r1, r3
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	3332      	adds	r3, #50	; 0x32
 8003b4a:	4a67      	ldr	r2, [pc, #412]	; (8003ce8 <UART_SetConfig+0x38c>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	f003 0207 	and.w	r2, r3, #7
 8003b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4432      	add	r2, r6
 8003b5c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b5e:	e0b9      	b.n	8003cd4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b62:	461c      	mov	r4, r3
 8003b64:	f04f 0500 	mov.w	r5, #0
 8003b68:	4622      	mov	r2, r4
 8003b6a:	462b      	mov	r3, r5
 8003b6c:	1891      	adds	r1, r2, r2
 8003b6e:	6139      	str	r1, [r7, #16]
 8003b70:	415b      	adcs	r3, r3
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b78:	1912      	adds	r2, r2, r4
 8003b7a:	eb45 0303 	adc.w	r3, r5, r3
 8003b7e:	f04f 0000 	mov.w	r0, #0
 8003b82:	f04f 0100 	mov.w	r1, #0
 8003b86:	00d9      	lsls	r1, r3, #3
 8003b88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b8c:	00d0      	lsls	r0, r2, #3
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	eb12 0804 	adds.w	r8, r2, r4
 8003b96:	eb43 0905 	adc.w	r9, r3, r5
 8003b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f04f 0100 	mov.w	r1, #0
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	008b      	lsls	r3, r1, #2
 8003bae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bb2:	0082      	lsls	r2, r0, #2
 8003bb4:	4640      	mov	r0, r8
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	f7fc fb0e 	bl	80001d8 <__aeabi_uldivmod>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4b49      	ldr	r3, [pc, #292]	; (8003ce8 <UART_SetConfig+0x38c>)
 8003bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	011e      	lsls	r6, r3, #4
 8003bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f04f 0100 	mov.w	r1, #0
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	1894      	adds	r4, r2, r2
 8003bd8:	60bc      	str	r4, [r7, #8]
 8003bda:	415b      	adcs	r3, r3
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be2:	1812      	adds	r2, r2, r0
 8003be4:	eb41 0303 	adc.w	r3, r1, r3
 8003be8:	f04f 0400 	mov.w	r4, #0
 8003bec:	f04f 0500 	mov.w	r5, #0
 8003bf0:	00dd      	lsls	r5, r3, #3
 8003bf2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bf6:	00d4      	lsls	r4, r2, #3
 8003bf8:	4622      	mov	r2, r4
 8003bfa:	462b      	mov	r3, r5
 8003bfc:	1814      	adds	r4, r2, r0
 8003bfe:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c00:	414b      	adcs	r3, r1
 8003c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f04f 0100 	mov.w	r1, #0
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	008b      	lsls	r3, r1, #2
 8003c18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c1c:	0082      	lsls	r2, r0, #2
 8003c1e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c22:	f7fc fad9 	bl	80001d8 <__aeabi_uldivmod>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ce8 <UART_SetConfig+0x38c>)
 8003c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	2164      	movs	r1, #100	; 0x64
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	3332      	adds	r3, #50	; 0x32
 8003c3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ce8 <UART_SetConfig+0x38c>)
 8003c40:	fba2 2303 	umull	r2, r3, r2, r3
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c4a:	441e      	add	r6, r3
 8003c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f04f 0100 	mov.w	r1, #0
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	1894      	adds	r4, r2, r2
 8003c5a:	603c      	str	r4, [r7, #0]
 8003c5c:	415b      	adcs	r3, r3
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c64:	1812      	adds	r2, r2, r0
 8003c66:	eb41 0303 	adc.w	r3, r1, r3
 8003c6a:	f04f 0400 	mov.w	r4, #0
 8003c6e:	f04f 0500 	mov.w	r5, #0
 8003c72:	00dd      	lsls	r5, r3, #3
 8003c74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c78:	00d4      	lsls	r4, r2, #3
 8003c7a:	4622      	mov	r2, r4
 8003c7c:	462b      	mov	r3, r5
 8003c7e:	eb12 0a00 	adds.w	sl, r2, r0
 8003c82:	eb43 0b01 	adc.w	fp, r3, r1
 8003c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f04f 0100 	mov.w	r1, #0
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	008b      	lsls	r3, r1, #2
 8003c9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c9e:	0082      	lsls	r2, r0, #2
 8003ca0:	4650      	mov	r0, sl
 8003ca2:	4659      	mov	r1, fp
 8003ca4:	f7fc fa98 	bl	80001d8 <__aeabi_uldivmod>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4b0e      	ldr	r3, [pc, #56]	; (8003ce8 <UART_SetConfig+0x38c>)
 8003cae:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	2164      	movs	r1, #100	; 0x64
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	3332      	adds	r3, #50	; 0x32
 8003cc0:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <UART_SetConfig+0x38c>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	f003 020f 	and.w	r2, r3, #15
 8003ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4432      	add	r2, r6
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	377c      	adds	r7, #124	; 0x7c
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cde:	bf00      	nop
 8003ce0:	40011000 	.word	0x40011000
 8003ce4:	40011400 	.word	0x40011400
 8003ce8:	51eb851f 	.word	0x51eb851f

08003cec <__libc_init_array>:
 8003cec:	b570      	push	{r4, r5, r6, lr}
 8003cee:	4d0d      	ldr	r5, [pc, #52]	; (8003d24 <__libc_init_array+0x38>)
 8003cf0:	4c0d      	ldr	r4, [pc, #52]	; (8003d28 <__libc_init_array+0x3c>)
 8003cf2:	1b64      	subs	r4, r4, r5
 8003cf4:	10a4      	asrs	r4, r4, #2
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	42a6      	cmp	r6, r4
 8003cfa:	d109      	bne.n	8003d10 <__libc_init_array+0x24>
 8003cfc:	4d0b      	ldr	r5, [pc, #44]	; (8003d2c <__libc_init_array+0x40>)
 8003cfe:	4c0c      	ldr	r4, [pc, #48]	; (8003d30 <__libc_init_array+0x44>)
 8003d00:	f000 f820 	bl	8003d44 <_init>
 8003d04:	1b64      	subs	r4, r4, r5
 8003d06:	10a4      	asrs	r4, r4, #2
 8003d08:	2600      	movs	r6, #0
 8003d0a:	42a6      	cmp	r6, r4
 8003d0c:	d105      	bne.n	8003d1a <__libc_init_array+0x2e>
 8003d0e:	bd70      	pop	{r4, r5, r6, pc}
 8003d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d14:	4798      	blx	r3
 8003d16:	3601      	adds	r6, #1
 8003d18:	e7ee      	b.n	8003cf8 <__libc_init_array+0xc>
 8003d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1e:	4798      	blx	r3
 8003d20:	3601      	adds	r6, #1
 8003d22:	e7f2      	b.n	8003d0a <__libc_init_array+0x1e>
 8003d24:	08003d7c 	.word	0x08003d7c
 8003d28:	08003d7c 	.word	0x08003d7c
 8003d2c:	08003d7c 	.word	0x08003d7c
 8003d30:	08003d80 	.word	0x08003d80

08003d34 <memset>:
 8003d34:	4402      	add	r2, r0
 8003d36:	4603      	mov	r3, r0
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d100      	bne.n	8003d3e <memset+0xa>
 8003d3c:	4770      	bx	lr
 8003d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d42:	e7f9      	b.n	8003d38 <memset+0x4>

08003d44 <_init>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr

08003d50 <_fini>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	bf00      	nop
 8003d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d56:	bc08      	pop	{r3}
 8003d58:	469e      	mov	lr, r3
 8003d5a:	4770      	bx	lr
