
week7_QEI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000373c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080038d4  080038d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038ec  080038ec  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080038ec  080038ec  000138ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038f4  080038f4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080038fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000018  08003910  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003910  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7d0  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a0  00000000  00000000  0002d814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002f1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002fd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ec0  00000000  00000000  00030880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c879  00000000  00000000  00046740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d7e0  00000000  00000000  00052fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0799  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032c8  00000000  00000000  000e07ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080038bc 	.word	0x080038bc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	080038bc 	.word	0x080038bc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_frsub>:
 8000a14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a18:	e002      	b.n	8000a20 <__addsf3>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fsub>:
 8000a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a20 <__addsf3>:
 8000a20:	0042      	lsls	r2, r0, #1
 8000a22:	bf1f      	itttt	ne
 8000a24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a28:	ea92 0f03 	teqne	r2, r3
 8000a2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a34:	d06a      	beq.n	8000b0c <__addsf3+0xec>
 8000a36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a3e:	bfc1      	itttt	gt
 8000a40:	18d2      	addgt	r2, r2, r3
 8000a42:	4041      	eorgt	r1, r0
 8000a44:	4048      	eorgt	r0, r1
 8000a46:	4041      	eorgt	r1, r0
 8000a48:	bfb8      	it	lt
 8000a4a:	425b      	neglt	r3, r3
 8000a4c:	2b19      	cmp	r3, #25
 8000a4e:	bf88      	it	hi
 8000a50:	4770      	bxhi	lr
 8000a52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a6e:	bf18      	it	ne
 8000a70:	4249      	negne	r1, r1
 8000a72:	ea92 0f03 	teq	r2, r3
 8000a76:	d03f      	beq.n	8000af8 <__addsf3+0xd8>
 8000a78:	f1a2 0201 	sub.w	r2, r2, #1
 8000a7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a80:	eb10 000c 	adds.w	r0, r0, ip
 8000a84:	f1c3 0320 	rsb	r3, r3, #32
 8000a88:	fa01 f103 	lsl.w	r1, r1, r3
 8000a8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a90:	d502      	bpl.n	8000a98 <__addsf3+0x78>
 8000a92:	4249      	negs	r1, r1
 8000a94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a9c:	d313      	bcc.n	8000ac6 <__addsf3+0xa6>
 8000a9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aa2:	d306      	bcc.n	8000ab2 <__addsf3+0x92>
 8000aa4:	0840      	lsrs	r0, r0, #1
 8000aa6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aaa:	f102 0201 	add.w	r2, r2, #1
 8000aae:	2afe      	cmp	r2, #254	; 0xfe
 8000ab0:	d251      	bcs.n	8000b56 <__addsf3+0x136>
 8000ab2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aba:	bf08      	it	eq
 8000abc:	f020 0001 	biceq.w	r0, r0, #1
 8000ac0:	ea40 0003 	orr.w	r0, r0, r3
 8000ac4:	4770      	bx	lr
 8000ac6:	0049      	lsls	r1, r1, #1
 8000ac8:	eb40 0000 	adc.w	r0, r0, r0
 8000acc:	3a01      	subs	r2, #1
 8000ace:	bf28      	it	cs
 8000ad0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ad4:	d2ed      	bcs.n	8000ab2 <__addsf3+0x92>
 8000ad6:	fab0 fc80 	clz	ip, r0
 8000ada:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ade:	ebb2 020c 	subs.w	r2, r2, ip
 8000ae2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ae6:	bfaa      	itet	ge
 8000ae8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aec:	4252      	neglt	r2, r2
 8000aee:	4318      	orrge	r0, r3
 8000af0:	bfbc      	itt	lt
 8000af2:	40d0      	lsrlt	r0, r2
 8000af4:	4318      	orrlt	r0, r3
 8000af6:	4770      	bx	lr
 8000af8:	f092 0f00 	teq	r2, #0
 8000afc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b00:	bf06      	itte	eq
 8000b02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b06:	3201      	addeq	r2, #1
 8000b08:	3b01      	subne	r3, #1
 8000b0a:	e7b5      	b.n	8000a78 <__addsf3+0x58>
 8000b0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b14:	bf18      	it	ne
 8000b16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1a:	d021      	beq.n	8000b60 <__addsf3+0x140>
 8000b1c:	ea92 0f03 	teq	r2, r3
 8000b20:	d004      	beq.n	8000b2c <__addsf3+0x10c>
 8000b22:	f092 0f00 	teq	r2, #0
 8000b26:	bf08      	it	eq
 8000b28:	4608      	moveq	r0, r1
 8000b2a:	4770      	bx	lr
 8000b2c:	ea90 0f01 	teq	r0, r1
 8000b30:	bf1c      	itt	ne
 8000b32:	2000      	movne	r0, #0
 8000b34:	4770      	bxne	lr
 8000b36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b3a:	d104      	bne.n	8000b46 <__addsf3+0x126>
 8000b3c:	0040      	lsls	r0, r0, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	4770      	bx	lr
 8000b46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b4a:	bf3c      	itt	cc
 8000b4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bxcc	lr
 8000b52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	4770      	bx	lr
 8000b60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b64:	bf16      	itet	ne
 8000b66:	4608      	movne	r0, r1
 8000b68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b6c:	4601      	movne	r1, r0
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	bf06      	itte	eq
 8000b72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b76:	ea90 0f01 	teqeq	r0, r1
 8000b7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_ui2f>:
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e004      	b.n	8000b90 <__aeabi_i2f+0x8>
 8000b86:	bf00      	nop

08000b88 <__aeabi_i2f>:
 8000b88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	bf48      	it	mi
 8000b8e:	4240      	negmi	r0, r0
 8000b90:	ea5f 0c00 	movs.w	ip, r0
 8000b94:	bf08      	it	eq
 8000b96:	4770      	bxeq	lr
 8000b98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	e01c      	b.n	8000bde <__aeabi_l2f+0x2a>

08000ba4 <__aeabi_ul2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e00a      	b.n	8000bc8 <__aeabi_l2f+0x14>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_l2f>:
 8000bb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb8:	bf08      	it	eq
 8000bba:	4770      	bxeq	lr
 8000bbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__aeabi_l2f+0x14>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	ea5f 0c01 	movs.w	ip, r1
 8000bcc:	bf02      	ittt	eq
 8000bce:	4684      	moveq	ip, r0
 8000bd0:	4601      	moveq	r1, r0
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd8:	bf08      	it	eq
 8000bda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000be2:	fabc f28c 	clz	r2, ip
 8000be6:	3a08      	subs	r2, #8
 8000be8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bec:	db10      	blt.n	8000c10 <__aeabi_l2f+0x5c>
 8000bee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf8:	f1c2 0220 	rsb	r2, r2, #32
 8000bfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c00:	fa20 f202 	lsr.w	r2, r0, r2
 8000c04:	eb43 0002 	adc.w	r0, r3, r2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f102 0220 	add.w	r2, r2, #32
 8000c14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c20:	fa21 f202 	lsr.w	r2, r1, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_uldivmod>:
 8000c30:	b953      	cbnz	r3, 8000c48 <__aeabi_uldivmod+0x18>
 8000c32:	b94a      	cbnz	r2, 8000c48 <__aeabi_uldivmod+0x18>
 8000c34:	2900      	cmp	r1, #0
 8000c36:	bf08      	it	eq
 8000c38:	2800      	cmpeq	r0, #0
 8000c3a:	bf1c      	itt	ne
 8000c3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c40:	f04f 30ff 	movne.w	r0, #4294967295
 8000c44:	f000 b96e 	b.w	8000f24 <__aeabi_idiv0>
 8000c48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c50:	f000 f806 	bl	8000c60 <__udivmoddi4>
 8000c54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5c:	b004      	add	sp, #16
 8000c5e:	4770      	bx	lr

08000c60 <__udivmoddi4>:
 8000c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c64:	9d08      	ldr	r5, [sp, #32]
 8000c66:	4604      	mov	r4, r0
 8000c68:	468c      	mov	ip, r1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8083 	bne.w	8000d76 <__udivmoddi4+0x116>
 8000c70:	428a      	cmp	r2, r1
 8000c72:	4617      	mov	r7, r2
 8000c74:	d947      	bls.n	8000d06 <__udivmoddi4+0xa6>
 8000c76:	fab2 f282 	clz	r2, r2
 8000c7a:	b142      	cbz	r2, 8000c8e <__udivmoddi4+0x2e>
 8000c7c:	f1c2 0020 	rsb	r0, r2, #32
 8000c80:	fa24 f000 	lsr.w	r0, r4, r0
 8000c84:	4091      	lsls	r1, r2
 8000c86:	4097      	lsls	r7, r2
 8000c88:	ea40 0c01 	orr.w	ip, r0, r1
 8000c8c:	4094      	lsls	r4, r2
 8000c8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c92:	0c23      	lsrs	r3, r4, #16
 8000c94:	fbbc f6f8 	udiv	r6, ip, r8
 8000c98:	fa1f fe87 	uxth.w	lr, r7
 8000c9c:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca4:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca8:	4299      	cmp	r1, r3
 8000caa:	d909      	bls.n	8000cc0 <__udivmoddi4+0x60>
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cb2:	f080 8119 	bcs.w	8000ee8 <__udivmoddi4+0x288>
 8000cb6:	4299      	cmp	r1, r3
 8000cb8:	f240 8116 	bls.w	8000ee8 <__udivmoddi4+0x288>
 8000cbc:	3e02      	subs	r6, #2
 8000cbe:	443b      	add	r3, r7
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000ccc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x8c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	f080 8105 	bcs.w	8000eec <__udivmoddi4+0x28c>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f240 8102 	bls.w	8000eec <__udivmoddi4+0x28c>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	443c      	add	r4, r7
 8000cec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf0:	eba4 040e 	sub.w	r4, r4, lr
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	b11d      	cbz	r5, 8000d00 <__udivmoddi4+0xa0>
 8000cf8:	40d4      	lsrs	r4, r2
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e9c5 4300 	strd	r4, r3, [r5]
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	b902      	cbnz	r2, 8000d0a <__udivmoddi4+0xaa>
 8000d08:	deff      	udf	#255	; 0xff
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	2a00      	cmp	r2, #0
 8000d10:	d150      	bne.n	8000db4 <__udivmoddi4+0x154>
 8000d12:	1bcb      	subs	r3, r1, r7
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	fa1f f887 	uxth.w	r8, r7
 8000d1c:	2601      	movs	r6, #1
 8000d1e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d22:	0c21      	lsrs	r1, r4, #16
 8000d24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb08 f30c 	mul.w	r3, r8, ip
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0xe4>
 8000d34:	1879      	adds	r1, r7, r1
 8000d36:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0xe2>
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	f200 80e9 	bhi.w	8000f14 <__udivmoddi4+0x2b4>
 8000d42:	4684      	mov	ip, r0
 8000d44:	1ac9      	subs	r1, r1, r3
 8000d46:	b2a3      	uxth	r3, r4
 8000d48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d4c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d50:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d54:	fb08 f800 	mul.w	r8, r8, r0
 8000d58:	45a0      	cmp	r8, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x10c>
 8000d5c:	193c      	adds	r4, r7, r4
 8000d5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x10a>
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	f200 80d9 	bhi.w	8000f1c <__udivmoddi4+0x2bc>
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	eba4 0408 	sub.w	r4, r4, r8
 8000d70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d74:	e7bf      	b.n	8000cf6 <__udivmoddi4+0x96>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d909      	bls.n	8000d8e <__udivmoddi4+0x12e>
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	f000 80b1 	beq.w	8000ee2 <__udivmoddi4+0x282>
 8000d80:	2600      	movs	r6, #0
 8000d82:	e9c5 0100 	strd	r0, r1, [r5]
 8000d86:	4630      	mov	r0, r6
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	fab3 f683 	clz	r6, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d14a      	bne.n	8000e2c <__udivmoddi4+0x1cc>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0x140>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 80b8 	bhi.w	8000f10 <__udivmoddi4+0x2b0>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb61 0103 	sbc.w	r1, r1, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	468c      	mov	ip, r1
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d0a8      	beq.n	8000d00 <__udivmoddi4+0xa0>
 8000dae:	e9c5 4c00 	strd	r4, ip, [r5]
 8000db2:	e7a5      	b.n	8000d00 <__udivmoddi4+0xa0>
 8000db4:	f1c2 0320 	rsb	r3, r2, #32
 8000db8:	fa20 f603 	lsr.w	r6, r0, r3
 8000dbc:	4097      	lsls	r7, r2
 8000dbe:	fa01 f002 	lsl.w	r0, r1, r2
 8000dc2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc6:	40d9      	lsrs	r1, r3
 8000dc8:	4330      	orrs	r0, r6
 8000dca:	0c03      	lsrs	r3, r0, #16
 8000dcc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd0:	fa1f f887 	uxth.w	r8, r7
 8000dd4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ddc:	fb06 f108 	mul.w	r1, r6, r8
 8000de0:	4299      	cmp	r1, r3
 8000de2:	fa04 f402 	lsl.w	r4, r4, r2
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x19c>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dee:	f080 808d 	bcs.w	8000f0c <__udivmoddi4+0x2ac>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 808a 	bls.w	8000f0c <__udivmoddi4+0x2ac>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b281      	uxth	r1, r0
 8000e00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0c:	fb00 f308 	mul.w	r3, r0, r8
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x1c4>
 8000e14:	1879      	adds	r1, r7, r1
 8000e16:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e1a:	d273      	bcs.n	8000f04 <__udivmoddi4+0x2a4>
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	d971      	bls.n	8000f04 <__udivmoddi4+0x2a4>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4439      	add	r1, r7
 8000e24:	1acb      	subs	r3, r1, r3
 8000e26:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e2a:	e778      	b.n	8000d1e <__udivmoddi4+0xbe>
 8000e2c:	f1c6 0c20 	rsb	ip, r6, #32
 8000e30:	fa03 f406 	lsl.w	r4, r3, r6
 8000e34:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e38:	431c      	orrs	r4, r3
 8000e3a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e42:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e46:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e4a:	431f      	orrs	r7, r3
 8000e4c:	0c3b      	lsrs	r3, r7, #16
 8000e4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e52:	fa1f f884 	uxth.w	r8, r4
 8000e56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e5e:	fb09 fa08 	mul.w	sl, r9, r8
 8000e62:	458a      	cmp	sl, r1
 8000e64:	fa02 f206 	lsl.w	r2, r2, r6
 8000e68:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x220>
 8000e6e:	1861      	adds	r1, r4, r1
 8000e70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e74:	d248      	bcs.n	8000f08 <__udivmoddi4+0x2a8>
 8000e76:	458a      	cmp	sl, r1
 8000e78:	d946      	bls.n	8000f08 <__udivmoddi4+0x2a8>
 8000e7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7e:	4421      	add	r1, r4
 8000e80:	eba1 010a 	sub.w	r1, r1, sl
 8000e84:	b2bf      	uxth	r7, r7
 8000e86:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e8a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e92:	fb00 f808 	mul.w	r8, r0, r8
 8000e96:	45b8      	cmp	r8, r7
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x24a>
 8000e9a:	19e7      	adds	r7, r4, r7
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d22e      	bcs.n	8000f00 <__udivmoddi4+0x2a0>
 8000ea2:	45b8      	cmp	r8, r7
 8000ea4:	d92c      	bls.n	8000f00 <__udivmoddi4+0x2a0>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4427      	add	r7, r4
 8000eaa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eae:	eba7 0708 	sub.w	r7, r7, r8
 8000eb2:	fba0 8902 	umull	r8, r9, r0, r2
 8000eb6:	454f      	cmp	r7, r9
 8000eb8:	46c6      	mov	lr, r8
 8000eba:	4649      	mov	r1, r9
 8000ebc:	d31a      	bcc.n	8000ef4 <__udivmoddi4+0x294>
 8000ebe:	d017      	beq.n	8000ef0 <__udivmoddi4+0x290>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x27a>
 8000ec2:	ebb3 020e 	subs.w	r2, r3, lr
 8000ec6:	eb67 0701 	sbc.w	r7, r7, r1
 8000eca:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ece:	40f2      	lsrs	r2, r6
 8000ed0:	ea4c 0202 	orr.w	r2, ip, r2
 8000ed4:	40f7      	lsrs	r7, r6
 8000ed6:	e9c5 2700 	strd	r2, r7, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	462e      	mov	r6, r5
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	e70b      	b.n	8000d00 <__udivmoddi4+0xa0>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	e6e9      	b.n	8000cc0 <__udivmoddi4+0x60>
 8000eec:	4618      	mov	r0, r3
 8000eee:	e6fd      	b.n	8000cec <__udivmoddi4+0x8c>
 8000ef0:	4543      	cmp	r3, r8
 8000ef2:	d2e5      	bcs.n	8000ec0 <__udivmoddi4+0x260>
 8000ef4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef8:	eb69 0104 	sbc.w	r1, r9, r4
 8000efc:	3801      	subs	r0, #1
 8000efe:	e7df      	b.n	8000ec0 <__udivmoddi4+0x260>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e7d2      	b.n	8000eaa <__udivmoddi4+0x24a>
 8000f04:	4660      	mov	r0, ip
 8000f06:	e78d      	b.n	8000e24 <__udivmoddi4+0x1c4>
 8000f08:	4681      	mov	r9, r0
 8000f0a:	e7b9      	b.n	8000e80 <__udivmoddi4+0x220>
 8000f0c:	4666      	mov	r6, ip
 8000f0e:	e775      	b.n	8000dfc <__udivmoddi4+0x19c>
 8000f10:	4630      	mov	r0, r6
 8000f12:	e74a      	b.n	8000daa <__udivmoddi4+0x14a>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	4439      	add	r1, r7
 8000f1a:	e713      	b.n	8000d44 <__udivmoddi4+0xe4>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	443c      	add	r4, r7
 8000f20:	e724      	b.n	8000d6c <__udivmoddi4+0x10c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2c:	f000 fd4e 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f30:	f000 f81c 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f34:	f000 f950 	bl	80011d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f38:	f000 f924 	bl	8001184 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f3c:	f000 f87e 	bl	800103c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f40:	f000 f8d4 	bl	80010ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000f44:	213c      	movs	r1, #60	; 0x3c
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <main+0x3c>)
 8000f48:	f001 fe2e 	bl	8002ba8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000f4c:	4806      	ldr	r0, [pc, #24]	; (8000f68 <main+0x40>)
 8000f4e:	f001 fd23 	bl	8002998 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UpdatePosition();
 8000f52:	f000 f9c9 	bl	80012e8 <UpdatePosition>
	  PIDzero();
 8000f56:	f000 fa79 	bl	800144c <PIDzero>
	  MotDrv();
 8000f5a:	f000 faef 	bl	800153c <MotDrv>
	  PWMgen();
 8000f5e:	f000 fb6f 	bl	8001640 <PWMgen>
	  UpdatePosition();
 8000f62:	e7f6      	b.n	8000f52 <main+0x2a>
 8000f64:	20000090 	.word	0x20000090
 8000f68:	200000dc 	.word	0x200000dc

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	; 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	2230      	movs	r2, #48	; 0x30
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fc96 	bl	80038ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <SystemClock_Config+0xc8>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a26      	ldr	r2, [pc, #152]	; (8001034 <SystemClock_Config+0xc8>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <SystemClock_Config+0xc8>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b21      	ldr	r3, [pc, #132]	; (8001038 <SystemClock_Config+0xcc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a20      	ldr	r2, [pc, #128]	; (8001038 <SystemClock_Config+0xcc>)
 8000fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <SystemClock_Config+0xcc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd0:	2310      	movs	r3, #16
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000fe0:	2364      	movs	r3, #100	; 0x64
 8000fe2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fec:	f107 0320 	add.w	r3, r7, #32
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 f80d 	bl	8002010 <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ffc:	f000 fb92 	bl	8001724 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	230f      	movs	r3, #15
 8001002:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001004:	2302      	movs	r3, #2
 8001006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800100c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2103      	movs	r1, #3
 800101c:	4618      	mov	r0, r3
 800101e:	f001 fa6f 	bl	8002500 <HAL_RCC_ClockConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001028:	f000 fb7c 	bl	8001724 <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	3750      	adds	r7, #80	; 0x50
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2224      	movs	r2, #36	; 0x24
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fc2e 	bl	80038ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <MX_TIM1_Init+0xa8>)
 800105a:	4a23      	ldr	r2, [pc, #140]	; (80010e8 <MX_TIM1_Init+0xac>)
 800105c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <MX_TIM1_Init+0xa8>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_TIM1_Init+0xa8>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64511;
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <MX_TIM1_Init+0xa8>)
 800106c:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8001070:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_TIM1_Init+0xa8>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_TIM1_Init+0xa8>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_TIM1_Init+0xa8>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001084:	2303      	movs	r3, #3
 8001086:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800108c:	2301      	movs	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800109c:	2301      	movs	r3, #1
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <MX_TIM1_Init+0xa8>)
 80010b0:	f001 fcd4 	bl	8002a5c <HAL_TIM_Encoder_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80010ba:	f000 fb33 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <MX_TIM1_Init+0xa8>)
 80010cc:	f002 f932 	bl	8003334 <HAL_TIMEx_MasterConfigSynchronization>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80010d6:	f000 fb25 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	3730      	adds	r7, #48	; 0x30
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000090 	.word	0x20000090
 80010e8:	40010000 	.word	0x40010000

080010ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <MX_TIM2_Init+0x94>)
 800110a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800110e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <MX_TIM2_Init+0x94>)
 8001112:	2263      	movs	r2, #99	; 0x63
 8001114:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_TIM2_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <MX_TIM2_Init+0x94>)
 800111e:	f04f 32ff 	mov.w	r2, #4294967295
 8001122:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_TIM2_Init+0x94>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_TIM2_Init+0x94>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001130:	4813      	ldr	r0, [pc, #76]	; (8001180 <MX_TIM2_Init+0x94>)
 8001132:	f001 fbe1 	bl	80028f8 <HAL_TIM_Base_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800113c:	f000 faf2 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001144:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	4619      	mov	r1, r3
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <MX_TIM2_Init+0x94>)
 800114e:	f001 fec1 	bl	8002ed4 <HAL_TIM_ConfigClockSource>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001158:	f000 fae4 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001164:	463b      	mov	r3, r7
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_TIM2_Init+0x94>)
 800116a:	f002 f8e3 	bl	8003334 <HAL_TIMEx_MasterConfigSynchronization>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001174:	f000 fad6 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200000dc 	.word	0x200000dc

08001184 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <MX_USART2_UART_Init+0x50>)
 800118c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011bc:	f002 f93c 	bl	8003438 <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011c6:	f000 faad 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000124 	.word	0x20000124
 80011d4:	40004400 	.word	0x40004400

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <MX_GPIO_Init+0xfc>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a37      	ldr	r2, [pc, #220]	; (80012d4 <MX_GPIO_Init+0xfc>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <MX_GPIO_Init+0xfc>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <MX_GPIO_Init+0xfc>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a30      	ldr	r2, [pc, #192]	; (80012d4 <MX_GPIO_Init+0xfc>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <MX_GPIO_Init+0xfc>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <MX_GPIO_Init+0xfc>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a29      	ldr	r2, [pc, #164]	; (80012d4 <MX_GPIO_Init+0xfc>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <MX_GPIO_Init+0xfc>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <MX_GPIO_Init+0xfc>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <MX_GPIO_Init+0xfc>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <MX_GPIO_Init+0xfc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2120      	movs	r1, #32
 8001262:	481d      	ldr	r0, [pc, #116]	; (80012d8 <MX_GPIO_Init+0x100>)
 8001264:	f000 feba 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRV_D6_Pin|DRV_D5_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800126e:	481b      	ldr	r0, [pc, #108]	; (80012dc <MX_GPIO_Init+0x104>)
 8001270:	f000 feb4 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800127a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4815      	ldr	r0, [pc, #84]	; (80012e0 <MX_GPIO_Init+0x108>)
 800128c:	f000 fd22 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001290:	2320      	movs	r3, #32
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	480c      	ldr	r0, [pc, #48]	; (80012d8 <MX_GPIO_Init+0x100>)
 80012a8:	f000 fd14 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV_D6_Pin DRV_D5_Pin */
  GPIO_InitStruct.Pin = DRV_D6_Pin|DRV_D5_Pin;
 80012ac:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_GPIO_Init+0x104>)
 80012c6:	f000 fd05 	bl	8001cd4 <HAL_GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40020800 	.word	0x40020800
 80012e4:	00000000 	.word	0x00000000

080012e8 <UpdatePosition>:

/* USER CODE BEGIN 4 */
void UpdatePosition()
{
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
	static uint64_t TimestampCalcualtionLoop=0;
	if(micros()-TimestampCalcualtionLoop >= 1000 )
 80012ee:	f000 f9ff 	bl	80016f0 <micros>
 80012f2:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <UpdatePosition+0x140>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	1a84      	subs	r4, r0, r2
 80012fa:	eb61 0503 	sbc.w	r5, r1, r3
 80012fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	42ab      	cmp	r3, r5
 8001308:	bf08      	it	eq
 800130a:	42a2      	cmpeq	r2, r4
 800130c:	f080 8083 	bcs.w	8001416 <UpdatePosition+0x12e>
	{
		uint16_t RawRead = TIM1->CNT;
 8001310:	4b46      	ldr	r3, [pc, #280]	; (800142c <UpdatePosition+0x144>)
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	80fb      	strh	r3, [r7, #6]
		// 64*12*4 = 3072 rising edge = 1 round
		// use .0 in float math operation
		// degree
		DegRel = (RawRead/3072.0)*360.0;
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f8af 	bl	800047c <__aeabi_i2d>
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	4b43      	ldr	r3, [pc, #268]	; (8001430 <UpdatePosition+0x148>)
 8001324:	f7ff fa3e 	bl	80007a4 <__aeabi_ddiv>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b3f      	ldr	r3, [pc, #252]	; (8001434 <UpdatePosition+0x14c>)
 8001336:	f7ff f90b 	bl	8000550 <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fb17 	bl	8000974 <__aeabi_d2f>
 8001346:	4603      	mov	r3, r0
 8001348:	4a3b      	ldr	r2, [pc, #236]	; (8001438 <UpdatePosition+0x150>)
 800134a:	6013      	str	r3, [r2, #0]
		DegAbs = ((RawRead % 3072)/3072.0)*360.0; // mod 3072 out
 800134c:	88fa      	ldrh	r2, [r7, #6]
 800134e:	4b3b      	ldr	r3, [pc, #236]	; (800143c <UpdatePosition+0x154>)
 8001350:	fba3 1302 	umull	r1, r3, r3, r2
 8001354:	0ad9      	lsrs	r1, r3, #11
 8001356:	460b      	mov	r3, r1
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	440b      	add	r3, r1
 800135c:	029b      	lsls	r3, r3, #10
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	b29b      	uxth	r3, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f88a 	bl	800047c <__aeabi_i2d>
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4b30      	ldr	r3, [pc, #192]	; (8001430 <UpdatePosition+0x148>)
 800136e:	f7ff fa19 	bl	80007a4 <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <UpdatePosition+0x14c>)
 8001380:	f7ff f8e6 	bl	8000550 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff faf2 	bl	8000974 <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	4a2b      	ldr	r2, [pc, #172]	; (8001440 <UpdatePosition+0x158>)
 8001394:	6013      	str	r3, [r2, #0]
		//radiant
		RadRel = (RawRead/3072.0)*(2*M_PI);
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f86f 	bl	800047c <__aeabi_i2d>
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <UpdatePosition+0x148>)
 80013a4:	f7ff f9fe 	bl	80007a4 <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	a31b      	add	r3, pc, #108	; (adr r3, 8001420 <UpdatePosition+0x138>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff f8cb 	bl	8000550 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fad7 	bl	8000974 <__aeabi_d2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <UpdatePosition+0x15c>)
 80013ca:	6013      	str	r3, [r2, #0]
		RadAbs = ((RawRead % 3072)/3072.0)*(2*M_PI);
 80013cc:	88fa      	ldrh	r2, [r7, #6]
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <UpdatePosition+0x154>)
 80013d0:	fba3 1302 	umull	r1, r3, r3, r2
 80013d4:	0ad9      	lsrs	r1, r3, #11
 80013d6:	460b      	mov	r3, r1
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	440b      	add	r3, r1
 80013dc:	029b      	lsls	r3, r3, #10
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f84a 	bl	800047c <__aeabi_i2d>
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <UpdatePosition+0x148>)
 80013ee:	f7ff f9d9 	bl	80007a4 <__aeabi_ddiv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	a309      	add	r3, pc, #36	; (adr r3, 8001420 <UpdatePosition+0x138>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	f7ff f8a6 	bl	8000550 <__aeabi_dmul>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff fab2 	bl	8000974 <__aeabi_d2f>
 8001410:	4603      	mov	r3, r0
 8001412:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <UpdatePosition+0x160>)
 8001414:	6013      	str	r3, [r2, #0]
	}


}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bdb0      	pop	{r4, r5, r7, pc}
 800141e:	bf00      	nop
 8001420:	54442d18 	.word	0x54442d18
 8001424:	401921fb 	.word	0x401921fb
 8001428:	20000080 	.word	0x20000080
 800142c:	40010000 	.word	0x40010000
 8001430:	40a80000 	.word	0x40a80000
 8001434:	40768000 	.word	0x40768000
 8001438:	20000040 	.word	0x20000040
 800143c:	aaaaaaab 	.word	0xaaaaaaab
 8001440:	20000044 	.word	0x20000044
 8001444:	20000048 	.word	0x20000048
 8001448:	2000004c 	.word	0x2000004c

0800144c <PIDzero>:

void PIDzero(){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

	CrrntTime = micros();
 8001450:	f000 f94e 	bl	80016f0 <micros>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fba2 	bl	8000ba4 <__aeabi_ul2f>
 8001460:	4603      	mov	r3, r0
 8001462:	4a2a      	ldr	r2, [pc, #168]	; (800150c <PIDzero+0xc0>)
 8001464:	6013      	str	r3, [r2, #0]
	DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <PIDzero+0xc0>)
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <PIDzero+0xc4>)
 800146e:	edd3 7a00 	vldr	s15, [r3]
 8001472:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001476:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001514 <PIDzero+0xc8>
 800147a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <PIDzero+0xcc>)
 8001480:	edc3 7a00 	vstr	s15, [r3]
	PreviTime = CrrntTime; // log previ here for next loop
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <PIDzero+0xc0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a21      	ldr	r2, [pc, #132]	; (8001510 <PIDzero+0xc4>)
 800148a:	6013      	str	r3, [r2, #0]


	ErrPos[0] = TargetDeg - DegAbs;
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <PIDzero+0xd0>)
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <PIDzero+0xd4>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <PIDzero+0xd8>)
 800149e:	edc3 7a00 	vstr	s15, [r3]

	Propo = K_P * ErrPos[0];
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <PIDzero+0xd8>)
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <PIDzero+0xdc>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <PIDzero+0xe0>)
 80014b4:	edc3 7a00 	vstr	s15, [r3]

	Integral = Integral + ( ErrPos[0] * DeltaTime ); // Integral -Newton-Leibniz
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <PIDzero+0xd8>)
 80014ba:	ed93 7a00 	vldr	s14, [r3]
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <PIDzero+0xcc>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <PIDzero+0xe4>)
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <PIDzero+0xe4>)
 80014d4:	edc3 7a00 	vstr	s15, [r3]

	Derivate = (ErrPos[0]-ErrPos[1]) / DeltaTime; // d/dt position
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <PIDzero+0xd8>)
 80014da:	ed93 7a00 	vldr	s14, [r3]
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <PIDzero+0xd8>)
 80014e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80014e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <PIDzero+0xcc>)
 80014ea:	ed93 7a00 	vldr	s14, [r3]
 80014ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <PIDzero+0xe8>)
 80014f4:	edc3 7a00 	vstr	s15, [r3]

	u_contr = Propo ; // PID u[k] + (K_I * Integral) + (K_D * Derivate)
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <PIDzero+0xe0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <PIDzero+0xec>)
 80014fe:	6013      	str	r3, [r2, #0]

	ErrPos[1] = ErrPos[0]; // log previous error
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <PIDzero+0xd8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <PIDzero+0xd8>)
 8001506:	6053      	str	r3, [r2, #4]
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000068 	.word	0x20000068
 8001510:	20000060 	.word	0x20000060
 8001514:	49742400 	.word	0x49742400
 8001518:	20000064 	.word	0x20000064
 800151c:	20000050 	.word	0x20000050
 8001520:	20000044 	.word	0x20000044
 8001524:	20000054 	.word	0x20000054
 8001528:	20000000 	.word	0x20000000
 800152c:	20000088 	.word	0x20000088
 8001530:	200000d8 	.word	0x200000d8
 8001534:	2000008c 	.word	0x2000008c
 8001538:	2000005c 	.word	0x2000005c

0800153c <MotDrv>:

void MotDrv(){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	// drive
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, D5pin);
 8001540:	4b37      	ldr	r3, [pc, #220]	; (8001620 <MotDrv+0xe4>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	2110      	movs	r1, #16
 8001548:	4836      	ldr	r0, [pc, #216]	; (8001624 <MotDrv+0xe8>)
 800154a:	f000 fd47 	bl	8001fdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, D6pin);
 800154e:	4b36      	ldr	r3, [pc, #216]	; (8001628 <MotDrv+0xec>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001558:	4832      	ldr	r0, [pc, #200]	; (8001624 <MotDrv+0xe8>)
 800155a:	f000 fd3f 	bl	8001fdc <HAL_GPIO_WritePin>
	//   direction chk
	if(u_contr < 0){MotCW = -1;}
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <MotDrv+0xf0>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	d503      	bpl.n	8001576 <MotDrv+0x3a>
 800156e:	4b30      	ldr	r3, [pc, #192]	; (8001630 <MotDrv+0xf4>)
 8001570:	22ff      	movs	r2, #255	; 0xff
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	e00e      	b.n	8001594 <MotDrv+0x58>
	else if (u_contr > 0) {MotCW = 1;}
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <MotDrv+0xf0>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001584:	dd03      	ble.n	800158e <MotDrv+0x52>
 8001586:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <MotDrv+0xf4>)
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
 800158c:	e002      	b.n	8001594 <MotDrv+0x58>
	else{MotCW = 0;}
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <MotDrv+0xf4>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]

	// speed
	PWMotDrv = (int)fabsf(u_contr); // Absolute int
 8001594:	4b25      	ldr	r3, [pc, #148]	; (800162c <MotDrv+0xf0>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	eef0 7ae7 	vabs.f32	s15, s15
 800159e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a2:	ee17 3a90 	vmov	r3, s15
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <MotDrv+0xf8>)
 80015aa:	801a      	strh	r2, [r3, #0]
	if(PWMotDrv > 10){PWMotDrv = 10;}
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <MotDrv+0xf8>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	2b0a      	cmp	r3, #10
 80015b2:	d902      	bls.n	80015ba <MotDrv+0x7e>
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <MotDrv+0xf8>)
 80015b6:	220a      	movs	r2, #10
 80015b8:	801a      	strh	r2, [r3, #0]
	if(PWMotDrv < 2 && ErrPos[0] != 0 ){PWMotDrv = 2;} //pvnt too low pwm that can't drive mot
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <MotDrv+0xf8>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d80a      	bhi.n	80015d8 <MotDrv+0x9c>
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <MotDrv+0xfc>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	d002      	beq.n	80015d8 <MotDrv+0x9c>
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MotDrv+0xf8>)
 80015d4:	2202      	movs	r2, #2
 80015d6:	801a      	strh	r2, [r3, #0]

	// driver
	if (MotCW == -1){
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <MotDrv+0xf4>)
 80015da:	f993 3000 	ldrsb.w	r3, [r3]
 80015de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e2:	d107      	bne.n	80015f4 <MotDrv+0xb8>
		D5pin = aspwm;
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <MotDrv+0x100>)
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <MotDrv+0xe4>)
 80015ea:	701a      	strb	r2, [r3, #0]
		D6pin = 0;
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MotDrv+0xec>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
	else{// sleep state pin1, pin2 = 1 lock torque
		D5pin = 1;
		D6pin = 1;
	}

}
 80015f2:	e012      	b.n	800161a <MotDrv+0xde>
	else if(MotCW == 1){
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MotDrv+0xf4>)
 80015f6:	f993 3000 	ldrsb.w	r3, [r3]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d107      	bne.n	800160e <MotDrv+0xd2>
		D5pin = 0;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MotDrv+0xe4>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
		D6pin = aspwm;
 8001604:	4b0d      	ldr	r3, [pc, #52]	; (800163c <MotDrv+0x100>)
 8001606:	781a      	ldrb	r2, [r3, #0]
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <MotDrv+0xec>)
 800160a:	701a      	strb	r2, [r3, #0]
}
 800160c:	e005      	b.n	800161a <MotDrv+0xde>
		D5pin = 1;
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <MotDrv+0xe4>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
		D6pin = 1;
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <MotDrv+0xec>)
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000005 	.word	0x20000005
 8001624:	40020400 	.word	0x40020400
 8001628:	20000006 	.word	0x20000006
 800162c:	2000005c 	.word	0x2000005c
 8001630:	20000004 	.word	0x20000004
 8001634:	2000006c 	.word	0x2000006c
 8001638:	20000054 	.word	0x20000054
 800163c:	20000078 	.word	0x20000078

08001640 <PWMgen>:

void PWMgen(){
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	af00      	add	r7, sp, #0
	if( micros() - PWMTimestamp >= 100){
 8001644:	f000 f854 	bl	80016f0 <micros>
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <PWMgen+0x68>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	1a84      	subs	r4, r0, r2
 8001650:	eb61 0503 	sbc.w	r5, r1, r3
 8001654:	2d00      	cmp	r5, #0
 8001656:	bf08      	it	eq
 8001658:	2c64      	cmpeq	r4, #100	; 0x64
 800165a:	d314      	bcc.n	8001686 <PWMgen+0x46>
		PWMTimestamp = micros();
 800165c:	f000 f848 	bl	80016f0 <micros>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4910      	ldr	r1, [pc, #64]	; (80016a8 <PWMgen+0x68>)
 8001666:	e9c1 2300 	strd	r2, r3, [r1]
		if(PWMCnter >= 100){PWMCnter=0;} // 100% dutycycle
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <PWMgen+0x6c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b63      	cmp	r3, #99	; 0x63
 8001670:	d903      	bls.n	800167a <PWMgen+0x3a>
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <PWMgen+0x6c>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
 8001678:	e005      	b.n	8001686 <PWMgen+0x46>
		else{PWMCnter++;}
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <PWMgen+0x6c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <PWMgen+0x6c>)
 8001684:	701a      	strb	r2, [r3, #0]
		}

	// dutycycle > current percent
	if(PWMotDrv > PWMCnter){
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <PWMgen+0x6c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <PWMgen+0x70>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d203      	bcs.n	800169c <PWMgen+0x5c>
		aspwm = 1;}
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <PWMgen+0x74>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
	else{
		aspwm = 0;}

}
 800169a:	e002      	b.n	80016a2 <PWMgen+0x62>
		aspwm = 0;}
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <PWMgen+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
}
 80016a2:	bf00      	nop
 80016a4:	bdb0      	pop	{r4, r5, r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000070 	.word	0x20000070
 80016ac:	2000006e 	.word	0x2000006e
 80016b0:	2000006c 	.word	0x2000006c
 80016b4:	20000078 	.word	0x20000078

080016b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b8:	b4b0      	push	{r4, r5, r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d109      	bne.n	80016dc <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;//stamp for timer2 is 2^32
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f112 34ff 	adds.w	r4, r2, #4294967295
 80016d2:	f143 0500 	adc.w	r5, r3, #0
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016d8:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bcb0      	pop	{r4, r5, r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	200000dc 	.word	0x200000dc
 80016ec:	20000038 	.word	0x20000038

080016f0 <micros>:
uint64_t micros()
{
 80016f0:	b4b0      	push	{r4, r5, r7}
 80016f2:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <micros+0x2c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	4618      	mov	r0, r3
 80016fc:	f04f 0100 	mov.w	r1, #0
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <micros+0x30>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	1884      	adds	r4, r0, r2
 8001708:	eb41 0503 	adc.w	r5, r1, r3
 800170c:	4622      	mov	r2, r4
 800170e:	462b      	mov	r3, r5
}
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	bcb0      	pop	{r4, r5, r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	200000dc 	.word	0x200000dc
 8001720:	20000038 	.word	0x20000038

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172c:	e7fe      	b.n	800172c <Error_Handler+0x8>
	...

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_MspInit+0x4c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	4a0f      	ldr	r2, [pc, #60]	; (800177c <HAL_MspInit+0x4c>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001744:	6453      	str	r3, [r2, #68]	; 0x44
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <HAL_MspInit+0x4c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_MspInit+0x4c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a08      	ldr	r2, [pc, #32]	; (800177c <HAL_MspInit+0x4c>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_MspInit+0x4c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800176e:	2007      	movs	r0, #7
 8001770:	f000 fa6e 	bl	8001c50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800

08001780 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_TIM_Encoder_MspInit+0x84>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d12c      	bne.n	80017fc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_TIM_Encoder_MspInit+0x88>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <HAL_TIM_Encoder_MspInit+0x88>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_TIM_Encoder_MspInit+0x88>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_TIM_Encoder_MspInit+0x88>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a10      	ldr	r2, [pc, #64]	; (8001808 <HAL_TIM_Encoder_MspInit+0x88>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_TIM_Encoder_MspInit+0x88>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <HAL_TIM_Encoder_MspInit+0x8c>)
 80017f8:	f000 fa6c 	bl	8001cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40010000 	.word	0x40010000
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000

08001810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001820:	d115      	bne.n	800184e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_TIM_Base_MspInit+0x48>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <HAL_TIM_Base_MspInit+0x48>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_TIM_Base_MspInit+0x48>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	201c      	movs	r0, #28
 8001844:	f000 fa0f 	bl	8001c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001848:	201c      	movs	r0, #28
 800184a:	f000 fa28 	bl	8001c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <HAL_UART_MspInit+0x84>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d12b      	bne.n	80018d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <HAL_UART_MspInit+0x88>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <HAL_UART_MspInit+0x88>)
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_UART_MspInit+0x88>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_UART_MspInit+0x88>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a10      	ldr	r2, [pc, #64]	; (80018e4 <HAL_UART_MspInit+0x88>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_UART_MspInit+0x88>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018b6:	230c      	movs	r3, #12
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018c6:	2307      	movs	r3, #7
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <HAL_UART_MspInit+0x8c>)
 80018d2:	f000 f9ff 	bl	8001cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	; 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40004400 	.word	0x40004400
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020000 	.word	0x40020000

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <NMI_Handler+0x4>

080018f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <MemManage_Handler+0x4>

080018fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <UsageFault_Handler+0x4>

0800190a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001938:	f000 f89a 	bl	8001a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}

08001940 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <TIM2_IRQHandler+0x10>)
 8001946:	f001 f9bd 	bl	8002cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200000dc 	.word	0x200000dc

08001954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <SystemInit+0x20>)
 800195a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <SystemInit+0x20>)
 8001960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800197e:	490e      	ldr	r1, [pc, #56]	; (80019b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001980:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001984:	e002      	b.n	800198c <LoopCopyDataInit>

08001986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198a:	3304      	adds	r3, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001990:	d3f9      	bcc.n	8001986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001994:	4c0b      	ldr	r4, [pc, #44]	; (80019c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001998:	e001      	b.n	800199e <LoopFillZerobss>

0800199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800199c:	3204      	adds	r2, #4

0800199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a0:	d3fb      	bcc.n	800199a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019a2:	f7ff ffd7 	bl	8001954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a6:	f001 ff5d 	bl	8003864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019aa:	f7ff fabd 	bl	8000f28 <main>
  bx  lr    
 80019ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80019bc:	080038fc 	.word	0x080038fc
  ldr r2, =_sbss
 80019c0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80019c4:	2000016c 	.word	0x2000016c

080019c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC_IRQHandler>
	...

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_Init+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <HAL_Init+0x40>)
 80019d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_Init+0x40>)
 80019e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <HAL_Init+0x40>)
 80019ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 f92b 	bl	8001c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 f808 	bl	8001a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a00:	f7ff fe96 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023c00 	.word	0x40023c00

08001a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_InitTick+0x54>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_InitTick+0x58>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f943 	bl	8001cba <HAL_SYSTICK_Config>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00e      	b.n	8001a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d80a      	bhi.n	8001a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f000 f90b 	bl	8001c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a50:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <HAL_InitTick+0x5c>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e000      	b.n	8001a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20000010 	.word	0x20000010
 8001a6c:	2000000c 	.word	0x2000000c

08001a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x20>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x24>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_IncTick+0x24>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000010 	.word	0x20000010
 8001a94:	20000168 	.word	0x20000168

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000168 	.word	0x20000168

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db0b      	blt.n	8001b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4907      	ldr	r1, [pc, #28]	; (8001b4c <__NVIC_EnableIRQ+0x38>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2001      	movs	r0, #1
 8001b36:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000e100 	.word	0xe000e100

08001b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	db0a      	blt.n	8001b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	490c      	ldr	r1, [pc, #48]	; (8001b9c <__NVIC_SetPriority+0x4c>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	0112      	lsls	r2, r2, #4
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	440b      	add	r3, r1
 8001b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b78:	e00a      	b.n	8001b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4908      	ldr	r1, [pc, #32]	; (8001ba0 <__NVIC_SetPriority+0x50>)
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	3b04      	subs	r3, #4
 8001b88:	0112      	lsls	r2, r2, #4
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	761a      	strb	r2, [r3, #24]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000e100 	.word	0xe000e100
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	; 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f1c3 0307 	rsb	r3, r3, #7
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	bf28      	it	cs
 8001bc2:	2304      	movcs	r3, #4
 8001bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	2b06      	cmp	r3, #6
 8001bcc:	d902      	bls.n	8001bd4 <NVIC_EncodePriority+0x30>
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3b03      	subs	r3, #3
 8001bd2:	e000      	b.n	8001bd6 <NVIC_EncodePriority+0x32>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	401a      	ands	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf6:	43d9      	mvns	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	4313      	orrs	r3, r2
         );
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3724      	adds	r7, #36	; 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c1c:	d301      	bcc.n	8001c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00f      	b.n	8001c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <SysTick_Config+0x40>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f7ff ff8e 	bl	8001b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <SysTick_Config+0x40>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <SysTick_Config+0x40>)
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	e000e010 	.word	0xe000e010

08001c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff ff29 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c78:	f7ff ff3e 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	6978      	ldr	r0, [r7, #20]
 8001c84:	f7ff ff8e 	bl	8001ba4 <NVIC_EncodePriority>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff5d 	bl	8001b50 <__NVIC_SetPriority>
}
 8001c96:	bf00      	nop
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff31 	bl	8001b14 <__NVIC_EnableIRQ>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ffa2 	bl	8001c0c <SysTick_Config>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	e159      	b.n	8001fa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f040 8148 	bne.w	8001f9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d005      	beq.n	8001d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d130      	bne.n	8001d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 0201 	and.w	r2, r3, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d017      	beq.n	8001dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d123      	bne.n	8001e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	08da      	lsrs	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3208      	adds	r2, #8
 8001dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	220f      	movs	r2, #15
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	69b9      	ldr	r1, [r7, #24]
 8001e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0203 	and.w	r2, r3, #3
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a2 	beq.w	8001f9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b57      	ldr	r3, [pc, #348]	; (8001fbc <HAL_GPIO_Init+0x2e8>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a56      	ldr	r2, [pc, #344]	; (8001fbc <HAL_GPIO_Init+0x2e8>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b54      	ldr	r3, [pc, #336]	; (8001fbc <HAL_GPIO_Init+0x2e8>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e76:	4a52      	ldr	r2, [pc, #328]	; (8001fc0 <HAL_GPIO_Init+0x2ec>)
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a49      	ldr	r2, [pc, #292]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d019      	beq.n	8001ed6 <HAL_GPIO_Init+0x202>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a48      	ldr	r2, [pc, #288]	; (8001fc8 <HAL_GPIO_Init+0x2f4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_GPIO_Init+0x1fe>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a47      	ldr	r2, [pc, #284]	; (8001fcc <HAL_GPIO_Init+0x2f8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00d      	beq.n	8001ece <HAL_GPIO_Init+0x1fa>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a46      	ldr	r2, [pc, #280]	; (8001fd0 <HAL_GPIO_Init+0x2fc>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d007      	beq.n	8001eca <HAL_GPIO_Init+0x1f6>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a45      	ldr	r2, [pc, #276]	; (8001fd4 <HAL_GPIO_Init+0x300>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_GPIO_Init+0x1f2>
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	e008      	b.n	8001ed8 <HAL_GPIO_Init+0x204>
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x204>
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e004      	b.n	8001ed8 <HAL_GPIO_Init+0x204>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_Init+0x204>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_Init+0x204>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	f002 0203 	and.w	r2, r2, #3
 8001ede:	0092      	lsls	r2, r2, #2
 8001ee0:	4093      	lsls	r3, r2
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee8:	4935      	ldr	r1, [pc, #212]	; (8001fc0 <HAL_GPIO_Init+0x2ec>)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f1a:	4a2f      	ldr	r2, [pc, #188]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f44:	4a24      	ldr	r2, [pc, #144]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4a:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6e:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f98:	4a0f      	ldr	r2, [pc, #60]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	2b0f      	cmp	r3, #15
 8001fa8:	f67f aea2 	bls.w	8001cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40013800 	.word	0x40013800
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	40020400 	.word	0x40020400
 8001fcc:	40020800 	.word	0x40020800
 8001fd0:	40020c00 	.word	0x40020c00
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40013c00 	.word	0x40013c00

08001fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fec:	787b      	ldrb	r3, [r7, #1]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff2:	887a      	ldrh	r2, [r7, #2]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ff8:	e003      	b.n	8002002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	041a      	lsls	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	619a      	str	r2, [r3, #24]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e264      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d075      	beq.n	800211a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800202e:	4ba3      	ldr	r3, [pc, #652]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b04      	cmp	r3, #4
 8002038:	d00c      	beq.n	8002054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800203a:	4ba0      	ldr	r3, [pc, #640]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002042:	2b08      	cmp	r3, #8
 8002044:	d112      	bne.n	800206c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002046:	4b9d      	ldr	r3, [pc, #628]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002052:	d10b      	bne.n	800206c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	4b99      	ldr	r3, [pc, #612]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d05b      	beq.n	8002118 <HAL_RCC_OscConfig+0x108>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d157      	bne.n	8002118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e23f      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d106      	bne.n	8002084 <HAL_RCC_OscConfig+0x74>
 8002076:	4b91      	ldr	r3, [pc, #580]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a90      	ldr	r2, [pc, #576]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e01d      	b.n	80020c0 <HAL_RCC_OscConfig+0xb0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x98>
 800208e:	4b8b      	ldr	r3, [pc, #556]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a8a      	ldr	r2, [pc, #552]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b88      	ldr	r3, [pc, #544]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a87      	ldr	r2, [pc, #540]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0xb0>
 80020a8:	4b84      	ldr	r3, [pc, #528]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a83      	ldr	r2, [pc, #524]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b81      	ldr	r3, [pc, #516]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a80      	ldr	r2, [pc, #512]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d013      	beq.n	80020f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff fce6 	bl	8001a98 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff fce2 	bl	8001a98 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e204      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b76      	ldr	r3, [pc, #472]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0xc0>
 80020ee:	e014      	b.n	800211a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff fcd2 	bl	8001a98 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f8:	f7ff fcce 	bl	8001a98 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e1f0      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210a:	4b6c      	ldr	r3, [pc, #432]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0xe8>
 8002116:	e000      	b.n	800211a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d063      	beq.n	80021ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002126:	4b65      	ldr	r3, [pc, #404]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002132:	4b62      	ldr	r3, [pc, #392]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800213a:	2b08      	cmp	r3, #8
 800213c:	d11c      	bne.n	8002178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213e:	4b5f      	ldr	r3, [pc, #380]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d116      	bne.n	8002178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	4b5c      	ldr	r3, [pc, #368]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_RCC_OscConfig+0x152>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e1c4      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002162:	4b56      	ldr	r3, [pc, #344]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4952      	ldr	r1, [pc, #328]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	e03a      	b.n	80021ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002180:	4b4f      	ldr	r3, [pc, #316]	; (80022c0 <HAL_RCC_OscConfig+0x2b0>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7ff fc87 	bl	8001a98 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800218e:	f7ff fc83 	bl	8001a98 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e1a5      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a0:	4b46      	ldr	r3, [pc, #280]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ac:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4940      	ldr	r1, [pc, #256]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	600b      	str	r3, [r1, #0]
 80021c0:	e015      	b.n	80021ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c2:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <HAL_RCC_OscConfig+0x2b0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7ff fc66 	bl	8001a98 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d0:	f7ff fc62 	bl	8001a98 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e184      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e2:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d030      	beq.n	800225c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d016      	beq.n	8002230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002202:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_RCC_OscConfig+0x2b4>)
 8002204:	2201      	movs	r2, #1
 8002206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7ff fc46 	bl	8001a98 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002210:	f7ff fc42 	bl	8001a98 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e164      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x200>
 800222e:	e015      	b.n	800225c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_OscConfig+0x2b4>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7ff fc2f 	bl	8001a98 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800223e:	f7ff fc2b 	bl	8001a98 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e14d      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80a0 	beq.w	80023aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10f      	bne.n	800229a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002296:	2301      	movs	r3, #1
 8002298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_OscConfig+0x2b8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d121      	bne.n	80022ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <HAL_RCC_OscConfig+0x2b8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <HAL_RCC_OscConfig+0x2b8>)
 80022ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b2:	f7ff fbf1 	bl	8001a98 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	e011      	b.n	80022de <HAL_RCC_OscConfig+0x2ce>
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	42470000 	.word	0x42470000
 80022c4:	42470e80 	.word	0x42470e80
 80022c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022cc:	f7ff fbe4 	bl	8001a98 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e106      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	4b85      	ldr	r3, [pc, #532]	; (80024f4 <HAL_RCC_OscConfig+0x4e4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d106      	bne.n	8002300 <HAL_RCC_OscConfig+0x2f0>
 80022f2:	4b81      	ldr	r3, [pc, #516]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a80      	ldr	r2, [pc, #512]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
 80022fe:	e01c      	b.n	800233a <HAL_RCC_OscConfig+0x32a>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b05      	cmp	r3, #5
 8002306:	d10c      	bne.n	8002322 <HAL_RCC_OscConfig+0x312>
 8002308:	4b7b      	ldr	r3, [pc, #492]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230c:	4a7a      	ldr	r2, [pc, #488]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	6713      	str	r3, [r2, #112]	; 0x70
 8002314:	4b78      	ldr	r3, [pc, #480]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a77      	ldr	r2, [pc, #476]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
 8002320:	e00b      	b.n	800233a <HAL_RCC_OscConfig+0x32a>
 8002322:	4b75      	ldr	r3, [pc, #468]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002326:	4a74      	ldr	r2, [pc, #464]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6713      	str	r3, [r2, #112]	; 0x70
 800232e:	4b72      	ldr	r3, [pc, #456]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	4a71      	ldr	r2, [pc, #452]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d015      	beq.n	800236e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002342:	f7ff fba9 	bl	8001a98 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002348:	e00a      	b.n	8002360 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7ff fba5 	bl	8001a98 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0c5      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	4b65      	ldr	r3, [pc, #404]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ee      	beq.n	800234a <HAL_RCC_OscConfig+0x33a>
 800236c:	e014      	b.n	8002398 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236e:	f7ff fb93 	bl	8001a98 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002374:	e00a      	b.n	800238c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7ff fb8f 	bl	8001a98 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	; 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0af      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	4b5a      	ldr	r3, [pc, #360]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1ee      	bne.n	8002376 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d105      	bne.n	80023aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239e:	4b56      	ldr	r3, [pc, #344]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a55      	ldr	r2, [pc, #340]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 80023a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 809b 	beq.w	80024ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b4:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d05c      	beq.n	800247a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d141      	bne.n	800244c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c8:	4b4c      	ldr	r3, [pc, #304]	; (80024fc <HAL_RCC_OscConfig+0x4ec>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7ff fb63 	bl	8001a98 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d6:	f7ff fb5f 	bl	8001a98 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e081      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e8:	4b43      	ldr	r3, [pc, #268]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f0      	bne.n	80023d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	019b      	lsls	r3, r3, #6
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	3b01      	subs	r3, #1
 800240e:	041b      	lsls	r3, r3, #16
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	061b      	lsls	r3, r3, #24
 8002418:	4937      	ldr	r1, [pc, #220]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800241e:	4b37      	ldr	r3, [pc, #220]	; (80024fc <HAL_RCC_OscConfig+0x4ec>)
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff fb38 	bl	8001a98 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242c:	f7ff fb34 	bl	8001a98 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e056      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243e:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x41c>
 800244a:	e04e      	b.n	80024ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244c:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_RCC_OscConfig+0x4ec>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7ff fb21 	bl	8001a98 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245a:	f7ff fb1d 	bl	8001a98 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e03f      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x44a>
 8002478:	e037      	b.n	80024ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e032      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002486:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <HAL_RCC_OscConfig+0x4e8>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d028      	beq.n	80024e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249e:	429a      	cmp	r2, r3
 80024a0:	d121      	bne.n	80024e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d11a      	bne.n	80024e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024b6:	4013      	ands	r3, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024be:	4293      	cmp	r3, r2
 80024c0:	d111      	bne.n	80024e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	085b      	lsrs	r3, r3, #1
 80024ce:	3b01      	subs	r3, #1
 80024d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40007000 	.word	0x40007000
 80024f8:	40023800 	.word	0x40023800
 80024fc:	42470060 	.word	0x42470060

08002500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0cc      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002514:	4b68      	ldr	r3, [pc, #416]	; (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d90c      	bls.n	800253c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002522:	4b65      	ldr	r3, [pc, #404]	; (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252a:	4b63      	ldr	r3, [pc, #396]	; (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d001      	beq.n	800253c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0b8      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d020      	beq.n	800258a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002554:	4b59      	ldr	r3, [pc, #356]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4a58      	ldr	r2, [pc, #352]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800255e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800256c:	4b53      	ldr	r3, [pc, #332]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a52      	ldr	r2, [pc, #328]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002578:	4b50      	ldr	r3, [pc, #320]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	494d      	ldr	r1, [pc, #308]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d044      	beq.n	8002620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d119      	bne.n	80025de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e07f      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d003      	beq.n	80025be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d107      	bne.n	80025ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025be:	4b3f      	ldr	r3, [pc, #252]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e06f      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ce:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e067      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025de:	4b37      	ldr	r3, [pc, #220]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f023 0203 	bic.w	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4934      	ldr	r1, [pc, #208]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f0:	f7ff fa52 	bl	8001a98 <HAL_GetTick>
 80025f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	e00a      	b.n	800260e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f8:	f7ff fa4e 	bl	8001a98 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	; 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e04f      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 020c 	and.w	r2, r3, #12
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	429a      	cmp	r2, r3
 800261e:	d1eb      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002620:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d20c      	bcs.n	8002648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e032      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4916      	ldr	r1, [pc, #88]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	490e      	ldr	r1, [pc, #56]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002686:	f000 f821 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 800268a:	4602      	mov	r2, r0
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	490a      	ldr	r1, [pc, #40]	; (80026c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	5ccb      	ldrb	r3, [r1, r3]
 800269a:	fa22 f303 	lsr.w	r3, r2, r3
 800269e:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff f9b2 	bl	8001a10 <HAL_InitTick>

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023c00 	.word	0x40023c00
 80026bc:	40023800 	.word	0x40023800
 80026c0:	080038d4 	.word	0x080038d4
 80026c4:	20000008 	.word	0x20000008
 80026c8:	2000000c 	.word	0x2000000c

080026cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	2300      	movs	r3, #0
 80026de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e4:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d00d      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x40>
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	f200 80bd 	bhi.w	8002870 <HAL_RCC_GetSysClockFreq+0x1a4>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x34>
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d003      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x3a>
 80026fe:	e0b7      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b61      	ldr	r3, [pc, #388]	; (8002888 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002702:	60bb      	str	r3, [r7, #8]
       break;
 8002704:	e0b7      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002706:	4b61      	ldr	r3, [pc, #388]	; (800288c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002708:	60bb      	str	r3, [r7, #8]
      break;
 800270a:	e0b4      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800270c:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002714:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002716:	4b5b      	ldr	r3, [pc, #364]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d04d      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002722:	4b58      	ldr	r3, [pc, #352]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	099b      	lsrs	r3, r3, #6
 8002728:	461a      	mov	r2, r3
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	ea02 0800 	and.w	r8, r2, r0
 800273a:	ea03 0901 	and.w	r9, r3, r1
 800273e:	4640      	mov	r0, r8
 8002740:	4649      	mov	r1, r9
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	014b      	lsls	r3, r1, #5
 800274c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002750:	0142      	lsls	r2, r0, #5
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	ebb0 0008 	subs.w	r0, r0, r8
 800275a:	eb61 0109 	sbc.w	r1, r1, r9
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	018b      	lsls	r3, r1, #6
 8002768:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800276c:	0182      	lsls	r2, r0, #6
 800276e:	1a12      	subs	r2, r2, r0
 8002770:	eb63 0301 	sbc.w	r3, r3, r1
 8002774:	f04f 0000 	mov.w	r0, #0
 8002778:	f04f 0100 	mov.w	r1, #0
 800277c:	00d9      	lsls	r1, r3, #3
 800277e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002782:	00d0      	lsls	r0, r2, #3
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	eb12 0208 	adds.w	r2, r2, r8
 800278c:	eb43 0309 	adc.w	r3, r3, r9
 8002790:	f04f 0000 	mov.w	r0, #0
 8002794:	f04f 0100 	mov.w	r1, #0
 8002798:	0259      	lsls	r1, r3, #9
 800279a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800279e:	0250      	lsls	r0, r2, #9
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	461a      	mov	r2, r3
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	f7fe fa3e 	bl	8000c30 <__aeabi_uldivmod>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4613      	mov	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e04a      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027be:	4b31      	ldr	r3, [pc, #196]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	099b      	lsrs	r3, r3, #6
 80027c4:	461a      	mov	r2, r3
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027ce:	f04f 0100 	mov.w	r1, #0
 80027d2:	ea02 0400 	and.w	r4, r2, r0
 80027d6:	ea03 0501 	and.w	r5, r3, r1
 80027da:	4620      	mov	r0, r4
 80027dc:	4629      	mov	r1, r5
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	014b      	lsls	r3, r1, #5
 80027e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027ec:	0142      	lsls	r2, r0, #5
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	1b00      	subs	r0, r0, r4
 80027f4:	eb61 0105 	sbc.w	r1, r1, r5
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	018b      	lsls	r3, r1, #6
 8002802:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002806:	0182      	lsls	r2, r0, #6
 8002808:	1a12      	subs	r2, r2, r0
 800280a:	eb63 0301 	sbc.w	r3, r3, r1
 800280e:	f04f 0000 	mov.w	r0, #0
 8002812:	f04f 0100 	mov.w	r1, #0
 8002816:	00d9      	lsls	r1, r3, #3
 8002818:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800281c:	00d0      	lsls	r0, r2, #3
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	1912      	adds	r2, r2, r4
 8002824:	eb45 0303 	adc.w	r3, r5, r3
 8002828:	f04f 0000 	mov.w	r0, #0
 800282c:	f04f 0100 	mov.w	r1, #0
 8002830:	0299      	lsls	r1, r3, #10
 8002832:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002836:	0290      	lsls	r0, r2, #10
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	461a      	mov	r2, r3
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	f7fe f9f2 	bl	8000c30 <__aeabi_uldivmod>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4613      	mov	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	0c1b      	lsrs	r3, r3, #16
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	3301      	adds	r3, #1
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	60bb      	str	r3, [r7, #8]
      break;
 800286e:	e002      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002872:	60bb      	str	r3, [r7, #8]
      break;
 8002874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002876:	68bb      	ldr	r3, [r7, #8]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	00f42400 	.word	0x00f42400
 800288c:	007a1200 	.word	0x007a1200

08002890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002894:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002896:	681b      	ldr	r3, [r3, #0]
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000008 	.word	0x20000008

080028a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028ac:	f7ff fff0 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	0a9b      	lsrs	r3, r3, #10
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4903      	ldr	r1, [pc, #12]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40023800 	.word	0x40023800
 80028cc:	080038e4 	.word	0x080038e4

080028d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028d4:	f7ff ffdc 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	0b5b      	lsrs	r3, r3, #13
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4903      	ldr	r1, [pc, #12]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40023800 	.word	0x40023800
 80028f4:	080038e4 	.word	0x080038e4

080028f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e041      	b.n	800298e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe ff76 	bl	8001810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f000 fbbc 	bl	80030b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d001      	beq.n	80029b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e044      	b.n	8002a3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1e      	ldr	r2, [pc, #120]	; (8002a48 <HAL_TIM_Base_Start_IT+0xb0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d018      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x6c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029da:	d013      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x6c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <HAL_TIM_Base_Start_IT+0xb4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00e      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x6c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_TIM_Base_Start_IT+0xb8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d009      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x6c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <HAL_TIM_Base_Start_IT+0xbc>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d004      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x6c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d111      	bne.n	8002a28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b06      	cmp	r3, #6
 8002a14:	d010      	beq.n	8002a38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a26:	e007      	b.n	8002a38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800
 8002a54:	40000c00 	.word	0x40000c00
 8002a58:	40014000 	.word	0x40014000

08002a5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e097      	b.n	8002ba0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d106      	bne.n	8002a8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7fe fe7b 	bl	8001780 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aa0:	f023 0307 	bic.w	r3, r3, #7
 8002aa4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	f000 faff 	bl	80030b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ade:	f023 0303 	bic.w	r3, r3, #3
 8002ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	4313      	orrs	r3, r2
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002afc:	f023 030c 	bic.w	r3, r3, #12
 8002b00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	011a      	lsls	r2, r3, #4
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	031b      	lsls	r3, r3, #12
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002b3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002b42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bb8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d110      	bne.n	8002bfa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d102      	bne.n	8002be4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bde:	7b7b      	ldrb	r3, [r7, #13]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d001      	beq.n	8002be8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e069      	b.n	8002cbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bf8:	e031      	b.n	8002c5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d110      	bne.n	8002c22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c00:	7bbb      	ldrb	r3, [r7, #14]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d102      	bne.n	8002c0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c06:	7b3b      	ldrb	r3, [r7, #12]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d001      	beq.n	8002c10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e055      	b.n	8002cbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c20:	e01d      	b.n	8002c5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d108      	bne.n	8002c3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c28:	7bbb      	ldrb	r3, [r7, #14]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d105      	bne.n	8002c3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c2e:	7b7b      	ldrb	r3, [r7, #13]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d102      	bne.n	8002c3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c34:	7b3b      	ldrb	r3, [r7, #12]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d001      	beq.n	8002c3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e03e      	b.n	8002cbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2202      	movs	r2, #2
 8002c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_TIM_Encoder_Start+0xc4>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d008      	beq.n	8002c7c <HAL_TIM_Encoder_Start+0xd4>
 8002c6a:	e00f      	b.n	8002c8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2201      	movs	r2, #1
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fb37 	bl	80032e8 <TIM_CCxChannelCmd>
      break;
 8002c7a:	e016      	b.n	8002caa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2201      	movs	r2, #1
 8002c82:	2104      	movs	r1, #4
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fb2f 	bl	80032e8 <TIM_CCxChannelCmd>
      break;
 8002c8a:	e00e      	b.n	8002caa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2201      	movs	r2, #1
 8002c92:	2100      	movs	r1, #0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fb27 	bl	80032e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	2104      	movs	r1, #4
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fb20 	bl	80032e8 <TIM_CCxChannelCmd>
      break;
 8002ca8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0201 	orr.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d122      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d11b      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0202 	mvn.w	r2, #2
 8002cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f9b5 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002d0c:	e005      	b.n	8002d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f9a7 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f9b8 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d122      	bne.n	8002d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d11b      	bne.n	8002d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0204 	mvn.w	r2, #4
 8002d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f98b 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002d60:	e005      	b.n	8002d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f97d 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f98e 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d122      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0208 	mvn.w	r2, #8
 8002d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f961 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002db4:	e005      	b.n	8002dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f953 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f964 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b10      	cmp	r3, #16
 8002dd4:	d122      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d11b      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0210 	mvn.w	r2, #16
 8002dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2208      	movs	r2, #8
 8002df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f937 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002e08:	e005      	b.n	8002e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f929 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f93a 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d10e      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d107      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0201 	mvn.w	r2, #1
 8002e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fc38 	bl	80016b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e52:	2b80      	cmp	r3, #128	; 0x80
 8002e54:	d10e      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e60:	2b80      	cmp	r3, #128	; 0x80
 8002e62:	d107      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fad8 	bl	8003424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d10e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d107      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f8ff 	bl	800309e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d10e      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d107      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0220 	mvn.w	r2, #32
 8002ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 faa2 	bl	8003410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIM_ConfigClockSource+0x1c>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e0b4      	b.n	800305a <HAL_TIM_ConfigClockSource+0x186>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f28:	d03e      	beq.n	8002fa8 <HAL_TIM_ConfigClockSource+0xd4>
 8002f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2e:	f200 8087 	bhi.w	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f36:	f000 8086 	beq.w	8003046 <HAL_TIM_ConfigClockSource+0x172>
 8002f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3e:	d87f      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f40:	2b70      	cmp	r3, #112	; 0x70
 8002f42:	d01a      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0xa6>
 8002f44:	2b70      	cmp	r3, #112	; 0x70
 8002f46:	d87b      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f48:	2b60      	cmp	r3, #96	; 0x60
 8002f4a:	d050      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x11a>
 8002f4c:	2b60      	cmp	r3, #96	; 0x60
 8002f4e:	d877      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f50:	2b50      	cmp	r3, #80	; 0x50
 8002f52:	d03c      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0xfa>
 8002f54:	2b50      	cmp	r3, #80	; 0x50
 8002f56:	d873      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d058      	beq.n	800300e <HAL_TIM_ConfigClockSource+0x13a>
 8002f5c:	2b40      	cmp	r3, #64	; 0x40
 8002f5e:	d86f      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f60:	2b30      	cmp	r3, #48	; 0x30
 8002f62:	d064      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x15a>
 8002f64:	2b30      	cmp	r3, #48	; 0x30
 8002f66:	d86b      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d060      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x15a>
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d867      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d05c      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x15a>
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d05a      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x15a>
 8002f78:	e062      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f000 f98d 	bl	80032a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	609a      	str	r2, [r3, #8]
      break;
 8002fa6:	e04f      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6899      	ldr	r1, [r3, #8]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f000 f976 	bl	80032a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fca:	609a      	str	r2, [r3, #8]
      break;
 8002fcc:	e03c      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f000 f8ea 	bl	80031b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2150      	movs	r1, #80	; 0x50
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f943 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 8002fec:	e02c      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f000 f909 	bl	8003212 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2160      	movs	r1, #96	; 0x60
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f933 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 800300c:	e01c      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	461a      	mov	r2, r3
 800301c:	f000 f8ca 	bl	80031b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2140      	movs	r1, #64	; 0x40
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f923 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 800302c:	e00c      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4619      	mov	r1, r3
 8003038:	4610      	mov	r0, r2
 800303a:	f000 f91a 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 800303e:	e003      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      break;
 8003044:	e000      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003058:	7bfb      	ldrb	r3, [r7, #15]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a34      	ldr	r2, [pc, #208]	; (8003198 <TIM_Base_SetConfig+0xe4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00f      	beq.n	80030ec <TIM_Base_SetConfig+0x38>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d2:	d00b      	beq.n	80030ec <TIM_Base_SetConfig+0x38>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a31      	ldr	r2, [pc, #196]	; (800319c <TIM_Base_SetConfig+0xe8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d007      	beq.n	80030ec <TIM_Base_SetConfig+0x38>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a30      	ldr	r2, [pc, #192]	; (80031a0 <TIM_Base_SetConfig+0xec>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d003      	beq.n	80030ec <TIM_Base_SetConfig+0x38>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a2f      	ldr	r2, [pc, #188]	; (80031a4 <TIM_Base_SetConfig+0xf0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d108      	bne.n	80030fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a25      	ldr	r2, [pc, #148]	; (8003198 <TIM_Base_SetConfig+0xe4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01b      	beq.n	800313e <TIM_Base_SetConfig+0x8a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310c:	d017      	beq.n	800313e <TIM_Base_SetConfig+0x8a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a22      	ldr	r2, [pc, #136]	; (800319c <TIM_Base_SetConfig+0xe8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <TIM_Base_SetConfig+0x8a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a21      	ldr	r2, [pc, #132]	; (80031a0 <TIM_Base_SetConfig+0xec>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00f      	beq.n	800313e <TIM_Base_SetConfig+0x8a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a20      	ldr	r2, [pc, #128]	; (80031a4 <TIM_Base_SetConfig+0xf0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00b      	beq.n	800313e <TIM_Base_SetConfig+0x8a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <TIM_Base_SetConfig+0xf4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <TIM_Base_SetConfig+0x8a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a1e      	ldr	r2, [pc, #120]	; (80031ac <TIM_Base_SetConfig+0xf8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d003      	beq.n	800313e <TIM_Base_SetConfig+0x8a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1d      	ldr	r2, [pc, #116]	; (80031b0 <TIM_Base_SetConfig+0xfc>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d108      	bne.n	8003150 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a08      	ldr	r2, [pc, #32]	; (8003198 <TIM_Base_SetConfig+0xe4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d103      	bne.n	8003184 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	615a      	str	r2, [r3, #20]
}
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40010000 	.word	0x40010000
 800319c:	40000400 	.word	0x40000400
 80031a0:	40000800 	.word	0x40000800
 80031a4:	40000c00 	.word	0x40000c00
 80031a8:	40014000 	.word	0x40014000
 80031ac:	40014400 	.word	0x40014400
 80031b0:	40014800 	.word	0x40014800

080031b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f023 0201 	bic.w	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f023 030a 	bic.w	r3, r3, #10
 80031f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	621a      	str	r2, [r3, #32]
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003212:	b480      	push	{r7}
 8003214:	b087      	sub	sp, #28
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f023 0210 	bic.w	r2, r3, #16
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800323c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	031b      	lsls	r3, r3, #12
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800324e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	621a      	str	r2, [r3, #32]
}
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	f043 0307 	orr.w	r3, r3, #7
 8003294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	609a      	str	r2, [r3, #8]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	021a      	lsls	r2, r3, #8
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	609a      	str	r2, [r3, #8]
}
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	2201      	movs	r2, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1a      	ldr	r2, [r3, #32]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	43db      	mvns	r3, r3
 800330a:	401a      	ands	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a1a      	ldr	r2, [r3, #32]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	fa01 f303 	lsl.w	r3, r1, r3
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	621a      	str	r2, [r3, #32]
}
 8003326:	bf00      	nop
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003348:	2302      	movs	r3, #2
 800334a:	e050      	b.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d018      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003398:	d013      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a18      	ldr	r2, [pc, #96]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a16      	ldr	r2, [pc, #88]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a15      	ldr	r2, [pc, #84]	; (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a13      	ldr	r2, [pc, #76]	; (800340c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d10c      	bne.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40010000 	.word	0x40010000
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800
 8003408:	40000c00 	.word	0x40000c00
 800340c:	40014000 	.word	0x40014000

08003410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e03f      	b.n	80034ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fe f9fc 	bl	800185c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2224      	movs	r2, #36	; 0x24
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800347a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f829 	bl	80034d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003490:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d8:	b09f      	sub	sp, #124	; 0x7c
 80034da:	af00      	add	r7, sp, #0
 80034dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ea:	68d9      	ldr	r1, [r3, #12]
 80034ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	ea40 0301 	orr.w	r3, r0, r1
 80034f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	431a      	orrs	r2, r3
 8003500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	431a      	orrs	r2, r3
 8003506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	4313      	orrs	r3, r2
 800350c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800350e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003518:	f021 010c 	bic.w	r1, r1, #12
 800351c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003522:	430b      	orrs	r3, r1
 8003524:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003532:	6999      	ldr	r1, [r3, #24]
 8003534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	ea40 0301 	orr.w	r3, r0, r1
 800353c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800353e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4bc5      	ldr	r3, [pc, #788]	; (8003858 <UART_SetConfig+0x384>)
 8003544:	429a      	cmp	r2, r3
 8003546:	d004      	beq.n	8003552 <UART_SetConfig+0x7e>
 8003548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4bc3      	ldr	r3, [pc, #780]	; (800385c <UART_SetConfig+0x388>)
 800354e:	429a      	cmp	r2, r3
 8003550:	d103      	bne.n	800355a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003552:	f7ff f9bd 	bl	80028d0 <HAL_RCC_GetPCLK2Freq>
 8003556:	6778      	str	r0, [r7, #116]	; 0x74
 8003558:	e002      	b.n	8003560 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800355a:	f7ff f9a5 	bl	80028a8 <HAL_RCC_GetPCLK1Freq>
 800355e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003568:	f040 80b6 	bne.w	80036d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800356c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800356e:	461c      	mov	r4, r3
 8003570:	f04f 0500 	mov.w	r5, #0
 8003574:	4622      	mov	r2, r4
 8003576:	462b      	mov	r3, r5
 8003578:	1891      	adds	r1, r2, r2
 800357a:	6439      	str	r1, [r7, #64]	; 0x40
 800357c:	415b      	adcs	r3, r3
 800357e:	647b      	str	r3, [r7, #68]	; 0x44
 8003580:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003584:	1912      	adds	r2, r2, r4
 8003586:	eb45 0303 	adc.w	r3, r5, r3
 800358a:	f04f 0000 	mov.w	r0, #0
 800358e:	f04f 0100 	mov.w	r1, #0
 8003592:	00d9      	lsls	r1, r3, #3
 8003594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003598:	00d0      	lsls	r0, r2, #3
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	1911      	adds	r1, r2, r4
 80035a0:	6639      	str	r1, [r7, #96]	; 0x60
 80035a2:	416b      	adcs	r3, r5
 80035a4:	667b      	str	r3, [r7, #100]	; 0x64
 80035a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	1891      	adds	r1, r2, r2
 80035b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80035b4:	415b      	adcs	r3, r3
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80035c0:	f7fd fb36 	bl	8000c30 <__aeabi_uldivmod>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4ba5      	ldr	r3, [pc, #660]	; (8003860 <UART_SetConfig+0x38c>)
 80035ca:	fba3 2302 	umull	r2, r3, r3, r2
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	011e      	lsls	r6, r3, #4
 80035d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d4:	461c      	mov	r4, r3
 80035d6:	f04f 0500 	mov.w	r5, #0
 80035da:	4622      	mov	r2, r4
 80035dc:	462b      	mov	r3, r5
 80035de:	1891      	adds	r1, r2, r2
 80035e0:	6339      	str	r1, [r7, #48]	; 0x30
 80035e2:	415b      	adcs	r3, r3
 80035e4:	637b      	str	r3, [r7, #52]	; 0x34
 80035e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035ea:	1912      	adds	r2, r2, r4
 80035ec:	eb45 0303 	adc.w	r3, r5, r3
 80035f0:	f04f 0000 	mov.w	r0, #0
 80035f4:	f04f 0100 	mov.w	r1, #0
 80035f8:	00d9      	lsls	r1, r3, #3
 80035fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035fe:	00d0      	lsls	r0, r2, #3
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	1911      	adds	r1, r2, r4
 8003606:	65b9      	str	r1, [r7, #88]	; 0x58
 8003608:	416b      	adcs	r3, r5
 800360a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800360c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	461a      	mov	r2, r3
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	1891      	adds	r1, r2, r2
 8003618:	62b9      	str	r1, [r7, #40]	; 0x28
 800361a:	415b      	adcs	r3, r3
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003622:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003626:	f7fd fb03 	bl	8000c30 <__aeabi_uldivmod>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4b8c      	ldr	r3, [pc, #560]	; (8003860 <UART_SetConfig+0x38c>)
 8003630:	fba3 1302 	umull	r1, r3, r3, r2
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	2164      	movs	r1, #100	; 0x64
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	3332      	adds	r3, #50	; 0x32
 8003642:	4a87      	ldr	r2, [pc, #540]	; (8003860 <UART_SetConfig+0x38c>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003650:	441e      	add	r6, r3
 8003652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003654:	4618      	mov	r0, r3
 8003656:	f04f 0100 	mov.w	r1, #0
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	1894      	adds	r4, r2, r2
 8003660:	623c      	str	r4, [r7, #32]
 8003662:	415b      	adcs	r3, r3
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
 8003666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800366a:	1812      	adds	r2, r2, r0
 800366c:	eb41 0303 	adc.w	r3, r1, r3
 8003670:	f04f 0400 	mov.w	r4, #0
 8003674:	f04f 0500 	mov.w	r5, #0
 8003678:	00dd      	lsls	r5, r3, #3
 800367a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800367e:	00d4      	lsls	r4, r2, #3
 8003680:	4622      	mov	r2, r4
 8003682:	462b      	mov	r3, r5
 8003684:	1814      	adds	r4, r2, r0
 8003686:	653c      	str	r4, [r7, #80]	; 0x50
 8003688:	414b      	adcs	r3, r1
 800368a:	657b      	str	r3, [r7, #84]	; 0x54
 800368c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	461a      	mov	r2, r3
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	1891      	adds	r1, r2, r2
 8003698:	61b9      	str	r1, [r7, #24]
 800369a:	415b      	adcs	r3, r3
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80036a6:	f7fd fac3 	bl	8000c30 <__aeabi_uldivmod>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4b6c      	ldr	r3, [pc, #432]	; (8003860 <UART_SetConfig+0x38c>)
 80036b0:	fba3 1302 	umull	r1, r3, r3, r2
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	2164      	movs	r1, #100	; 0x64
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	3332      	adds	r3, #50	; 0x32
 80036c2:	4a67      	ldr	r2, [pc, #412]	; (8003860 <UART_SetConfig+0x38c>)
 80036c4:	fba2 2303 	umull	r2, r3, r2, r3
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	f003 0207 	and.w	r2, r3, #7
 80036ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4432      	add	r2, r6
 80036d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036d6:	e0b9      	b.n	800384c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036da:	461c      	mov	r4, r3
 80036dc:	f04f 0500 	mov.w	r5, #0
 80036e0:	4622      	mov	r2, r4
 80036e2:	462b      	mov	r3, r5
 80036e4:	1891      	adds	r1, r2, r2
 80036e6:	6139      	str	r1, [r7, #16]
 80036e8:	415b      	adcs	r3, r3
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036f0:	1912      	adds	r2, r2, r4
 80036f2:	eb45 0303 	adc.w	r3, r5, r3
 80036f6:	f04f 0000 	mov.w	r0, #0
 80036fa:	f04f 0100 	mov.w	r1, #0
 80036fe:	00d9      	lsls	r1, r3, #3
 8003700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003704:	00d0      	lsls	r0, r2, #3
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	eb12 0804 	adds.w	r8, r2, r4
 800370e:	eb43 0905 	adc.w	r9, r3, r5
 8003712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4618      	mov	r0, r3
 8003718:	f04f 0100 	mov.w	r1, #0
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	008b      	lsls	r3, r1, #2
 8003726:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800372a:	0082      	lsls	r2, r0, #2
 800372c:	4640      	mov	r0, r8
 800372e:	4649      	mov	r1, r9
 8003730:	f7fd fa7e 	bl	8000c30 <__aeabi_uldivmod>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4b49      	ldr	r3, [pc, #292]	; (8003860 <UART_SetConfig+0x38c>)
 800373a:	fba3 2302 	umull	r2, r3, r3, r2
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	011e      	lsls	r6, r3, #4
 8003742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003744:	4618      	mov	r0, r3
 8003746:	f04f 0100 	mov.w	r1, #0
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	1894      	adds	r4, r2, r2
 8003750:	60bc      	str	r4, [r7, #8]
 8003752:	415b      	adcs	r3, r3
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800375a:	1812      	adds	r2, r2, r0
 800375c:	eb41 0303 	adc.w	r3, r1, r3
 8003760:	f04f 0400 	mov.w	r4, #0
 8003764:	f04f 0500 	mov.w	r5, #0
 8003768:	00dd      	lsls	r5, r3, #3
 800376a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800376e:	00d4      	lsls	r4, r2, #3
 8003770:	4622      	mov	r2, r4
 8003772:	462b      	mov	r3, r5
 8003774:	1814      	adds	r4, r2, r0
 8003776:	64bc      	str	r4, [r7, #72]	; 0x48
 8003778:	414b      	adcs	r3, r1
 800377a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800377c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4618      	mov	r0, r3
 8003782:	f04f 0100 	mov.w	r1, #0
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	008b      	lsls	r3, r1, #2
 8003790:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003794:	0082      	lsls	r2, r0, #2
 8003796:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800379a:	f7fd fa49 	bl	8000c30 <__aeabi_uldivmod>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4b2f      	ldr	r3, [pc, #188]	; (8003860 <UART_SetConfig+0x38c>)
 80037a4:	fba3 1302 	umull	r1, r3, r3, r2
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	2164      	movs	r1, #100	; 0x64
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	3332      	adds	r3, #50	; 0x32
 80037b6:	4a2a      	ldr	r2, [pc, #168]	; (8003860 <UART_SetConfig+0x38c>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c2:	441e      	add	r6, r3
 80037c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c6:	4618      	mov	r0, r3
 80037c8:	f04f 0100 	mov.w	r1, #0
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	1894      	adds	r4, r2, r2
 80037d2:	603c      	str	r4, [r7, #0]
 80037d4:	415b      	adcs	r3, r3
 80037d6:	607b      	str	r3, [r7, #4]
 80037d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037dc:	1812      	adds	r2, r2, r0
 80037de:	eb41 0303 	adc.w	r3, r1, r3
 80037e2:	f04f 0400 	mov.w	r4, #0
 80037e6:	f04f 0500 	mov.w	r5, #0
 80037ea:	00dd      	lsls	r5, r3, #3
 80037ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037f0:	00d4      	lsls	r4, r2, #3
 80037f2:	4622      	mov	r2, r4
 80037f4:	462b      	mov	r3, r5
 80037f6:	eb12 0a00 	adds.w	sl, r2, r0
 80037fa:	eb43 0b01 	adc.w	fp, r3, r1
 80037fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4618      	mov	r0, r3
 8003804:	f04f 0100 	mov.w	r1, #0
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	008b      	lsls	r3, r1, #2
 8003812:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003816:	0082      	lsls	r2, r0, #2
 8003818:	4650      	mov	r0, sl
 800381a:	4659      	mov	r1, fp
 800381c:	f7fd fa08 	bl	8000c30 <__aeabi_uldivmod>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <UART_SetConfig+0x38c>)
 8003826:	fba3 1302 	umull	r1, r3, r3, r2
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2164      	movs	r1, #100	; 0x64
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	3332      	adds	r3, #50	; 0x32
 8003838:	4a09      	ldr	r2, [pc, #36]	; (8003860 <UART_SetConfig+0x38c>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	f003 020f 	and.w	r2, r3, #15
 8003844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4432      	add	r2, r6
 800384a:	609a      	str	r2, [r3, #8]
}
 800384c:	bf00      	nop
 800384e:	377c      	adds	r7, #124	; 0x7c
 8003850:	46bd      	mov	sp, r7
 8003852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003856:	bf00      	nop
 8003858:	40011000 	.word	0x40011000
 800385c:	40011400 	.word	0x40011400
 8003860:	51eb851f 	.word	0x51eb851f

08003864 <__libc_init_array>:
 8003864:	b570      	push	{r4, r5, r6, lr}
 8003866:	4d0d      	ldr	r5, [pc, #52]	; (800389c <__libc_init_array+0x38>)
 8003868:	4c0d      	ldr	r4, [pc, #52]	; (80038a0 <__libc_init_array+0x3c>)
 800386a:	1b64      	subs	r4, r4, r5
 800386c:	10a4      	asrs	r4, r4, #2
 800386e:	2600      	movs	r6, #0
 8003870:	42a6      	cmp	r6, r4
 8003872:	d109      	bne.n	8003888 <__libc_init_array+0x24>
 8003874:	4d0b      	ldr	r5, [pc, #44]	; (80038a4 <__libc_init_array+0x40>)
 8003876:	4c0c      	ldr	r4, [pc, #48]	; (80038a8 <__libc_init_array+0x44>)
 8003878:	f000 f820 	bl	80038bc <_init>
 800387c:	1b64      	subs	r4, r4, r5
 800387e:	10a4      	asrs	r4, r4, #2
 8003880:	2600      	movs	r6, #0
 8003882:	42a6      	cmp	r6, r4
 8003884:	d105      	bne.n	8003892 <__libc_init_array+0x2e>
 8003886:	bd70      	pop	{r4, r5, r6, pc}
 8003888:	f855 3b04 	ldr.w	r3, [r5], #4
 800388c:	4798      	blx	r3
 800388e:	3601      	adds	r6, #1
 8003890:	e7ee      	b.n	8003870 <__libc_init_array+0xc>
 8003892:	f855 3b04 	ldr.w	r3, [r5], #4
 8003896:	4798      	blx	r3
 8003898:	3601      	adds	r6, #1
 800389a:	e7f2      	b.n	8003882 <__libc_init_array+0x1e>
 800389c:	080038f4 	.word	0x080038f4
 80038a0:	080038f4 	.word	0x080038f4
 80038a4:	080038f4 	.word	0x080038f4
 80038a8:	080038f8 	.word	0x080038f8

080038ac <memset>:
 80038ac:	4402      	add	r2, r0
 80038ae:	4603      	mov	r3, r0
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d100      	bne.n	80038b6 <memset+0xa>
 80038b4:	4770      	bx	lr
 80038b6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ba:	e7f9      	b.n	80038b0 <memset+0x4>

080038bc <_init>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	bf00      	nop
 80038c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c2:	bc08      	pop	{r3}
 80038c4:	469e      	mov	lr, r3
 80038c6:	4770      	bx	lr

080038c8 <_fini>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	bf00      	nop
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr
